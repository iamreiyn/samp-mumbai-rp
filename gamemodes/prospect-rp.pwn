/*


       		============> [v0.8-beta]
       	 _____________________________________

		   Prospect Roleplay
		   An Edit of Limitless Roleplay

		   - Renisal
		   https://www.prospectrp.net
	   	 ___________________________________

*/

#include <a_samp>
#include <crashdetect>
#include <a_http>
#include <a_mysql>
#include <foreach>
#include <progress2>
#include <sscanf2>
#include <tp>
#include <selection>
#include <Pawn.CMD>
#include <easyDialog>
#include <youtube_stream>
#include <dof2>
#include <streamer>

// --------------------------------------
#undef MAX_PLAYERS
#define MAX_PLAYERS 250
#define MYSQL_HOSTNAME  "127.0.0.1"
#define MYSQL_DATABASE  "prospectrp"
#define MYSQL_USERNAME  "root"
#define MYSQL_PASSWORD  ""

// #define MYSQL_HOSTNAME  "127.0.0.1"
// #define MYSQL_DATABASE  "prospectdb"
// #define MYSQL_USERNAME  "root"
// #define MYSQL_PASSWORD  ""
// ---------------------------------------
#define SERVER_NAME      	"Prospect Roleplay"
#define SERVER_REVISION  	"Prospect RP v0.8-beta"
#define SERVER_ANTICHEAT 	"Athena"
#define SERVER_MUSIC_URL 	"music.prospectrp.net"
#define SERVER_FETCH_URL 	"music.prospectrp.net"
#define VIP_MUSIC_URL 		"music.prospectrp.net"
#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
#include "server/def/def_table.inc"
#include "server/def/def_colors.inc"
#include "server/def/def_admins.inc"
#include "server/def/def_max.inc"
#include "server/def/iterators.inc"
#include "server/def/welcomemsg.inc"
// ---------------------------------------
// ---------------------------------------
// ---------------------------------------
#include "server/def/mysql_thread.inc"
#include "server/def/def_modelSelection.inc"
#include "server/def/def_misc.inc"
#include "server/def/def_elevator.inc"
#define BODY_PART_CHEST (3)
#define BODY_PART_GROIN (4)
#define BODY_PART_LEFT_ARM (5)
#define BODY_PART_RIGHT_ARM (6)
#define BODY_PART_LEFT_LEG (7)
#define BODY_PART_RIGHT_LEG (8)
#define BODY_PART_HEAD (9)
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave
//----------------------------------------
#define INVALID_FLOOR           (-1)
#include <vehicleFix>
// ---------------------------------------
enum
{
	DIALOG_NONE = 1,
	DIALOG_NEWUPGRADE,
	DIALOG_SETTINGS2,
	DIALOG_SETTINGS,
	DIALOG_POST_APPLICATION,
	DIALOG_STATS,
	DIALOG_ADNEW,
	DIALOG_FOOD,
	DIALOG_SKILL,
	DIALOG_BUYVEHICLENEW,
	DIALOG_NEWBIE,
	ACCOUNT_CREATION,
	DIALOG_REGISTER,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_AGE,
	DIALOG_REFERRAL,
	DIALOG_ATM,
	DIALOG_ATMDEPOSIT,
	DIALOG_ATMWITHDRAW,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_BUYCLOTHING,
	DIALOG_BUYCLOTHES,
	DIALOG_FACTIONPAY1,
	DIALOG_PHONEBOOK,
	DIALOG_LANDBUILDTYPE,
	DIALOG_LANDBUILD1,
	DIALOG_LANDBUILD2,
	DIALOG_LANDMENU,
	DIALOG_LANDOBJECTMENU,
	DIALOG_LANDOBJECTS,
	DIALOG_MP3PLAYER,
	DIALOG_MP3RADIO,
	DIALOG_MP3RADIOGENRES,
	DIALOG_MP3RADIOSUBGENRES,
	DIALOG_MP3RADIORESULTS,
	DIALOG_MP3RADIOSEARCH,
	DIALOG_GANGSTASH,
	DIALOG_GANGSTASHVEST,
	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHCRAFT,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
	DIALOG_GANGWITHDRAW,
	DIALOG_GANGDEPOSIT,
	DIALOG_GANGARMSPRICES,
	DIALOG_GANGARMSDEALER,
	DIALOG_GANGARMSWEAPONS,
	DIALOG_GANGARMSEDIT,
	GangStashDepositMats,
	GangStashWithdrawMats,
	DIALOG_CRACKTRUNK,
	DIALOG_RULES,
	DIALOG_LOCATE,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_CREATEQUIZ,
	DIALOG_DELETEOBJECT,
	DIALOG_PAINTBALL,
	DIALOG_ADDSTATION,
	DIALOG_BUYVEHICLE
}

enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

new RandomMSG[][] =
{
	"{33CCFF}Athena:{d3d3d3} We recommend you to take screenshots of your statistics regularly.",
	"{33CCFF}Athena:{d3d3d3} There are many trucking spots (/truckinghelp) located around San Andreas, check them out.",
	"{33CCFF}Athena:{d3d3d3} Get an enhanced roleplay experience by purchasing a VIP account, visit forums for more info.",
	"{33CCFF}Athena:{d3d3d3} Register on our community forums for further server related dicussions.",
	"{33CCFF}Athena:{d3d3d3} Have something to ask? Do not hesitate to ask your question on /newb chat.",
	"{33CCFF}Athena:{d3d3d3} Found a bug? Don't report it toward our staff, please report it on our forums.",
	"{33CCFF}Athena:{d3d3d3} Did you know? you can exchange your forum points for various in-game items and perks!",
	"{33CCFF}Athena:{d3d3d3} Want to make a suggestion? Check /info, we have a community forums to do so!",
	"{33CCFF}Athena:{d3d3d3} Found someone breaking server rule? /report him now! or make complaint on forums.",
	"{33CCFF}Athena:{d3d3d3} Want to join a gang or faction? Be sure to Roleplay with their leaders, or apply on the forums!",
	"{33CCFF}Athena:{d3d3d3} New here? we recommend you to start Trucking to earn some starting cash.",
	"{33CCFF}Athena:{d3d3d3} Don't know what is IC, OOC, MG and other RP terms? Contact an admin on discord for support!",
	"{33CCFF}Athena:{d3d3d3} Don't miss the bonuses, discounts and events information on the forums!"
};
enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
	STASH_CAPACITY_WEAPONS
};
enum {
	EDIT_TYPE_NONE,
	EDIT_TYPE_PREVIEW,
	EDIT_TYPE_FURNITURE,
	EDIT_TYPE_PAYPHONE,
	EDIT_TYPE_ATM
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_FACTION,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z
};

enum
{
	E_OBJECT_FURNITURE,
	E_OBJECT_WEAPON,
	E_OBJECT_LAND
};

enum
{
	EDIT_CLOTHING_PREVIEW = 1,
	EDIT_CLOTHING,
	EDIT_LAND_OBJECT_PREVIEW,
	EDIT_LAND_OBJECT,
	EDIT_LAND_GATE_MOVE,
	EDIT_COP_CLOTHING
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE
};
enum
{
	WORKOUT_NONE,
	WORKOUT_DUMBELLS,
	WORKOUT_TREADMILL
};
enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_AGENCY,
 	BUSINESS_BARCLUB,
  	BUSINESS_TOOLSHOP,
  	BUSINESS_DEALERSHIP
};

enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_HITMAN,
	FACTION_FEDERAL,
	FACTION_ARMY,
	FACTION_TERRORIST
};

enum
{
	JOB_NONE = -1,
	JOB_PIZZAMAN,
	JOB_COURIER,
	JOB_FISHERMAN,
	JOB_WEAPONDEALER,
	JOB_MECHANIC,
	JOB_MINER,
	JOB_SWEEPER,
	JOB_TAXIDRIVER,
	JOB_DRUGDEALER,
	JOB_LAWYER,
	JOB_DETECTIVE,
	JOB_GARBAGEMAN,
	JOB_FARMER
};

enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_PIZZA,
	CHECKPOINT_TEST,
	CHECKPOINT_MINING,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_DROPCAR,
	CHECKPOINT_MISC,
	CHECKPOINT_GARBAGE,
	CHECKPOINT_FARMER,
	CHECKPOINT_HOUSEROB,
	CHECKPOINT_TRUCKDELIVERY

};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
	CAPACITY_OIL
};

enum
{
	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
	POINT_MATPICKUP1,
	POINT_MATPICKUP2,
	POINT_MATFACTORY1,
	POINT_MATFACTORY2
};

enum
{
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_RIFLE
};

enum
{
	TAG_NONE,
	TAG_ADMIN,
	TAG_HELPER,
	TAG_VIP,
	TAG_MASK
};

enum
{
	GRAPHICRANK_NONE = 0,
	GRAPHICRANK_REGULAR,
	GRAPHICRANK_SENIOR,
	GRAPHICRANK_MANAGER
};

enum
{
	ZONETYPE_LAND = 1,
	ZONETYPE_TURF,
	ZONETYPE_POINT
};

enum
{
	DOOR_DRIVER,
	DOOR_PASSENGER
};

enum
{
	HOSPITAL_COUNTY = 1,
	HOSPITAL_ALLSAINTS,
	HOSPITAL_FMDHQ,
	HOSPITAL_VIPLOUNGE
};

enum e_Payphones {
	phID,
	phExists,
	phNumber,
	phOccupied,
	phCaller,
	Float:phX,
	Float:phY,
	Float:phZ,
	Float:phA,
	phInterior,
	phWorld,
	phObject,
	Text3D:phText
};
enum e_Timers
{
	tFooter,
	tWorkout,
	tHospital,
	tRefuel,
	tRepair
};
enum e_ATM
{
	atmID,
	atmExists,
	Float:atmSpawn[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText
};
enum pEnum
{
	PlayerText:pText[103],
	PlayerBar:pBars[2],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pID,
	pLogged,
	pKicked,
	pLoginTries,
	pSetup,
	pGender,
	pAge,
	pSkin,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pCash,
	pBank,
 	pPaycheck,
 	pvLock,
	pWorkout,
	pWeight,
	pReps,
	pSpeedLevel,
	pDistanceRan,
	pWorkoutTime,
	pLevel,
	pSpawnSelect,
	pSpawnHouse,
	pSpawnPrecinct,
	pChatstyle,
	pEdit,
	pEditID,
	pHouseEdit,
	pPreviewIndex,
	pFurnitureIndex,
	pHouse,
	pFitness,
	pGymMembership,
	pBugFix,
	pInTurf,
    pCompany,
    pDealershipMenu,
    pDealershipIndex,
	pShowFooter,
	pFooterTimer,
	pVehicleCMD,
	pCrowbar,

    pSpeedTime,
	pSpeakerPhone,
	pRangeBooth,
	pTargets,
	pTargetLevel,
	pLegalTruckJob1,
	pLegalTruckJob2,
	pLegalTruckJob3,
	pIllegalTruckJob1,
	pIllegalTruckJob2,
	pIllegalTruckJob3,
	pTruckingLevel,
	pTruckingXP,
	bool:pSWATduty,
    pEditRack,
	pPVIPVoucher,
	pPhoneRingTone[132],
	pCellname,
	pToggleVehCam,
	pHouseAlarm,
	Text3D:aMeID,
	aMeStatus,
	pDJ,
	pAdvertVoucher,
	pSVIPExVoucher,
	pAdminStrike,
	Text3D:pRepfam[64],
	pGVIPExVoucher,
	pVIPSellable,
    pTicketTime,
	pCarVoucher,
	pVehVoucher,
	pSVIPVoucher,
	pGVIPVoucher,
	pGiftVoucher,
	pGiftTime,
	pEXP,
	pGraphic,
	pMinutes,
	pHours,
	pAdmin,
	pGraffiti,
	pGraffitiTime,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditLandGraffiti,
    pRobHouse,
	pAdminName[MAX_PLAYER_NAME],
	Float:pHealth,
	Float:pArmor,
	pUpgradePoints,
	pWarnings,
	pInjured,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pAccent[16],
	pCookies,
	pPhone,
	pCalling,
	pPhoneSMS,
	pCaller,
	pPayphone,
	pJob,
	pSecondJob,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pWeed,
	pCocaine,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pCigars,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pComponents,
	pCourierSkill,
	pFishingSkill,
	pWeaponSkill,
	pGunsAmmo[13],
	pAGuns[13],
	pGunLicense,
	pMechanicSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDetectiveSkill,
	pThiefSkill,
	pDealerSkill,
	pToggleTextdraws,
	pToggleTP,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pTogglePoints,
	pToggleTurfs,
	pToggleWT,
	pTogglePM,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleCam,
	pToggleHUD,
	pToggleReports,
	pToggleWhisper,
	pToggleBug,
	pCarLicense,
	pDonator,
	pVIPTime,
	pVIPCooldown,
	pWeapons[13],
	pAmmo[13],
	pTempWeapons[13],
	pFaction,
	pFactionRank,
	pFactionLeader,
	pGang,
	pWebDev,
	pGangRank,
	pDivision,
	pCrew,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pNewbies,
	pHelpRequests,
	pSpeedometer, // (1) KM/H (2) MPH
	pFactionMod,
	pGangMod,
	pBanAppealer,
	pFormerAdmin,
	pDeveloper,
	pAdminPersonnel,
	pDynamicAdmin,
	pHelperManager,
	pHumanResources,
	pComplaintMod,
	pGameAffairs,
	pWeedPlanted,
	pWeedTime,
	pWeedGrams,
	Float:pWeedX,
	Float:pWeedY,
	Float:pWeedZ,
	Float:pWeedA,
	Float:pWeed1X,
	Float:pWeed1Y,
	Float:pWeed1Z,
	Float:pWeed1A,
	Float:pWeed2X,
	Float:pWeed2Y,
	Float:pWeed2Z,
	Float:pWeed2A,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pLaborUpgrade,
	pDMWarnings,
	pWeaponRestricted,
	pReferralUID,
	pWatch,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pClothes,
    pShowLands,
	pShowTurfs,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pCourierCooldown,
 	pPizzaCooldown,
	pDetectiveCooldown,
	pThiefCooldown,
	pCocaineCooldown,
 	pGasCan,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pNewbieMuteTime,
	pReportMuteTime,
	pGlobalMuteTime,
	pAdminHide,
	pInsurance,
	pRope,
	pTotalPatients,
	pTotalFires,
	pFirstAid,
	pPoliceScanner,
	pBodykits,
	pRimkits,
	pScannerOn,
	pCurrentAmmo,
	pACAmmo,
	pLastReport,
	pLastNewbie,
	pLastFare,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastRefuel,
	pLastDrug,
	pLastDefend,
	pLastSell,
	pLastEnter,
	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastPizza,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastShot,
	pLastFire,
	pFPS,
	pDrunkLevel,
	pSpectating,
 	pAdminDuty,
	pActiveReport,
	pHospitalTime,
	pHospitalType,
	pListen,
	pJoinedEvent,
	pPaintball,
	pPaintballTeam,
	pDueling,
	pEventTeam,
	pAwaitingClothing,
	pTutorial,
	pTutorialTimer,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pCarOffer,
	pCarOffered,
	pCarPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pFriskOffer,
	pTicketOffer,
	pTicketPrice,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pLandOffer,
	pLandOffered,
	pLandPrice,
	pSellOffer,
	pAllianceOffer,
	pWarOffer,
	pSellType,
	pSellExtra,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pDiceBet,
	pDiceRigged,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pDuelOffer,

	pObjectLand,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pFactionEdit,
	pPrice,
	pFurniturePerms,
	pLandPerms,
	pPizzas,
	pPizzaTime,
	Float:pDistance,
	pCP,
	pShipment,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pMiningTime,
	pMiningRock,
	pSweeping,
	pSweepTime,
	pSweepEarnings,
	Text3D:pSpecialTag,
	pTagType,
	pVIPColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pBackup,
	pTazer,
	pTazedTime,
	pCuffed,
	pTied,
	pDraggedBy,
	pReceivingAid,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced, // BOOMBOX
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX, // LAND CREATION
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation, //
	pLandCost,
	pTurfType,
	pTurfName[32],
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
	pVehicleKeys,
	pCurrentWeapon,
 	pCurrentVehicle,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pArmorTime,
 	pWeedObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro, // server intro
    pHouseKeys,
 	pLoginCamera,
 	pSmuggleTime,
 	pDealerGang,
 	pPoisonTime,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pMechanicCall,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pRemoveFrom,
 	pCBug,
 	pMenuType,
 	pSniper,
 	Text3D:pLockText,
 	Float:pLockHealth,
	pLockBreak,
	pLockTimer,
	pAnimation,
	pDropTime,
	pCocaineTrunk,
	pCocaineTime,
	pCocaineFrom,
	pRapidFire,
	pNoDamage,
	pGodmode,
	Float:pGodmodeHP,
	Float:pGodmodeAP,
	pNOPTime,
	pPreviewHouse,
	pPreviewType,
	pPreviewTime,
	pDedication,
	pPasswordChanged,
	pGarbage,
	pDamageTimer,
	pHHCheck,
	pHHTime,
	pHHRounded,
	pHHCount,
	pCustomTitle[64],
	pCustomTColor,
	pGovTimer,
	pUndercover[2],
	Float:pUndercoverHP,
	Float:pUndercoverAR,
	pHurt,
	pBugged,
	pSkates,
	pSkateObj,
	bool:pSkating,
	bool:pSkateAct,
	pOil,
	pCreatingPoll,
	pAnsweredPoll,
	pRareTime,
	pAcceptedEMS,
	pHunted,
	pHuntKilled,
	pDiamonds,
	pDeleteMode,
	pAdvertWarnings,
	pNoKnife,
	pExecute,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pStationEdit,
	pRobbingBiz,
	pHelmet,
	pCarryCrate,
	pBlindfold,
	pBlinded,
	pRepairShop,
	pRepairTime,
	pMaskID,
	pMaskOn
};

enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};
enum SAZONE_MAIN { //Betamaster
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

enum impoundInfo
{
	impoundSQLId,
	Float: impoundPosX,
	Float: impoundPosY,
	Float: impoundPosZ,
	impoundVW,
	impoundInt,
	Text3D: impoundTextID
}

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext
};

enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5]
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64],
	graffitiDefault,
	graffitiFont[50]
};


enum hEnum
{
	hExists,
	hID,
	hOwnerID,
	hOwner[MAX_PLAYER_NAME],
//	hMapIcon,
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hAlarm,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hWeed,
	hCocaine,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hLabels,
    hPickup,
	Text3D:hText,
	hDelivery,
	hLights,
	hEdit
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	gFreeze,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};

enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bOwner[MAX_PLAYER_NAME],
	bType,
	bPrice,
	bEntryFee,
	bLocked,
    bItemPrices[21],
    Float:cVehicle[4],
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bMaterials,
	bPickup,
	bMapIcon,
	Text3D:bText,
	Float: GasPumpPosX[2],
	Float: GasPumpPosY[2],
	Float: GasPumpPosZ[2],
	Float: GasPumpAngle[2],
	Float: GasPumpCapacity[2],
	Float: GasPumpGallons[2],
	GasPumpObjectID[2],
	Text3D: GasPumpInfoTextID[2],
	Text3D: GasPumpSaleTextID[2],
	Float: GasPumpSaleGallons[2],
	Float: GasPumpSalePrice[2],
	GasPumpTimer[2],
	GasPumpVehicleID[2]
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eGang,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	eType,
	eMapIcon,
	ePickup,
	eMapIconID,
	Text3D:eText,
	eColor
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex,
	cMatColor1,
	cMatColor2
};

enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vType,
    vPlate[32],
	vTickets,
	gv_iLoadMax,
	pvImpounded,
	vLocked,
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vAlarm,
	vCorp,
	vMods[14],
	vCash,
	vMaterials,
	vWeed,
	vCocaine,
	vMeth,
	vPainkillers,
	vWeapons[5],
	vGang,
	vFactionType,
	vVIP,
	vJob,
	vRespawnDelay,
	vObjects[2],
	vTimer,
	vRank,
	carImpounded,
	carImpoundPrice,
	bool:vForSale,
	vForSalePrice,
	Text3D:vForSaleLabel,
	Float:vMileage,
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fMOTD[128],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	fBudget,
	g_iLockerStock,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup,
};

enum lkEnum
{
	lID,
	lExists,
	lFaction,
	Float:lPosX,
	Float:lPosY,
	Float:lPosZ,
	lInterior,
	lWorld,
	lLabel,
	lIcon,
	locKevlar[2],
    locMedKit[2],
    locNitestick[2],
    locMace[2],
    locDeagle[2],
    locShotgun[2],
    locMP5[2],
    locM4[2],
    locSpas12[2],
    locSniper[2],
    locCamera[2],
    locFireExt[2],
    locPainKillers[2],
	Text3D:lText,
	lPickup
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum lEnum
{
	lExists,
	lID,
	lOwnerID,
	lOwner[MAX_PLAYER_NAME],
	lLevel,
	lPrice,
	Float:lMinX,
	Float:lMinY,
	Float:lMaxX,
	Float:lMaxY,
	Float:lHeightX,
	Float:lHeightY,
	Float:lHeightZ,
	lGangZone,
	lArea,
	Text3D:lTextdraw,
	lLabels
};
enum e_Damages
{
	damageTaken,
	damageWeapon,
	damageBodypart,
	damageArmor,
	damageTime,
	damageBy[90],
}

enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gWeed,
	gCocaine,
	gMeth,
	gPainkillers,
	gSkins[MAX_GANG_SKINS],
	gWeapons[14],
	gWeaponRanks[14],
	gVestRank,
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugWeed,
	gDrugCocaine,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance,
	gMatLevel,
	gGunLevel,
	gInvCooldown,
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	Float:pMinX,
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	pGangZone,
	pArea,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup
};
enum e_Dealership
{
	dcID,
	dcExists,
	dcCompany,
	dcModel,
	dcPrice
};
enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer,
	tCount,
	tBeingCaptured
};
enum CriminalRecordEnum {
	mdc_cr_type,
	mdc_cr_description[200],
	mdc_cr_date[15],
	mdc_cr_time[15],
	mdc_cr_officer[MAX_PLAYER_NAME],
	mdc_cr_offender[MAX_PLAYER_NAME],
	mdc_cr_paid,
	mdc_cr_price,
	mdc_cr_served
}
enum {
	RECORD_TICKET,
	RECORD_CHARGE
}

enum E_GRAFFITI_INFO
{
	Float:graffitiPosX,
	Float:graffitiPosY,
	Float:graffitiPosZ,
	Float:graffitiRotX,
	Float:graffitiRotY,
	Float:graffitiRotZ,
}
enum dealerEnum
{
	carCategory[16],
	carModel,
	carPrice
};
//Speedo
new Text: Text_Speedo[10];
new PlayerText: Text_Player[MAX_PLAYERS][4];

new Text: Text_Global[2];

// ---------------------------------------
new connectionID;
new queryBuffer[1024];
new Text:AnimationTD;
new Text:TimeTD;
new enabledOOC;
new enabledNewbie = 1;
new enabledGlobal = 1;
new enabledReports = 1;
new pTazerReplace[MAX_PLAYERS];
new PlayerText:playerfooter[MAX_PLAYERS];
new Text:Textdraw2;
//new Text:Textdraw3;
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];
new ViewCam[MAX_PLAYERS];
new szMiscArray[4096];
new IsPlayerSteppingInVehicle[MAX_PLAYERS] = -1;
new tsstring[2048];

new Text:Blind;
new Text:welcomepm;
new Text:welcomepm1;
new Text:welcomepm2;
new Text:welcomepm3;
new Text:loginwb1;
new Text:houseLights;
new PlayerText:TuningBuy[ MAX_PLAYERS ][ 14 ];
new Obj_Elevator, Obj_ElevatorDoors[2];
new Obj_FloorDoors[21][2];
new Text3D:Label_Elevator, Text3D:Label_Floors[21];
new rentcar[8];
new Renting[MAX_PLAYERS];
new firstperson[MAX_PLAYERS];
new HelmetEnabled[MAX_PLAYERS];
new CarWindows[MAX_VEHICLES] = 0;
new PlayerText:_vhudFlash[MAX_PLAYERS];
new Text3D:fRepfamtext[MAX_PLAYERS];
new VIPVehicles[50];
new pObj[MAX_PLAYERS];
new openedpaycheck[MAX_PLAYERS];
new CarRadars[MAX_PLAYERS];
new chosednumber[MAX_PLAYERS];
new EventInfo[eventEnum];
new InsideTut[MAX_PLAYERS];
new TutStep[MAX_PLAYERS];
new isharvesting[MAX_PLAYERS];
new PlayerText:_crTextTarget[MAX_PLAYERS];
new PlayerText:_crTextSpeed[MAX_PLAYERS];
new PlayerText:_crTickets[MAX_PLAYERS];
new nextWeather;
new Text3D:DonatorCallSign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};
new seatbelt[MAX_PLAYERS];
new g_BoothUsed[MAX_BOOTHS];
new g_BoothObject[MAX_BOOTHS] = {-1, ...};
new gWeights[MAX_PLAYERS][2];
new ElevatorState, ElevatorFloor;
new ImpoundPoints[MAX_IMPOUNDPOINTS][impoundInfo];
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new PlayerText:LoadingObjects0[MAX_PLAYERS];
new PlayerText:LoadingObjects1[MAX_PLAYERS];
new PlayerText:LoadingObjects2[MAX_PLAYERS];
new PlayerText:LoadingObjects3[MAX_PLAYERS];
new PlayerText:LoadingObjects4[MAX_PLAYERS];
new PlayerText:LoadingObjects5[MAX_PLAYERS];

new pizzaVehicles[6];
new courierVehicles[7];
new sweeperVehicles[4];
new taxiVehicles[4];
new testVehicles[5];
new garbageVehicles[6];
new Text:Tutorial[4];
new Text:Damage[MAX_PLAYERS];
new gHour, gWorldTime, gWeather = 13;
new gCharity, gCharityHealth, gCharityArmor;
new gPlayerRecord, gRecordDate[24], gServerMOTD[128], gTax, gVault, gNewsVault, gAnticheatBans;
new Float:WeaponDamages[47];
new adminMOTD[128], helperMOTD[128];
new MaxCapCount[2] = {  2 , 1 }; // index: 0 = turfs, 1 = points
new gacooldown, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours;
new gDoubleXP, gDisabledVPN = 0, antiNT = 0, gHReward;
new gLastAd, gLastMusic, gGMX;
new gAnticheat = 0, gPaycheck;
new gVIPHealth, gVIPArmor;
new gParachutes[2];
new gSeedsStock = 200, gCocaineStock = 100, gEphedrineStock = 50;
new Text3D:gSeedsStockText, Text3D:gCocaineText, Text3D:gEphedrineStockText;
new gPrisonCells[24], gPDDoors[8], gPDGates[2], gFBIGates[2];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];
new gScriptObject[MAX_OBJECTS char];
new zone_paintball[2], area_paintball[2];
new pbNext;
new FarmerVehicles[19];
new Harvesting[MAX_PLAYERS];
new aimWarnings[MAX_PLAYERS];
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;
new gang_tag_font[MAX_PLAYERS][50], gang_tag_chosen[MAX_PLAYERS];
new gListedItems[MAX_PLAYERS][100], gTargetName[MAX_PLAYERS][MAX_PLAYER_NAME];
new gPreviewFurniture[MAX_PLAYERS] = {-1, ...};
new DamageData[MAX_PLAYERS][MAX_DAMAGES][e_Damages];
new InsideShamal[MAX_PLAYERS];
new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new PlayerText:_Mask[MAX_PLAYERS];
new RobberyInfo[robberyEnum];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new Timers[MAX_PLAYERS][e_Timers];
new PlayerData[MAX_PLAYERS+1][pEnum];
new ATM[MAX_ATMS][e_ATM];
new Payphones[MAX_PAYPHONES][e_Payphones];
new PlayerText:LoginTD[ MAX_PLAYERS ][ 1 ];
new ReportInfo[MAX_REPORTS][rEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new DealershipCars[MAX_DEALERSHIP_CARS][e_Dealership];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new GangCrews[MAX_GANGS][MAX_GANG_CREWS][32];
new LockerInfo[MAX_LOCKERS][lkEnum];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new LandInfo[MAX_LANDS][lEnum];
new GangInfo[MAX_GANGS][gaEnum];
new GangRanks[MAX_GANGS][7][32];
new PointInfo[MAX_POINTS][ptEnum];
new TurfInfo[MAX_TURFS][tEnum];
new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new vehicleSiren[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
new totalDamages[MAX_PLAYERS];
new ElevatorQueue[21], FloorRequestedBy[21];
new ElevatorBoostTimer;
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};
new PayCheckCode[MAX_PLAYERS];
new PlayerText:SpeedoMeterTextDraw[MAX_PLAYERS][40];
new Text:td_mdc_Box = Text:INVALID_TEXT_DRAW;
new Text:td_mdc_HeaderBox = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_CitizenBox = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_DataBox = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_OptionsBox = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_HeaderText = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Exit = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Section[4] = {Text:INVALID_TEXT_DRAW, ...};
new	Text:td_mdc_SectionText[4] = {Text:INVALID_TEXT_DRAW, ...};
new	Text:td_mdc_SectionHeaderText = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Gender = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Job = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_DriveLic = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_GunLic = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_PhoneNumber = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Name = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_PropertiesArrow = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_VehiclesArrow = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Vehicles = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Properties = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Age = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_CriminalRecordArrow = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_CasesArrow = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_CriminalRecord = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Cases = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_Browse = Text:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_Skin = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_NameValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_AgeValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_GenderValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_JobValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_DriveLicValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_GunLicValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_PhoneNumberValue = PlayerText:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_Box[7] = {Text:INVALID_TEXT_DRAW, ...};
new	Text:td_mdc_cr_InnerBox[7] = {Text:INVALID_TEXT_DRAW, ...};
new	Text:td_mdc_cr_TypeTitle = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_DescriptionTitle = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_DateTitle = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_Title = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_ArrowUp = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_ArrowDown = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_cr_Info[7] = {Text:INVALID_TEXT_DRAW, ...};
new	PlayerText:td_mdc_cr_Type[7] = {PlayerText:INVALID_TEXT_DRAW, ...};
new	PlayerText:td_mdc_cr_Description[7] = {PlayerText:INVALID_TEXT_DRAW, ...};
new	PlayerText:td_mdc_cr_Date[7] = {PlayerText:INVALID_TEXT_DRAW, ...};
new	Text:td_mdc_veh_Box = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_InnerBox = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Model = Text:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_veh_ModelValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_veh_VehicleModel = PlayerText:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Owner = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Plate = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Insurance = Text:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_veh_OwnerValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_veh_PlateValue = PlayerText:INVALID_TEXT_DRAW;
new	PlayerText:td_mdc_veh_InsuranceValue = PlayerText:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_ArrowRight = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Next = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_Label = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_BoxNoEnt = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_InnerBoxNoEnt = Text:INVALID_TEXT_DRAW;
new	Text:td_mdc_veh_TextNoEnt = Text:INVALID_TEXT_DRAW;
new	Iterator:RecordIterator[MAX_PLAYERS]<MAX_CRIMINAL_RECORDS>;
new	CriminalRecordData[MAX_PLAYERS][MAX_CRIMINAL_RECORDS][CriminalRecordEnum];

new const vehicleArray[][dealerEnum] =
{
	{"Bikes",       	481, 5000},
	{"Bikes", 			509, 5000},
	{"Bikes",       	510, 10000},
	{"Bikes",       	462, 15000},
	{"Bikes",       	471, 17500},
	{"Bikes",       	448, 20000},
	{"Bikes",       	468, 30000},
	{"Bikes",       	586, 37500},
	{"Bikes",       	463, 50000},
	{"Bikes",       	521, 75000},
	{"Bikes",       	461, 80000},
	{"Saloons",     	549, 23000},
	{"Saloons",         527, 23500},
	{"Saloons",     	542, 24500},
	{"Saloons",     	546, 27500},
	{"Saloons",     	517, 29000},
	{"Saloons",     	419, 30000},
	{"Saloons",     	466, 32500},
	{"Saloons",     	467, 33000},
	{"Saloons",         410, 33500},
	{"Saloons",     	475, 34500},
	{"Saloons",     	492, 37500},
	{"Saloons",     	445, 42500},
	{"Saloons",     	529, 45000},
	{"Saloons",     	540, 47500},
	{"Saloons",     	550, 52500},
	{"Saloons",     	421, 55000},
	{"Saloons",     	551, 65000},
	{"Saloons",     	547, 70000},
	{"Saloons",     	426, 87500},
	{"Saloons",         409, 90000},
	{"Saloons",     	580, 125000},
	{"Off-Road",    	500, 57500},
	{"Off-Road",    	400, 65000},
	{"Off-Road",    	489, 67500},
	{"Off-Road",    	495, 75000},
	{"Off-Road",    	579, 80000},
	{"Station wagons",  418, 27500},
	{"Station wagons",  404, 35000},
	{"Station wagons",  479, 37500},
	{"Station wagons",  458, 40000},
	{"Station wagons",  561, 55000},
	{"Sports cars",     480, 57000},
	{"Sports cars",     496, 40000},
	{"Sports cars",     402, 80000},
	{"Sports cars",     477, 50000},
	{"Sports cars",     565, 55000},
	{"Sports cars",     589, 60000},
	{"Sports cars",     558, 75000},
	{"Sports cars",     559, 80000},
	{"Sports cars",     587, 85000},
	{"Sports cars",     562, 100000},
	{"Sports cars",     603, 125000},
	{"Sports cars",     494, 175000},
	{"Sports cars",     560, 100000},
	{"Sports cars",     429, 325000},
	{"Sports cars",     541, 425000},
	{"Sports cars",     415, 475000},
	{"Sports cars",     451, 575000},
	{"Sports cars",     411, 600000},
	{"Lowriders",       412, 35000},
	{"Lowriders",       576, 40000},
	{"Lowriders",       534, 47500},
	{"Lowriders",       566, 50000},
	{"Lowriders",       535, 52500},
	{"Lowriders",       536, 57500},
	{"Lowriders",       567, 60000},
	{"Lowriders",       575, 75000},
	{"Industrial",      478, 20000},
	{"Industrial",      543, 27500},
	{"Industrial",      600, 30000},
	{"Industrial",      422, 35000},
	{"Industrial",      413, 40000},
	{"Industrial",      440, 45000},
	{"Industrial",      525, 57500},
	{"Industrial",      554, 62500},
	{"Industrial",      482, 65000},
	{"Industrial",      552, 70000},
	{"Industrial",      414, 75000},
	{"Industrial",      498, 80000},
	{"Industrial",      578, 105000},
	{"Public service",  420, 30000},
	{"Public service",  438, 32500},
	{"Public service",  437, 75000},
	{"Public service",  431, 75000}
//	{"Boats",			473, 20000},
//	{"Boats",			472, 100000},
//	{"Boats",			446, 150000},
//	{"Boats",			493, 175000},
//	{"Boats",			452, 200000},
//	{"Boats",			484, 225000},
///	{"Boats",			595, 225000},
//	{"Boats",			453, 250000},
//	{"Boats",			454, 300000},
//	{"Aircraft",		487, 250000},
//	{"Aircraft",		469, 300000},
//	{"Aircraft",		593, 325000},
//	{"Aircraft",		512, 350000},
//	{"Aircraft",		513, 375000},
//	{"Aircraft",		417, 400000},
//	{"Aircraft",		460, 425000},
//	{"Aircraft",		548, 500000},
//	{"Aircraft",		519, 600000},
//	{"Aircraft",		511, 750000},
//	{"Aircraft",		553, 1000000}
};


// ---------------------------------------

new g_aGraffitiData[][E_GRAFFITI_INFO] = {
	{2081.867675, -1255.466430, 24.712007, -12.800003, 0.000000, 0.000000},
	{2268.340332, -1031.824707, 53.437198, 0.000000, 0.000000, 135.800155},
	{2652.655517, -1123.089355, 66.999664, 0.000000, 0.000000, 0.399999},
	{2652.727294, -1268.601074, 50.095500, 0.000000, 0.000000, 0.000000},
	{2441.024169, -1215.926757, 32.154163, 0.000000, 0.000000, -179.199768},
	{2352.000488, -1262.450927, 22.958444, 0.000000, 0.000000, 0.000000},
	{2195.268554, -1745.694580, 13.739686, 0.000000, 0.000000, -177.399734},
	{1868.005493, -2038.964843, 15.976880, 0.000000, 0.000000, 179.700088},
	{1832.987426, -2111.634033, 13.946876, 0.000000, 0.000000, 0.000000},
	{1862.723510, -2095.458007, 13.890580, 0.000000, 0.000000, 89.700012},
	{2097.205566, -1258.445434, 24.748823, -16.799999, 0.000000, 87.999984},
	{2135.333984, -1820.317871, 13.748497, 0.000000, 0.000000, 0.000000},
	{2171.669921, -1709.278564, 15.921793, -8.500000, 0.000000, 179.999969},
	{2112.414794, -1500.848632, 11.099428, 0.000000, 0.000000, -109.899978},
	{2129.287841, -1374.363769, 25.878126, 0.000000, 0.000000, 90.400009},
	{2110.260253, -1352.890625, 25.076538, 9.399998, -0.699999, -179.799743},
	{2052.904296, -1322.635498, 24.954380, 0.000000, 0.000000, 179.800018},
	{2159.781494, -1693.122314, 16.025939, 0.000000, 0.000000, -179.099990},
	{2146.816650, -1698.676025, 15.438446, 0.000000, 0.000000, 91.499877},
	{2175.154052, -1732.381713, 14.535001, 0.000000, 0.000000, -178.500061},
	{2231.739501, -1683.644775, 15.479531, 0.000000, 0.000000, -16.500001},
	{2121.155029, -1594.672729, 15.621557, 0.000000, 0.000000, 86.900100},
	{2123.272705, -1593.691284, 15.241566, 0.000000, 0.000000, -179.499893},
	{2112.329345, -1632.425170, 13.739908, 0.000000, -3.200001, -89.700065},
	{2081.344970, -1592.929809, 14.757192, 0.000000, 0.000000, 179.300003},
	{2073.782470, -1597.242553, 14.414111, 0.000000, 0.000000, 90.300033},
	{2031.132568, -1599.088867, 13.910934, 0.000000, 0.000000, -168.799987},
	{1986.863281, -1598.860839, 13.900341, 0.000000, 0.000000, -135.000076},
	{2478.406982, -1705.506347, 13.490673, 0.000000, 0.000000, 176.799804},
	{2478.767578, -1688.184936, 13.487812, 0.000000, 0.000000, -98.600006},
	{2520.675781, -1673.658447, 15.454930, 0.000000, 0.000000, 0.000000},
	{2534.723388, -1665.125732, 15.735736, 0.000000, 0.000000, -178.699966},
	{2431.231689, -1680.935424, 14.411346, 0.000000, 0.000000, -90.199958},
	{2398.518066, -1693.246948, 13.891834, 0.000000, 0.000000, 87.599990},
	{2377.614990, -1707.240112, 14.127936, 0.000000, 0.000000, 0.000000},
	{2440.530517, -1997.948486, 14.406878, 0.000000, 0.000000, 89.199966}, // Willowfield red wall
	{2459.481933, -1975.134521, 14.166885, 0.000000, 0.000000, 0.000000}, // Willowfield alley
	{2459.608642, -2043.951049, 11.091508, 0.000000, 0.000000, 88.000068}, // Willowfield sewer
	{1958.593139, -1742.345336, 13.856878, 0.000000, 0.000000, 90.700050}, // Idlegas [Artsy]
	{1951.642700, -1682.986083, 13.822822, 0.000000, 0.000000, 0.000000}, // North of Idlegas [Artsy],
	{1991.694580, -1683.518676, 13.636877, 0.000000, 0.000000, 178.599838}, // West 4-1-5 [Artsy],
	{2135.621582, -1258.083496, 24.192192, 0.000000, 0.000000, 90.099929} // Jefferson Alley [Fireworks]
};

static FloorNames[21][] =
{
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor",
	"Tenth Floor",
	"Eleventh Floor",
	"Twelfth Floor",
	"Thirteenth Floor",
	"Fourteenth Floor",
	"Fifteenth Floor",
	"Sixteenth Floor",
	"Seventeenth Floor",
	"Eighteenth Floor",
	"Nineteenth Floor",
	"Penthouse"
};

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};
new const Float:g_RepairShops[][] =
{
	{2074.7122,	 -1831.3906, 13.5469, 	2065.4092,	-1831.4474,	13.3643, 90.0000,   2076.0828,  -1831.3698, 13.2777, 270.0000},
	{1025.1017,	 -1032.9968, 31.8545, 	1024.9688,	-1023.1215,	31.9303, 0.0000,  1024.9032,  -1033.9376, 31.6534, 180.0000},
	{488.5583,	 -1731.2819, 11.2464, 	487.3807,	-1741.6285,	11.0107, 170.0000,  489.1483,   -1730.7385, 11.0434, 350.0000},
	{720.2086, 	 -465.7499,  16.3437, 	720.0692,	-456.0589,	17.0412, 0.0000,	720.1885,	-469.6240,	17.0489, 180.0000},
	{-99.8833, 	 1109.2959,  19.7422,	-100.0493,	1116.5676,	20.3480, 0.0000,	-99.8743,	1105.2859,	20.4476, 180.0000},
	{-1420.7378, 2594.0757,  55.7505, 	-1420.5433,	2585.7573,	56.5724, 180.0000,	-1420.6559,	2595.4070,	56.4271, 0.0000}
};
new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
	{300.5000, -137.0286, 1004.0625},
	{300.5000, -135.5336, 1004.0625},
	{300.5000, -134.0436, 1004.0625},
	{300.5000, -132.5637, 1004.0625},
	{300.5000, -131.0782, 1004.0625},
	{300.5000, -129.5582, 1004.0625},
	{300.5000, -128.0786, 1004.0625}
};
new Float:mdc_coordinates[][] = {
	{119.9457, 1099.4154, 525.3835},
	{119.5122, 1104.5157, 525.3835},
	{126.3413, 1104.4753, 525.3835},
	{133.0562, 1104.4266, 525.3835},
	{133.0896, 1099.6122, 525.3835},
	{135.8935, 1086.3850, 523.9155},
	{131.0782, 1086.3044, 523.9155},
	{152.5857, 1087.8550, 523.9194},
	{135.8161, 1118.6794, 527.4412},
	{136.3128, 1121.1874, 527.4412},
	{130.3078, 1126.9399, 527.4631},
	{130.5233, 1129.0502, 527.4631},
	{133.5209, 1082.4387, 527.4451},
	{137.9823, 1089.4128, 531.2477},
	{128.3578, 1089.4703, 531.2498},
	{119.0285, 1089.4502, 531.2517}
};
new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};
////////////////////////////////////////////////////////////////////////////////
///////////
///////////                 Trucking system Declarations
///////////
////////////////////////////////////////////////////////////////////////////////

enum pTruckDepotInfo
{
	Float:pTDPosX,
	Float:pTDPosY,
	Float:pTDPosZ,
	pTDName[128],
	pTDLevel
}

#define MAX_TRUCKDEPOTS 34
new TruckDepotInfo[MAX_TRUCKDEPOTS][pTruckDepotInfo] =
{
	/* {PosX, PosY, PosZ, Name, Level} */
	{305.7063, -240.2690, 1.5781, "Avery Construction Blueberry", 5},
	{103.3272, -164.9381, 2.3076, "Blueberry Storage", 1},
	{165.2610, -54.6693, 1.5781, "Blueberry Supplies", 7},
	{-37.7563, 59.0440, 3.1172, "Blueberry Farm Supplies", 8},
	{-464.6584, -88.4591, 59.9695, "Blueberry Lumber Yard", 3},
	{-539.4329, -500.4013, 25.5178, "West Basin Supplies", 2},
	{-1016.6616, -692.1517, 32.0078, "Easter Bay Chemicals", 10},
	{-2001.9777, -2413.9561, 30.6250, "Angel Pine Storage", 3},
	{-1610.2825, -2699.3901, 48.5391, "Angel Pine Supplies", 2},
	{17.6697, -2648.5720, 40.4756, "I27 Gas Station", 2},
	{-65.7891, -1120.5729, 1.0781, "RS Haul Depot", 1},
	{1059.4307, -344.1587, 73.9922, "Flint County Supplies", 1},
	{330.7587, 860.1470, 20.4063, "Bone County Quarry", 10},
	{276.1030, 1465.5796, 10.5859, "Bone County Oil", 11},
	{635.5750, 1689.1216, 6.9922, "XOOMER Gas LV", 3},
	{978.7535, 2094.7837, 10.8203, "Whitewood Storage LV", 3},
	{1049.9388, 2087.2122, 10.8203, "Whitewood Supplies LV", 5},
	{1070.3037, 1858.2561, 10.8203, "Blackfield Storage LV", 5},
	{1425.1433, 2334.0872, 10.8203, "Pilson Supplies LV", 7},
	{1635.5356, 2326.2112, 10.8203, "Redsands Storage Center LV", 1},
	{2523.7297, 2817.6379, 10.8203, "KACC Military Fuels LV", 13},
	{2841.6387, 898.4078, 10.7578, "Rockshore East Storage LV", 3},
	{1663.6938, 709.9469, 10.8203, "Reagan Bridge Supplies LV", 3},
	{1437.7786, 977.2987, 10.8130, "Pilson Storage LV", 1},
	{1371.7268, 1158.7609, 10.8203, "LVA Freight Depot", 1},
	{1061.5264, 1276.8601, 10.8203, "Blackfield Supplies LV", 1},
	{2529.3972, -2114.5623, 13.5469, "Trucker Coon Supplies", 1},
	{2700.3110, -2389.3691, 13.6328, "LA Mast Storage", 2},
	{2461.9304, -2551.9141, 13.2245, "LA Docks Storage", 2},
	{2206.4023, -2530.6597, 13.5469, "LA Docks Supplies", 3},
	{2607.9333, -2207.7751, 13.5469, "LA Docks Fuel Storage", 3},
	{990.7799, -920.9680, 42.1797, "Broadway Gas Station", 1},
	{1936.3282, -1790.4540, 13.3828, "Idlewood Gas Station", 1},
	{-174.1096, -278.7843, 1.500000, "Bluberry Truck Depot", 1}
};
enum pTruckJobInfo
{
	pTJModel,
	pTJDesc[100],
	pTJPrice,
	pTJDestDepot
}

#define MAX_TRUCKJOBS 525
new LegalTruckJobInfo[MAX_TRUCKJOBS][pTruckJobInfo] =
{
	/* {Trailer Model, Description, Price, Destination Depot ID} */
	{435, "Frozen Food", 4000, 1},
	{435, "Frozen Food", 4000, 2},
	{435, "Frozen Food", 4000, 5},
	{435, "Frozen Food", 4000, 7},
	{435, "Frozen Food", 4000, 8},
	{435, "Frozen Food", 4000, 10},
	{435, "Frozen Food", 4000, 16},
	{435, "Frozen Food", 4000, 17},
	{435, "Frozen Food", 4000, 18},
	{435, "Frozen Food", 4000, 19},
	{435, "Frozen Food", 4000, 20},
	{435, "Frozen Food", 4000, 22},
	{435, "Frozen Food", 4000, 23},
	{435, "Frozen Food", 4000, 24},
	{435, "Frozen Food", 4000, 25},
	{435, "Frozen Food", 4000, 26},
	{435, "Frozen Food", 4000, 27},
	{435, "Frozen Food", 4000, 28},
	{435, "Frozen Food", 4000, 29},
	{435, "Frozen Food", 4000, 30},
	{435, "Frozen Food", 4000, 33},
	{435, "Cheap Clothes", 4000, 1},
	{435, "Cheap Clothes", 4000, 2},
	{435, "Cheap Clothes", 4000, 5},
	{435, "Cheap Clothes", 4000, 7},
	{435, "Cheap Clothes", 4000, 8},
	{435, "Cheap Clothes", 4000, 10},
	{435, "Cheap Clothes", 4000, 11},
	{435, "Cheap Clothes", 4000, 16},
	{435, "Cheap Clothes", 4000, 17},
	{435, "Cheap Clothes", 4000, 18},
	{435, "Cheap Clothes", 4000, 19},
	{435, "Cheap Clothes", 4000, 20},
	{435, "Cheap Clothes", 4000, 22},
	{435, "Cheap Clothes", 4000, 23},
	{435, "Cheap Clothes", 4000, 24},
	{435, "Cheap Clothes", 4000, 25},
	{435, "Cheap Clothes", 4000, 26},
	{435, "Cheap Clothes", 4000, 27},
	{435, "Cheap Clothes", 4000, 28},
	{435, "Cheap Clothes", 4000, 29},
	{435, "Cheap Clothes", 4000, 30},
	{435, "Cheap Clothes", 4000, 33},
	{435, "Alcoholic Beverages", 4000, 1},
	{435, "Alcoholic Beverages", 4000, 2},
	{435, "Alcoholic Beverages", 4000, 5},
	{435, "Alcoholic Beverages", 4000, 7},
	{435, "Alcoholic Beverages", 4000, 8},
	{435, "Alcoholic Beverages", 4000, 10},
	{435, "Alcoholic Beverages", 4000, 11},
	{435, "Alcoholic Beverages", 4000, 16},
	{435, "Alcoholic Beverages", 4000, 17},
	{435, "Alcoholic Beverages", 4000, 18},
	{435, "Alcoholic Beverages", 4000, 19},
	{435, "Alcoholic Beverages", 4000, 20},
	{435, "Alcoholic Beverages", 4000, 22},
	{435, "Alcoholic Beverages", 4000, 23},
	{435, "Alcoholic Beverages", 4000, 24},
	{435, "Alcoholic Beverages", 4000, 25},
	{435, "Alcoholic Beverages", 4000, 26},
	{435, "Alcoholic Beverages", 4000, 27},
	{435, "Alcoholic Beverages", 4000, 28},
	{435, "Alcoholic Beverages", 4000, 29},
	{435, "Alcoholic Beverages", 4000, 30},
	{435, "Alcoholic Beverages", 4000, 33},
	{435, "Computer Parts", 7000, 1},
	{435, "Computer Parts", 7000, 2},
	{435, "Computer Parts", 7000, 5},
	{435, "Computer Parts", 7000, 7},
	{435, "Computer Parts", 7000, 8},
	{435, "Computer Parts", 7000, 10},
	{435, "Computer Parts", 7000, 11},
	{435, "Computer Parts", 7000, 16},
	{435, "Computer Parts", 7000, 17},
	{435, "Computer Parts", 7000, 18},
	{435, "Computer Parts", 7000, 19},
	{435, "Computer Parts", 7000, 20},
	{435, "Computer Parts", 7000, 22},
	{435, "Computer Parts", 7000, 23},
	{435, "Computer Parts", 7000, 24},
	{435, "Computer Parts", 7000, 25},
	{435, "Computer Parts", 7000, 26},
	{435, "Computer Parts", 7000, 27},
	{435, "Computer Parts", 7000, 28},
	{435, "Computer Parts", 7000, 29},
	{435, "Computer Parts", 7000, 30},
	{435, "Computer Parts", 7000, 33},
	{435, "Broken Fridges", 8000, 1},
	{435, "Broken Fridges", 8000, 2},
	{435, "Broken Fridges", 8000, 5},
	{435, "Broken Fridges", 8000, 7},
	{435, "Broken Fridges", 8000, 8},
	{435, "Broken Fridges", 8000, 10},
	{435, "Broken Fridges", 8000, 11},
	{435, "Broken Fridges", 8000, 16},
	{435, "Broken Fridges", 8000, 17},
	{435, "Broken Fridges", 8000, 18},
	{435, "Broken Fridges", 8000, 19},
	{435, "Broken Fridges", 8000, 20},
	{435, "Broken Fridges", 8000, 22},
	{435, "Broken Fridges", 8000, 23},
	{435, "Broken Fridges", 8000, 24},
	{435, "Broken Fridges", 8000, 25},
	{435, "Broken Fridges", 8000, 26},
	{435, "Broken Fridges", 8000, 27},
	{435, "Broken Fridges", 8000, 28},
	{435, "Broken Fridges", 8000, 29},
	{435, "Broken Fridges", 8000, 30},
	{435, "Broken Fridges", 8000, 33},
	{435, "Electronics", 4000, 1},
	{435, "Electronics", 4000, 2},
	{435, "Electronics", 4000, 5},
	{435, "Electronics", 4000, 7},
	{435, "Electronics", 4000, 8},
	{435, "Electronics", 4000, 10},
	{435, "Electronics", 4000, 11},
	{435, "Electronics", 4000, 16},
	{435, "Electronics", 4000, 17},
	{435, "Electronics", 4000, 18},
	{435, "Electronics", 4000, 19},
	{435, "Electronics", 4000, 20},
	{435, "Electronics", 4000, 22},
	{435, "Electronics", 4000, 23},
	{435, "Electronics", 4000, 24},
	{435, "Electronics", 4000, 25},
	{435, "Electronics", 4000, 26},
	{435, "Electronics", 4000, 27},
	{435, "Electronics", 4000, 28},
	{435, "Electronics", 4000, 29},
	{435, "Electronics", 4000, 30},
	{435, "Electronics", 4000, 33},
	{435, "Flat Screen TV's", 7000, 1},
	{435, "Flat Screen TV's", 7000, 2},
	{435, "Flat Screen TV's", 7000, 5},
	{435, "Flat Screen TV's", 7000, 7},
	{435, "Flat Screen TV's", 7000, 8},
	{435, "Flat Screen TV's", 7000, 10},
	{435, "Flat Screen TV's", 7000, 11},
	{435, "Flat Screen TV's", 7000, 16},
	{435, "Flat Screen TV's", 7000, 17},
	{435, "Flat Screen TV's", 7000, 18},
	{435, "Flat Screen TV's", 7000, 19},
	{435, "Flat Screen TV's", 7000, 20},
	{435, "Flat Screen TV's", 7000, 22},
	{435, "Flat Screen TV's", 7000, 23},
	{435, "Flat Screen TV's", 7000, 24},
	{435, "Flat Screen TV's", 7000, 25},
	{435, "Flat Screen TV's", 7000, 26},
	{435, "Flat Screen TV's", 7000, 27},
	{435, "Flat Screen TV's", 7000, 28},
	{435, "Flat Screen TV's", 7000, 29},
	{435, "Flat Screen TV's", 7000, 30},
	{435, "Flat Screen TV's", 7000, 33},
	{435, "Furniture", 4000, 1},
	{435, "Furniture", 4000, 2},
	{435, "Furniture", 4000, 5},
	{435, "Furniture", 4000, 7},
	{435, "Furniture", 4000, 8},
	{435, "Furniture", 4000, 10},
	{435, "Furniture", 4000, 11},
	{435, "Furniture", 4000, 16},
	{435, "Furniture", 4000, 17},
	{435, "Furniture", 4000, 18},
	{435, "Furniture", 4000, 19},
	{435, "Furniture", 4000, 20},
	{435, "Furniture", 4000, 22},
	{435, "Furniture", 4000, 23},
	{435, "Furniture", 4000, 24},
	{435, "Furniture", 4000, 25},
	{435, "Furniture", 4000, 26},
	{435, "Furniture", 4000, 27},
	{435, "Furniture", 4000, 28},
	{435, "Furniture", 4000, 29},
	{435, "Furniture", 4000, 30},
	{435, "Furniture", 4000, 33},
	{435, "Timber", 10000, 0},
	{435, "Timber", 10000, 3},
	{435, "Timber", 10000, 4},
	{435, "Timber", 10000, 12},
	{435, "Timber", 10000, 33},

	{591, "Frozen Food", 4000, 1},
	{591, "Frozen Food", 4000, 2},
	{591, "Frozen Food", 4000, 5},
	{591, "Frozen Food", 4000, 7},
	{591, "Frozen Food", 4000, 8},
	{591, "Frozen Food", 4000, 10},
	{591, "Frozen Food", 4000, 16},
	{591, "Frozen Food", 4000, 17},
	{591, "Frozen Food", 4000, 18},
	{591, "Frozen Food", 4000, 19},
	{591, "Frozen Food", 4000, 20},
	{591, "Frozen Food", 4000, 22},
	{591, "Frozen Food", 4000, 23},
	{591, "Frozen Food", 4000, 24},
	{591, "Frozen Food", 4000, 25},
	{591, "Frozen Food", 4000, 26},
	{591, "Frozen Food", 4000, 27},
	{591, "Frozen Food", 4000, 28},
	{591, "Frozen Food", 4000, 29},
	{591, "Frozen Food", 4000, 30},
	{591, "Frozen Food", 4000, 33},
	{591, "Cheap Clothes", 4000, 1},
	{591, "Cheap Clothes", 4000, 2},
	{591, "Cheap Clothes", 4000, 5},
	{591, "Cheap Clothes", 4000, 7},
	{591, "Cheap Clothes", 4000, 8},
	{591, "Cheap Clothes", 4000, 10},
	{591, "Cheap Clothes", 4000, 11},
	{591, "Cheap Clothes", 4000, 16},
	{591, "Cheap Clothes", 4000, 17},
	{591, "Cheap Clothes", 4000, 18},
	{591, "Cheap Clothes", 4000, 19},
	{591, "Cheap Clothes", 4000, 20},
	{591, "Cheap Clothes", 4000, 22},
	{591, "Cheap Clothes", 4000, 23},
	{591, "Cheap Clothes", 4000, 24},
	{591, "Cheap Clothes", 4000, 25},
	{591, "Cheap Clothes", 4000, 26},
	{591, "Cheap Clothes", 4000, 27},
	{591, "Cheap Clothes", 4000, 28},
	{591, "Cheap Clothes", 4000, 29},
	{591, "Cheap Clothes", 4000, 30},
	{591, "Cheap Clothes", 4000, 33},
	{591, "Alcoholic Beverages", 4000, 1},
	{591, "Alcoholic Beverages", 4000, 2},
	{591, "Alcoholic Beverages", 4000, 5},
	{591, "Alcoholic Beverages", 4000, 7},
	{591, "Alcoholic Beverages", 4000, 8},
	{591, "Alcoholic Beverages", 4000, 10},
	{591, "Alcoholic Beverages", 4000, 11},
	{591, "Alcoholic Beverages", 4000, 16},
	{591, "Alcoholic Beverages", 4000, 17},
	{591, "Alcoholic Beverages", 4000, 18},
	{591, "Alcoholic Beverages", 4000, 19},
	{591, "Alcoholic Beverages", 4000, 20},
	{591, "Alcoholic Beverages", 4000, 22},
	{591, "Alcoholic Beverages", 4000, 23},
	{591, "Alcoholic Beverages", 4000, 24},
	{591, "Alcoholic Beverages", 4000, 25},
	{591, "Alcoholic Beverages", 4000, 26},
	{591, "Alcoholic Beverages", 4000, 27},
	{591, "Alcoholic Beverages", 4000, 28},
	{591, "Alcoholic Beverages", 4000, 29},
	{591, "Alcoholic Beverages", 4000, 30},
	{591, "Alcoholic Beverages", 4000, 33},
	{591, "Computer Parts", 7000, 1},
	{591, "Computer Parts", 7000, 2},
	{591, "Computer Parts", 7000, 5},
	{591, "Computer Parts", 7000, 7},
	{591, "Computer Parts", 7000, 8},
	{591, "Computer Parts", 7000, 10},
	{591, "Computer Parts", 7000, 11},
	{591, "Computer Parts", 7000, 16},
	{591, "Computer Parts", 7000, 17},
	{591, "Computer Parts", 7000, 18},
	{591, "Computer Parts", 7000, 19},
	{591, "Computer Parts", 7000, 20},
	{591, "Computer Parts", 7000, 22},
	{591, "Computer Parts", 7000, 23},
	{591, "Computer Parts", 7000, 24},
	{591, "Computer Parts", 7000, 25},
	{591, "Computer Parts", 7000, 26},
	{591, "Computer Parts", 7000, 27},
	{591, "Computer Parts", 7000, 28},
	{591, "Computer Parts", 7000, 29},
	{591, "Computer Parts", 7000, 30},
	{591, "Computer Parts", 7000, 33},
	{591, "Broken Fridges", 8000, 1},
	{591, "Broken Fridges", 8000, 2},
	{591, "Broken Fridges", 8000, 5},
	{591, "Broken Fridges", 8000, 7},
	{591, "Broken Fridges", 8000, 8},
	{591, "Broken Fridges", 8000, 10},
	{591, "Broken Fridges", 8000, 11},
	{591, "Broken Fridges", 8000, 16},
	{591, "Broken Fridges", 8000, 17},
	{591, "Broken Fridges", 8000, 18},
	{591, "Broken Fridges", 8000, 19},
	{591, "Broken Fridges", 8000, 20},
	{591, "Broken Fridges", 8000, 22},
	{591, "Broken Fridges", 8000, 23},
	{591, "Broken Fridges", 8000, 24},
	{591, "Broken Fridges", 8000, 25},
	{591, "Broken Fridges", 8000, 26},
	{591, "Broken Fridges", 8000, 27},
	{591, "Broken Fridges", 8000, 28},
	{591, "Broken Fridges", 8000, 29},
	{591, "Broken Fridges", 8000, 30},
	{591, "Broken Fridges", 8000, 33},
	{591, "Electronics", 4000, 1},
	{591, "Electronics", 4000, 2},
	{591, "Electronics", 4000, 5},
	{591, "Electronics", 4000, 7},
	{591, "Electronics", 4000, 8},
	{591, "Electronics", 4000, 10},
	{591, "Electronics", 4000, 11},
	{591, "Electronics", 4000, 16},
	{591, "Electronics", 4000, 17},
	{591, "Electronics", 4000, 18},
	{591, "Electronics", 4000, 19},
	{591, "Electronics", 4000, 20},
	{591, "Electronics", 4000, 22},
	{591, "Electronics", 4000, 23},
	{591, "Electronics", 4000, 24},
	{591, "Electronics", 4000, 25},
	{591, "Electronics", 4000, 26},
	{591, "Electronics", 4000, 27},
	{591, "Electronics", 4000, 28},
	{591, "Electronics", 4000, 29},
	{591, "Electronics", 4000, 30},
	{591, "Electronics", 4000, 33},
	{591, "Flat Screen TV's", 7000, 1},
	{591, "Flat Screen TV's", 7000, 2},
	{591, "Flat Screen TV's", 7000, 5},
	{591, "Flat Screen TV's", 7000, 7},
	{591, "Flat Screen TV's", 7000, 8},
	{591, "Flat Screen TV's", 7000, 10},
	{591, "Flat Screen TV's", 7000, 11},
	{591, "Flat Screen TV's", 7000, 16},
	{591, "Flat Screen TV's", 7000, 17},
	{591, "Flat Screen TV's", 7000, 18},
	{591, "Flat Screen TV's", 7000, 19},
	{591, "Flat Screen TV's", 7000, 20},
	{591, "Flat Screen TV's", 7000, 22},
	{591, "Flat Screen TV's", 7000, 23},
	{591, "Flat Screen TV's", 7000, 24},
	{591, "Flat Screen TV's", 7000, 25},
	{591, "Flat Screen TV's", 7000, 26},
	{591, "Flat Screen TV's", 7000, 27},
	{591, "Flat Screen TV's", 7000, 28},
	{591, "Flat Screen TV's", 7000, 29},
	{591, "Flat Screen TV's", 7000, 30},
	{591, "Flat Screen TV's", 7000, 33},
	{591, "Furniture", 4000, 1},
	{591, "Furniture", 4000, 2},
	{591, "Furniture", 4000, 5},
	{591, "Furniture", 4000, 7},
	{591, "Furniture", 4000, 8},
	{591, "Furniture", 4000, 10},
	{591, "Furniture", 4000, 11},
	{591, "Furniture", 4000, 16},
	{591, "Furniture", 4000, 17},
	{591, "Furniture", 4000, 18},
	{591, "Furniture", 4000, 19},
	{591, "Furniture", 4000, 20},
	{591, "Furniture", 4000, 22},
	{591, "Furniture", 4000, 23},
	{591, "Furniture", 4000, 24},
	{591, "Furniture", 4000, 25},
	{591, "Furniture", 4000, 26},
	{591, "Furniture", 4000, 27},
	{591, "Furniture", 4000, 28},
	{591, "Furniture", 4000, 29},
	{591, "Furniture", 4000, 30},
	{591, "Furniture", 4000, 33},
	{591, "Food Packages", 4000, 1},
	{591, "Food Packages", 4000, 2},
	{591, "Food Packages", 4000, 5},
	{591, "Food Packages", 4000, 7},
	{591, "Food Packages", 4000, 8},
	{591, "Food Packages", 4000, 10},
	{591, "Food Packages", 4000, 11},
	{591, "Food Packages", 4000, 16},
	{591, "Food Packages", 4000, 17},
	{591, "Food Packages", 4000, 18},
	{591, "Food Packages", 4000, 19},
	{591, "Food Packages", 4000, 20},
	{591, "Food Packages", 4000, 22},
	{591, "Food Packages", 4000, 23},
	{591, "Food Packages", 4000, 24},
	{591, "Food Packages", 4000, 25},
	{591, "Food Packages", 4000, 26},
	{591, "Food Packages", 4000, 27},
	{591, "Food Packages", 4000, 28},
	{591, "Food Packages", 4000, 29},
	{591, "Food Packages", 4000, 30},
	{591, "Food Packages", 4000, 33},
	{591, "Broken Furniture", 6000, 1},
	{591, "Broken Furniture", 6000, 2},
	{591, "Broken Furniture", 6000, 5},
	{591, "Broken Furniture", 6000, 7},
	{591, "Broken Furniture", 6000, 8},
	{591, "Broken Furniture", 6000, 10},
	{591, "Broken Furniture", 6000, 11},
	{591, "Broken Furniture", 6000, 16},
	{591, "Broken Furniture", 6000, 17},
	{591, "Broken Furniture", 6000, 18},
	{591, "Broken Furniture", 6000, 19},
	{591, "Broken Furniture", 6000, 20},
	{591, "Broken Furniture", 6000, 22},
	{591, "Broken Furniture", 6000, 23},
	{591, "Broken Furniture", 6000, 24},
	{591, "Broken Furniture", 6000, 25},
	{591, "Broken Furniture", 6000, 26},
	{591, "Broken Furniture", 6000, 27},
	{591, "Broken Furniture", 6000, 28},
	{591, "Broken Furniture", 6000, 29},
	{591, "Broken Furniture", 6000, 30},
	{591, "Broken Furniture", 6000, 33},
	{591, "Chemistry Instruments", 10000, 1},
	{591, "Chemistry Instruments", 10000, 2},
	{591, "Chemistry Instruments", 10000, 5},
	{591, "Chemistry Instruments", 10000, 7},
	{591, "Chemistry Instruments", 10000, 8},
	{591, "Chemistry Instruments", 10000, 10},
	{591, "Chemistry Instruments", 10000, 11},
	{591, "Chemistry Instruments", 10000, 16},
	{591, "Chemistry Instruments", 10000, 17},
	{591, "Chemistry Instruments", 10000, 18},
	{591, "Chemistry Instruments", 10000, 19},
	{591, "Chemistry Instruments", 10000, 20},
	{591, "Chemistry Instruments", 10000, 22},
	{591, "Chemistry Instruments", 10000, 23},
	{591, "Chemistry Instruments", 10000, 24},
	{591, "Chemistry Instruments", 10000, 25},
	{591, "Chemistry Instruments", 10000, 26},
	{591, "Chemistry Instruments", 10000, 27},
	{591, "Chemistry Instruments", 10000, 28},
	{591, "Chemistry Instruments", 10000, 29},
	{591, "Chemistry Instruments", 10000, 30},
	{591, "Chemistry Instruments", 10000, 33},
	{591, "Timber", 10000, 0},
	{591, "Timber", 10000, 3},
	{591, "Timber", 10000, 4},
	{591, "Timber", 10000, 12},
	{591, "Timber", 10000, 33},
	{591, "PVC Components", 6000, 1},
	{591, "PVC Components", 6000, 2},
	{591, "PVC Components", 6000, 5},
	{591, "PVC Components", 6000, 7},
	{591, "PVC Components", 6000, 8},
	{591, "PVC Components", 6000, 10},
	{591, "PVC Components", 6000, 11},
	{591, "PVC Components", 6000, 16},
	{591, "PVC Components", 6000, 17},
	{591, "PVC Components", 6000, 18},
	{591, "PVC Components", 6000, 19},
	{591, "PVC Components", 6000, 20},
	{591, "PVC Components", 6000, 22},
	{591, "PVC Components", 6000, 23},
	{591, "PVC Components", 6000, 24},
	{591, "PVC Components", 6000, 25},
	{591, "PVC Components", 6000, 26},
	{591, "PVC Components", 6000, 27},
	{591, "PVC Components", 6000, 28},
	{591, "PVC Components", 6000, 29},
	{591, "PVC Components", 6000, 30},
	{591, "PVC Components", 6000, 33},

	{450, "Coal", 8000, 6},
	{450, "Coal", 8000, 8},
	{450, "Coal", 8000, 10},
	{450, "Coal", 8000, 12},
	{450, "Coal", 8000, 13},
	{450, "Coal", 8000, 20},
	{450, "Coal", 8000, 24},
	{450, "Coal", 8000, 30},
	{450, "Coal", 8000, 33},
	{450, "Bricks", 6000, 6},
	{450, "Bricks", 6000, 8},
	{450, "Bricks", 6000, 10},
	{450, "Bricks", 6000, 12},
	{450, "Bricks", 6000, 13},
	{450, "Bricks", 6000, 20},
	{450, "Bricks", 6000, 24},
	{450, "Bricks", 6000, 30},
	{450, "Bricks", 6000, 33},
	{450, "Gravel", 6000, 6},
	{450, "Gravel", 6000, 8},
	{450, "Gravel", 6000, 10},
	{450, "Gravel", 6000, 12},
	{450, "Gravel", 6000, 13},
	{450, "Gravel", 6000, 20},
	{450, "Gravel", 6000, 24},
	{450, "Gravel", 6000, 30},
	{450, "Gravel", 6000, 33},
	{450, "Sand", 6000, 6},
	{450, "Sand", 6000, 8},
	{450, "Sand", 6000, 10},
	{450, "Sand", 6000, 12},
	{450, "Sand", 6000, 13},
	{450, "Sand", 6000, 20},
	{450, "Sand", 6000, 24},
	{450, "Sand", 6000, 30},
	{450, "Sand", 6000, 33},
	{450, "Rubble", 6000, 6},
	{450, "Rubble", 6000, 8},
	{450, "Rubble", 6000, 10},
	{450, "Rubble", 6000, 12},
	{450, "Rubble", 6000, 13},
	{450, "Rubble", 6000, 20},
	{450, "Rubble", 6000, 24},
	{450, "Rubble", 6000, 30},
	{450, "Rubble", 6000, 33},

	{584, "Diesel", 10000, 6},
	{584, "Diesel", 8000, 9},
	{584, "Diesel", 10000, 10},
	{584, "Diesel", 8000, 13},
	{584, "Diesel", 10000, 14},
	{584, "Diesel", 8000, 21},
	{584, "Diesel", 10000, 31},
	{584, "Diesel", 8000, 32},
	{584, "Petrol", 8000, 6},
	{584, "Petrol", 10000, 9},
	{584, "Petrol", 8000, 10},
	{584, "Petrol", 10000, 13},
	{584, "Petrol", 8000, 14},
	{584, "Petrol", 10000, 21},
	{584, "Petrol", 8000, 31},
	{584, "Petrol", 10000, 32},
	{584, "Gas", 10000, 6},
	{584, "Gas", 8000, 9},
	{584, "Gas", 10000, 10},
	{584, "Gas", 8000, 13},
	{584, "Gas", 10000, 14},
	{584, "Gas", 8000, 21},
	{584, "Gas", 10000, 31},
	{584, "Gas", 8000, 32},
	{584, "Oil", 8000, 6},
	{584, "Oil", 10000, 9},
	{584, "Oil", 8000, 10},
	{584, "Oil", 10000, 13},
	{584, "Oil", 8000, 14},
	{584, "Oil", 10000, 21},
	{584, "Oil", 8000, 31},
	{584, "Oil", 10000, 32}

};

new IllegalTruckJobInfo[MAX_TRUCKJOBS][pTruckJobInfo] =
{
	/* {Description, Price, Destination Depot ID} */
	{435, "Overloaded Frozen Food", 4000, 1},
	{435, "Overloaded Frozen Food", 4000, 2},
	{435, "Overloaded Frozen Food", 4000, 5},
	{435, "Overloaded Frozen Food", 4000, 7},
	{435, "Overloaded Frozen Food", 4000, 8},
	{435, "Overloaded Frozen Food", 4000, 10},
	{435, "Overloaded Frozen Food", 4000, 16},
	{435, "Overloaded Frozen Food", 4000, 17},
	{435, "Overloaded Frozen Food", 4000, 18},
	{435, "Overloaded Frozen Food", 4000, 19},
	{435, "Overloaded Frozen Food", 4000, 20},
	{435, "Overloaded Frozen Food", 4000, 22},
	{435, "Overloaded Frozen Food", 4000, 23},
	{435, "Overloaded Frozen Food", 4000, 24},
	{435, "Overloaded Frozen Food", 4000, 25},
	{435, "Overloaded Frozen Food", 4000, 26},
	{435, "Overloaded Frozen Food", 4000, 27},
	{435, "Overloaded Frozen Food", 4000, 28},
	{435, "Overloaded Frozen Food", 4000, 29},
	{435, "Overloaded Frozen Food", 4000, 30},
	{435, "Overloaded Frozen Food", 4000, 33},
	{435, "Overloaded Cheap Clothes", 4000, 1},
	{435, "Overloaded Cheap Clothes", 4000, 2},
	{435, "Overloaded Cheap Clothes", 4000, 5},
	{435, "Overloaded Cheap Clothes", 4000, 7},
	{435, "Overloaded Cheap Clothes", 4000, 8},
	{435, "Overloaded Cheap Clothes", 4000, 10},
	{435, "Overloaded Cheap Clothes", 4000, 11},
	{435, "Overloaded Cheap Clothes", 4000, 16},
	{435, "Overloaded Cheap Clothes", 4000, 17},
	{435, "Overloaded Cheap Clothes", 4000, 18},
	{435, "Overloaded Cheap Clothes", 4000, 19},
	{435, "Overloaded Cheap Clothes", 4000, 20},
	{435, "Overloaded Cheap Clothes", 4000, 22},
	{435, "Overloaded Cheap Clothes", 4000, 23},
	{435, "Overloaded Cheap Clothes", 4000, 24},
	{435, "Overloaded Cheap Clothes", 4000, 25},
	{435, "Overloaded Cheap Clothes", 4000, 26},
	{435, "Overloaded Cheap Clothes", 4000, 27},
	{435, "Overloaded Cheap Clothes", 4000, 28},
	{435, "Overloaded Cheap Clothes", 4000, 29},
	{435, "Overloaded Cheap Clothes", 4000, 30},
	{435, "Overloaded Cheap Clothes", 4000, 33},
	{435, "Illegal Alcoholic Beverages", 4000, 1},
	{435, "Illegal Alcoholic Beverages", 4000, 2},
	{435, "Illegal Alcoholic Beverages", 4000, 5},
	{435, "Illegal Alcoholic Beverages", 4000, 7},
	{435, "Illegal Alcoholic Beverages", 4000, 8},
	{435, "Illegal Alcoholic Beverages", 4000, 10},
	{435, "Illegal Alcoholic Beverages", 4000, 11},
	{435, "Illegal Alcoholic Beverages", 4000, 16},
	{435, "Illegal Alcoholic Beverages", 4000, 17},
	{435, "Illegal Alcoholic Beverages", 4000, 18},
	{435, "Illegal Alcoholic Beverages", 4000, 19},
	{435, "Illegal Alcoholic Beverages", 4000, 20},
	{435, "Illegal Alcoholic Beverages", 4000, 22},
	{435, "Illegal Alcoholic Beverages", 4000, 23},
	{435, "Illegal Alcoholic Beverages", 4000, 24},
	{435, "Illegal Alcoholic Beverages", 4000, 25},
	{435, "Illegal Alcoholic Beverages", 4000, 26},
	{435, "Illegal Alcoholic Beverages", 4000, 27},
	{435, "Illegal Alcoholic Beverages", 4000, 28},
	{435, "Illegal Alcoholic Beverages", 4000, 29},
	{435, "Illegal Alcoholic Beverages", 4000, 30},
	{435, "Illegal Alcoholic Beverages", 4000, 33},
	{435, "Illegal Computer Parts", 7000, 1},
	{435, "Illegal Computer Parts", 7000, 2},
	{435, "Illegal Computer Parts", 7000, 5},
	{435, "Illegal Computer Parts", 7000, 7},
	{435, "Illegal Computer Parts", 7000, 8},
	{435, "Illegal Computer Parts", 7000, 10},
	{435, "Illegal Computer Parts", 7000, 11},
	{435, "Illegal Computer Parts", 7000, 16},
	{435, "Illegal Computer Parts", 7000, 17},
	{435, "Illegal Computer Parts", 7000, 18},
	{435, "Illegal Computer Parts", 7000, 19},
	{435, "Illegal Computer Parts", 7000, 20},
	{435, "Illegal Computer Parts", 7000, 22},
	{435, "Illegal Computer Parts", 7000, 23},
	{435, "Illegal Computer Parts", 7000, 24},
	{435, "Illegal Computer Parts", 7000, 25},
	{435, "Illegal Computer Parts", 7000, 26},
	{435, "Illegal Computer Parts", 7000, 27},
	{435, "Illegal Computer Parts", 7000, 28},
	{435, "Illegal Computer Parts", 7000, 29},
	{435, "Illegal Computer Parts", 7000, 30},
	{435, "Illegal Computer Parts", 7000, 33},
	{435, "Dangerous Broken Fridges", 8000, 1},
	{435, "Dangerous Broken Fridges", 8000, 2},
	{435, "Dangerous Broken Fridges", 8000, 5},
	{435, "Dangerous Broken Fridges", 8000, 7},
	{435, "Dangerous Broken Fridges", 8000, 8},
	{435, "Dangerous Broken Fridges", 8000, 10},
	{435, "Dangerous Broken Fridges", 8000, 11},
	{435, "Dangerous Broken Fridges", 8000, 16},
	{435, "Dangerous Broken Fridges", 8000, 17},
	{435, "Dangerous Broken Fridges", 8000, 18},
	{435, "Dangerous Broken Fridges", 8000, 19},
	{435, "Dangerous Broken Fridges", 8000, 20},
	{435, "Dangerous Broken Fridges", 8000, 22},
	{435, "Dangerous Broken Fridges", 8000, 23},
	{435, "Dangerous Broken Fridges", 8000, 24},
	{435, "Dangerous Broken Fridges", 8000, 25},
	{435, "Dangerous Broken Fridges", 8000, 26},
	{435, "Dangerous Broken Fridges", 8000, 27},
	{435, "Dangerous Broken Fridges", 8000, 28},
	{435, "Dangerous Broken Fridges", 8000, 29},
	{435, "Dangerous Broken Fridges", 8000, 30},
	{435, "Dangerous Broken Fridges", 8000, 33},
	{435, "Dangerous Electronics", 4000, 1},
	{435, "Dangerous Electronics", 4000, 2},
	{435, "Dangerous Electronics", 4000, 5},
	{435, "Dangerous Electronics", 4000, 7},
	{435, "Dangerous Electronics", 4000, 8},
	{435, "Dangerous Electronics", 4000, 10},
	{435, "Dangerous Electronics", 4000, 11},
	{435, "Dangerous Electronics", 4000, 16},
	{435, "Dangerous Electronics", 4000, 17},
	{435, "Dangerous Electronics", 4000, 18},
	{435, "Dangerous Electronics", 4000, 19},
	{435, "Dangerous Electronics", 4000, 20},
	{435, "Dangerous Electronics", 4000, 22},
	{435, "Dangerous Electronics", 4000, 23},
	{435, "Dangerous Electronics", 4000, 24},
	{435, "Dangerous Electronics", 4000, 25},
	{435, "Dangerous Electronics", 4000, 26},
	{435, "Dangerous Electronics", 4000, 27},
	{435, "Dangerous Electronics", 4000, 28},
	{435, "Dangerous Electronics", 4000, 29},
	{435, "Dangerous Electronics", 4000, 30},
	{435, "Dangerous Electronics", 4000, 33},
	{435, "Overloaded Flat Screen TV's", 7000, 1},
	{435, "Overloaded Flat Screen TV's", 7000, 2},
	{435, "Overloaded Flat Screen TV's", 7000, 5},
	{435, "Overloaded Flat Screen TV's", 7000, 7},
	{435, "Overloaded Flat Screen TV's", 7000, 8},
	{435, "Overloaded Flat Screen TV's", 7000, 10},
	{435, "Overloaded Flat Screen TV's", 7000, 11},
	{435, "Overloaded Flat Screen TV's", 7000, 16},
	{435, "Overloaded Flat Screen TV's", 7000, 17},
	{435, "Overloaded Flat Screen TV's", 7000, 18},
	{435, "Overloaded Flat Screen TV's", 7000, 19},
	{435, "Overloaded Flat Screen TV's", 7000, 20},
	{435, "Overloaded Flat Screen TV's", 7000, 22},
	{435, "Overloaded Flat Screen TV's", 7000, 23},
	{435, "Overloaded Flat Screen TV's", 7000, 24},
	{435, "Overloaded Flat Screen TV's", 7000, 25},
	{435, "Overloaded Flat Screen TV's", 7000, 26},
	{435, "Overloaded Flat Screen TV's", 7000, 27},
	{435, "Overloaded Flat Screen TV's", 7000, 28},
	{435, "Overloaded Flat Screen TV's", 7000, 29},
	{435, "Overloaded Flat Screen TV's", 7000, 30},
	{435, "Overloaded Flat Screen TV's", 7000, 33},
	{435, "Overloaded Furniture", 4000, 1},
	{435, "Overloaded Furniture", 4000, 2},
	{435, "Overloaded Furniture", 4000, 5},
	{435, "Overloaded Furniture", 4000, 7},
	{435, "Overloaded Furniture", 4000, 8},
	{435, "Overloaded Furniture", 4000, 10},
	{435, "Overloaded Furniture", 4000, 11},
	{435, "Overloaded Furniture", 4000, 16},
	{435, "Overloaded Furniture", 4000, 17},
	{435, "Overloaded Furniture", 4000, 18},
	{435, "Overloaded Furniture", 4000, 19},
	{435, "Overloaded Furniture", 4000, 20},
	{435, "Overloaded Furniture", 4000, 22},
	{435, "Overloaded Furniture", 4000, 23},
	{435, "Overloaded Furniture", 4000, 24},
	{435, "Overloaded Furniture", 4000, 25},
	{435, "Overloaded Furniture", 4000, 26},
	{435, "Overloaded Furniture", 4000, 27},
	{435, "Overloaded Furniture", 4000, 28},
	{435, "Overloaded Furniture", 4000, 29},
	{435, "Overloaded Furniture", 4000, 30},
	{435, "Overloaded Furniture", 4000, 33},
	{435, "Overloaded Timber", 10000, 0},
	{435, "Overloaded Timber", 10000, 3},
	{435, "Overloaded Timber", 10000, 4},
	{435, "Overloaded Timber", 10000, 12},
	{435, "Overloaded Timber", 10000, 33},

	{591, "Overloaded Frozen Food", 4000, 1},
	{591, "Overloaded Frozen Food", 4000, 2},
	{591, "Overloaded Frozen Food", 4000, 5},
	{591, "Overloaded Frozen Food", 4000, 7},
	{591, "Overloaded Frozen Food", 4000, 8},
	{591, "Overloaded Frozen Food", 4000, 10},
	{591, "Overloaded Frozen Food", 4000, 16},
	{591, "Overloaded Frozen Food", 4000, 17},
	{591, "Overloaded Frozen Food", 4000, 18},
	{591, "Overloaded Frozen Food", 4000, 19},
	{591, "Overloaded Frozen Food", 4000, 20},
	{591, "Overloaded Frozen Food", 4000, 22},
	{591, "Overloaded Frozen Food", 4000, 23},
	{591, "Overloaded Frozen Food", 4000, 24},
	{591, "Overloaded Frozen Food", 4000, 25},
	{591, "Overloaded Frozen Food", 4000, 26},
	{591, "Overloaded Frozen Food", 4000, 27},
	{591, "Overloaded Frozen Food", 4000, 28},
	{591, "Overloaded Frozen Food", 4000, 29},
	{591, "Overloaded Frozen Food", 4000, 30},
	{591, "Overloaded Frozen Food", 4000, 33},
	{591, "Overloaded Cheap Clothes", 4000, 1},
	{591, "Overloaded Cheap Clothes", 4000, 2},
	{591, "Overloaded Cheap Clothes", 4000, 5},
	{591, "Overloaded Cheap Clothes", 4000, 7},
	{591, "Overloaded Cheap Clothes", 4000, 8},
	{591, "Overloaded Cheap Clothes", 4000, 10},
	{591, "Overloaded Cheap Clothes", 4000, 11},
	{591, "Overloaded Cheap Clothes", 4000, 16},
	{591, "Overloaded Cheap Clothes", 4000, 17},
	{591, "Overloaded Cheap Clothes", 4000, 18},
	{591, "Overloaded Cheap Clothes", 4000, 19},
	{591, "Overloaded Cheap Clothes", 4000, 20},
	{591, "Overloaded Cheap Clothes", 4000, 22},
	{591, "Overloaded Cheap Clothes", 4000, 23},
	{591, "Overloaded Cheap Clothes", 4000, 24},
	{591, "Overloaded Cheap Clothes", 4000, 25},
	{591, "Overloaded Cheap Clothes", 4000, 26},
	{591, "Overloaded Cheap Clothes", 4000, 27},
	{591, "Overloaded Cheap Clothes", 4000, 28},
	{591, "Overloaded Cheap Clothes", 4000, 29},
	{591, "Overloaded Cheap Clothes", 4000, 30},
	{591, "Overloaded Cheap Clothes", 4000, 33},
	{591, "Illegal Alcoholic Beverages", 4000, 1},
	{591, "Illegal Alcoholic Beverages", 4000, 2},
	{591, "Illegal Alcoholic Beverages", 4000, 5},
	{591, "Illegal Alcoholic Beverages", 4000, 7},
	{591, "Illegal Alcoholic Beverages", 4000, 8},
	{591, "Illegal Alcoholic Beverages", 4000, 10},
	{591, "Illegal Alcoholic Beverages", 4000, 11},
	{591, "Illegal Alcoholic Beverages", 4000, 16},
	{591, "Illegal Alcoholic Beverages", 4000, 17},
	{591, "Illegal Alcoholic Beverages", 4000, 18},
	{591, "Illegal Alcoholic Beverages", 4000, 19},
	{591, "Illegal Alcoholic Beverages", 4000, 20},
	{591, "Illegal Alcoholic Beverages", 4000, 22},
	{591, "Illegal Alcoholic Beverages", 4000, 23},
	{591, "Illegal Alcoholic Beverages", 4000, 24},
	{591, "Illegal Alcoholic Beverages", 4000, 25},
	{591, "Illegal Alcoholic Beverages", 4000, 26},
	{591, "Illegal Alcoholic Beverages", 4000, 27},
	{591, "Illegal Alcoholic Beverages", 4000, 28},
	{591, "Illegal Alcoholic Beverages", 4000, 29},
	{591, "Illegal Alcoholic Beverages", 4000, 30},
	{591, "Illegal Alcoholic Beverages", 4000, 33},
	{591, "Illegal Computer Parts", 7000, 1},
	{591, "Illegal Computer Parts", 7000, 2},
	{591, "Illegal Computer Parts", 7000, 5},
	{591, "Illegal Computer Parts", 7000, 7},
	{591, "Illegal Computer Parts", 7000, 8},
	{591, "Illegal Computer Parts", 7000, 10},
	{591, "Illegal Computer Parts", 7000, 11},
	{591, "Illegal Computer Parts", 7000, 16},
	{591, "Illegal Computer Parts", 7000, 17},
	{591, "Illegal Computer Parts", 7000, 18},
	{591, "Illegal Computer Parts", 7000, 19},
	{591, "Illegal Computer Parts", 7000, 20},
	{591, "Illegal Computer Parts", 7000, 22},
	{591, "Illegal Computer Parts", 7000, 23},
	{591, "Illegal Computer Parts", 7000, 24},
	{591, "Illegal Computer Parts", 7000, 25},
	{591, "Illegal Computer Parts", 7000, 26},
	{591, "Illegal Computer Parts", 7000, 27},
	{591, "Illegal Computer Parts", 7000, 28},
	{591, "Illegal Computer Parts", 7000, 29},
	{591, "Illegal Computer Parts", 7000, 30},
	{591, "Illegal Computer Parts", 7000, 33},
	{591, "Dangerous Broken Fridges", 8000, 1},
	{591, "Dangerous Broken Fridges", 8000, 2},
	{591, "Dangerous Broken Fridges", 8000, 5},
	{591, "Dangerous Broken Fridges", 8000, 7},
	{591, "Dangerous Broken Fridges", 8000, 8},
	{591, "Dangerous Broken Fridges", 8000, 10},
	{591, "Dangerous Broken Fridges", 8000, 11},
	{591, "Dangerous Broken Fridges", 8000, 16},
	{591, "Dangerous Broken Fridges", 8000, 17},
	{591, "Dangerous Broken Fridges", 8000, 18},
	{591, "Dangerous Broken Fridges", 8000, 19},
	{591, "Dangerous Broken Fridges", 8000, 20},
	{591, "Dangerous Broken Fridges", 8000, 22},
	{591, "Dangerous Broken Fridges", 8000, 23},
	{591, "Dangerous Broken Fridges", 8000, 24},
	{591, "Dangerous Broken Fridges", 8000, 25},
	{591, "Dangerous Broken Fridges", 8000, 26},
	{591, "Dangerous Broken Fridges", 8000, 27},
	{591, "Dangerous Broken Fridges", 8000, 28},
	{591, "Dangerous Broken Fridges", 8000, 29},
	{591, "Dangerous Broken Fridges", 8000, 30},
	{591, "Dangerous Broken Fridges", 8000, 33},
	{591, "Dangerous Electronics", 4000, 1},
	{591, "Dangerous Electronics", 4000, 2},
	{591, "Dangerous Electronics", 4000, 5},
	{591, "Dangerous Electronics", 4000, 7},
	{591, "Dangerous Electronics", 4000, 8},
	{591, "Dangerous Electronics", 4000, 10},
	{591, "Dangerous Electronics", 4000, 11},
	{591, "Dangerous Electronics", 4000, 16},
	{591, "Dangerous Electronics", 4000, 17},
	{591, "Dangerous Electronics", 4000, 18},
	{591, "Dangerous Electronics", 4000, 19},
	{591, "Dangerous Electronics", 4000, 20},
	{591, "Dangerous Electronics", 4000, 22},
	{591, "Dangerous Electronics", 4000, 23},
	{591, "Dangerous Electronics", 4000, 24},
	{591, "Dangerous Electronics", 4000, 25},
	{591, "Dangerous Electronics", 4000, 26},
	{591, "Dangerous Electronics", 4000, 27},
	{591, "Dangerous Electronics", 4000, 28},
	{591, "Dangerous Electronics", 4000, 29},
	{591, "Dangerous Electronics", 4000, 30},
	{591, "Dangerous Electronics", 4000, 33},
	{591, "Overloaded Flat Screen TV's", 7000, 1},
	{591, "Overloaded Flat Screen TV's", 7000, 2},
	{591, "Overloaded Flat Screen TV's", 7000, 5},
	{591, "Overloaded Flat Screen TV's", 7000, 7},
	{591, "Overloaded Flat Screen TV's", 7000, 8},
	{591, "Overloaded Flat Screen TV's", 7000, 10},
	{591, "Overloaded Flat Screen TV's", 7000, 11},
	{591, "Overloaded Flat Screen TV's", 7000, 16},
	{591, "Overloaded Flat Screen TV's", 7000, 17},
	{591, "Overloaded Flat Screen TV's", 7000, 18},
	{591, "Overloaded Flat Screen TV's", 7000, 19},
	{591, "Overloaded Flat Screen TV's", 7000, 20},
	{591, "Overloaded Flat Screen TV's", 7000, 22},
	{591, "Overloaded Flat Screen TV's", 7000, 23},
	{591, "Overloaded Flat Screen TV's", 7000, 24},
	{591, "Overloaded Flat Screen TV's", 7000, 25},
	{591, "Overloaded Flat Screen TV's", 7000, 26},
	{591, "Overloaded Flat Screen TV's", 7000, 27},
	{591, "Overloaded Flat Screen TV's", 7000, 28},
	{591, "Overloaded Flat Screen TV's", 7000, 29},
	{591, "Overloaded Flat Screen TV's", 7000, 30},
	{591, "Overloaded Flat Screen TV's", 7000, 33},
	{591, "Overloaded Furniture", 4000, 1},
	{591, "Overloaded Furniture", 4000, 2},
	{591, "Overloaded Furniture", 4000, 5},
	{591, "Overloaded Furniture", 4000, 7},
	{591, "Overloaded Furniture", 4000, 8},
	{591, "Overloaded Furniture", 4000, 10},
	{591, "Overloaded Furniture", 4000, 11},
	{591, "Overloaded Furniture", 4000, 16},
	{591, "Overloaded Furniture", 4000, 17},
	{591, "Overloaded Furniture", 4000, 18},
	{591, "Overloaded Furniture", 4000, 19},
	{591, "Overloaded Furniture", 4000, 20},
	{591, "Overloaded Furniture", 4000, 22},
	{591, "Overloaded Furniture", 4000, 23},
	{591, "Overloaded Furniture", 4000, 24},
	{591, "Overloaded Furniture", 4000, 25},
	{591, "Overloaded Furniture", 4000, 26},
	{591, "Overloaded Furniture", 4000, 27},
	{591, "Overloaded Furniture", 4000, 28},
	{591, "Overloaded Furniture", 4000, 29},
	{591, "Overloaded Furniture", 4000, 30},
	{591, "Overloaded Furniture", 4000, 33},
	{591, "Overloaded Food Packages", 4000, 1},
	{591, "Overloaded Food Packages", 4000, 2},
	{591, "Overloaded Food Packages", 4000, 5},
	{591, "Overloaded Food Packages", 4000, 7},
	{591, "Overloaded Food Packages", 4000, 8},
	{591, "Overloaded Food Packages", 4000, 10},
	{591, "Overloaded Food Packages", 4000, 11},
	{591, "Overloaded Food Packages", 4000, 16},
	{591, "Overloaded Food Packages", 4000, 17},
	{591, "Overloaded Food Packages", 4000, 18},
	{591, "Overloaded Food Packages", 4000, 19},
	{591, "Overloaded Food Packages", 4000, 20},
	{591, "Overloaded Food Packages", 4000, 22},
	{591, "Overloaded Food Packages", 4000, 23},
	{591, "Overloaded Food Packages", 4000, 24},
	{591, "Overloaded Food Packages", 4000, 25},
	{591, "Overloaded Food Packages", 4000, 26},
	{591, "Overloaded Food Packages", 4000, 27},
	{591, "Overloaded Food Packages", 4000, 28},
	{591, "Overloaded Food Packages", 4000, 29},
	{591, "Overloaded Food Packages", 4000, 30},
	{591, "Overloaded Food Packages", 4000, 33},
	{591, "Dangerous Broken Furniture", 6000, 1},
	{591, "Dangerous Broken Furniture", 6000, 2},
	{591, "Dangerous Broken Furniture", 6000, 5},
	{591, "Dangerous Broken Furniture", 6000, 7},
	{591, "Dangerous Broken Furniture", 6000, 8},
	{591, "Dangerous Broken Furniture", 6000, 10},
	{591, "Dangerous Broken Furniture", 6000, 11},
	{591, "Dangerous Broken Furniture", 6000, 16},
	{591, "Dangerous Broken Furniture", 6000, 17},
	{591, "Dangerous Broken Furniture", 6000, 18},
	{591, "Dangerous Broken Furniture", 6000, 19},
	{591, "Dangerous Broken Furniture", 6000, 20},
	{591, "Dangerous Broken Furniture", 6000, 22},
	{591, "Dangerous Broken Furniture", 6000, 23},
	{591, "Dangerous Broken Furniture", 6000, 24},
	{591, "Dangerous Broken Furniture", 6000, 25},
	{591, "Dangerous Broken Furniture", 6000, 26},
	{591, "Dangerous Broken Furniture", 6000, 27},
	{591, "Dangerous Broken Furniture", 6000, 28},
	{591, "Dangerous Broken Furniture", 6000, 29},
	{591, "Dangerous Broken Furniture", 6000, 30},
	{591, "Dangerous Broken Furniture", 6000, 33},
	{591, "Dangerous Chemistry Instruments", 10000, 1},
	{591, "Dangerous Chemistry Instruments", 10000, 2},
	{591, "Dangerous Chemistry Instruments", 10000, 5},
	{591, "Dangerous Chemistry Instruments", 10000, 7},
	{591, "Dangerous Chemistry Instruments", 10000, 8},
	{591, "Dangerous Chemistry Instruments", 10000, 10},
	{591, "Dangerous Chemistry Instruments", 10000, 11},
	{591, "Dangerous Chemistry Instruments", 10000, 16},
	{591, "Dangerous Chemistry Instruments", 10000, 17},
	{591, "Dangerous Chemistry Instruments", 10000, 18},
	{591, "Dangerous Chemistry Instruments", 10000, 19},
	{591, "Dangerous Chemistry Instruments", 10000, 20},
	{591, "Dangerous Chemistry Instruments", 10000, 22},
	{591, "Dangerous Chemistry Instruments", 10000, 23},
	{591, "Dangerous Chemistry Instruments", 10000, 24},
	{591, "Dangerous Chemistry Instruments", 10000, 25},
	{591, "Dangerous Chemistry Instruments", 10000, 26},
	{591, "Dangerous Chemistry Instruments", 10000, 27},
	{591, "Dangerous Chemistry Instruments", 10000, 28},
	{591, "Dangerous Chemistry Instruments", 10000, 29},
	{591, "Dangerous Chemistry Instruments", 10000, 30},
	{591, "Dangerous Chemistry Instruments", 10000, 33},
	{591, "Overloaded Timber", 10000, 0},
	{591, "Overloaded Timber", 10000, 3},
	{591, "Overloaded Timber", 10000, 4},
	{591, "Overloaded Timber", 10000, 12},
	{591, "Overloaded Timber", 10000, 33},
	{591, "Overloaded PVC Components", 6000, 1},
	{591, "Overloaded PVC Components", 6000, 2},
	{591, "Overloaded PVC Components", 6000, 5},
	{591, "Overloaded PVC Components", 6000, 7},
	{591, "Overloaded PVC Components", 6000, 8},
	{591, "Overloaded PVC Components", 6000, 10},
	{591, "Overloaded PVC Components", 6000, 11},
	{591, "Overloaded PVC Components", 6000, 16},
	{591, "Overloaded PVC Components", 6000, 17},
	{591, "Overloaded PVC Components", 6000, 18},
	{591, "Overloaded PVC Components", 6000, 19},
	{591, "Overloaded PVC Components", 6000, 20},
	{591, "Overloaded PVC Components", 6000, 22},
	{591, "Overloaded PVC Components", 6000, 23},
	{591, "Overloaded PVC Components", 6000, 24},
	{591, "Overloaded PVC Components", 6000, 25},
	{591, "Overloaded PVC Components", 6000, 26},
	{591, "Overloaded PVC Components", 6000, 27},
	{591, "Overloaded PVC Components", 6000, 28},
	{591, "Overloaded PVC Components", 6000, 29},
	{591, "Overloaded PVC Components", 6000, 30},
	{591, "Overloaded PVC Components", 6000, 33},

	{450, "Overloaded Coal", 8000, 6},
	{450, "Overloaded Coal", 8000, 8},
	{450, "Overloaded Coal", 8000, 10},
	{450, "Overloaded Coal", 8000, 12},
	{450, "Overloaded Coal", 8000, 13},
	{450, "Overloaded Coal", 8000, 20},
	{450, "Overloaded Coal", 8000, 24},
	{450, "Overloaded Coal", 8000, 30},
	{450, "Overloaded Coal", 8000, 33},
	{450, "Overloaded Bricks", 6000, 6},
	{450, "Overloaded Bricks", 6000, 8},
	{450, "Overloaded Bricks", 6000, 10},
	{450, "Overloaded Bricks", 6000, 12},
	{450, "Overloaded Bricks", 6000, 13},
	{450, "Overloaded Bricks", 6000, 20},
	{450, "Overloaded Bricks", 6000, 24},
	{450, "Overloaded Bricks", 6000, 30},
	{450, "Overloaded Bricks", 6000, 33},
	{450, "Overloaded Gravel", 6000, 6},
	{450, "Overloaded Gravel", 6000, 8},
	{450, "Overloaded Gravel", 6000, 10},
	{450, "Overloaded Gravel", 6000, 12},
	{450, "Overloaded Gravel", 6000, 13},
	{450, "Overloaded Gravel", 6000, 20},
	{450, "Overloaded Gravel", 6000, 24},
	{450, "Overloaded Gravel", 6000, 30},
	{450, "Overloaded Gravel", 6000, 33},
	{450, "Overloaded Sand", 6000, 6},
	{450, "Overloaded Sand", 6000, 8},
	{450, "Overloaded Sand", 6000, 10},
	{450, "Overloaded Sand", 6000, 12},
	{450, "Overloaded Sand", 6000, 13},
	{450, "Overloaded Sand", 6000, 20},
	{450, "Overloaded Sand", 6000, 24},
	{450, "Overloaded Sand", 6000, 30},
	{450, "Overloaded Sand", 6000, 33},
	{450, "Overloaded Rubble", 6000, 6},
	{450, "Overloaded Rubble", 6000, 8},
	{450, "Overloaded Rubble", 6000, 10},
	{450, "Overloaded Rubble", 6000, 12},
	{450, "Overloaded Rubble", 6000, 13},
	{450, "Overloaded Rubble", 6000, 20},
	{450, "Overloaded Rubble", 6000, 24},
	{450, "Overloaded Rubble", 6000, 30},
	{450, "Overloaded Rubble", 6000, 33},

	{584, "Illegal Diesel", 10000, 6},
	{584, "Illegal Diesel", 8000, 9},
	{584, "Illegal Diesel", 10000, 10},
	{584, "Illegal Diesel", 8000, 13},
	{584, "Illegal Diesel", 10000, 14},
	{584, "Illegal Diesel", 8000, 21},
	{584, "Illegal Diesel", 10000, 31},
	{584, "Illegal Diesel", 8000, 32},
	{584, "Smuggled Petrol", 8000, 6},
	{584, "Smuggled Petrol", 10000, 9},
	{584, "Smuggled Petrol", 8000, 10},
	{584, "Smuggled Petrol", 10000, 13},
	{584, "Smuggled Petrol", 8000, 14},
	{584, "Smuggled Petrol", 10000, 21},
	{584, "Smuggled Petrol", 8000, 31},
	{584, "Smuggled Petrol", 10000, 32},
	{584, "Illegal Gas", 10000, 6},
	{584, "Illegal Gas", 8000, 9},
	{584, "Illegal Gas", 10000, 10},
	{584, "Illegal Gas", 8000, 13},
	{584, "Illegal Gas", 10000, 14},
	{584, "Illegal Gas", 8000, 21},
	{584, "Illegal Gas", 10000, 31},
	{584, "Illegal Gas", 8000, 32},
	{584, "Smuggled Oil", 8000, 6},
	{584, "Smuggled Oil", 10000, 9},
	{584, "Smuggled Oil", 8000, 10},
	{584, "Smuggled Oil", 10000, 13},
	{584, "Smuggled Oil", 8000, 14},
	{584, "Smuggled Oil", 10000, 21},
	{584, "Smuggled Oil", 8000, 31},
	{584, "Smuggled Oil", 10000, 32}
};

enum pOnTruckJobInfo
{
	pTDDestDepot,
	pTDJobID,
	pTDDamage,
	pTDSpeeding,
	pTDActive,
	pTDLegal,
	Float:pTDDistance,
	pTDTrailer
}
new PlayerTruckJob[MAX_PLAYERS][pOnTruckJobInfo];

new const customSkins[] = {

	25000, 25001, 25002, 25003, 25005, 25006,
	25008, 25009, 25011, 25013, 25014, 25015,
	25016, 25020, 25021, 25023, 25027, 25028,
	25029, 25030, 25031, 25032, 25033, 25034,
	25035, 25036, 25037, 25038, 25039, 25040,
	25041, 25042, 25043, 25044, 25045, 25046,
	25047, 25048, 25049, 25050, 25051, 25052,
	25053, 25054, 25055, 25056, 25057, 25058,
	25059, 25060, 25061, 25062, 25063, 25076,
	25077, 25078, 25079, 25080, 25081, 25082,
	25083, 25084, 25085, 25086,	25087, 25088,
	25089, 25090, 25091, 25092, 25093, 25094,
	25095, 25096, 25099, 25101, 25102, 25103,
	25104, 25105, 25106, 25107, 25108, 25109,
	25110, 25116, 25117, 25120, 25121, 25122,
	25123, 25124, 25125, 25126, 25127, 25128,
	25129, 25130, 25131, 25132, 25133, 25134,
	25136, 25137, 25138, 25139, 25142, 25143,
	25144, 25145, 25148, 25149, 25150, 25151,
	25153, 25154, 25155, 25156, 25157, 25160,
	25164
};

new const clothesShopSkins[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311
};

new const VipSkins[] = {
	25023, 25073, 25074, 25097, 25098, 25165, 25055, 25110, 25114
};


enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{
    {"Apartment",    10000,   1,  244.1997, 305.0676, 999.1484, 270.2194}, //1
	{"Apartment", 	 30000,   2,  1434.0806, -1832.7854, 1313.5573, 270.0000},//2
	{"Apartment", 	 15000,  10, 2259.7649, -1135.8751, 1050.6328, 270.0000},//3
	{"Apartment", 	 40000,  8,  2008.8319, -1698.8461, 1165.7001, 90.0000},//4
	{"Apartment", 	 10000,  5,  2233.6501, -1114.7767, 1050.8828, 0.0000},//5
	{"Apartment", 	 15000,  1,  2217.9814, -1076.2471, 1050.4844, 90.0000},//6
	{"Low Class", 	 45000,  9,  1178.3398, -419.0833, 1234.7045, 180.0000},//7
	{"Low Class", 	 45000,  3,  828.6323, -1014.0038, 799.9664, 270.0000},//8
	{"Low Class", 	 30000,  5,  1320.1091, -167.6174, 1088.0741, 90.0000},//9
	{"Medium Class", 45000,  3,  1363.7614, -2145.6965, 1050.5886, 0.0000},//10
	{"Medium Class", 75000,  5,  2654.4524, -1023.7827, 929.9266, 180.0000},//11
	{"Medium Class", 30000,  11, 2184.1011, -1130.3905, 1128.7655, 270.0000},//12
	{"Upper Class",  30000,  10, 2269.9143, -1210.5028, 1047.5625, 90.0000},//13
	{"Upper Class",  45000,  6,  1749.6356, -1822.4457, 1000.3405, 0.0000},//14
	{"Upper Class",  15000,  12, 2324.3862, -1148.8784, 1050.7101, 0.0000},//15
	{"Upper Class",  30000,  4,  1282.0646, -1140.2067, 980.0524, 0.0000},//16
	{"Mansion", 	 350000,  1,  1834.2408, -1278.7684, 832.1602, 180.0000},//17
	{"Mansion", 	 500000, 7,  925.0102, -496.8101, 843.8953, 90.0000},//18
	{"Mansion",      2500000, 5,  1298.8682, -796.2053, 1084.0078, 0.0000},//19
	{"Special",      3000000, 1,  1412.639892, -1.787510, 1000.924377}//20
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	125000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Medium", 	175000,  2,  1520.6278, -1639.7173, 1374.5045, 180.0000,  1514.9481, -1644.1083, 1374.3365, 180.0000},
	{"Large", 	350000,  3,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriors[][bizInt] =
{
    {"Supermarket", 		  1800000, 6, -27.4377, -57.6114, 1003.5469, 0.0000},
	{"Gun Shop",    		  2400000, 6,  316.2873, -169.6470, 999.6010, 0.0000},
	{"Clothes Shop",    	  2250000, 14, 204.3860, -168.4586, 1000.5234, 0.0000},
	{"Gym",         		  1800000, 5,  772.4077, -4.7408, 1000.7291, 0.0000},
	{"Restaurant",  		  2500000, 10, 363.3276, -74.6505, 1001.5078, 315.0000},
	{"Advertisement Agency",  2025000, 3,  834.1517, 7.4096, 1004.1870, 90.0000},
	{"Club/Bar",              1425000, 11, 501.8694, -68.0046, 998.7578, 179.6117},
	{"Tool Shop",             1575000, 6, -2240.6992, 128.3009, 1035.4141, 270.0000},
	{"Dealership",            15000000, 3,  1494.4321, 1304.0353, 1093.2891, 0.0000}
};
enum matLIST
{
	Name[128],
	ModelID,
	TxdName[64],
	TextureName[64],
	Resource[32]
};

new MaterialIDs[][matLIST] =
{
	{"{6EF83C}Reset Material", 			0, 				"none", 				"none", 						"None"},
	#define PCOLORS "Material Colors"
	{"Purple",							8839,		 	"vgsecarshow",		 	"lightpurple2_32",				PCOLORS},
	{"Blue",							5774,		 	"garag3_lawn",		 	"bluestucco1",					PCOLORS},
	{"Bright Blue",						8839,		 	"vgsecarshow",		 	"lightblue2_32",				PCOLORS},
	{"Bright Green", 					8839,		 	"vgsecarshow",		 	"lightgreen2_32",				PCOLORS},
	{"Green",							19271, 			"MapMarkers", 			"green-2",						PCOLORS},
	{"Lime Green",						18749, 			"MatTextures",			"lime",							PCOLORS},
	{"Yellow",							5168,		 	"lashops6_las2",		"yellow2_128",					PCOLORS},
	{"Brighter Yellow",					18245,		 	"cw_junkyardmachin",	"Was_scrpyd_light_yellow",		PCOLORS},
	{"Orange",							18250,		 	"cw_junkbuildcs_t",		"Was_scrpyd_baler_locker",		PCOLORS},
	{"Orange 2",     					18749, 			"MatTextures", 			"SAMPOrange",					PCOLORS},
	{"Pink", 							3267,		 	"milbase",		 		"lightred2_32",					PCOLORS},
	{"Red",								18856,		 	"MatTextures",		 	"SAMPRed",						PCOLORS},
	{"Darker Red",     					19184, 			"MapMarkers", 			"red-2",						PCOLORS},
	{"Deep Red", 						5142,		 	"lashops1b_las2",		"snpdwhit2",					PCOLORS},
	{"Pitch Black",						13816,		 	"lahills_safe1",		"black16",						PCOLORS},
	{"Smoky Black",						11088,		 	"crackfactdem_sfs",		"ws_altz_wall7_top_burn",		PCOLORS},
	{"Light Gray",						8839,		 	"vgsecarshow",		 	"lightblue_64",					PCOLORS},
	{"Happy Gray",						16109,		 	"des_se1",		 		"parking2plain",				PCOLORS},
	{"Eggshell",						8675,		 	"wddngchpl02",		 	"vgschapelwall01_64",			PCOLORS},
	{"White",							4833,		 	"airprtrunway_las",		"white",						PCOLORS},

	#define PFABRICS "Printed Fabrics"
	{"Varied Green Stripes",						17511, 			"stadium_lae2",			"stadt_banner1", 		PFABRICS},
	{"Varied Purple and Green Stripes",				17511, 			"stadium_lae2",			"stadt_banner2", 		PFABRICS},
	{"Varied White, Brown and Green Stripes",		17511, 			"stadium_lae2",			"stadt_banner3", 		PFABRICS},
	{"Blue, White and Red Stripes",					9583, 			"bigshap_sfw",			"boatfunnel1_128", 		PFABRICS},
	{"Blue and White Stripes",						12850, 			"cunte_block1",			"ablusrip", 			PFABRICS},
	{"Blue, Green, White and Yellow Stripes",		5142, 			"lashops1b_las2",		"sanpedshpito", 		PFABRICS},
	{"Red And White Stripes",						3039, 			"ct_salx",				"ct_stall1", 			PFABRICS},
	{"Black, Gray, Yellow, Red",					3990, 			"lanroad",				"lakerbcol", 			PFABRICS},

	{"Red and Green Tartan",			3060, 			"paracx",				"parachute_e", 			PFABRICS},
	{"Multi-colored Squares",			3922, 			"bistro",				"Tablecloth", 			PFABRICS},
	{"Spongy Red",						10412, 			"hotel1",				"carpet_red_256", 		PFABRICS},
	{"Spongy Maroon",					14808, 			"lee_strip2",			"WH_carpet1", 			PFABRICS},
	{"Spongy Blue",						5392, 			"eastshops1_lae",		"blueshop2_LAe", 		PFABRICS},
	{"Yellow Tartan",					13003, 			"ce_racestart",			"CJ_TARTAN", 			PFABRICS},
	{"Blue Camouflage",					10631, 			"queensammo_sfs",		"ammu_camo1", 			PFABRICS},
	{"Blue Patterns",					10226, 			"sfeship1",				"CJ_CUSHION2", 			PFABRICS},
	{"Blue Patterns 2",					19447,			"all_walls",			"vgsn_scrollsgn256", 	PFABRICS},
	{"Brown Flower Pattern",			15034, 			"genhotelsave",			"cj_cushion1", 			PFABRICS},
	{"Brown Sheets",					16150, 			"ufo_bar",				"Gen_Sacki", 			PFABRICS},
	{"Floral Print",					2680, 			"cj_chris",				"CJ_Floral", 			PFABRICS},

	{"White and Blue Mattress",			12954, 			"sw_furniture",			"CJ_MATRESS2", 			PFABRICS},
	{"Used Mattress", 					1637, 			"od_beachstuff",		"lounger_matress", 		PFABRICS},
	{"Plain Matress",					2575,			"cj_hotel_poor",		"CJ_mattress",			PFABRICS},

	{"Rainbow Stripes",					3853, 			"gay_xref",				"ws_gayflag1", 			PFABRICS},
	{"American Flag",					12853, 			"cunte_gas01",			"starspangban1_256", 	PFABRICS},
	{"American Flag 2",					14782, 			"intring_gymint3",		"star_spang", 			PFABRICS},
	{"Confederate Flag",				12853, 			"cunte_gas01",			"cj_flag2", 			PFABRICS},
	{"Italian Flag",					5111, 			"ground2_las2",			"sanpedpawn1a", 		PFABRICS},

	{"Black Carpet",					17946, 			"carter_mainmap",		"mp_carter_carpet", 	PFABRICS},
	{"Gray Carpet",						14475, 			"ganghoos",				"mp_burn_carpet", 		PFABRICS},
	{"Red Carpet",						14506, 			"imy_motel",			"mp_motel_carpet1", 	PFABRICS},
	{"Red Carpet 2",					8463, 			"vgseland",				"triadcarpet2", 		PFABRICS},
	{"Black Carpet 2", 					14700, 			"vgshs2int2",			"carpet-tile", 			PFABRICS},
	{"Dark Carpet", 					14838, 			"lee_stripclub",		"cl_floornew_256", 		PFABRICS},
	{"Worn Gray Carpet", 				14701, 			"lahss2int2",			"HS1_carpet1", 			PFABRICS},
	{"Blue Rug",						11704, 			"bdupsnew",				"Bdup2_carpet", 		PFABRICS},
	{"Light Blue Fabric",				14707, 			"labig3int2",			"HS2_3Wall10", 			PFABRICS},
	{"Light Purple Fabric",				14707, 			"labig3int2",			"HS2_3Wall7", 			PFABRICS},
	{"Pink Fabric",						14707, 			"labig3int2",			"HS2_3Wall9", 			PFABRICS},
	{"Old White Fabric",				14756, 			"smallsfhs",			"wall6", 				PFABRICS},
	{"White Carpet",					14672, 			"genintintsex",			"mp_cop_floor2", 		PFABRICS},
	{"Black Carpet 3",					14808, 			"lee_strip2",			"strip_carpet2", 		PFABRICS},
	{"Yellow Carpet",					14590, 			"mafcastopfoor",		"ab_carpet01", 			PFABRICS},
	{"Old Black Carpet",				18028, 			"cj_bar2",				"GB_nastybar10", 		PFABRICS},
	{"Dark Carpet 2",					14431, 			"dr_gsnew",				"mp_gs_carpet", 		PFABRICS},
	{"Light Carpet",					14581, 			"ab_mafiasuitea", 		"carp01S", 				PFABRICS},

	{"Zebra Stripes", 					14838, 			"lee_stripclub",		"zebra_skin", 			PFABRICS},
	{"Light Blue Carpet", 				14708, 			"labig1int2",			"GB_rug01", 			PFABRICS},
	{"Fancy Rug",						11704, 			"bdupsnew",				"Bdup2_Rug", 			PFABRICS},

	{"Pink Curtain",					11707, 			"cuntcuts",				"AH_pinkcurtain", 		PFABRICS},
	{"Brown Curtain",					14710, 			"vgshm3int2",			"ah_curtains1", 		PFABRICS},
	{"Blue Curtain",					14701, 			"lahss2int2",			"HS2_Curt1", 			PFABRICS},
	{"Light Blue Curtain",				14702, 			"masmall3int2",			"HS2_Curt2", 			PFABRICS},
	{"Light Blue Curtain 2",			2559, 			"hospital",				"CJ_H_CURTAIN1", 		PFABRICS},
	{"Orange Curtain",					14701, 			"lahss2int2",			"HS2_Curt4", 			PFABRICS},
	{"Purple Curtain",					14701, 			"lahss2int2",			"HS2_Curt5", 			PFABRICS},
	{"Red Curtain",						14808, 			"lee_strip2",			"Strip_curtain", 		PFABRICS},

	#define WOODS "Wood"
	{"The Standard",					19400, 			"all_walls", 					"mp_diner_woodwall", 		WOODS},
	{"Classy Wood",						16150, 			"ufo_bar", 						"sa_wood08_128", 			WOODS},
	{"Brown Wood", 						14581, 			"ab_mafiasuitea", 				"walp45S",					WOODS},
	{"Red Wood",						13681, 			"lahillshilhs1e", 				"woodboards2", 				WOODS},
	{"Reclaimed Wood",					6094, 			"canalsg_law", 					"ws_sheetwood_clean", 		WOODS},
	{"Light Wood 1",					3881, 			"apsecurity_sfxrf", 			"CJ_WOOD1", 				WOODS},
	{"Light Wood 2",					13003, 			"ce_racestart", 				"sa_wood07_128", 			WOODS},
	{"Light Wood 3",					16377, 			"des_byofficeint", 				"CJ_LIGHTWOOD", 			WOODS},
	{"Dark Wood 1",						1515, 			"dsfs", 						"CJ_WOOD6", 				WOODS},
	{"Dark Wood 2",						11631, 			"mp_ranchcut", 					"mpCJ_WOOD_DARK", 			WOODS},
	{"Dark, Ugly Wood",					18250, 			"cw_junkbuildcs_t", 			"Was_scrpyd_shack_wall", 	WOODS},
	{"Dull, Dark Wood",					17925, 			"lae2fake_int", 				"ab_wood1", 				WOODS},
	{"Rotting Painted Wood 1",			17566, 			"contachou1_lae2",				"comptwall26", 				WOODS},
	{"Rotting Painted Wood 2",			3193, 			"cxref_desert", 				"des_bywall1", 				WOODS},
	{"Rotting Painted Wood 3",			3355, 			"cxref_savhus", 				"des_bywall2", 				WOODS},
	{"Rotting Painted Wood 4",			14700, 			"vgshs2int2", 					"ah_CRAKPLNK", 				WOODS},
	{"Very Old Wood",					12976, 			"sw_diner1", 					"telepole128", 				WOODS},
	{"Tatty Wood",						5149, 			"lasground2_las2", 				"tatty_wood_1", 			WOODS},
	{"'Fence' Wood",					5122, 			"ground3_las2", 				"fence1", 					WOODS},
	{"Fancy Diner Flooring",			3919, 			"librest", 						"DinerFloor", 				WOODS},
	{"Sleek Wood Flooring",				14771, 			"int_brothelint3", 				"GB_nastybar12", 			WOODS},
	{"Cheap Wood Flooring",				14825, 			"genintint2_gym", 				"gym_floor5", 				WOODS},
	{"Cheap, Scratched Flooring",		14709, 			"lamidint2", 					"mp_apt1_floor", 			WOODS},
	{"Fine Parquet",					14581, 			"ab_mafiasuitea", 				"wood02S",					WOODS},
	{"Wooden Mosaic",					4004, 			"civic07_lan", 					"cityhallroof", 			WOODS},
	{"Wood Square Panels",				13007, 			"sw_bankint", 					"woodfloor1", 				WOODS},

	{"Wood Planks",						16322, 			"a51_stores", 					"des_ghotwood1", 			WOODS},
	{"Aged Planks",						1219, 			"woodpanels", 					"planks01", 				WOODS},
	{"White Planks",					10152, 			"sfvictorian2", 				"pier69_ground1", 			WOODS},
	{"White Planks 2",					12960, 			"sw_church", 					"ws_vic_wood1", 			WOODS},
	{"White Planks 3",					12911, 			"sw_farm1", 					"sw_barnwood1", 			WOODS},
	{"Old White Planks",				12911, 			"sw_farm1", 					"sw_barnwood2", 			WOODS},
	{"Old White Planks 2",				4849, 			"ground3_las", 					"pierboards_la", 			WOODS},
	{"Gray Planks",						3310, 			"sw_poorhouse", 				"GB_nastybar08", 			WOODS},
	{"Old Gray Planks",					4820, 			"ground4_las", 					"adet", 					WOODS},
	{"Boardwalk",						13809, 			"lahillsground4", 				"boardwalk_la"	, 			WOODS},
	{"Wood Boards",						5134, 			"wasteland_las2", 				"floorboard256128" , 		WOODS},
	{"Light Wood Pattern",				3306, 			"cunte_house1", 				"des_ntwnwall1", 			WOODS},
	{"Dark Brown Planks",				17298, 			"weefarmcuntw", 				"sjmbigold2", 				WOODS},
	{"Creepy Planks",					12937, 			"sw_oldshack", 					"sw_cabinwall01", 			WOODS},
	{"Blue Planks",						5766, 			"capitol_lawn", 				"lasjmscruffwall3", 		WOODS},
	{"Bright Blue Planks",				5135, 			"groundb_las2", 				"sanpedock8", 				WOODS},
	{"Bright Yellow Planks",			5113, 			"lasground_las2", 				"sanpedpawn1", 				WOODS},
	{"White and Red Wood",				4830, 			"airport2", 					"sw_shedwall02", 			WOODS},
	{"White and Blue Wood",				12925, 			"sw_sheds", 					"sw_shedwall03", 			WOODS},

	{"Dull Wood Logs",					17067, 			"cw2_logcabins", 				"cw2_logwall", 				WOODS},
	{"Light Wood Logs",					11490, 			"des_ranch", 					"des_logwall", 				WOODS},
	{"Flat Logs",						13711, 			"mullho03_lahills", 			"des_flatlogs", 			WOODS},
	{"Wood Slats",						11501, 			"des_farmstuff", 				"des_woodslats1", 			WOODS},

	{"Walnut 1", 						14581, 			"ab_mafiasuitea", 				"ab_walnut",				WOODS},
	{"Walnut 2", 						14581, 			"ab_mafiasuitea", 				"ab_walnutLite",			WOODS},
	{"Brown Wood Paneling",				9583, 			"bigshap_sfw", 					"bridge_walls2_sfw", 		WOODS},
	{"Tiki Reed",						8536, 			"tikisign",  					"tikireed01_128", 			WOODS},
	{"Bamboo",							3595, 			"dingbat01_la", 				"bambowal1_LA", 			WOODS},
	{"Old Barn",						16146, 			"des_ufoinn", 					"shackdoor01", 				WOODS},
	{"Bloody wood", 					12937, 			"sw_oldshack", 					"sw_woodflloorsplat", 		WOODS},

	#define TILES "Tiles"
	{"Shiny White",						10023,			"bigwhitesfe",					"recessed_light_SF",			TILES},
	{"White and Blue",					12841,			"cos_pizzaplace",				"swimpoolside1_128",			TILES},
	{"Yellow and Blue",					5408,			"tempstuff_lae",				"examball1_LAe",				TILES},
	{"Blue Pool Tiles",					13675,			"lahillsgrounds",				"bevpool",						TILES},
	{"Better Times",					4004,			"civic07_lan",					"Bow_sub_wallshine",			TILES},
	{"Small White Tiles",				12853,			"cunte_gas01",					"sw_floor1",					TILES},
	{"Thin Wall Tiles",					17049,			"cuntwf",						"sw_walltile",					TILES},
	{"Thick Wall Tiles",				4558,			"lanlacmab_lan2",				"sl_gallerywall1",				TILES},
	{"Dirty Wall Tiles",				14700,			"vgshs2int2",					"ah_whitiles",					TILES},

	{"The Classic",						3961,			"lee_kitch",					"dinerfloor01_128",				TILES},
	{"The Classic 2",					14771,			"int_brothelint3",				"bwtilebroth",					TILES},
	{"The Classic 3", 					18082, 			"cj_barb", 						"CJ_TILES_5", 					TILES},
	{"Aged Classic",					13724,			"docg01_lahills",				"marbletile8b",					TILES},
	{"Classy Blue",						10871,			"blacksky_sfse",				"ws_slatetiles",				TILES},
	{"Dark Blue",						6351,			"rodeo02_law2",					"helmutwall1_LAw",				TILES},
	{"Classic White",					3904,			"libertyfar",					"subplat",						TILES},
	{"Aged Fancy Tiles",				5772,			"stationtunnel",				"mp_apt1_bathfloor1",			TILES},
	{"Fancy Black Tiles", 				14388, 			"dr_gsnew", 					"mp_gs_kitchfloor", 			TILES},
	{"Modern White Tiles",				10932,			"station_sfse",					"ws_stationfloor",				TILES},
	{"Modern Yellow Tiles",				10973,			"mall_sfse",					"mallfloor3",					TILES},
	{"Blue And Yellow Tiles",			1594,			"chairsntable",					"mallfloor6",					TILES},
	{"Tile Stone",						1677,			"wshxrefhse2",					"tilestone256",					TILES},
	{"Dirty Tiles",						11389,			"hubint1_sfse",					"ab_ceiling1",					TILES},
	{"Stone Tiles",						16639,			"a51_labs",						"dam_terazzo"	,				TILES},
	{"Old Black Tiles",					5815,			"lawngrnd",						"man_cellarfloor128",			TILES},
	{"Dark Tiles",						14700,			"vgshs2int2",					"AH_rykitiles",					TILES},
	{"Terra Cotta Tile",				18020,			"genintintfastb2",				"ws_terratiles",				TILES},
	{"Gray Tiles",						14706,			"labig2int2",					"ab_tile1",						TILES},
	{"Brown/Olive Green Bricks",		14756,			"smallsfhs",					"mp_carter_tilewall",			TILES},
	{"Brown Tiles",						14709,			"lamidint2",					"mp_apt1_kitchfloor",			TILES},
	{"Brown Tiles 2", 					18029, 			"genintintsmallrest", 			"GB_restaursmll06", 			TILES},
	{"Light Green Tiles", 				18029, 			"genintintsmallrest", 			"GB_restaursmll07", 			TILES},
	{"Dull Red Tiles", 					14388, 			"dr_gsnew", 					"AH_flroortile12", 				TILES},

	{"Red Stones",						13675,			"lahillsgrounds",				"sjmlahus29",					TILES},
	{"Blue Mosaic",						17562,			"coast_apts",					"otb_floor1",					TILES},
	{"Green Mosaic",					3595,			"dingbat01_la",					"mosaic1_LAwn",					TILES},
	{"Hexagon Tile Pattern",			14506,			"imy_motel",					"ab_tilehex2",					TILES},
	{"Green Formica",					11704,			"cj_kitchen",					"FORMICA2",						TILES},

	#define MARB "Building"
	{"Black Marble", 					3922, 			"bistro", 				"Marble", 							MARB},
	{"Black Marble 2",					10969, 			"scum_sfse", 			"Was_scrpyd_floor_hangar", 			MARB},
	{"Gray Marble",						4830, 			"airport2", 			"LASLACMA96", 						MARB},
	{"White Marble",					3922, 			"bistro", 				"Marble2", 							MARB},
	{"Yellow Marble",					3922, 			"bistro", 				"rest_wall4", 						MARB},
	{"White Marble Block",				16023, 			"des_trainstuff", 		"ws_stoneblock", 					MARB},

	{"Stone Wall 1",					18202, 			"w_towncs_t", 			"hatwall256hi", 					MARB},
	{"Stone Wall 2",					13724, 			"docg01_lahills", 		"des_ranchwall1", 					MARB},
	{"Stone Wall 3",					8839, 			"vgsecarshow", 			"sw_wallbrick_06", 					MARB},
	{"Stone Wall 4",					8565, 			"vgsebuild01", 			"ws_stonewall", 					MARB},
	{"Stone Wall 5",					6056, 			"venice_law", 			"stonewall_la", 					MARB},
	{"Stone Wall 6",					6057, 			"venicegb02_law", 		"stonewall3_la", 					MARB},
	{"Fancy Stones",					5113, 			"lasground_las2", 		"adeta", 							MARB},
	{"Dark Stones", 					18029, 			"genintintsmallrest", 	"GB_restaursmll05",					MARB},
	{"Yellow Stones",					16136,			"des_telescopestuff",	"stoneclad1",						MARB},

	{"White Brick Wall",				8399, 			"vgs_shops", 			"vgsclubwall05_128", 				MARB},
	{"Gray Stone Wall",					8645, 			"vegashsetx", 			"badhousewall01_128", 				MARB},
	{"Concrete Pattern",				4849, 			"ground3_las", 			"ws_bigstones", 					MARB},
	{"Gray Brick Wall",					13823, 			"lahillsground4cye", 	"GB_nastybar03", 					MARB},
	{"Fancy White Bricks",				13675, 			"lahillsgrounds", 		"bevr03b_law", 						MARB},
	{"Red Brick Wall",					8531, 			"officeground", 		"ws_redbrickold", 					MARB},
	{"Old Red Brick Wall",				5180, 			"lashops93_las2", 		"ws_oldredbrick", 					MARB},
	{"Old Red Brick Wall 2",			10864, 			"bridgeland_sfse", 		"ws_altz_wall1", 					MARB},

	{"Brick Wall 1",					8839, 			"vgsecarshow", 			"sw_brewbrick01", 					MARB},
	{"Brick Wall 2",					8390, 			"vegasemulticar", 		"ws_mixedbrick", 					MARB},
	{"Brick Wall 3",					13015, 			"sw_genstore", 			"sw_wallbrick_03", 					MARB},
	{"Brick Wall 4",					12959, 			"sw_library", 			"sw_brick05", 						MARB},
	{"Brick Wall 5",					17049, 			"cuntwf", 				"sw_brick04", 						MARB},
	{"Brick Wall 6",					12853, 			"cunte_gas01", 			"sw_brick03", 						MARB},
	{"Brick Wall 7",					4552, 			"ammu_lan2", 			"sl_lavicdtwall1", 					MARB},
	{"Brick Wall 8",					10769, 			"docks2_sfse", 			"ws_sandstone1", 					MARB},
	{"Brick Wall 9",					9683, 			"goldengate_sfw", 		"stonesandkb2_128", 				MARB},
	{"Brick Wall 10",					5418, 			"idlewood3_lae", 		"ws_sandstone2", 					MARB},
	{"Brick Wall 11",					12988, 			"sw_fact02", 			"ws_sandstone2b", 					MARB},
	{"Brick Wall 12", 					18018, 			"genintintbarb", 		"GB_midbar01", 						MARB},

	{"Black Concrete",					3975, 			"lanbloke", 			"p_floor3", 						MARB},
	{"Black Concrete 2", 				14771, 			"int_brothelint3", 		"GB_midbar15", 						MARB},
	{"Dark Stone Wall",					17545, 			"burnsground", 			"newall1-1128", 					MARB},
	{"White Concrete",					11089, 			"cf_metals_sfse", 		"ws_altz_wall8_top", 				MARB},
	{"Gray Concrete",					6052, 			"law_doontoon", 		"carpark_256128", 					MARB},
	{"Gray Concrete 2", 				14783, 			"intgarage2aint3", 		"Bow_Abattoir_Conc2", 				MARB},
	{"Concrete Block",					1214,			"metal",				"BLOCK2low",						MARB},
	{"Cracked Yellow Concrete", 		14700, 			"vgshs2int2", 			"ah_yelbadwall", 					MARB},
	{"Metal Pattern",					12984, 			"sw_block11", 			"sw_stairs1", 						MARB},
	{"Rusted Concrete",					10375,			"subshops_sfs",			"ws_rooftarmac1",					MARB},

	#define METALS "Metals"
	{"Silver Metal",					1560,			"7_11_door",			"cj_sheetmetal2",			METALS},
	{"Red Metal",						2130,			"cj_kitchen",			"CJ_RED",					METALS},
	{"Scratched Metal",					16640,			"a51",					"scratchedmetal",			METALS},
	{"Blue Paneling",					16067,			"des_stownmots1",		"corugwall1",				METALS},
	{"Red Paneling",					16067,			"des_stownmots1",		"corugwallnew6_128",		METALS},
	{"Yellow Paneling",					18265,			"w_town3cs_t",			"corugwall_sandy",			METALS},
	{"Old Purple Metal",				5126,			"imrancomp_las2",		"ws_oldpaintedblue",		METALS},
	{"Old Gray Metal",					12858,			"wiresnshit",			"ws_oldpainted",			METALS},
	{"Old White Metal",					10820,			"roadbridge_sfse",		"ws_oldpainted2",			METALS},
	{"Rusty White Metal",				10820,			"roadbridge_sfse",		"ws_oldpainted2rusty",		METALS},
	{"Dull Green Metal",				1257,			"bustopm",				"CJ_GREENMETAL",			METALS},
	{"Green Metal",						10770,			"carrier_sfse",			"ws_floor2",				METALS},
	{"Gray Metal",						10770,			"carrier_sfse",			"ws_shipmetal1",			METALS},
	{"Black Metal",						10770,			"carrier_sfse",			"ws_shipmetal3",			METALS},
	{"White Metal",						10770,			"carrier_sfse",			"ws_shipmetal4",			METALS},
	{"Light Blue Metal",				11145,			"carrierint_sfs",		"ws_shipmetal5",			METALS},
	{"White Metal Tiles",				3262,			"privatesign",			"ws_metalpanel1",			METALS},
	{"Black Metal Tiles",				9362,			"sfn_byofficeint",		"CJ_Black_metal",			METALS},
	{"Dark Metal",						970,			"fences",				"blackmetal",				METALS},
	{"Light Metal Banding",				12960,			"sw_church",			"banding3_64HV",			METALS},
	{"Brown Metal Banding",				5408,			"tempstuff_lae",		"sl_metalbndrust1",			METALS},
	{"Scratched Metal 2",				3961,			"lee_kitch",			"metal5",					METALS},
	{"Scratched Metal 3",				3961,			"lee_kitch",			"metal6",					METALS},
	{"Clean Metal Plate",				9361,			"sfn_office",			"des_facmetal",				METALS},
	{"Silver Metal 2",					1214,			"metal",				"CJ_FRAME_Glass",			METALS},
	{"Sleek Metal", 					14581, 			"ab_mafiasuitea", 		"barbersmir1", 				METALS},
	{"Metal Door", 						13022, 			"sw_block11a", 			"Bow_abbmetaldoor", 		METALS},
	{"Metal Door 2", 					12980, 			"sw_block10", 			"Was_scrpyd_door_dbl_grey", METALS},
	{"Bolted White Metal Panel",		10820,			"roadbridge_sfse",		"banding9_64HV",			METALS},
	{"Bolted Yellow Metal Panel",		5126,			"imrancomp_las2",		"banding5_64HV",			METALS},
	{"Bolted Brown Metal Panel",		3080,			"adjumpx",				"rustyboltpanel",			METALS},
	{"Bolted Black Metal",				16322,			"a51_stores",			"girder2_grey_64HV",		METALS},
	{"Bolted Red Metal",				5126,			"imrancomp_las2",		"girder2_red_64HV",			METALS},
	{"New Bolted White Metal Panel",	16322,			"a51_stores",			"dish_panel_a",				METALS},
	{"Metal Plate",						915,			"airconext",			"CJ_plating",				METALS},

	{"Gray Metal 2",					4833,			"airprtrunway_las",		"cj_sheetmetal",			METALS},
	{"Old Red Metal",					5123,			"chemgrnd_las2",		"redmetal",					METALS},
	{"Old Dark Red Metal",				946,			"bskball_standext",		"drkbrownmetal",			METALS},
	{"Old Brown Metal",					11145,			"carrierint_sfs",		"Metalox64",				METALS},
	{"Brown Rust",						12937,			"sw_oldshack",			"rustc256128",				METALS},
	{"Orange Rust", 					11395,		 	"corvinsign_sfse",		"rustb256128",				METALS},
	{"Red Rust 1",						18247,			"cw_junkyarddigcs_t",	"Was_scrpyd_rustmetal",		METALS},
	{"Red Rust 2",						10844,			"genwhse_sfse",			"Gen_Gantry_Rust",			METALS},
	{"Rusty Sheet",						10140,			"frieghter2sfe",		"sw_olddrum1",				METALS},
	{"Old Light Blue Metal",			4821,			"union_las",			"bluemetal03",				METALS},
	{"Old Dark Blue Metal",		 		5126,			"imrancomp_las2",		"bluemetal02",				METALS},
	{"Old Gray Metal 2",				9029,			"vgetrainfnce",			"Metal1_128",				METALS},
	{"Rusty Gray Metal",				17001,			"factorycuntw",			"Gen_Metal",				METALS},

	{"Corrugated Sheet",				3246,			"cxref_oldwest",		"corr_roof1",				METALS},
	{"Corrugated Sheet 2",				3925,			"weemap",				"corrRoof_64HV",			METALS},
	{"Old Corrugated Sheet",			5775,			"sunset01_lawn",		"ws_corr_metal2",			METALS},
	{"Rusty Corrugated Sheet",			9680,			"tramstatsfw",			"ws_corr_metal1",			METALS},
	{"Tin Roof Pattern",				16071,			"des_quarrybelts",		"des_oldtinroof",			METALS},

	{"Strange Metal Pattern",			16322,			"a51_stores",			"a51_metal1",				METALS},
	{"Rusty Metal Pattern",				16322,			"a51_stores",			"Gen_Freight",				METALS},
	{"Rusty Metal Pattern 2",			10281,			"michgar",				"Metal2_256128",			METALS},
	{"White and Blue Metal",			3961,			"lee_kitch",			"metal2",					METALS},

	{"Metal Walkway Pattern",			16640,			"a51",					"sl_metalwalk",				METALS},
	{"Perforated Metal Plate",			8954,			"vgsespras",			"sf_spray_floor2",			METALS},
	{"Checker Plate",					9583,			"bigshap_sfw",			"shipfloor_sfw",			METALS},
	{"Checker Plate 2",					5138,			"ground_las2",			"metpat64"	,				METALS},
	{"Checker Plate 3",					964, 			"cj_crate_will",		"CJ_FLIGHT_CASE", 			METALS},

	#define POSTERS "Paintings"
	{"The Discharger",					13761,			"lahills_whisky",			"discharger",			POSTERS},
	{"Slam It In",						4833,			"airprtrunway_las",			"bobo_2",				POSTERS},
	{"MC Club",							5733,			"melrose08_lawn",			"base5_1",				POSTERS},
	{"Mad Dog",							6357,			"sunstrans_law2",			"dogbill01",			POSTERS},
	{"Love Fist Poster",				6354,			"sunset03_law2",			"billLA01",				POSTERS},
	{"Dandell Poster",					6354,			"sunset03_law2",			"billLA02",				POSTERS},
	{"Map of San Andreas",   			16644,			"a51_detailstuff",			"a51_map",				POSTERS},
	{"Candy Suxxx",						6357,			"sunstrans_law2",			"SunBillB05",			POSTERS},
	{"Candy Suxxx 2",					2254,			"picture_frame_clip",		"CJ_PAINTING9",			POSTERS},
	{"Inquisitive Man",					1583,			"targets",					"target1",				POSTERS},
	{"Inquisitive Woman",				1583,			"targets",					"target2",				POSTERS},
	{"Inquisitive Woman 2",				1583,			"targets",					"target3",				POSTERS},
	{"Summer Sky",						3925,			"weemap",					"skyclouds",			POSTERS},
	{"Jesus Saves",						17700,			"gangblok1_lae2",			"mural01_LA",			POSTERS},
	{"Gant Bridge",						10434,			"hashblock2b_sfs",			"ws_mural2",			POSTERS},
	{"San Fierro Skyline",				10439,			"hashblock3_sfs",			"ws_mural1",			POSTERS},
	{"Black And White Mural",			5142,			"lashops1b_las2",			"mural03_LA",			POSTERS},
	{"Colored Mural",					5134,			"wasteland_las2",			"mural05_LA",			POSTERS},
	{"Gant Bridge 2",					2254,			"picture_frame_clip",		"CJ_PAINTING24",		POSTERS},
	{"SF Pointy Building",				11631,			"mp_ranchcut",				"CJ_PAINTING20",		POSTERS},
	{"Santa Maria Lifeguard",			2254,			"picture_frame_clip",		"CJ_PAINTING12",		POSTERS},
	{"Seaside Painting",				11631,			"mp_ranchcut",				"CJ_PAINTING6",			POSTERS},
	{"Bone County",						2254,			"picture_frame_clip",		"CJ_PAINTING26",		POSTERS},
	{"Aircraft Photos",					16407,			"des_airfieldhus",			"plane_photos1",		POSTERS},
	{"Yellow Car",						2254,			"picture_frame_clip",		"CJ_PAINTING2",			POSTERS},
	{"Los Santos",						2254,			"picture_frame_clip",		"CJ_PAINTING3",			POSTERS},
	{"Pier Lights",						2254,			"picture_frame_clip",		"CJ_PAINTING4",			POSTERS},
	{"San Fierro",						2267,			"picture_frame",			"CJ_PAINTING14",		POSTERS},
	{"Sunset Bridge",					2267,			"picture_frame",			"CJ_PAINTING30",		POSTERS},
	{"San Fierro Bridge",				2267,			"picture_frame",			"CJ_PAINTING28",		POSTERS},
	{"Landscape 1",						2267,			"picture_frame",			"CJ_PAINTING11",		POSTERS},
	{"Landscape 2",						2267,			"picture_frame",			"CJ_PAINTING23",		POSTERS},
	{"Landscape 3",						2267,			"picture_frame",			"CJ_PAINTING35",		POSTERS},
	{"Landscape 4",						2267,			"picture_frame",			"CJ_PAINTING37",		POSTERS},
	{"Palms",							2254,			"picture_frame_clip",		"CJ_PAINTING8",			POSTERS},
	{"Bowling",							2254,			"picture_frame_clip",		"CJ_PAINTING27",		POSTERS},
	{"Sailships",						2267,			"picture_frame",			"CJ_PAINTING34",		POSTERS},
	{"Ship",							2267,			"picture_frame",			"CJ_PAINTING19",		POSTERS},
	{"Ship 2",							2267,			"picture_frame",			"CJ_PAINTING36",		POSTERS},
	{"Beach Sunset",					14803,			"BDupsNew",					"Bdup2_poster",			POSTERS},
	{"Tropical 1",						11707,			"cuntcuts",					"GB_canvas17",			POSTERS},
	{"Tropical 2",						11707,			"cuntcuts",					"GB_canvas18",			POSTERS},
	{"Water Droplet",					14708,			"labig1int2",				"GB_restaursmll53",		POSTERS},
	{"College Friends",					14708,			"labig1int2",				"GB_photo01",			POSTERS},
	{"Casually Dressed Woman",			14708,			"labig1int2",				"GB_photo02",			POSTERS},
	{"Cat 1",							2267,			"picture_frame",			"CJ_PAINTING1",			POSTERS},
	{"Cat 2",							2267,			"picture_frame",			"CJ_PAINTING7",			POSTERS},
	{"Flowers 1",						2267,			"picture_frame",			"CJ_PAINTING18",		POSTERS},
	{"Flowers 2",						2267,			"picture_frame",			"CJ_PAINTING29",		POSTERS},
	{"Leafs",							2267,			"picture_frame",			"CJ_PAINTING21",		POSTERS},
	{"Strange Mosaic Art",				2267,			"picture_frame",			"CJ_PAINTING16",		POSTERS},
	{"Modern Art",						2254,			"picture_frame_clip",		"CJ_PAINTING15",		POSTERS},
	{"Modern Art 2",					14708,			"labig1int2",				"HS_art",				POSTERS},
	{"Unknown Text",					11631,			"mp_ranchcut",				"CJ_PAINTING22",		POSTERS},

	#define WALLPAPERS "Wallpapers"
	{"Purple Wallpaper",					17925,			"lae2fake_int",			"burglry_wall4",			WALLPAPERS},
	{"Turquoise Wallpaper",					5706,			"ci_studio5",			"tw@t_wall1",				WALLPAPERS},
	{"White Wall With Blue Border",			8391,			"ballys01",				"ballywall01_64",			WALLPAPERS},
	{"Dirty White Wall",					5135,			"groundb_las2",			"snpedwar2",				WALLPAPERS},
	{"Yellow and Orange Wall",				8639,			"chinatownmall",		"ctmall15_128",				WALLPAPERS},
	{"Cheap Blue Paint",					5787,			"melrose02_lawn",		"LAbluewall",				WALLPAPERS},
	{"Cheap Green Paint",					5787,			"melrose02_lawn",		"LAgreenwall",				WALLPAPERS},
	{"Cheap Red Paint",						5787,			"melrose02_lawn",		"LAredwall",				WALLPAPERS},
	{"White Concrete Wall",					8675,			"wddngchpl02",			"vgschapelwall01_64",		WALLPAPERS},
	{"Pink Concrete wall",					8401,			"vgshpground",			"vegaspawnwall_128",		WALLPAPERS},
	{"Brown Concrete wall",					16150,			"ufo_bar",				"brwall_128",				WALLPAPERS},
	{"Grey Concrete wall",					6286,			"santamonhus1",			"studwalltop_law",			WALLPAPERS},
	{"Light Gray Concrete Wall",			4981,			"wiresetc2_las",		"lasunion7",				WALLPAPERS},
	{"Peeling Paint 1",						11389,			"hubint1_sfse",			"ws_peeling_ceiling1_BIG",	WALLPAPERS},
	{"Peeling Paint 2", 					17566,			"contachou1_lae2",		"comptwall27",				WALLPAPERS},
	{"Peeling Paint 3",						17566,			"contachou1_lae2",		"ws_peeling2",				WALLPAPERS},
	{"Peeling Paint 4",						11092,			"burgalrystore_sfse",	"ws_peeling_ceiling2",		WALLPAPERS},
	{"Painted Concrete 1",					14783,			"intgarage2aint3",		"comptwall3",				WALLPAPERS},
	{"Painted Concrete 2",					14700,			"vgshs2int2",			"ah_BADCEIL",				WALLPAPERS},
	{"Painted Concrete 3",					14700,			"vgshs2int2",			"ah_RFPLSTR",				WALLPAPERS},
	{"Painted Concrete 4",					14700,			"vgshs2int2",			"ah_grnplstr",				WALLPAPERS},

	{"Painted Tiles",						14701,			"lahss2int2",			"HS1_Kwall2",				WALLPAPERS},
	{"Low Wood Paneling",					14708,			"labig1int2",			"GB_restaursmll32",			WALLPAPERS},
	{"Low Green Tile Paneling",				14709,			"lamidint2",			"mp_apt1_bathtiles",		WALLPAPERS},
	{"Wood Paneling 1",						14709,			"lamidint2",			"mp_apt1_roomwall",			WALLPAPERS},
	{"Wood Paneling 2",						14709,			"lamidint2",			"mp_apt1_woodpanel",		WALLPAPERS},
	{"Wood Paneling 3",						14777,			"int_casinoint3",		"GB_midbar09",				WALLPAPERS},
	{"Wood Paneling 4", 					18029, 			"genintintsmallrest", 	"GB_restaursmll09",			WALLPAPERS},
	{"Crosses w/ Wood Border",				18018,			"genintintbarb",		"GB_midbar07",				WALLPAPERS},
	{"Fancy Paneling",						14431,			"dr_gsnew",				"mp_gs_wall",				WALLPAPERS},
	{"Painted Concrete 5",					14388, 			"dr_gsnew", 			"mp_gs_wall1",				WALLPAPERS},
	{"Dark Bordered Wallpaper",				14388, 			"dr_gsnew", 			"mp_gs_libwall",			WALLPAPERS},

	{"Orange Wallaper", 					14710,			"vgshm3int2",			"HSV_2carpet1",				WALLPAPERS},
	{"Red Wallpaper", 						14703,			"vghsb3int2",			"HS2_3Carpet1",				WALLPAPERS},
	{"Bright Artex Pattern",				11704,			"bdupsnew",				"Bdup2_Artex",				WALLPAPERS},
	{"Fancy Red Dragon Design",				3533,			"triadprops_lvs",		"walpaper_dragn",			WALLPAPERS},
	{"Slight Purple Artex Pattern",			14710,			"vgshm3int2",			"HS2_Artex2",				WALLPAPERS},
	{"Green Artex Pattern",					14701,			"lahss2int2",			"HS2_Artex6",				WALLPAPERS},
	{"White Artex Pattern",					14701,			"lahss2int2",			"HS2_Artex3",				WALLPAPERS},
	{"Green Stripes",						1675,			"wshxrefhse",			"washdecowall3256",			WALLPAPERS},

	{"Wallpaper 1",						11704,			"bdupsnew",				"Bdup2_wallpaper", 			WALLPAPERS},
	{"Wallpaper 2",						11704,			"bdupsnew",				"Bdup2_wallpaperB",			WALLPAPERS},
	{"Wallpaper 3",						11707,			"cuntcuts",				"GB_tile01",				WALLPAPERS},
	{"Wallpaper 4",						14710,			"vgshm3int2",			"HSV_3wall3",				WALLPAPERS},
	{"Wallpaper 5",						14701,			"lahss2int2",			"HS1_wall2",				WALLPAPERS},
	{"Wallpaper 6",						14701,			"lahss2int2",			"HS1_wall3",				WALLPAPERS},
	{"Wallpaper 7",						14701,			"lahss2int2",			"HS1_wall4",				WALLPAPERS},
	{"Wallpaper 8",						14712,			"lahss2bint2",			"HS3_wall2",				WALLPAPERS},
	{"Wallpaper 9",						14712,			"lahss2bint2",			"HS1_2Wall2",				WALLPAPERS},
	{"Wallpaper 10",					14702,			"masmall3int2",			"HS3_wall3",				WALLPAPERS},
	{"Wallpaper 11",					14702,			"masmall3int2",			"HS3_wall5",				WALLPAPERS},
	{"Wallpaper 12",					14702,			"masmall3int2",			"HS3_wall6",				WALLPAPERS},
	{"Wallpaper 13",					14703,			"vghsb3int2",			"HS2_2Wall2",				WALLPAPERS},
	{"Wallpaper 14",					14703,			"vghsb3int2",			"HS2_3Wall1",				WALLPAPERS},
	{"Wallpaper 15",					14703,			"vghsb3int2",			"HS4_Wall7",				WALLPAPERS},
	{"Wallpaper 16",					14709,			"lamidint2",			"mp_apt1_kitchwallpaper",	WALLPAPERS},
	{"Wallpaper 17",					14707,			"labig3int2",			"WH_walls",					WALLPAPERS},
	{"Wallpaper 18",					14711,			"vgshm2int2",			"HS2_4wall1",				WALLPAPERS},
	{"Wallpaper 19",					15034,			"genhotelsave",			"HS2_2Wall4",				WALLPAPERS},
	{"Wallpaper 20",					14590,			"mafcastopfoor",		"donut_wall1",				WALLPAPERS},
	{"Wallpaper 21",					5727,			"sunrise04_lawn",		"fredwall2_LAwN",			WALLPAPERS},
	{"Wallpaper 22",					14702,			"masmall3int2",			"HS3_wall4",				WALLPAPERS},

	#define MISC "Misc"
	{"Graffiti",						18200, 			"w_town2cs_t", 			"Bow_door_graffiti_128", 	MISC},
	{"Chinese paint",					5716, 			"sunrise02_lawn", 		"manndoor_law",  			MISC},
	{"Phone Sign",						1229, 			"signs",				"phonesign_128",  			MISC},
	{"Parking Sign",					1229, 			"signs", 				"NoParking2_128",  			MISC},
	{"Pro Laps",						6351, 			"rodeo02_law2", 		"prolsign01_LA",  			MISC},
	{"SPAVCEY", 						5771, 			"melrose11_lawn", 		"melrsign08_LA", 			MISC},
	{"US Flag", 						9593, 			"hosbibalsfw", 			"dt_cops_US_flag", 			MISC},
	{"Presidio", 						9259, 			"presidio01_sfn", 		"stainwin_law", 			MISC},
	{"Fading Yellow",					9494,			"chinatownsfe",			"chtown4_sf",				MISC},
	{"Fading Blue", 					9494,			"chinatownsfe",			"chtown6_sf",				MISC},
	{"Fading Green",					9494,			"chinatownsfe",			"chtown8_sf",				MISC},
	{"Hay",								12911,			"sw_farm1",				"forestfloorbranch256",		MISC},
	{"Hay and Wood",					12911,			"sw_farm1",				"sw_barnfloor1",			MISC},
	{"Garage Door",						5138,			"ground_las2",			"alleydoor8",				MISC},
	{"Flamingos",						8488,			"flamingo1",			"flmngo01_256",				MISC},
	{"Wood Framed Windows",				14771,			"int_brothelint3",		"GB_nastybar13",			MISC},
	{"White Framed Windows",			14710,			"vgshm3int2",			"kit_windo_12",				MISC},
	{"Creepy Old Window",				14700,			"vgshs2int2",			"ah_FLKWIN",				MISC},
	{"Fancy Window",					14710,			"vgshm3int2",			"windo_blinds",				MISC},
	{"Blue Material",					14770,			"genintgenintint3",		"GB_midbar04",				MISC},
	{"Blue Material 2",					14771,			"int_brothelint3",		"GB_midbar10",				MISC},
	{"Black Material",					15046, 			"svcunthoose",			"csGarageTrolley01psd",		MISC},
	{"Bordered Black Material",			15046,			"svcunthoose",			"csheistbox01",				MISC},
	{"Red Cushions",					14838,			"lee_stripclub",		"Strip_bar_wall1",			MISC},
	{"Funky 1",							14808,			"lee_strip2",			"strip_neon_Curtain",		MISC},
	{"Funky 2",							14808,			"lee_strip2",			"strip_neon_flat",			MISC},
	{"Glass Wall 1",					16639,			"a51_labs",				"ws_trainstationwin1",		MISC},
	{"Glass Wall 2",					10973,			"mall_sfse",			"ws_trainstationwin2",		MISC},
	{"Glass 1",							1649,			"wglass",				"carshowwin2",				MISC},
	{"Glass 2",							5722,			"sunrise01_lawn",		"plainglass",				MISC},
	{"Water",							3947,			"rczero_track",			"waterclear256",			MISC},
	{"Snow",							3914,			"snow",					"mp_snow",					MISC},
	{"Blank",							1337,			"none",					"none",						MISC},

	{"Classic Window",     				15048,  		 "labigsave", "AH_windows",					MISC},
	{"Wood Framed Simple Window",   	14661,   		"int_tatoo", "mp_shop_window",		MISC},
	{"Metal Framed Window",      		14495,   		"sweetshall", "mcstraps_window",		MISC},
	{"Metal Framed Black Windows",   	14736,   		"whorerooms", "AH_cheapwindow",	MISC},
	{"Door 'Males Only'",      			18008,   		"intclothesa", "CJ_VICT_DOOR",			MISC},
	{"Door 'Females Only'",      		18008,   		"intclothesa", "CJ_VICT_DOOR2",		MISC},
	{"Gold",            				14707,   		"labig3int2", "gold128",						MISC},
	{"Gold 2",         					14607, "triad_main", "buddha_gold",						MISC},
	{"Booger Green ",     				19527,   "Cauldron1", "AlienLiquid1",					MISC},
	{"Fading Dark Blue",      			14639,   "traidman", "ab_aquarium",					MISC},
	{"Glass 3",         				14755,   "sfhss2", "CJ_FRAME_Glass",						MISC},
	{"Glass 4",        					1978,   "kbroul1", "shelf_glas",							MISC},
	{"Dirty Glass",         			914,   "industrialext", "CJ_GEN_GLASS2",				MISC},
	{"Dirty Glass 2",    				10713,   "gayclub_sfs", "CJ_GEN_GLASS2",				MISC},
	{"Black Rubber",         			18018,   "genintintbarb", "CJ_BLACK_RUB2",			MISC},
	{"White Formica",      				1770,   "cj_tables", "FORMICA1",						MISC},
	{"Water 2",         				18742, "MatTextures", "waterclear256",					MISC},
	{"Water 3",         				19841, "vegaswaterfall", "newaterfal1_256",				MISC},
	{"Unnamed Mesh",         			3280, "country_breakable", "ws_castironwalk",		MISC},
	{"Camouflage Net",     				2068, "cj_ammo_net", "CJ_cammonet",					MISC},
	{"Fading Yellow Glass" ,     		19197,"EnExMarkers", "enex",						MISC},
	{"Basket Pattern 1",   				8534, "tikimotel", "sa_wood01_128",					MISC},
	{"Basket Pattern 2",   				8534, "tikimotel", "sa_wood03_128",					MISC},
	{"Basket Pattern 3",   				8534, "tikimotel", "sa_wood04_128",					MISC},
	{"Transperancy",         			18888, "ForceFields", "white",						MISC},


	{"Unnamed Ceiling 1",      11312,   "carshow_sfse", "ws_officy_ceiling",			MISC},
	{"Unnamed Ceiling 2",      18007,   "int_cutbar3", "ceilingtile1_128",			MISC},
	{"Unnamed Ceiling 3",      18026,   "scummy", "ceiling_256",				MISC},
	{"Unnamed Ceiling 4",      18038,   "vegas_munation", "gun_ceiling1",			MISC},
	{"Unnamed Ceiling 5",      18038,   "vegas_munation", "gun_ceiling2",			MISC},
	{"Unnamed Ceiling 6",      18038,   "vegas_munation", "gun_ceiling3",			MISC},
	{"Unnamed Ceiling 7",      14534,   "ab_wooziea", "dt_office_roof",			MISC},
	{"Unnamed Ceiling 8",      14526, "sweetsmain", "ah_whitpanelceil",			MISC},
	{"Unnamed Ceiling 9",      15042,   "svsfsm", "AH_walltile2",				MISC},
	{"Unnamed Ceiling 10",      18045,   "gen_munation", "mp_diner_ceilingdirt",		MISC},
	{"Dark Wood Border",      14431,   "dr_gsnew", "mp_gs_border",				MISC},
	{"Light Wood Border",      14431,   "dr_gsnew", "mp_gs_border1",				MISC},
	{"Old Wood Panel",      14700,   "vgshs2int2", "AH_oldwdpan",				MISC},
	{"Wood Panel",         14431,   "dr_gsnew", "mp_gs_woodpanel",				MISC},
	{"Wood Panel 2",         14750,   "sfhsm2", "ah_pnwainscot3",				MISC},
	{"Wood Panel 3",         15048,   "labigsave", "AH_barpanelM",				MISC},
	{"Wood Panel 4",         14748,   "sfhsm1", "ah_pnwainscot",				MISC},
	{"Wood Panel 5",         14735,   "newcrak", "AH_wdpanscum",				MISC},
	{"Wood Panel 6",         14853,   "gen_pol_vegas", "mp_cop_panel",			MISC},
	{"Wood Panel 7",         14789,   "ab_sfgymmain", "ab_panelWall1",			MISC},
	{"Wood Panel 8",         14789,   "ab_sfgymmain", "ab_panelWall2",			MISC},
	{"Perforated Wood",      18026, "scummy", "CJ_BACK_BOARD",				MISC},
	{"Funky 3",         14832,   "lee_stripclub", "mirror_ref1",				MISC},
	{"Unnamed something 2",      1389, "cranes_dyn2", "ws_sheetsteel",			MISC},
	{"Unnamed something 3",      1824,   "gamingtble", "crapside_128",			MISC},
	{"Unnamed Something 4",      2788,   "pizza_furn", "CJ_CORD",				MISC},
	{"Black Leather",      1753,   "cj_sofa", "CJ-COUCHL2",					MISC},
	{"Brown Leather",      1753,   "cj_sofa", "CJ-COUCHL1",					MISC},
	{"Red Leather",         1770,   "cj_tables", "CJ_RED_LEATHER",				MISC},
	{"Pink 'Leather'",      2487,   "rc_shop_hanger", "CJ_kite2",				MISC},
	{"Blue 'Leather'",      2487,   "rc_shop_hanger", "CJ_kite3",				MISC},
	{"Unnamed Concrete Wall 1",   17925,   "lae2fake_int", "ab_wall3",			MISC},
	{"Unnamed Concrete Wall 2",   18060,   "mp_diner2", "mp_diner_wall",			MISC},
	{"Unnamed Material",      13594, "kickstart", "ah_bluBADWL",				MISC},
	{"Red Square",         1898, "kb_wheel1", "wheel_o_2",					MISC},
	{"Green Square",         1898, "kb_wheel1", "wheel_o_2f",				MISC},
	{"Light Green Square",      1898, "kb_wheel1", "wheel_o_2b",				MISC},
	{"Blue Square",         1898, "kb_wheel1", "wheel_o_2c",					MISC},
	{"Light Blue Square",      1898, "kb_wheel1", "wheel_o_2d",				MISC},
	{"Yellow Square",      1898, "kb_wheel1", "wheel_o_2e",					MISC},
	{"Unnamed Asian Wall",      14620, "triad_bar", "triad_decor1",				MISC},
	{"Unnamed Red Something",   6989, "vgnfremnt1", "casinolights4_128",			MISC},
	{"Unnamed Blue Something",   6989, "vgnfremnt1", "casinolightsblu_128",			MISC},
	{"Unnamed Yellow Something",   6989, "vgnfremnt1", "casinolightsyel_128",		MISC},
	{"Funky Red Tiles",      6989, "vgnfremnt1", "casinolights9_256",			MISC},
	{"Unnamed PC Screen 1",      9822, "ship_brijsfw", "ship_screen1sfw",			MISC},
	{"Unnamed PC Screen 2",      9822, "ship_brijsfw", "ship_greenscreen1",			MISC},
	{"TV Screen",         1781, "cj_tv", "CJ_TV_SCREEN",					MISC},
	{"TV Noise",         14640, "chinese_furn", "ab_tv_noise",				MISC},
	{"Empty Golden Frame", 6989, "vgnfremnt1", "goldframe_256",				MISC},
	{"Blood",         19836, "particle", "bloodpool_64",					MISC},
	{"Blood 2",         18067, "intclothes_acc", "mp_cloth_vicrug",				MISC},
	{"Unnamed Creepy Concrete",   14888, "gf6", "mp_gimp_basewall",				MISC},
	{"Seeing Eye",         14839, "lee_strippriv", "Strip_Sign12",				MISC},
	{"Unnamed Glass 1",      2176, "casino_props", "flameOptic",				MISC},
	{"Unnamed Glass 2",      2176, "casino_props", "tubelite",				MISC}
};
enum MAT_COLORS
{
	ColorHex,
	ColorName[32]
};
new const MaterialColors[][MAT_COLORS] =
{
	{0, "none"},
	{0xFFF0F8FF, "Alice Blue"},
	{0xFFFAEBD7, "Antique White"},
	{0xFF00FFFF, "Aqua"},
	{0xFF7FFFD4, "Aquamarine"},
	{0xFFF0FFFF, "Azure"},
	{0xFFF5F5DC, "Beige"},
	{0xFFFFE4C4, "Bisque"},
	{0xFF000000, "Black"},
	{0xFFFFEBCD, "Blanched Almond"},
	{0xFF0000FF, "Blue"},
	{0xFF8A2BE2, "Blue Violet"},
	{0xFFA52A2A, "Brown"},
	{0xFFDEB887, "Burly Wood"},
	{0xFF5F9EA0, "Cadet Blue"},
	{0xFF7FFF00, "Chartreuse"},
	{0xFFD2691E, "Chocolate"},
	{0xFFFF7F50, "Coral"},
	{0xFF6495ED, "Cornflower Blue"},
	{0xFFFFF8DC, "Cornsilk"},
	{0xFFDC143C, "Crimson"},
	{0xFF00FFFF, "Cyan"},
	{0xFF00008B, "Dark Blue"},
	{0xFF008B8B, "Dark Cyan"},
	{0xFFB8860B, "Dark Goldenrod"},
	{0xFFA9A9A9, "Dark Gray"},
	{0xFF006400, "Dark Green"},
	{0xFFBDB76B, "Dark Khaki"},
	{0xFF8B008B, "Dark Magenta"},
	{0xFF556B2F, "Dark Olive Green"},
	{0xFFFF8C00, "Dark Orange"},
	{0xFF9932CC, "Dark Orchid"},
	{0xFF8B0000, "Dark Red"},
	{0xFFE9967A, "Dark Salmon"},
	{0xFF8FBC8F, "Dark Sea Green"},
	{0xFF483D8B, "Dark Slate Blue"},
	{0xFF2F4F4F, "Dark Slate Gray"},
	{0xFF00CED1, "Dark Turquoise"},
	{0xFF9400D3, "Dark Violet"},
	{0xFFFF1493, "Deep Pink"},
	{0xFF00BFFF, "Deep Sky Blue"},
	{0xFF696969, "Dim Gray"},
	{0xFF1E90FF, "Dodger Blue"},
	{0xFFB22222, "Firebrick"},
	{0xFFFFFAF0, "Floral White"},
	{0xFF228B22, "Forest Green"},
	{0xFFFF00FF, "Fuchsia"},
	{0xFFDCDCDC, "Gainsboro"},
	{0xFFF8F8FF, "Ghost White"},
	{0xFFFFD700, "Gold"},
	{0xFFDAA520, "Goldenrod"},
	{0xFF808080, "Gray"},
	{0xFF008000, "Green"},
	{0xFFADFF2F, "Green Yellow"},
	{0xFFF0FFF0, "Honeydew"},
	{0xFFFF69B4, "Hot Pink"},
	{0xFFCD5C5C, "Indian Red"},
	{0xFF4B0082, "Indigo"},
	{0xFFFFFFF0, "Ivory"},
	{0xFFF0E68C, "Khaki"},
	{0xFFE6E6FA, "Lavender"},
	{0xFFFFF0F5, "Lavender Blush"},
	{0xFF7CFC00, "Lawn Green"},
	{0xFFFFFACD, "Lemon Chiffon"},
	{0xFFADD8E6, "Light Blue"},
	{0xFFF08080, "Light Coral"},
	{0xFFE0FFFF, "Light Cyan"},
	{0xFFFAFAD2, "Light Goldenrod Yellow"},
	{0xFFD3D3D3, "Light Gray"},
	{0xFF90EE90, "Light Green"},
	{0xFFFFB6C1, "Light Pink"},
	{0xFFFFA07A, "Light Salmon"},
	{0xFF20B2AA, "Light Sea Green"},
	{0xFF87CEFA, "Light Sky Blue"},
	{0xFF778899, "Light Slate Gray"},
	{0xFFB0C4DE, "Light Steel Blue"},
	{0xFFFFFFE0, "Light Yellow"},
	{0xFF00FF00, "Lime"},
	{0xFF32CD32, "Lime Green"},
	{0xFFFAF0E6, "Linen"},
	{0xFFFF00FF, "Magenta"},
	{0xFF800000, "Maroon"},
	{0xFF66CDAA, "Medium Aquamarine"},
	{0xFF0000CD, "Medium Blue"},
	{0xFFBA55D3, "Medium Orchid"},
	{0xFF9370DB, "Medium Purple"},
	{0xFF3CB371, "Medium Sea Green"},
	{0xFF7B68EE, "Medium Slate Blue"},
	{0xFF00FA9A, "Medium Spring Green"},
	{0xFF48D1CC, "Medium Turquoise"},
	{0xFFC71585, "Medium Violet Red"},
	{0xFF191970, "Midnight Blue"},
	{0xFFF5FFFA, "Mint Cream"},
	{0xFFFFE4E1, "Misty Rose"},
	{0xFFFFE4B5, "Moccasin"},
	{0xFFFFDEAD, "Navajo White"},
	{0xFF000080, "Navy"},
	{0xFFFDF5E6, "Old Lace"},
	{0xFF808000, "Olive"},
	{0xFF6B8E23, "Olive Drab"},
	{0xFFFFA500, "Orange"},
	{0xFFFF4500, "Orange Red"},
	{0xFFDA70D6, "Orchid"},
	{0xFFEEE8AA, "Pale Goldenrod"},
	{0xFF98FB98, "Pale Green"},
	{0xFFAFEEEE, "Pale Turquoise"},
	{0xFFDB7093, "Pale Violet Red"},
	{0xFFFFEFD5, "Papaya Whip"},
	{0xFFFFDAB9, "Peach Puff"},
	{0xFFCD853F, "Peru"},
	{0xFFFFC0CB, "Pink"},
	{0xFFDDA0DD, "Plum"},
	{0xFFB0E0E6, "Powder Blue"},
	{0xFF800080, "Purple"},
	{0xFFFF0000, "Red"},
	{0xFFBC8F8F, "Rosy Brown"},
	{0xFF4169E1, "Royal Blue"},
	{0xFF8B4513, "Saddle Brown"},
	{0xFFFA8072, "Salmon"},
	{0xFFF4A460, "Sandy Brown"},
	{0xFF2E8B57, "Sea Green"},
	{0xFFFFF5EE, "SeaShell"},
	{0xFFA0522D, "Sienna"},
	{0xFFC0C0C0, "Silver"},
	{0xFF87CEEB, "Sky Blue"},
	{0xFF6A5ACD, "Slate Blue"},
	{0xFF708090, "Slate Gray"},
	{0xFFFFFAFA, "Snow"},
	{0xFF00FF7F, "Spring Green"},
	{0xFF4682B4, "Steel Blue"},
	{0xFFD2B48C, "Tan"},
	{0xFF008080, "Teal"},
	{0xFFD8BFD8, "Thistle"},
	{0xFFFF6347, "Tomato"},
	{0xFF40E0D0, "Turquoise"},
	{0xFFEE82EE, "Violet"},
	{0xFFF5DEB3, "Wheat"},
	{0xFFFFFFFF, "White"},
	{0xFFF5F5F5, "White Smoke"},
	{0xFFFFFF00, "Yellow"},
	{0xFF9ACD32, "Yellow Green"}
};
new const g_FurnitureTypes[][] = {
	"Kitchen",
	"Tables",
	"Chairs/Couches",
	"Shelves",
	"Bathroom",
	"Bedroom",
	"Cabinets",
	"Electronics",
	"Plants",
	"Trashcans",
	"Doors",
	"Carpets",
	"Frames",
	"Miscellaneous",
	"Wall",
	"Special"
};
enum e_Furniture
{
	fID,
	fExists,
	fHouseID,
	fModel,
	Float:fSpawn[6],
	fInterior,
	fWorld,
	fCode, // Safe code
	fMoney, // Safe money
	fSafeOpen,
	fDoorOpen,
	fObject,
	fEdit,
	Text3D:fText,
	fMaterial[3],
	fMatColour[3],
};
enum e_FurnitureList
{
	e_ModelCategory,
	e_ModelName[32],
	e_ModelID,
	e_ModelPrice
};
new Furniture[MAX_FURNITURE][e_Furniture];
enum {
	FURNITURE_KITCHEN,
	FURNITURE_TABLES,
	FURNITURE_CHAIRS,
	FURNITURE_SHELVES,
	FURNITURE_BATHROOM,
	FURNITURE_BEDROOM,
	FURNITURE_CABINETS,
	FURNITURE_ELECTRIC,
	FURNITURE_PLANTS,
	FURNITURE_TRASH,
	FURNITURE_DOORS,
	FURNITURE_CARPETS,
	FURNITURE_FRAMES,
	FURNITURE_MISC,
	FURNITURE_WALL,
	FURNITURE_SPECIAL,
	FURNITURE_EFFECT
};
new const g_FurnitureList[][e_FurnitureList] =
{
	{FURNITURE_KITCHEN,  "CJ_KITCH1_FRIDGE",     2147,  2000},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_COOKER",     2170,  1000},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_SINK",       2336,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_WASHER",     2337,  400},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_L",          2158,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_M",          2334,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_R",          2335,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH1_CORNER",     2338,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_FRIDGE",     2131,  450},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_SINK",       2132,  550},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_COOKER",     2339,  1000},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_WASHER",     2340,  400},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_L",          2141,  1000},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_M",          2134,  1000},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_R",          2133,  1000},
	{FURNITURE_KITCHEN,  "CJ_KITCH2_CORNER",     2341,  550},
	{FURNITURE_KITCHEN,  "CJ_K3_COOKER",         2135,  2000},
	{FURNITURE_KITCHEN,  "CJ_K3_SINK",           2136,  450},
	{FURNITURE_KITCHEN,  "CJ_K3_LOW_UNIT1",      2138,  1000},
	{FURNITURE_KITCHEN,  "CJ_K3_LOW_UNIT2",      2139,  1000},
	{FURNITURE_KITCHEN,  "CJ_K3_LOW_UNIT3",      2137,  1000},
	{FURNITURE_KITCHEN,  "CJ_K3_TALL_UNIT1",     2140,  400},
	{FURNITURE_KITCHEN,  "CJ_K3_C_UNIT",         2305,  400},
	{FURNITURE_KITCHEN,  "CJ_K3_WASH_MAC",       2303,  550},
	{FURNITURE_KITCHEN,  "CJ_K3_UNIT06",         2145,  450},
	{FURNITURE_KITCHEN,  "CJ_K1_FRIDGE_UNIT",    2127,  400},
	{FURNITURE_KITCHEN,  "CJ_K1_SINK",           2130,  1000},
	{FURNITURE_KITCHEN,  "CJ_K1_TALL_UNIT",      2128,  1000},
	{FURNITURE_KITCHEN,  "CJ_K1_LOW_UNIT",       2129,  550},
	{FURNITURE_KITCHEN,  "CJ_K1_LOW_CORNER",     2304,  550},
	{FURNITURE_KITCHEN,  "CJ_THIN_FRIGE",        1780,  550},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_5",       2446,  600},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_5c",      2447,  600},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_5d",      2448,  600},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_5e",      2449,  2000},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_5b",      2450,  450},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_8b",      2454,  400},
	{FURNITURE_KITCHEN,  "CJ_FF_CONTER_8c",      2457,  400},
	{FURNITURE_KITCHEN,  "CJ_FF_COFFEE",         2500,  250},
	{FURNITURE_KITCHEN,  "CJ_FF_FRYER",          2415,  550},
	{FURNITURE_KITCHEN,  "CJ_FF_COOKER",         2417,  550},
	{FURNITURE_KITCHEN,  "CJ_FF_MICROW",         2421,  250},
	{FURNITURE_KITCHEN,  "CJ_MICROWAVE1",        2149,  800},
	{FURNITURE_KITCHEN,  "CJ_FF_PIZZA_OVEN",     2426,  1500},
	{FURNITURE_KITCHEN,  "CJ_FF_FRIDGE2",        2452,  400},
	{FURNITURE_KITCHEN,  "CJ_FF_DISP",           2416,  9000},
	{FURNITURE_KITCHEN,  "CJ_FF_JUICE_L",        2427,  550},
	{FURNITURE_KITCHEN,  "CJ_FF_CUP_DISP",       2429,  2000},
	{FURNITURE_KITCHEN,  "CJ_OFF2_LIC_2_R",      2530,  550},
	{FURNITURE_KITCHEN,  "CJ_OFF2_LIC_1_R",      2532,  550},
	{FURNITURE_KITCHEN,  "MarcosFryingPan1",     19581, 500},
	{FURNITURE_KITCHEN,  "MarcosSteak1",     	 19582, 500},
	{FURNITURE_KITCHEN,  "MarcosKnife1",     	 19583, 500},
	{FURNITURE_KITCHEN,  "MarcosSaucepan1",      19584, 500},
	{FURNITURE_KITCHEN,  "MarcosPan1",     		 19585, 500},
	{FURNITURE_KITCHEN,  "MarcosSpatula1",     	 19586, 500},
	{FURNITURE_TABLES,   "parktable1",           1281,  600},
	{FURNITURE_TABLES,   "DYN_TABLE_1",          1433,  600},
	{FURNITURE_TABLES,   "DYN_TABLE_2",          1432,  7500},
	{FURNITURE_TABLES,   "craps_table",          1824,  9000},
	{FURNITURE_TABLES,   "wheel_table",          1896,  6500},
	{FURNITURE_TABLES,   "k_pooltablesm",        2964,  2000},
	{FURNITURE_TABLES,   "pokertable01",         19474, 400},
	{FURNITURE_TABLES,   "officedesk1l",         1998,  2000},
	{FURNITURE_TABLES,   "officedesk2",          1999,  400},
	{FURNITURE_TABLES,   "officedesk1",          2008,  4500},
	{FURNITURE_TABLES,   "officedesk2l",         2009,  2000},
	{FURNITURE_TABLES,   "MED_OFFICE_DESK_1",    2165,  400},
	{FURNITURE_TABLES,   "MED_OFFICE_DESK_2",    2166,  4500},
	{FURNITURE_TABLES,   "MED_OFFICE_DESK_3",    2173,  400},
	{FURNITURE_TABLES,   "MED_OFFICE2_DESK_1",   2172,  400},
	{FURNITURE_TABLES,   "MED_OFFICE3_DESK_1",   2169,  1000},
	{FURNITURE_TABLES,   "MED_OFFICE4_DESK_1",   2171,  4500},
	{FURNITURE_TABLES,   "MED_OFFICE4_DESK_2",   2174,  400},
	{FURNITURE_TABLES,   "MED_OFFICE4_DESK_3",   2175,  400},
	{FURNITURE_TABLES,   "MED_OFFICE5_DESK_3",   2180,  2500},
	{FURNITURE_TABLES,   "MED_OFFICE5_DESK_2",   2181,  550},
	{FURNITURE_TABLES,   "MED_OFFICE5_DESK_1",   2182,  400},
	{FURNITURE_TABLES,   "MED_OFFICE3_DESK_09",  2183,  6000},
	{FURNITURE_TABLES,   "MED_OFFICE6_DESK_2",   2184,  6500},
	{FURNITURE_TABLES,   "MED_OFFICE6_DESK_1",   2185,  2000},
	{FURNITURE_TABLES,   "MED_OFFICE2_DESK_2",   2193,  7000},
	{FURNITURE_TABLES,   "MED_OFFICE2_DESK_3",   2198,  2000},
	{FURNITURE_TABLES,   "MED_OFFICE8_DESK_1",   2205,  550},
	{FURNITURE_TABLES,   "MED_OFFICE8_DESK_02",  2206,  2500},
	{FURNITURE_TABLES,   "MED_OFFICE7_DESK_1",   2207,  550},
	{FURNITURE_TABLES,   "MED_OFFICE9_DESK_1",   2209,  5500},
	{FURNITURE_TABLES,   "MED_OFFICE4_DESK_4",   2308,  6000},
	{FURNITURE_TABLES,   "CJ_FF_WORKTOP",        2418,  400},
	{FURNITURE_TABLES,   "CJ_FF_WORKTOP_2",      2419,  400},
	{FURNITURE_TABLES,   "CJ_FF_WORKTOP_3",      2451,  2000},
	{FURNITURE_TABLES,   "CJ_DF_WORKTOP_2",      936,   1000},
	{FURNITURE_TABLES,   "CJ_DF_WORKTOP",        937,   400},
	{FURNITURE_TABLES,   "CJ_DF_WORKTOP_3",      941,   1000},
	{FURNITURE_TABLES,   "CJ_TV_TABLE2",         2311,  2000},
	{FURNITURE_TABLES,   "CJ_TV_TABLE1",         2313,  2500},
	{FURNITURE_TABLES,   "CJ_TV_TABLE3",         2314,  550},
	{FURNITURE_TABLES,   "CJ_TV_TABLE4",         2315,  550},
	{FURNITURE_TABLES,   "CJ_TV_TABLE5",         2319,  2500},
	{FURNITURE_TABLES,   "CJ_TV_TABLE6",         2321,  2000},
	{FURNITURE_TABLES,   "CJ_HIFI_TABLE",        2346,  2500},
	{FURNITURE_TABLES,   "Shop_set_1_Table",     2370,  1000},
	{FURNITURE_TABLES,   "POLCE_DESK1",          2605,  1500},
	{FURNITURE_TABLES,   "POLCE_DESK2",          2607,  2000},
	{FURNITURE_TABLES,   "CJ_PIZZA_TABLE",       2635,  2500},
	{FURNITURE_TABLES,   "CJ_PIZZA_TABLE2",      2637,  2500},
	{FURNITURE_TABLES,   "CJ_BURG_TABLE",        2644,  2500},
	{FURNITURE_TABLES,   "CJ_donut_TABLE",       2747,  2000},
	{FURNITURE_TABLES,   "CJ_CHICK_TABLE",       2762,  2000},
	{FURNITURE_TABLES,   "CJ_CHICK_TABLE_2",     2763,  2000},
	{FURNITURE_TABLES,   "CJ_PIZZA_TABLE03",     2764,  2500},
	{FURNITURE_TABLES,   "MED_DINNING_6",        2119,  2500},
	{FURNITURE_TABLES,   "SWANK_DINNING_6",      2118,  2000},
	{FURNITURE_TABLES,   "SWANK_DINNING_5",      2117,  2500},
	{FURNITURE_TABLES,   "LOW_DINNING_6",        2116,  1500},
	{FURNITURE_TABLES,   "LOW_DINNING_1",        2115,  1500},
	{FURNITURE_TABLES,   "castable1",            2802,  400},
	{FURNITURE_TABLES,   "a51_labtable1_",       3383,  2000},
	{FURNITURE_CHAIRS,   "Stonebench1",          1256,  2000},
	{FURNITURE_CHAIRS,   "parkbench1",           1280,  2500},
	{FURNITURE_CHAIRS,   "CJ_BLOCKER_BENCH",     1368,  2500},
	{FURNITURE_CHAIRS,   "swivelchair_B",        1663,  1500},
	{FURNITURE_CHAIRS,   "swivelchair_A",        1671,  1500},
	{FURNITURE_CHAIRS,   "kb_swivelchair1",      1714,  1500},
	{FURNITURE_CHAIRS,   "kb_swivelchair2",      1715,  1500},
	{FURNITURE_CHAIRS,   "kb_slot_stool",        1716,  1000},
	{FURNITURE_CHAIRS,   "est_chair1",           1721,  1000},
	{FURNITURE_CHAIRS,   "kb_chair03",           1704,  2000},
	{FURNITURE_CHAIRS,   "kb_chair04",           1705,  2000},
	{FURNITURE_CHAIRS,   "kb_chair02",           1708,  2000},
	{FURNITURE_CHAIRS,   "kb_chair01",           1711,  2000},
	{FURNITURE_CHAIRS,   "mrk_seating1",         1723,  550},
	{FURNITURE_CHAIRS,   "mrk_seating1b",        1724,  200},
	{FURNITURE_CHAIRS,   "mrk_seating2",         1726,  550},
	{FURNITURE_CHAIRS,   "mrk_seating2b",        1727,  2000},
	{FURNITURE_CHAIRS,   "mrk_seating3",         1728,  1000},
	{FURNITURE_CHAIRS,   "mrk_seating3b",        1729,  2500},
	{FURNITURE_CHAIRS,   "CJ_EASYCHAIR1",        1735,  2000},
	{FURNITURE_CHAIRS,   "SWANK_DIN_CHAIR_5",    1739,  1000},
	{FURNITURE_CHAIRS,   "SWANK_1_FootStool",    1746,  500},
	{FURNITURE_CHAIRS,   "CJ_BARSTOOL",          1805,  1000},
	{FURNITURE_CHAIRS,   "MED_OFFICE_CHAIR",     1806,  2500},
	{FURNITURE_CHAIRS,   "CJ_FOLDCHAIR",         1810,  500},
	{FURNITURE_CHAIRS,   "MED_DIN_CHAIR_5",      1811,  1500},
	{FURNITURE_CHAIRS,   "SWANK_DIN_CHAIR_2",    2079,  1000},
	{FURNITURE_CHAIRS,   "MED_DIN_CHAIR_4",      2120,  1500},
	{FURNITURE_CHAIRS,   "LOW_DIN_CHAIR_2",      2121,  500},
	{FURNITURE_CHAIRS,   "SWANK_DIN_CHAIR_4",    2123,  1000},
	{FURNITURE_CHAIRS,   "SWANK_DIN_CHAIR_1",    2124,  1500},
	{FURNITURE_CHAIRS,   "MED_DIN_CHAIR_1",      2125,  500},
	{FURNITURE_CHAIRS,   "MED_OFFICE_CHAIR2",    2309,  1000},
	{FURNITURE_CHAIRS,   "CJ_PIZZA_CHAIR2",      2638,  400},
	{FURNITURE_CHAIRS,   "CJ_PIZZA_CHAIR3",      2639,  550},
	{FURNITURE_CHAIRS,   "LEE_stripCHAIR2",      2776,  1000},
	{FURNITURE_CHAIRS,   "CJ_BURG_CHAIR",        2788,  1000},
	{FURNITURE_CHAIRS,   "SWK_COUCH_1",          2290,  400},
	{FURNITURE_CHAIRS,   "LOW_COUCH_3",          1768,  400},
	{FURNITURE_CHAIRS,   "MED_COUCH_1",          1766,  400},
	{FURNITURE_CHAIRS,   "LOW_COUCH_2",          1764,  400},
	{FURNITURE_CHAIRS,   "LOW_COUCH_1",          1763,  400},
	{FURNITURE_CHAIRS,   "SWANK_COUCH_2",        1761,  400},
	{FURNITURE_CHAIRS,   "MED_COUCH_2",          1760,  400},
	{FURNITURE_CHAIRS,   "LOW_COUCH_5",          1757,  400},
	{FURNITURE_CHAIRS,   "LOW_COUCH_4",          1756,  400},
	{FURNITURE_CHAIRS,   "SWANK_COUCH_1",        1753,  2000},
	{FURNITURE_CHAIRS,   "kb_couch04",           1713,  400},
	{FURNITURE_CHAIRS,   "kb_couch05",           1712,  400},
	{FURNITURE_CHAIRS,   "kb_couch07",           1710,  6000},
	{FURNITURE_CHAIRS,   "kb_couch08",           1709,  8000},
	{FURNITURE_CHAIRS,   "kb_couch01",           1707,  400},
	{FURNITURE_CHAIRS,   "kb_couch03",           1706,  400},
	{FURNITURE_CHAIRS,   "kb_couch02",           1703,  400},
	{FURNITURE_CHAIRS,   "kb_couch06",           1702,  400},
	{FURNITURE_SHELVES,  "CJ_BEDROOM1", 		 2323,  2000},
	{FURNITURE_SHELVES,  "CJ_BEDROOM1_W", 		 2330,  6000},
	{FURNITURE_SHELVES,  "mrk_wrobe_tmp", 		 2025,  5500},
	{FURNITURE_SHELVES,  "MED_SHELF", 			 1744,  1500},
	{FURNITURE_SHELVES,  "DYN_CUPBOARD", 		 1417,  1000},
	{FURNITURE_SHELVES,  "MED_OFFICE_UNIT_4", 	 2161,  400},
	{FURNITURE_SHELVES,  "MED_OFFICE_UNIT_1", 	 2162,  400},
	{FURNITURE_SHELVES,  "MED_OFFICE_UNIT_2", 	 2163,  4500},
	{FURNITURE_SHELVES,  "MED_OFFICE_UNIT_5", 	 2164,  400},
	{FURNITURE_SHELVES,  "MED_OFFICE_UNIT_7",	 2167,  400},
	{FURNITURE_SHELVES,  "MED_OFFICE6_MC_1", 	 2199,  2500},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF", 		 2462,  550},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF_2", 	 2463,  550},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF_3", 	 2475,  1000},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF_4", 	 2482,  400},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF_5", 	 2502,  550},
	{FURNITURE_SHELVES,  "CJ_HOBBY_SHELF_6", 	 2509,  550},
	{FURNITURE_SHELVES,  "Med_BOOKSHELF", 		 1742,  2500},
	{FURNITURE_SHELVES,  "CJ_M_FILEING1", 		 2065,  1000},
	{FURNITURE_SHELVES,  "CJ_M_FILEING2", 		 2066,  1000},
	{FURNITURE_SHELVES,  "CJ_M_FILEING3", 		 2067,  1000},
	{FURNITURE_BATHROOM, "CJ_TOILET_BS", 		 2738,  2000},
	{FURNITURE_BATHROOM, "CJ_TOILET1", 			 2514,  2000},
	{FURNITURE_BATHROOM, "CJ_TOILET2", 			 2521,  2500},
	{FURNITURE_BATHROOM, "CJ_TOILET3", 			 2528,  2000},
	{FURNITURE_BATHROOM, "CJ_TOILET4",           2525,  550},
	{FURNITURE_BATHROOM, "CJ_SHOWER1",           2517,  1000},
	{FURNITURE_BATHROOM, "CJ_SHOWER2",           2520,  550},
	{FURNITURE_BATHROOM, "CJ_SHOWER4",           2527,  550},
	{FURNITURE_BATHROOM, "CJ_BATH1",             2516,  550},
	{FURNITURE_BATHROOM, "CJ_BATH2",        	 2519,  2500},
	{FURNITURE_BATHROOM, "CJ_BATH3",             2522,  400},
	{FURNITURE_BATHROOM, "CJ_BATH4",             2526,  550},
	{FURNITURE_BATHROOM, "CJ_BATH5",             2097,  2000},
	{FURNITURE_BATHROOM, "CJ_B_SINK1",           2739,  2000},
	{FURNITURE_BATHROOM, "CJ_B_SINK2",           2518,  2000},
	{FURNITURE_BATHROOM, "CJ_B_SINK3",           2523,  550},
	{FURNITURE_BATHROOM, "CJ_B_SINK4",           2524,  2500},
	{FURNITURE_BEDROOM,  "kb_bed_test1", 	 	 1700,  550},
	{FURNITURE_BEDROOM,  "kb_bed_test2", 		 1701,  550},
	{FURNITURE_BEDROOM,  "MED_BED_3", 			 1745,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_2", 			 1793,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_3", 			 1794,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_2", 		 1795,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_4", 			 1796,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_3", 		 1797,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_1", 		 1798,  550},
	{FURNITURE_BEDROOM,  "MED_BED_4", 			 1799,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_1", 			 1800,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_4", 		 1801,  550},
	{FURNITURE_BEDROOM,  "MED_BED_2", 			 1802,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_5", 			 1812,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_5", 		 2090,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_7", 		 2298,  550},
	{FURNITURE_BEDROOM,  "SWANK_BED_6", 		 2299,  550},
	{FURNITURE_BEDROOM,  "MED_BED_8", 			 2300,  550},
	{FURNITURE_BEDROOM,  "MED_BED_9", 			 2301,  550},
	{FURNITURE_BEDROOM,  "LOW_BED_06",		 	 2302,  550},
	{FURNITURE_CABINETS, "SWANK_CABINET_3",      1730,  550},
	{FURNITURE_CABINETS, "LOW_CABINET_3",        1740,  1000},
	{FURNITURE_CABINETS, "LOW_CABINET_1",        1741,  1000},
	{FURNITURE_CABINETS, "MED_CABINET_3",        1743,  550},
	{FURNITURE_CABINETS, "SWANK_CABINET_1",      2078,  550},
	{FURNITURE_CABINETS, "MED_CABINET_1",        2084,  2000},
	{FURNITURE_CABINETS, "MED_CABINET_2",        2087,  2500},
	{FURNITURE_CABINETS, "LOW_CABINET_4",        2088,  550},
	{FURNITURE_CABINETS, "SWANK_CABINET_2",      2089,  400},
	{FURNITURE_CABINETS, "SWANK_CABINET_4",      2094,  1000},
	{FURNITURE_CABINETS, "LOW_CABINET_2",        2095,  550},
	{FURNITURE_CABINETS, "MED_OFFICE8_CABINET",  2204,  1000},
	{FURNITURE_CABINETS, "SWANK_CABINET_4D",     2306,  550},
	{FURNITURE_CABINETS, "SWANK_CABINET_4b",     2307,  550},
	{FURNITURE_CABINETS, "LOW_CABINET_1_S",      2328,  550},
	{FURNITURE_CABINETS, "LOW_CABINET_1_L",      2329,  400},
	{FURNITURE_CABINETS, "ZEROWARDROBE",         14556, 2000},
	{FURNITURE_ELECTRIC, "LCDTVBig1",            19786, 10000},
	{FURNITURE_ELECTRIC, "LCDTV1",               19787, 8000},
	{FURNITURE_ELECTRIC, "Telephone1",           19807, 500},
	{FURNITURE_ELECTRIC, "Keyboard1",            19808, 500},
	{FURNITURE_ELECTRIC, "TV_WARD_Low", 		 2093,  6000},
	{FURNITURE_ELECTRIC, "TV_UNIT_1", 			 2296,  5500},
	{FURNITURE_ELECTRIC, "TV_UNIT_1", 			 2297,  2000},
	{FURNITURE_ELECTRIC, "tv_stand_driv",    	 14532, 550},
	{FURNITURE_ELECTRIC, "DYN_TV", 				 1429,  550},
	{FURNITURE_ELECTRIC, "LOW_TV_2", 			 1747,  550},
	{FURNITURE_ELECTRIC, "LOW_TV_3", 			 1748,  550},
	{FURNITURE_ELECTRIC, "MED_TV_3", 			 1749,  550},
	{FURNITURE_ELECTRIC, "MED_TV_2", 			 1750,  550},
	{FURNITURE_ELECTRIC, "MED_TV_4", 			 1751,  550},
	{FURNITURE_ELECTRIC, "SWANK_TV_3", 			 1752,  550},
	{FURNITURE_ELECTRIC, "SWANK_TV_4", 			 1786,  550},
	{FURNITURE_ELECTRIC, "CJ_Sphere_TV", 		 2224,  550},
	{FURNITURE_ELECTRIC, "PHOTOCOPIER_1",        2186,  2000},
	{FURNITURE_ELECTRIC, "PHOTOCOPIER_2",        2202,  4500},
	{FURNITURE_ELECTRIC, "DYN_FF_TILL",          1514,  400},
	{FURNITURE_ELECTRIC, "CJ_FF_TILL",           2422,  4500},
	{FURNITURE_ELECTRIC, "PC_1",                 2190,  550},
	{FURNITURE_ELECTRIC, "CJ_WATERCOOLER2",      1808,  400},
	{FURNITURE_ELECTRIC, "water_coolnu",         2002,  1000},
	{FURNITURE_ELECTRIC, "washer",               1208,  550},
	{FURNITURE_ELECTRIC, "DYN_BAR_B_Q",          1481,  400},
	{FURNITURE_ELECTRIC, "gym_treadmill",        2627,  12000},
	{FURNITURE_ELECTRIC, "gym_bench2",           2628,  400},
	{FURNITURE_ELECTRIC, "gym_bench1",           2629,  400},
	{FURNITURE_ELECTRIC, "gym_bike",             2630,  400},
	{FURNITURE_ELECTRIC, "snesish", 			 1718,  2000},
	{FURNITURE_ELECTRIC, "LOW_CONSOLE",			 1719,  2000},
	{FURNITURE_ELECTRIC, "SWANK_CONSOLE", 		 2028,  550},
	{FURNITURE_ELECTRIC, "MED_VIDEO_2", 		 1782,  1000},
	{FURNITURE_ELECTRIC, "SWANK_VIDEO_2", 		 1783,  1000},
	{FURNITURE_ELECTRIC, "LOW_VIDEO_1", 		 1785,  1000},
	{FURNITURE_ELECTRIC, "SWANK_VIDEO_1", 		 1788,  1000},
	{FURNITURE_ELECTRIC, "SWANK_VIDEO_3", 		 1790,  1000},
	{FURNITURE_ELECTRIC, "LOW_HI_FI_2", 		 2102,  550},
	{FURNITURE_ELECTRIC, "LOW_HI_FI_1",			 2103,  550},
	{FURNITURE_ELECTRIC, "LOW_HI_FI_3", 		 2226,  2500},
	{FURNITURE_ELECTRIC, "MED_HI_FI_1", 		 2099,  400},
	{FURNITURE_ELECTRIC, "MED_HI_FI_2", 		 2100,  400},
	{FURNITURE_ELECTRIC, "MED_HI_FI_3", 		 2101,  400},
	{FURNITURE_ELECTRIC, "SWANK_SPEAKER", 		 2229,  4500},
	{FURNITURE_ELECTRIC, "SWANK_SPEAKER_2", 	 2230,  400},
	{FURNITURE_ELECTRIC, "SWANK_SPEAKER_3", 	 2231,  400},
	{FURNITURE_ELECTRIC, "MED_SPEAKER_4", 		 2232,  400},
	{FURNITURE_PLANTS,   "veg_palmkb1",          625,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb2",          626,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb3",          627,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb4",          628,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb8",          630,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb9",          631,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb7",          632,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb10",         633,   2000},
	{FURNITURE_PLANTS,   "kb_planter+bush",      638,   2000},
	{FURNITURE_PLANTS,   "pot_02",               644,   2000},
	{FURNITURE_PLANTS,   "veg_palmkb14",         646,   2000},
	{FURNITURE_PLANTS,   "Plant_Pot_10",         948,   2000},
	{FURNITURE_PLANTS,   "Plant_Pot_4",          949,   2000},
	{FURNITURE_PLANTS,   "Plant_Pot_12",         950,   2000},
	{FURNITURE_PLANTS,   "CJ_BUSH_PROP3",        1360,  2000},
	{FURNITURE_PLANTS,   "CJ_BUSH_PROP2",        1361,  2000},
	{FURNITURE_PLANTS,   "CJ_BUSH_PROP",         1364,  2000},
	{FURNITURE_PLANTS,   "nu_plant_ofc",         2001,  200},
	{FURNITURE_PLANTS,   "nu_plant3_ofc",        2010,  200},
	{FURNITURE_PLANTS,   "nu_plant2_ofc",        2011,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_2",          2194,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_3",          2195,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_1",          2203,  100},
	{FURNITURE_PLANTS,   "Plant_Pot_8",          2240,  500},
	{FURNITURE_PLANTS,   "Plant_Pot_5",          2241,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_7",          2242,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_9",          2244,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_11",         2245,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_14",         2246,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_16",         2248,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_21",         2252,  200},
	{FURNITURE_PLANTS,   "Plant_Pot_22",         2253,  2000},
	{FURNITURE_PLANTS,   "GB_romanpot01",        2811,  2000},
	{FURNITURE_PLANTS,   "sfx_plant03",          3802,  2000},
	{FURNITURE_PLANTS,   "sfx_winplant07",       3806,  2000},
	{FURNITURE_PLANTS,   "sfx_plant04",          3810,  2000},
	{FURNITURE_TRASH,    "CJ_Dump1_LOW01",       1430,  1500},
	{FURNITURE_TRASH,    "DYN_DUMPSTER",         1415,  1000},
	{FURNITURE_TRASH,    "CJ_HIPPO_BIN",         1371,  2000},
	{FURNITURE_TRASH,    "CJ_BIN1",              1359,  1500},
	{FURNITURE_TRASH,    "CJ_WASTEBIN",          1347,  500},
	{FURNITURE_TRASH,    "BinNt09_LA",           1339,  1500},
	{FURNITURE_TRASH,    "BinNt07_LA",           1337,  1500},
	{FURNITURE_TRASH,    "bin1",                 1300,  1500},
	{FURNITURE_TRASH,    "wastebin",             1235,  1000},
	{FURNITURE_TRASH,    "BinNt14_LA",           1330,  1000},
	{FURNITURE_TRASH,    "BinNt13_LA",           1329,  1000},
	{FURNITURE_TRASH,    "BinNt10_LA",           1328,  1500},
	{FURNITURE_TRASH,    "dump1",                1227,  400},
	{FURNITURE_TRASH,    "BinNt06_LA",           1336,  2000},
	{FURNITURE_TRASH,    "BinNt04_LA",           1334,  2000},
	{FURNITURE_TRASH,    "BinNt03_LA",           1333,  2000},
	{FURNITURE_TRASH,    "TrashcanChicken",      2770,  2000},
	{FURNITURE_TRASH,    "CJ_FF_BUCKET",         2420,  2000},
	{FURNITURE_TRASH,    "gunbox",               1271,  400},
	{FURNITURE_TRASH,    "k_smashboxes",         2971,  550},
	{FURNITURE_TRASH,    "temp_cardbox",         2900,  500},
	{FURNITURE_TRASH,    "cardboardbox4",        1221,  500},
	{FURNITURE_TRASH,    "cardboardbox2",        1220,  500},
	{FURNITURE_DOORS,    "GenDoorINT04Static",   19802, 1000},
	{FURNITURE_DOORS,    "Gen_doorEXT03",        1498,  1600},
	{FURNITURE_DOORS,    "chinaTgate",           2930,  1400},
	{FURNITURE_DOORS,    "kmb_petroldoor",       2911,  1600},
	{FURNITURE_DOORS,    "ad_flatdoor",          3061,  500},
	{FURNITURE_DOORS,    "Gen_wardrobe",         1567,  600},
	{FURNITURE_DOORS,    "Gen_doorINT01",        1491,  400},
	{FURNITURE_DOORS,    "Gen_doorINT02",        1492,  400},
	{FURNITURE_DOORS,    "Gen_doorSHOP01",       1493,  400},
	{FURNITURE_DOORS,    "Gen_doorINT03",        1494,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT01",        1495,  400},
	{FURNITURE_DOORS,    "Gen_doorSHOP02",       1496,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT02",        1497,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT03",        1498,  400},
	{FURNITURE_DOORS,    "Gen_doorINT05",        1499,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT05",        1500,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT04",        1501,  400},
	{FURNITURE_DOORS,    "Gen_doorINT04",        1502,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT06",        1504,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT07",        1505,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT08",        1506,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT09",        1507,  400},
	{FURNITURE_DOORS,    "Gen_doorEXT10",        1523,  400},
	{FURNITURE_DOORS,    "vgsEspdr01",           8957,  2500},
	{FURNITURE_DOORS,    "vgwspry1",             7891,  2000},
	{FURNITURE_DOORS,    "imy_la_door",          3109,  400},
	{FURNITURE_DOORS,    "ab_casdorLok",         3089,  3000},
	{FURNITURE_DOORS,    "ad_flatdoor",          3061,  550},
	{FURNITURE_DOORS,    "warehouse_door2b",     3037,  2000},
	{FURNITURE_DOORS,    "cr1_door",             3029,  550},
	{FURNITURE_DOORS,    "dts_bbdoor",           2970,  550},
	{FURNITURE_DOORS,    "kmb_lockeddoor",       2949,  400},
	{FURNITURE_DOORS,    "cr_door_02",           2948,  400},
	{FURNITURE_DOORS,    "cr_door_01",           2947,  400},
	{FURNITURE_DOORS,    "cr_door_03",           2946,  400},
	{FURNITURE_DOORS,    "freight_SFW_door",     2944,  550},
	{FURNITURE_DOORS,    "newtowerdoor1",        977,   550},
	{FURNITURE_CARPETS,  "man_sdr_rug",          1828,  1000},
	{FURNITURE_CARPETS,  "gb_livingrug01",       2815,  1000},
	{FURNITURE_CARPETS,  "gb_bedrug01",          2817,  1000},
	{FURNITURE_CARPETS,  "gb_bedrug02",          2818,  1000},
	{FURNITURE_CARPETS,  "gb_livingrug02",       2833,  1000},
	{FURNITURE_CARPETS,  "gb_livingrug03",       2834,  1000},
	{FURNITURE_CARPETS,  "gb_livingrug04",       2835,  1000},
	{FURNITURE_CARPETS,  "gb_livingrug05",       2836,  1000},
	{FURNITURE_CARPETS,  "gb_bedrug03",          2841,  1000},
	{FURNITURE_CARPETS,  "gb_bedrug04",          2842,  1000},
	{FURNITURE_CARPETS,  "gb_bedrug05",          2847,  1000},
	{FURNITURE_CARPETS,  "gym_mat1",             2631,  1000},
	{FURNITURE_CARPETS,  "gym_mat02",            2632,  1000},
	{FURNITURE_FRAMES,   "SAMPPicture1",         19172, 500},
	{FURNITURE_FRAMES,   "Frame_2",              2289,  1000},
	{FURNITURE_FRAMES,   "Frame_3",              2288,  1000},
	{FURNITURE_FRAMES,   "Frame_4",              2287,  1000},
	{FURNITURE_FRAMES,   "Frame_5",              2286,  1000},
	{FURNITURE_FRAMES,   "Frame_1",              2285,  1000},
	{FURNITURE_FRAMES,   "Frame_6",              2284,  1000},
	{FURNITURE_FRAMES,   "Frame_Thick_3",        2283,  100},
	{FURNITURE_FRAMES,   "Frame_Thick_4",        2282,  100},
	{FURNITURE_FRAMES,   "Frame_Thick_5",        2281,  100},
	{FURNITURE_FRAMES,   "Frame_Thick_1",        2280,  100},
	{FURNITURE_FRAMES,   "Frame_Thick_6",        2279,  100},
	{FURNITURE_FRAMES,   "Frame_Thick_2",        2278,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_2",          2277,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_3",          2276,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_4",          2275,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_6",          2274,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_1",          2273,  100},
	{FURNITURE_FRAMES,   "Frame_Fab_5",          2272,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_1",         2271,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_6",         2270,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_4",         2269,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_2",         2268,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_3",         2267,  100},
	{FURNITURE_FRAMES,   "Frame_WOOD_5",         2266,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_6",         2265,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_5",         2264,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_4",         2263,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_3",         2262,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_2",         2261,  100},
	{FURNITURE_FRAMES,   "Frame_SLIM_1",         2260,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_6",         2259,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_5",         2258,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_4",         2257,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_3",         2256,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_2",         2255,  100},
	{FURNITURE_FRAMES,   "Frame_Clip_1",         2254,  100},

	//Spraytag
	{FURNITURE_MISC, "Tag [GSF]", 18659, 100},
	{FURNITURE_MISC, "Tag [SBF]", 18660, 100},
	{FURNITURE_MISC, "Tag [VLA]", 18661, 100},
	{FURNITURE_MISC, "Tag [KTB]", 18662, 100},
	{FURNITURE_MISC, "Tag [SFR]", 18663, 100},
	{FURNITURE_MISC, "Tag [TBD]", 18664, 100},
	{FURNITURE_MISC, "Tag [LSV]", 18665, 100},
	{FURNITURE_MISC, "Tag [FYB]", 18666, 100},
	{FURNITURE_MISC, "Tag [RHB]", 18667, 100},
	//
	{FURNITURE_MISC,     "Wine Glass",  		 19818, 300},
	{FURNITURE_MISC,     "Cocktail Glass",       19819, 300},
	{FURNITURE_MISC,     "Propbeer Glass",  	 1666,  300},
	{FURNITURE_MISC,     "Big Cock",  		 	 19823, 300},
	{FURNITURE_MISC,     "Red rum",  		     19820, 300},
	{FURNITURE_MISC,     "Vodka",  		         19821, 300},
	{FURNITURE_MISC,     "X.O",  		         19824, 300},

	{FURNITURE_MISC,     "Damaged crate",  		 924,   300},
	{FURNITURE_MISC,     "Top crate",  		     1355,  300},
	{FURNITURE_MISC,     "Empty crate",  		 19639, 300},
	{FURNITURE_MISC,     "Paper Messes",  		 2674,  300},


	{FURNITURE_MISC,     "Fisinh Rod",  		 18632, 600},
	{FURNITURE_MISC,     "Rope1",  			 	 19087, 100},
	{FURNITURE_MISC,     "CJ_FLAG1",  			 2047,  100},
	{FURNITURE_MISC,     "kmb_packet",           2891,  500},
	{FURNITURE_MISC,     "craigpackage",         1279,  1000},
	{FURNITURE_MISC,     "drug_white",           1575,  500},
	{FURNITURE_MISC,     "drug_orange",          1576,  500},
	{FURNITURE_MISC,     "drug_yellow",          1577,  500},
	{FURNITURE_MISC,     "drug_green",           1578,  500},
	{FURNITURE_MISC,     "drug_blue",            1579,  500},
	{FURNITURE_MISC,     "drug_red",             1580,  500},
	{FURNITURE_MISC,     "kmb_marijuana",        2901,  2000},
	{FURNITURE_MISC,     "grassplant",           3409,  1000},
	{FURNITURE_MISC,     "DYN_ASHTRY",           1510,  500},
	{FURNITURE_MISC,     "propashtray1",         1665,  500},
	{FURNITURE_MISC,     "WoodenStage1",         19608, 2000},
	{FURNITURE_MISC,     "DrumKit1",      		 19609, 1000},
	{FURNITURE_MISC,     "Microphone1",          19610, 1000},
	{FURNITURE_MISC,     "MicrophoneStand1",     19611, 2000},
	{FURNITURE_MISC,     "GuitarAmp1",           19612, 1000},
	{FURNITURE_MISC,     "GuitarAmp2",        	 19613, 2000},
	{FURNITURE_MISC,     "GuitarAmp3",        	 19614, 2000},
	{FURNITURE_MISC,     "GuitarAmp4",       	 19615, 1000},
	{FURNITURE_MISC,     "GuitarAmp5",       	 19616, 1000},
	{FURNITURE_MISC,     "GoldRecord1",          19617, 550},
	{FURNITURE_MISC,     "CJ_Stags_head",        1736,  2000},
	{FURNITURE_MISC,     "CJ_Radiator_old",      1738,  1000},
	{FURNITURE_MISC,     "CJ_MOP_PAIL",          1778,  1000},
	{FURNITURE_MISC,     "CJ_chambermaid",       1789,  2000},
	{FURNITURE_MISC,     "cj_bucket",            2713,  1000},
	{FURNITURE_MISC,     "des_blackbags",        16444, 2000},
	{FURNITURE_MISC,     "nf_blackboard",        3077,  2000},
	{FURNITURE_MISC,     "kmb_dumbbell_L",       3072,  1000},
	{FURNITURE_MISC,     "kmb_dumbbell_R",       3071,  1000},
	{FURNITURE_MISC,     "portaloo",             2984,  550},
	{FURNITURE_MISC,     "CJ_TARGET6",           2056,  500},
	{FURNITURE_MISC,     "CJ_TARGET5",           2055,  500},
	{FURNITURE_MISC,     "CJ_TARGET4",           2051,  500},
	{FURNITURE_MISC,     "CJ_TARGET2",           2050,  500},
	{FURNITURE_MISC,     "CJ_TARGET1",           2049,  500},
	{FURNITURE_MISC,     "hos_trolley",          1997,  1000},
	{FURNITURE_MISC,     "shop_sec_cam",     	 1886,  1000},
	{FURNITURE_MISC,     "nt_firehose_01",       1613,  1000},
	{FURNITURE_MISC,     "lsmall_window01",      19325, 2000},
	{FURNITURE_MISC,     "window001",            19466, 550},
	{FURNITURE_MISC,     "wglasssmash",          1649,  1000},
	{FURNITURE_MISC,     "Orange1",          	 19574, 500},
	{FURNITURE_MISC,     "Apple1",     			 19575, 500},
	{FURNITURE_MISC,     "Apple2",       		 19576, 500},
	{FURNITURE_MISC,     "Tomato1",      		 19577, 500},
	{FURNITURE_MISC,     "Banana1",              19578, 500},
	{FURNITURE_MISC,     "gb_bedclothes01",      2819,  100},
	{FURNITURE_MISC,     "gb_bedclothes02",      2843,  100},
	{FURNITURE_MISC,     "gb_bedclothes03",      2844,  100},
	{FURNITURE_MISC,     "gb_bedclothes04",      2845,  100},
	{FURNITURE_MISC,     "gb_bedclothes05",      2846,  100},
	{FURNITURE_MISC,     "GB_platedirty01",      2812,  100},
	{FURNITURE_MISC,     "GB_kitchplatecln01",   2822,  100},
	{FURNITURE_MISC,     "GB_platedirty02",      2829,  100},
	{FURNITURE_MISC,     "GB_platedirty04",      2830,  100},
	{FURNITURE_MISC,     "GB_platedirty03",      2831,  100},
	{FURNITURE_MISC,     "GB_platedirty05",      2832,  100},
	{FURNITURE_MISC,     "GB_kitchplatecln02",   2862,  100},
	{FURNITURE_MISC,     "GB_kitchplatecln03",   2863,  100},
	{FURNITURE_MISC,     "GB_kitchplatecln04",   2864,  100},
	{FURNITURE_MISC,     "GB_kitchplatecln05",   2865,  100},
	{FURNITURE_MISC,  	 "Angel",      	 		 3935,  5000},
	{FURNITURE_MISC,  	 "Carter Statue",      	 14467, 5000},
	{FURNITURE_MISC,  	 "Broken Statue",      	 2743,  5000},
	{FURNITURE_MISC,  	 "Rocking Horse",      	 11733, 5000},
	{FURNITURE_MISC,  	 "Clothes Hanger",       2373,  500},

	{FURNITURE_WALL, 	 "wall016", 			 19368, 450},
	{FURNITURE_WALL, 	 "wall087", 			 19447, 550},
	{FURNITURE_WALL, 	 "wall015", 			 19367, 450},
	{FURNITURE_WALL, 	 "wall014", 			 19366, 550},
	{FURNITURE_WALL, 	 "wall018", 			 19370, 450},
	{FURNITURE_WALL, 	 "wall010", 			 19362, 550},
	{FURNITURE_WALL, 	 "wall035", 			 19387, 450},
	{FURNITURE_WALL, 	 "wall059", 			 19411, 550},
	{FURNITURE_WALL, 	 "wall017", 			 19369, 450},
	{FURNITURE_WALL, 	 "wall073", 			 19433, 550},
	{FURNITURE_WALL, 	 "wall077", 			 19437, 450},
	{FURNITURE_WALL, 	 "wall040", 			 19392, 550},
	{FURNITURE_WALL, 	 "wall096", 			 19456, 450},
	{FURNITURE_WALL, 	 "wall043", 			 19395, 550},
	{FURNITURE_WALL, 	 "wall037", 			 19389, 450},
	{FURNITURE_WALL, 	 "wall038", 			 19390, 550},
	{FURNITURE_WALL, 	 "wall039", 			 19391, 450},
	{FURNITURE_WALL, 	 "wall041", 			 19393, 550},
	{FURNITURE_WALL, 	 "wall042", 			 19394, 450},
	{FURNITURE_WALL, 	 "wall042", 			 19397, 550},
	{FURNITURE_WALL, 	 "wall044", 			 19396, 450},
	{FURNITURE_WALL, 	 "wall102", 			 19462, 550},
	{FURNITURE_WALL, 	 "wall046", 			 19398, 450},
	{FURNITURE_WALL, 	 "wall024", 			 19376, 550},
	{FURNITURE_WALL, 	 "wall105", 			 19465, 450},
	{FURNITURE_WALL, 	 "wall020", 			 19372, 550},
	{FURNITURE_WALL, 	 "wall104", 			 19464, 450},

	{FURNITURE_SPECIAL,  "Chemistry Dryer",      3287,  1200},
	{FURNITURE_SPECIAL,  "Centrifuge",      	 19830, 3500},
	{FURNITURE_SPECIAL,  "Mixer",      			 19585, 2500},
	{FURNITURE_SPECIAL,  "Reactor",      		 2360,  2000},
	{FURNITURE_SPECIAL,  "Dehydrater",      	 2002,  900},
	{FURNITURE_SPECIAL,  "Pickup Pump",      	 1244,  6000},
	{FURNITURE_SPECIAL,  "Pickup Pump (Small)",  1008,  1000},
	{FURNITURE_SPECIAL,  "Bike Pedal",      	 2798,  500},
	{FURNITURE_SPECIAL,  "Long Exhaust",      	 1114,  700},

	{FURNITURE_EFFECT, 	 "Smoke Flare",      	 18728, 3000},
	{FURNITURE_EFFECT, 	 "Puke",      	 		 18722, 3000},
	{FURNITURE_EFFECT, 	 "Molotov Fire",      	 18701, 3000},
	{FURNITURE_EFFECT, 	 "Coke Trail",      	 18676, 3000},
	{FURNITURE_EFFECT, 	 "Cam Flash (Once)",     18670, 3000},
	{FURNITURE_EFFECT, 	 "Flasher", 			 345,   3000}
};
enum landEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};

new const landCategories[][] =
{
	{"Appliances"},
	{"Bathroom"},
	{"Bedroom"},
	{"Carpets"},
	{"Kitchen"},
	{"Tables"},
	{"Chairs"},
	{"Posters/Frames"},
	{"Storage"},
	{"Plants"},
	{"Trash"},
	{"Doors & Gates"},
	{"Walls"},
	{"Decor"},
	{"Weapons"}
};

new const landArray[][landEnum] =
{
	{"Appliances", 		"Blender", 					 19830,  500},
	{"Appliances", 		"Coffee machine",            11743,  500},
	{"Appliances", 		"Grill",     				 19831,  500},
	{"Appliances", 		"Electrical outlet", 		 19813,  50},
	{"Appliances", 		"Light switch",      		 19829,  50},
	{"Appliances", 		"Keyboard",          		 19808,  50},
	{"Appliances", 		"White telephone",   		 19807,  50},
	{"Appliances", 		"Black telephone",   		 11705,  50},
	{"Appliances", 		"Large LCD television",  	 19786,  1000},
    {"Appliances", 		"Small LCD television",  	 19787,  750},
    {"Appliances", 		"Round gold TV", 			 2224,   1500},
    {"Appliances", 		"TV on wheels",  			 14532,  250},
    {"Appliances", 		"Flat screen TV",        	 1792,   400},
    {"Appliances",      "Wide screen TV",        	 1786,   400},
    {"Appliances",      "Surveillance TV",       	 1749,   400},
    {"Appliances",      "Regular TV",            	 1518,   250},
    {"Appliances",      "Grey sided TV",         	 2322,   200},
    {"Appliances",      "Wood sided TV",         	 1429,   200},
    {"Appliances",      "Microwave",             	 2149,   100},
    {"Appliances",      "Pizza rack",            	 2453,   50},
    {"Appliances",      "Wide sprunk fridge",  		 2452,   100},
    {"Appliances",      "Small sprunk fridge",   	 2533,   50},
    {"Appliances",      "Duality game",        		 2779,   500},
    {"Appliances",      "Bee Bee Gone game",   		 2778,   500},
    {"Appliances",      "Space Monkeys game",    	 2681,   500},
    {"Appliances",      "Sprunk machine",        	 1775,   1000},
    {"Appliances",      "Candy machine",         	 1776,   1000},
    {"Appliances",      "Water machine",         	 1808,   100},
    {"Appliances",      "Radiator",              	 1738,   50},
    {"Appliances",      "Metal fridge",          	 1780,   100},
    {"Appliances",      "Pizza cooker",         	 2426,   50},
    {"Appliances",      "Deep fryer",            	 2415,   100},
    {"Appliances",      "Soda dispenser",        	 2427,   100},
    {"Appliances",      "Aluminum stove",        	 2417,   100},
    {"Appliances",      "Lamp",                  	 2105,   50},
    {"Appliances",      "Diagnostic machine",    	 19903,  4000},
    {"Appliances",      "VHS player",            	 1785,   200},
    {"Appliances",      "Playstation console",   	 2028,   500},
    {"Appliances",      "Retro gaming console",  	 1718,   500},
    {"Appliances",      "Hi-Fi speaker",         	 1839,   250},
    {"Appliances",      "Black subwoofer",       	 2232,   250},
    {"Appliances",      "Subwoofer",             	 1840,   250},
    {"Appliances",      "Small black speaker",   	 2229,   250},
    {"Appliances",      "Speaker on a stand",    	 2233,   100},
    {"Appliances",      "Speaker & stereo system",   2099,   500},
	{"Appliances",      "Surveillance camera",   	 1886,   50},
	{"Appliances",      "Security camera",       	 1622,   50},
	{"Appliances",      "Exercise bike",         	 2630,   500},
	{"Appliances",      "Treadmill",             	 2627,   500},
	{"Appliances",      "Lift bench",            	 2629,   250},
    {"Appliances",		"Pull up machine",       	 2628,   500},
    {"Appliances", 		"White turntable",           1954,   500},
    {"Appliances",      "Open laptop",               19893,  1000},
    {"Appliances",      "Closed laptop",             19894,  500},
    {"Appliances",  	"Drum Kit",      			 19609,  1000},
    {"Appliances",  	"Microphone",          		 19610,  500},
    {"Appliances",  	"Microphone Stand",    	 	 19611,  250},
    {"Appliances",  	"Guitar amp 1",           	 19612,  500},
    {"Appliances",  	"Guitar amp 2",         	 19613,  500},
    {"Appliances",  	"Guitar amp 3",       		 19614,  500},
    {"Appliances",  	"Guitar amp 4",       		 19615,  500},
    {"Appliances",  	"Guitar amp 5",       		 19616,  500},
    {"Bathroom",   		"Toilet",                	 2514,   250},
    {"Bathroom",   		"Bathtub",               	 2519,   500},
    {"Bathroom",   		"Toilet paper",          	 19873,  50},
    {"Bathroom",        "Towel rack",                11707,  100},
    {"Bathroom",   		"Toilet with rug",       	 2528,   500},
	{"Bathroom",   		"Toilet with rolls",     	 2525,   500},
	{"Bathroom",   		"Sink top",              	 2515,   100},
	{"Bathroom",   		"Dual sink top",         	 2150,   200},
	{"Bathroom",   		"Wood sided bathtub",    	 2526,   500},
	{"Bathroom",   		"Sprunk bathtub",        	 2097,   1000},
	{"Bathroom",  		"Shower curtains",       	 14481,  100},
	{"Bathroom",   		"Metal shower cabin",    	 2520,   500},
	{"Bathroom",   		"Glass shower cabin",    	 2517,   500},
	{"Bathroom",   		"Shower with curtains",  	 2527,   500},
	{"Bathroom",   		"Wall sink",             	 2518,   250},
	{"Bathroom",   		"Plain sink",            	 2739,   250},
	{"Bathroom",   		"Sink with extra soap",  	 2524,   250},
	{"Bathroom",   		"Sink with rug",         	 2523,   250},
	{"Bathroom",   		"Industrial sink",       	 11709,  500},
	{"Bedroom",    		"Prison bed",            	 1800,   100},
	{"Bedroom",   		"Folding bed",           	 1812,   100},
	{"Bedroom",    		"Red double bed",        	 11720,  500},
	{"Bedroom",    		"Wood double bed",       	 14866,  500},
	{"Bedroom",   	 	"Double plaid bed",      	 1794,   500},
	{"Bedroom",    		"Brown bed",        		 2299,   500},
	{"Bedroom",    		"Blue striped bed", 		 2302,   500},
	{"Bedroom",    		"Dark blue striped bed", 	 2298,   500},
	{"Bedroom",    		"White striped bed",     	 2090,   500},
	{"Bedroom",    		"Bed with cabinet",      	 2300,   500},
	{"Bedroom",    		"Pink & blue striped bed", 	 2301,   500},
	{"Bedroom",    		"Zebra print bed",       	 14446,  500},
	{"Bedroom",    		"Low striped bed",  		 1795,   500},
	{"Bedroom",    		"Low dark striped bed",      1798,   500},
	{"Bedroom",    		"Single plaid bed",      	 1796,   500},
	{"Bedroom",    		"Plain striped mattress",    1793,   500},
	{"Bedroom",    		"Silk sheeted bed",          1701,   500},
	{"Bedroom",    		"Framed striped bed",        1801,   500},
	{"Bedroom",    		"Framed brown bed",          1802,   500},
	{"Bedroom",    		"Wooden cabinet",            2330,   250},
	{"Bedroom",    		"Cabinet with TV",           2296,   500},
	{"Bedroom",    		"Dresser",               	 1416,   250},
	{"Bedroom",    		"Small dresser",             2095,   250},
	{"Bedroom",    		"Medium dresser",            1743,   250},
	{"Bedroom",    		"Wide dresser",              2087,   250},
	{"Bedroom",    		"Small wardrobe",            2307,   250},
	{"Bedroom",    		"Huge open wardrobe",        14556,  500},
	{"Bedroom",    		"Busted cabinet",            913,    500},
	{"Bedroom",    		"Busted dresser",            911,    250},
	{"Bedroom",    		"Dresser with no drawers",   912,    100},
	{"Carpets",    		"Rockstar carpet",           11737,  250},
    {"Carpets",    		"Plain red carpet",          2631,   250},
    {"Carpets",    		"Plain green carpet",        2632,   250},
    {"Carpets",    		"Patterned carpet",          2842,   250},
    {"Carpets",    		"Zig-zag patterned carpet",  2836,   250},
    {"Carpets",    		"Brown red striped carpet",  2847,   250},
    {"Carpets",    		"Old timer's carpet",        2833,   250},
    {"Carpets",    		"Red checkered carpet",      2818,   250},
    {"Carpets",    		"Green circled carpet",      2817,   250},
    {"Carpets",    		"Plain polkadot carpet",     2834,   250},
    {"Carpets",    		"Tiger rug",                 1828,   1000},
    {"Carpets",    		"Plain round rug",           2835,   250},
    {"Carpets",    		"Round green rug",           2841,   250},
    {"Kitchen",    		"CJ's kitchen",              14384,  3000},
    {"Kitchen",    		"Whole kitchen",             14720,  3000},
    {"Kitchen",    		"White kitchen sink",        2132,   500},
    {"Kitchen",    		"White kitchen counter",  	 2134,   500},
    {"Kitchen",    		"White kitchen fridge",      2131,   500},
    {"Kitchen",    		"White kitchen drawers",     2133,   500},
    {"Kitchen",    		"White kitchen corner",      2341,   500},
    {"Kitchen",    		"White kitchen cupboard",    2141,   500},
    {"Kitchen",    		"Green kitchen sink",        2336,   500},
    {"Kitchen",    		"Green kitchen counter",     2334,   500},
    {"Kitchen",    		"Green kitchen fridge",      2147,   500},
    {"Kitchen",    		"Green kitchen corner",      2338,   500},
    {"Kitchen",    		"Green kitchen washer",      2337,   500},
    {"Kitchen",    		"Green kitchen cupboard",    2158,   500},
    {"Kitchen",    		"Green kitchen stove",       2170,   500},
    {"Kitchen",    		"Red kitchen sink",          2130,   500},
    {"Kitchen",    		"Red kitchen fridge",        2127,   500},
    {"Kitchen",    		"Red kitchen cupboard",      2128,   500},
    {"Kitchen",    		"Red kitchen corner",        2304,   500},
    {"Kitchen",    		"Red kitchen counter",       2129,   500},
    {"Kitchen",    		"Wood kitchen sink",         2136,   500},
    {"Kitchen",    		"Wood kitchen counter",      2139,   500},
    {"Kitchen",    		"Wood kitchen cupboard",     2140,   500},
    {"Kitchen",    		"Wood kitchen washer",       2303,   500},
    {"Kitchen",    		"Wood kitchen unit",         2138,   500},
    {"Kitchen",    		"Wood kitchen corner",       2305,   500},
    {"Kitchen",    		"Wood kitchen stove",        2135,   500},
    {"Kitchen",    		"Modern stove",              19923,  1000},
    {"Kitchen",    		"Old timer's stove",         19915,  1000},
    {"Kitchen",    		"Fork",                      11715,  50},
    {"Kitchen",    		"Butter knife",              11716,  50},
    {"Kitchen",    		"Steak knife",               19583,  50},
    {"Kitchen",    		"Spatula",                   19586,  50},
    {"Kitchen",    		"Double handled pan",        19585,  100},
    {"Kitchen",    		"Single handled pan",        19584,  100},
    {"Kitchen",    		"Frying pan",                19581,  100},
    {"Kitchen",    		"Tall striped saucepan",     11719,  100},
    {"Kitchen",    		"Striped saucepan",          11718,  100},
    {"Kitchen",    		"Cooked steak",              19882,  50},
    {"Kitchen",    		"Raw steak",                 19582,  50},
    {"Kitchen",    		"Green apple",               19576,  50},
    {"Kitchen",    		"Red apple",                 19575,  50},
    {"Kitchen",    		"Orange",                    19574,  50},
    {"Kitchen",    		"Banana",                    19578,  50},
    {"Kitchen",         "Tomato",                    19577,  50},
    {"Tables",     		"Lab table",                 3383,   2000},
    {"Tables",     		"Pool table",                2964,   2000},
    {"Tables",     		"Blackjack table",           2188,   2000},
    {"Tables",     		"Betting table",             1824,   2000},
    {"Tables",     		"Roulette table",            1896,   2000},
    {"Tables",     		"Poker table",               19474,  1000},
    {"Tables",     		"Burger shot table",         2644,   500},
    {"Tables",     		"Cluckin' bell table",       2763,   500},
    {"Tables",     		"Wide cluckin' bell table",  2762,   500},
    {"Tables",     		"Square coffee table",       2370,   500},
    {"Tables",     		"Donut shop table",          2747,   500},
    {"Tables",     		"Pizza table",               2764,   500},
    {"Tables",     		"Wide coffee table",         2319,   500},
    {"Tables",     		"Rectangular green table",   11691,  500},
    {"Tables",     		"Squared green table",       11690,  500},
    {"Tables",     		"Round glass table",         1827,   500},
    {"Tables",     		"Round wooden table",        2111,   500},
    {"Tables",     		"Wide dining table",         2357,   500},
    {"Tables",     		"Plain wooden table",        2115,   500},
    {"Tables",     		"Plain brown wooden table",  1516,   500},
    {"Tables",     		"White polkadot table",      1770,   500},
    {"Tables",     		"Brown dining table",        1737,   500},
    {"Tables",     		"Round stone table",         2030,   500},
    {"Tables",     		"Wooden table with rim",     2699,   500},
    {"Tables",     		"Low coffee table",          1814,   500},
    {"Tables",     		"Low brown wooden table",    1433,   500},
    {"Tables",     		"Bedroom table",             2333,   500},
    {"Tables",     		"Round table with chairs",   1432,   500},
    {"Tables",     		"Table with benches",        1281,   500},
    {"Tables",     		"Checkered table & chairs",  1594,   500},
    {"Tables",     		"Wooden workshop table",     19922,  500},
    {"Tables",     		"Hexagon shaped table",      2725,   500},
    {"Tables",     		"Table with VCR",            2313,   500},
    {"Tables",     		"Low wooden TV stand",       2314,   500},
    {"Tables",     		"Low brown TV stand",        2315,   500},
    {"Tables",     		"Plain brown office desk",   2206,   500},
    {"Tables",     		"Office desk with computer", 2181,   1000},
    {"Tables",     		"Plain wooden office desk",  2185,   1000},
    {"Tables",     		"Computer desk",             2008,   1000},
    {"Chairs",     		"Blue swivel chair",         2356,   250},
    {"Chairs",     		"Brown dining chair",        1811,   250},
    {"Chairs",     		"Red folding chair",         2121,   250},
    {"Chairs",    		"Upholstered chair",         2748,   1000},
    {"Chairs",     		"Folding office chair",      1721,   250},
    {"Chairs",     		"Round black chair",         2776,   250},
    {"Chairs",     		"Black stool",               1716,   250},
    {"Chairs",     		"Brown stool",               2350,   250},
    {"Chairs",     		"Red stool",                 2125,   250},
    {"Chairs",     		"Tall wooden dining chair",  2124,   250},
    {"Chairs",     		"Tall brown dining chair",   1739,   250},
    {"Chairs",     		"Checkered dining chair",    2807,   250},
    {"Chairs",     		"Plain office chair",        1671,   250},
    {"Chairs",     		"Brown folding chair",       19996,  250},
    {"Chairs",     		"Light brown chair",         19994,  250},
    {"Chairs",     		"Black lounge chair",        1704,   500},
    {"Chairs",     		"Beige lounge chair",        1705,   500},
    {"Chairs",     		"Dark blue reclining chair", 1708,   500},
    {"Chairs",     		"Brown corner chair",  		 11682,  500},
    {"Chairs",     		"Old timer's lounge chair",  1711,   500},
    {"Chairs",     		"Old timer's rocking chair", 1735,   500},
    {"Chairs",     		"Two chairs and a table",    2571,   500},
    {"Chairs",     		"Dark brown foot stool",     2293,   500},
    {"Chairs",     		"Rocking chair",             11734,  250},
    {"Chairs",     		"Plaid sofa",                1764,   750},
    {"Chairs",     		"Long black sofa",           1723,   750},
    {"Chairs",     		"Beige sofa",                1702,   750},
    {"Chairs",     		"Brown couch",               1757,   750},
    {"Chairs",     		"Old timer's sofa",          1728,   750},
    {"Chairs",     		"Brown corner couch piece",  2292,   500},
    {"Chairs",     		"White & grey couch",        1761,   750},
    {"Chairs",     		"Patterned couch",           1760,   750},
    {"Chairs",     		"Plaid couch",               1764,   750},
    {"Chairs",     		"Dark blue couch",           1768,   750},
    {"Chairs",     		"Wide brown couch",          2290,   750},
    {"Chairs",     		"Green couch",               1766,   750},
    {"Chairs",     		"Patterned armrest couch",   1763,   750},
    {"Chairs",     		"Red couch",                 11717,  750},
    {"Chairs",     		"Very wide beige couch",     1710,   1500},
    {"Chairs",     		"Ultra wide beige couch",    1709,   2000},
    {"Chairs",     		"Red and white couch",       1707,   750},
    {"Posters/Frames",  "Burger shot poster",        2641,   50},
    {"Posters/Frames",  "Cluckin' bell poster",      2766,   50},
    {"Posters/Frames",  "Wash wands poster",         2685,   50},
    {"Posters/Frames",  "For lease poster",          11289,  50},
    {"Posters/Frames",  "Monkey juice poster",       19328,  50},
    {"Posters/Frames",  "Ring donuts poster",        2715,   50},
    {"Posters/Frames",  "Battered ring posterr",     2716,   50},
	{"Posters/Frames",  "Pizza poster",         	 2668,   50},
    {"Posters/Frames",  "T-Shirt poster",            2729,   50},
    {"Posters/Frames",  "Suburban poster",           2658,   50},
    {"Posters/Frames",  "Zip poster",                2736,   50},
    {"Posters/Frames",  "Binco poster",              2722,   50},
    {"Posters/Frames",  "99c binco poster",          2719,   50},
    {"Posters/Frames",  "Binco sale poster",         2721,   50},
    {"Posters/Frames",  "Heat poster",               2661,   50},
    {"Posters/Frames",  "Eris poster",               2655,   50},
    {"Posters/Frames",  "Bobo poster",               2662,   50},
    {"Posters/Frames",  "Base 5 poster",             2691,   50},
    {"Posters/Frames",  "Base 5 cutout #1",        	 2693,   50},
    {"Posters/Frames",  "Base 5 cutout #2",        	 2692,   50},
    {"Posters/Frames",  "Long base 5 poster #1",   	 2695,   50},
    {"Posters/Frames",  "Long base 5 poster #2",   	 2696, 	 50},
    {"Posters/Frames",  "White prolaps poster",   	 2697,   50},
    {"Posters/Frames",  "Black prolaps poster",   	 2656,   50},
    {"Posters/Frames",  "San Fierro frame",       	 19175,  100},
    {"Posters/Frames",  "Flint County frame",     	 19174,  100},
    {"Posters/Frames",  "Gant Bridge frame",      	 19173,  100},
    {"Posters/Frames",  "Los Santos frame",       	 19172,  100},
    {"Posters/Frames",  "City View frame",    		 2289,   100},
    {"Posters/Frames",  "Los Angeles frame",      	 2258,   100},
	{"Posters/Frames",  "Wooden frame",           	 2288,   100},
	{"Posters/Frames",  "Sail Boat frame",        	 2287,   100},
	{"Posters/Frames",  "Ship frame",             	 2286,   100},
	{"Posters/Frames",  "Water frame",            	 2285,   100},
	{"Posters/Frames",  "Church frame",           	 2284,   100},
    {"Posters/Frames",  "Rural frame",        		 2282,   100},
    {"Posters/Frames",  "Sunset frame",				 2281,   100},
    {"Posters/Frames",  "Coast frame",        		 2280,   100},
    {"Posters/Frames",  "Mount chiliad frame",    	 2279,   100},
    {"Posters/Frames",  "Cargo ship frame",       	 2278,   100},
    {"Posters/Frames",  "Cat frame",          		 2277,   100},
    {"Posters/Frames",  "Bridge frame",          	 2276,   100},
    {"Posters/Frames",  "Fruit Bowl frame",       	 2275,   100},
    {"Posters/Frames",  "Flower frame",          	 2274,   100},
    {"Posters/Frames",  "Bouquet frame",          	 2273,   100},
    {"Posters/Frames",  "Landscape frame",        	 2272,   100},
    {"Posters/Frames",  "Paper frame",         		 2271,   100},
    {"Posters/Frames",  "Leaves frame",         	 2270,   100},
    {"Posters/Frames",  "Lake frame",         		 2269,   100},
    {"Posters/Frames",  "Black cat frame",        	 2268,   100},
    {"Posters/Frames",  "Cruise ship frame",      	 2267,   100},
    {"Posters/Frames",  "Night downtown frame",		 2266,   100},
    {"Posters/Frames",  "Dseert rocks frame",     	 2265,   100},
    {"Posters/Frames",  "Beach frame",         		 2264,   100},
    {"Posters/Frames",  "Dock frame",         		 2263,   100},
    {"Posters/Frames",  "Downtown frame",         	 2262,   100},
    {"Posters/Frames",  "Golden gate frame",      	 2261,   100},
    {"Posters/Frames",  "Old Boat frame",         	 2260,   100},
    {"Posters/Frames",  "Bowling frame",          	 2259,   100},
    {"Posters/Frames",  "Pattern frame",        	 2283,   100},
    {"Posters/Frames",  "Squares frame",          	 2257,   100},
    {"Posters/Frames",  "Palm trees frame",       	 2256,   100},
    {"Posters/Frames",  "Erotic frame",         	 2255,   100},
    {"Posters/Frames",  "Yellow car frame",       	 2254,   10},
    {"Storage",     	"Book shelf",                1742,   500},
	{"Storage",     	"Wardrobe",         	     2307,   400},
	{"Storage",     	"Wooden crate",            	 1217,   150},
	{"Storage",     	"Metal crate",               964,    150},
	{"Storage",     	"Wide office cabinet",       2200,   150},
	{"Storage",    	 	"Yellow cabinet",         	 1730,   150},
	{"Storage",     	"Open gym locker",        	 11730,  250},
	{"Storage",     	"Closed gym locker",      	 11729,  250},
	{"Storage",     	"Toolbox",          		 19921,  500},
	{"Storage",     	"Chest",                     19918,  100},
	{"Storage",     	"Dresser",                   2094,   250},
	{"Storage",     	"Warehouse rack",         	 3761,   150},
	{"Storage",     	"Barrel rack",           	 925,    250},
	{"Storage",     	"Sex toy rack",          	 2581,   250},
	{"Storage",     	"Sex magazine rack #1",      2578,   250},
	{"Storage",     	"Sex magazine rack #2",      2579,   250},
	{"Storage",     	"Rack with no shelves",      2509,   250},
	{"Storage",     	"Rack with 3 shelves",       2482,   250},
	{"Storage",     	"Rack with 4 shelves",       2475,   250},
	{"Storage",     	"Small rack",			 	 2463,   250},
	{"Storage",     	"Wide rack",              	 2462,   250},
	{"Storage",     	"Dresser with drawers",      1743,   250},
	{"Storage",     	"Wide dresser",              2087,   250},
	{"Storage",     	"Tall dresser",              2088,   250},
	{"Storage",     	"Brown dresser",             2089,   250},
	{"Storage",     	"Single dresser",            2095,   250},
	{"Storage",     	"White filing cabinet",   	 2197,   250},
	{"Storage",     	"Green filing cabinet",   	 2610,   250},
	{"Storage",     	"Dual filing cabinets",      2007,   250},
	{"Storage",     	"Black shelf",          	 2078,   250},
	{"Storage",     	"Brown shelf",               2204,   250},
	{"Storage",     	"Tool shelf",                19899,  250},
	{"Storage",    	 	"Tool cabinet",     		 19900,  250},
	{"Storage",     	"Wall mounted shelf",        19940,  250},
	{"Storage",     	"Clothes shelf",          	 2708,   250},
	{"Storage",     	"Gun rack",         		 2046,   250},
	{"Storage",     	"Shop shelf",             	 19640,  250},
	{"Storage",     	"Blue office shelf",         2191,   250},
	{"Storage",     	"Wooden office shelf",       2199,   250},
	{"Storage",     	"Office book shelf",         2161,   250},
	{"Storage",     	"Tall office cabinet",       2167,   100},
	{"Storage",     	"Wide office cabinet",       2163,   100},
	{"Plants",   		"Palm plant #1",          	 625,    100},
    {"Plants",   		"Palm plant #2",          	 626,    100},
    {"Plants",   		"Palm plant #3",          	 627,    100},
    {"Plants",   		"Palm plant #4",          	 628,  	 100},
    {"Plants",   		"Palm plant #5",          	 630,    100},
    {"Plants",   		"Palm plant #6",          	 631,    100},
    {"Plants",   		"Palm plant #7",          	 632,    100},
    {"Plants",   		"Palm plant #8",         	 633,    100},
    {"Plants",  		"Palm plant #9",         	 646,    100},
    {"Plants",   		"Palm plant #10",            644,    100},
    {"Plants",   		"Palm plant #11",         	 2001,   100},
    {"Plants",   		"Palm plant #12",        	 2010,   100},
    {"Plants",   		"Palm plant #13",        	 2011,   150},
    {"Plants",   		"Potted plant #1",           948,    150},
    {"Plants",   		"Potted plant #2",           949,    150},
    {"Plants",   		"Potted plant #3",           950,  	 150},
    {"Plants",   		"Potted plant #4",           2194,   150},
    {"Plants",   		"Potted plant #5",           2195,   150},
    {"Plants",   		"Potted plant #6",           2203,   150},
    {"Plants",   		"Potted plant #7",           2240,   150},
    {"Plants",   		"Potted plant #8",           2241,   150},
    {"Plants",   		"Potted plant #9",           2242, 	 150},
    {"Plants",   		"Potted plant #10",          2244, 	 150},
    {"Plants",   		"Potted plant #11",          2245,   150},
    {"Plants",   		"Potted plant #12",          2246,   150},
    {"Plants",   		"Potted plant #13",          2248,   150},
    {"Plants",   		"Potted plant #14",          2252,   150},
    {"Plants",   		"Potted plant #15",          2253,   150},
    {"Plants",   		"Potted plant #16",          2811,   150},
    {"Plants",   		"Wide plant",      			 638,    250},
    {"Plants",   		"Single bush plant",         1361,   250},
    {"Plants",   		"Wide bush plant",           1360,   250},
    {"Plants",  		"Bush plant and bench",      1364,   500},
    {"Plants",   		"Window plant #1",           3802,   200},
    {"Plants",   		"Window plant #2",           3810,   200},
    {"Trash",           "Wastebin",                  11706,  50},
    {"Trash",           "Blue trashcan on wheels",   1339,   50},
	{"Trash",           "Blue trashcan",     		 1430,   50},
	{"Trash",           "Trashcan with holes",       1359,   50},
	{"Trash",           "Cluckin' bell trashcan", 	 2770,   50},
	{"Trash",           "Burger shot trashcan",   	 2420,   50},
	{"Trash",           "Round bagged trashcan",     1330,   50},
	{"Trash",           "Round white trashcan",      1329,   50},
	{"Trash",           "Metal trashcan",            1328, 	 50},
	{"Trash",           "Full dumpster",          	 1415,   50},
	{"Trash",           "Closed dumpster",           1227,   50},
	{"Trash",           "Bottle disposal unit",      1336,   50},
	{"Trash",           "Blue dumpster",             1334,   50},
	{"Trash",           "Red dumpster",              1333,   50},
	{"Trash",           "Hippo trashcan",            1371,   50},
	{"Trash",           "Poor trashcan",             1347,   50},
	{"Trash",           "Cement trashcan",           1300,   50},
	{"Trash",           "Trashcan filled with wood", 1442,   50},
	{"Trash",           "Two pallets & trash",       1450,   50},
	{"Trash",           "Single pallet",             1448,   50},
	{"Trash",           "Garbage bag",               1265,   50},
	{"Trash",           "Burger shot bag",           2663,   50},
	{"Trash",           "Pile of boxes",             1440,   50},
    {"Trash",     		"Cardboard box",             1221,   50},
    {"Trash",           "Open pizza box",            2860,   50},
    {"Trash",           "Takeaway trash",         	 2866,   50},
    {"Trash",           "Burger shot trash",      	 2840,   50},
	{"Trash",           "Dirty dishes #1",      	 2812,   50},
    {"Trash",           "Dirty dishes #2",   		 2822,   50},
    {"Trash",           "Dirty dishes #3",      	 2829,   50},
    {"Trash",           "Dirty dishes #4",      	 2830,   50},
    {"Trash",           "Dirty dishes #5",      	 2831,   50},
    {"Trash",           "Dirty dishes #6",      	 2832,   50},
    {"Trash",           "Clean dishes #1",   		 2862,   50},
    {"Trash",           "Clean dishes #2",   		 2863,   50},
    {"Trash",           "Clean dishes #3",   		 2864,   50},
    {"Trash",           "Clean dishes #4",   		 2865,   50},
    {"Trash",           "Assorted trash #1",         2672,   50},
    {"Trash",           "Assorted trash #2",         2677,   50},
    {"Trash",           "Assorted trash #3",         2675,   50},
    {"Trash",           "Assorted trash #4",         2676,   50},
    {"Trash",           "Assorted trash #5",         2674,   50},
    {"Trash",           "Assorted trash #6",         2673,   50},
    {"Trash",           "Assorted trash #7",         2670,   50},
    {"Doors & Gates",   "Door with bars",            2930,   100},
    {"Doors & Gates",   "Petrol door",       		 2911,   100},
    {"Doors & Gates",   "Flat door",          		 3061,   100},
    {"Doors & Gates",   "Wardrobe door",         	 1567,   100},
    {"Doors & Gates",   "Green push door",        	 1492,   100},
    {"Doors & Gates",   "Red windowed door",       	 1493,   100},
    {"Doors & Gates",   "Black wooden door",         1494,   100},
    {"Doors & Gates",   "Brown windowed door",       3089,   100},
    {"Doors & Gates",   "Wooden farm door",        	 1497,   100},
    {"Doors & Gates",   "White wooden door",         1498,   100},
    {"Doors & Gates",   "Warehouse door",       	 1499,   100},
    {"Doors & Gates",   "Red door",        			 1504,   100},
    {"Doors & Gates",   "Blue door",        		 1505,   100},
    {"Doors & Gates",   "White door",        		 1506,   100},
    {"Doors & Gates",   "Yellow door",        		 1507,   100},
    {"Doors & Gates",   "Kitchen door",        		 1523,   100},
    {"Doors & Gates",   "Motel door",        		 1535,   100},
    {"Doors & Gates",   "Blue motel door",           2970,   100},
    {"Doors & Gates",   "24/7 door",     			 1560,   100},
    {"Doors & Gates",   "Barred door",          	 3061,   100},
    {"Doors & Gates",   "Red motel door",            3029,   100},
    {"Doors & Gates",   "Security door",       		 2949,   100},
    {"Doors & Gates",   "Tall white door",           2948,   100},
    {"Doors & Gates",   "Bank door",           		 2946,   100},
    {"Doors & Gates",   "Ship door",     			 2944,   100},
    {"Doors & Gates",   "Tower door",        		 977,    100},
    {"Doors & Gates",   "Maintenance doors",         11714,  100},
    {"Doors & Gates",   "Dual office door",          19176,  100},
    {"Doors & Gates",   "Screen door #1",        	 1495,   100},
    {"Doors & Gates",   "Screen door #2",        	 1500,   100},
    {"Doors & Gates",   "Screen door #3",        	 1501,   100},
    {"Doors & Gates",   "Shop door #1",        		 1532,   100},
    {"Doors & Gates",   "Shop door #2",      		 1496,   100},
    {"Doors & Gates",   "Shop door #3",        		 1533,   100},
    {"Doors & Gates",   "Shop door #4",        		 1537,   100},
    {"Doors & Gates",   "Shop door #5",        		 1538,   100},
    {"Doors & Gates",   "Office door #1",          	 1566,   100},
    {"Doors & Gates",   "Office door #2",         	 1569,   100},
    {"Doors & Gates",   "Office door #3",        	 1536,   100},
    {"Doors & Gates",   "Office door #4",        	 1557,   100},
    {"Doors & Gates",   "Office door #5",        	 1556,   100},
    {"Doors & Gates",   "Wooden push door #1",       1491,   100},
    {"Doors & Gates",   "Wooden push door #2",       1502,   100},
    {"Doors & Gates",   "Garage door #1",            8957,   100},
    {"Doors & Gates",   "Garage door #2",            7891,   100},
    {"Doors & Gates",   "Garage door #3",     	 	 3037,   100},
    {"Doors & Gates",   "Garage door #4",            19861,  100},
    {"Doors & Gates",   "Garage door #5",            19864,  100},
    {"Doors & Gates",   "Plain metal bar gate",      19912,  1000},
    {"Doors & Gates",   "Tall metal bar gate",       971,    1000},
    {"Doors & Gates",   "Long metal bar gate",       975,    1000},
    {"Doors & Gates",   "Los Santos Airport gate",   980,    1000},
    {"Doors & Gates",   "Fenced gate",               985,    1000},
    {"Doors & Gates",   "No parking gate",           19870,  1000},
    {"Doors & Gates",   "Fenced gate on wheels",     988,    1000},
    {"Walls",           "wall001",                   19353,  100},
    {"Walls",           "wall002",                   19354,  100},
    {"Walls",           "wall003",                   19355,  100},
    {"Walls",           "wall004",                   19356,  100},
    {"Walls",           "wall005",                   19357,  100},
    {"Walls",           "wall006",                   19358,  100},
    {"Walls",           "wall007",                   19359,  100},
    {"Walls",           "wall008",                   19360,  100},
    {"Walls",           "wall009",                   19361,  100},
    {"Walls",           "wall010",                   19362,  100},
    {"Walls",           "wall011",                   19363,  100},
    {"Walls",           "wall012",                   19364,  100},
    {"Walls",           "wall013",                   19365,  100},
    {"Walls",           "wall014",                   19366,  100},
    {"Walls",           "wall015",                   19367,  100},
    {"Walls",           "wall016",                   19368,  100},
    {"Walls",           "wall017",                   19369,  100},
    {"Walls",           "wall018",                   19370,  100},
    {"Walls",           "wall019",                   19371,  100},
    {"Walls",           "wall020",                   19372,  100},
    {"Walls",           "wall021",                   19373,  100},

    {"Walls",           "wall023",                   19375,  100},
    {"Walls",           "wall024",                   19376,  100},
    {"Walls",           "wall025",                   19377,  100},
    {"Walls",           "wall026",                   19378,  100},
    {"Walls",           "wall027",                   19379,  100},
    {"Walls",           "wall028",                   19380,  100},
    {"Walls",           "wall029",                   19381,  100},

    {"Walls",           "wall031",                   19383,  100},
    {"Walls",           "wall032",                   19384,  100},
    {"Walls",           "wall033",                   19385,  100},
    {"Walls",           "wall034",                   19386,  100},
    {"Walls",           "wall035",                   19387,  100},
    {"Walls",           "wall036",                   19388,  100},
    {"Walls",           "wall037",                   19389,  100},
    {"Walls",           "wall038",                   19390,  100},
    {"Walls",           "wall039",                   19391,  100},
    {"Walls",           "wall040",                   19392,  100},
    {"Walls",           "wall041",                   19393,  100},
    {"Walls",           "wall042",                   19394,  100},
    {"Walls",           "wall043",                   19395,  100},
    {"Walls",           "wall044",                   19396,  100},
    {"Walls",           "wall045",                   19397,  100},
    {"Walls",           "wall046",                   19398,  100},
    {"Walls",           "wall047",                   19399,  100},
    {"Walls",           "wall048",                   19400,  100},
    {"Walls",           "wall049",                   19401,  100},
    {"Walls",           "wall050",                   19402,  100},
    {"Walls",           "wall051",                   19403,  100},
    {"Walls",           "wall052",                   19404,  100},
    {"Walls",           "wall053",                   19405,  100},
    {"Walls",           "wall054",                   19406,  100},
    {"Walls",           "wall055",                   19407,  100},
    {"Walls",           "wall056",                   19408,  100},
    {"Walls",           "wall057",                   19409,  100},
    {"Walls",           "wall058",                   19410,  100},
    {"Walls",           "wall059",                   19411,  100},
    {"Walls",           "wall060",                   19412,  100},
    {"Walls",           "wall061",                   19413,  100},
    {"Walls",           "wall062",                   19414,  100},
    {"Walls",           "wall063",                   19415,  100},
    {"Walls",           "wall064",                   19416,  100},
    {"Walls",           "wall065",                   19417,  100},
    {"Walls",           "wall066",                   19426,  100},
    {"Walls",           "wall067",                   19427,  100},
    {"Walls",           "wall068",                   19428,  100},
    {"Walls",           "wall069",                   19429,  100},
    {"Walls",           "wall070",                   19430,  100},
    {"Walls",           "wall071",                   19431,  100},
    {"Walls",           "wall072",                   19432,  100},
    {"Walls",           "wall073",                   19433,  100},
    {"Walls",           "wall074",                   19434,  100},
    {"Walls",           "wall075",                   19435,  100},
    {"Walls",           "wall076",                   19436,  100},
    {"Walls",           "wall077",                   19437,  100},
    {"Walls",           "wall078",                   19438,  100},
    {"Walls",           "wall079",                   19439,  100},
    {"Walls",           "wall080",                   19440,  100},
    {"Walls",           "wall081",                   19441,  100},
    {"Walls",           "wall082",                   19442,  100},
    {"Walls",           "wall083",                   19443,  100},
    {"Walls",           "wall084",                   19444,  100},
    {"Walls",           "wall085",                   19445,  100},
    {"Walls",           "wall086",                   19446,  100},
    {"Walls",           "wall087",                   19447,  100},
    {"Walls",           "wall088",                   19448,  100},
    {"Walls",           "wall089",                   19449,  100},
    {"Walls",           "wall090",                   19450,  100},
    {"Walls",           "wall091",                   19451,  100},
    {"Walls",           "wall092",                   19452,  100},
    {"Walls",           "wall093",                   19453,  100},
    {"Walls",           "wall094",                   19454,  100},
    {"Walls",           "wall095",                   19455,  100},
    {"Walls",           "wall096",                   19456,  100},
    {"Walls",           "wall097",                   19457,  100},
    {"Walls",           "wall098",                   19458,  100},
    {"Walls",           "wall099",                   19459,  100},
    {"Walls",           "wall100",                   19460,  100},
    {"Walls",           "wall101",                   19461,  100},
    {"Walls",           "wall102",                   19462,  100},
    {"Walls",           "wall103",                   19463,  100},
    {"Walls",           "wall104",                   19464,  100},
    {"Walls",           "wall105",                   19465,  100},
    {"Decor",           "Guard tower",               3279,   5000},
    {"Decor",           "Dance floor",               19128,  1000},
    {"Decor",           "Tool board",                19815,  50},
    {"Decor",           "Mailbox",                   19867,  50},
    {"Decor",           "Single key",                11746,  50},
    {"Decor",           "Oxygen cylinder",           19816,  50},
    {"Decor",           "Cauldron",                  19527,  50},
    {"Decor",           "Valve",                     2983,   50},
    {"Decor",           "Writing board",             19805,  50},
    {"Decor",           "Punching bag",              1985,   50},
    {"Decor",           "Desk fan",           		 2192,   50},
    {"Decor",           "Satellite dish",            3031,   50},
    {"Decor",           "Shopping cart",             1349,   50},
    {"Decor",           "Fireplace logs",			 19632,  50},
    {"Decor",           "Telescope",                 2600,   50},
    {"Decor",           "Ladder",                    1428,   50},
    {"Decor",           "Plank",                     2937,   50},
    {"Decor",           "Blue curtains",             2558,   50},
    {"Decor",           "Old curtains",              14443,  50},
    {"Decor",           "Blinds",                    18084,  50},
    {"Decor",           "United states flag",        11245,  50},
    {"Decor",           "Double US flag",            2614,   50},
    {"Decor",           "Confederate flag",          2048,   50},
    {"Decor",           "Basketball court",          946,    50},
    {"Decor",           "Basketball",                2114,   50},
    {"Decor",           "Fire exit sign",            11710,  50},
    {"Decor",           "Fire extinguisher",         2690,   50},
    {"Decor",           "Fire extinguisher panel",   11713,  50},
    {"Decor",           "Fire alarm",                11713,  50},
    {"Decor",           "Fire hydrant",              1211,   50},
	{"Decor",           "Cocaine packet",            2891,   50},
    {"Decor",           "Drug bundle",         		 1279,   50},
    {"Decor",           "White package",           	 1575,   50},
    {"Decor",           "Orange package",          	 1576,   50},
    {"Decor",           "Yellow package",          	 1577, 	 50},
    {"Decor",           "Green package",           	 1578, 	 50},
    {"Decor",           "Blue package",            	 1579,   50},
    {"Decor",           "Red package",             	 1580,   50},
    {"Decor",           "Marijuana bundle",     	 2901,   50},
    {"Decor",           "Marijuana plant",           3409,   50},
    {"Decor",           "Ashtray",           		 1510, 	 50},
    {"Decor",           "Ashtray with cigar",        1665,   50},
    {"Decor",           "Pumpkin",                   19320,  50},
    {"Decor",           "Christmas tree",            19076,  50},
    {"Decor",           "Stage",         			 19608,  250},
    {"Decor",           "Gold record",          	 19617,  100},
    {"Decor",           "Moose head",        		 1736,   300},
    {"Decor",           "Cow",                       19833,  500},
    {"Decor",           "Rocking horse",             11733,  50},
    {"Decor",			"Deer",						 19315,  50},
    {"Decor",           "Boot",                      11735,  50},
    {"Decor",           "Old radiator",      		 1738,   50},
    {"Decor",           "Radiator",                  11721,  50},
    {"Decor",           "Round light",               11727,  50},
    {"Decor",           "Mop & pail",          		 1778,   50},
    {"Decor",           "Chambermaid",       		 1789,   50},
    {"Decor",           "Bucket",            		 2713,   50},
    {"Decor",           "Trolley",                   2994,   50},
    {"Decor",           "Body bags",        		 16444,  50},
    {"Decor",           "Beach ball",                1598, 	 50},
    {"Decor",           "Blackboard",        		 3077,   50},
    {"Decor",           "Dumbell",       			 3072,   50},
    {"Decor",           "Sports bag",                11745,  50},
    {"Decor",           "Portable toilet",           2984,   50},
    {"Decor",   		"Round burger shot sign", 	 2643,   50},
    {"Decor",           "Stretcher",          		 1997,   50},
    {"Decor",           "Hospital bed",              2146,   50},
    {"Decor",           "Work lamp",                 2196,   50},
    {"Decor",           "Fire bell",       			 1613,   50},
    {"Decor",           "Sword",                     19590,  50},
    {"Decor",           "Wooden bat",                19914,  50},
    {"Decor",           "Hand fan",                  19591,  50},
    {"Decor",           "Shop basket",               19592,  50},
    {"Decor",           "Safe door",                 19619,  50},
    {"Decor",           "Safe enclosure",            19618,  50},
    {"Decor",           "Bag of money",              1550,   50},
    {"Decor",           "Oil can",                   19621,  50},
    {"Decor",           "Wrench",                    19627,  50},
    {"Decor",           "Engine",                    19917,  50},
    {"Decor",           "Broom",                     19622,  50},
    {"Decor",           "Briefcase",                 19624,  50},
    {"Decor",           "Cigarette",                 19625,  50},
    {"Decor",           "Rolled joint",              3027,   50},
    {"Decor",           "Fire wood",                 19632,  50},
    {"Decor",           "Compacted trash",           19772,  50},
    {"Decor",           "Medic kit",                 11738,  50},
    {"Decor",           "Clip",                      19995,  50},
    {"Decor",           "Dippo lighter",             19998,  50},
    {"Decor",           "Briquettes",                19573,  50},
    {"Decor",           "Meat Sack",                 2805,   50},
    {"Decor",           "Small meat sack",           2803,   50},
    {"Decor",           "Stack of magazines",        2855,   50},
    {"Decor",           "Scattered magazines",       2852,   50},
    {"Decor",           "Scattered books",           2854,   50},
    {"Decor",           "Wooden stairs",             3361,   50},
    {"Decor",           "Long concrete stairs",      14410,  50},
    {"Decor",           "Short concrete stairs",     14416,  50},
    {"Decor",           "Short stairs",              14877,  50},
    {"Decor",           "Big window",      			 19325,  100},
    {"Decor",           "Small window",           	 19466,  50},
    {"Decor",           "Breakable window",       	 1649,   75},
    {"Decor",           "Red neon tube",             18647,  100},
    {"Decor",           "Blue neon tune",            18648,  100},
    {"Decor",           "Green neon tube",           18649,  100},
    {"Decor",           "Yellow neon tube",          18650,  100},
    {"Decor",           "Pink neon tube",            18651,  100},
    {"Decor",           "White neon tube",           18652,  100},
    {"Decor",           "Beer bottle",               1543,   10},
    {"Decor",           "Yellow beer bottle",        1544,   10},
    {"Decor",           "Medicine bottle",           1950,   10},
    {"Decor",           "Green beer bottle",         19818,  10},
    {"Decor",           "Whiskey bottle",            19823,  10},
    {"Decor",           "Wine bottle",               19820,  10},
    {"Decor",           "Red wine bottle",           19822,  10},
    {"Decor",           "Champagne bottle",          19824,  10},
    {"Decor",           "Beer",                      19821,  10},
    {"Decor",           "Target #1",           		 2056,   50},
    {"Decor",           "Target #2",           		 2055,   50},
    {"Decor",           "Target #3",           		 2051,   50},
    {"Decor",           "Target #4",           		 2050,   50},
    {"Decor",           "Target #5",           		 2049,   50},
    {"Decor",           "Clothes pile #1",     		 2819,   50},
    {"Decor",           "Clothes pile #2",      	 2843,   50},
    {"Decor",           "Clothes pile #3",      	 2844,   50},
    {"Decor",           "Clothes pile #4",      	 2845,   50},
    {"Decor",           "Clothes pile #5",      	 2846,   50},
    {"Decor",           "Light #0",             	 3877,   50},
    {"Decor",           "Light #1",             	 3524,   50},
    {"Decor",           "Light #2",             	 3461,   50},
    {"Decor",           "Dragon Head",          	 3528,   150},
    {"Decor",           "Fountain",             	 9833,   150},
    {"Decor",           "Military RPG",            	 3267,   150},
    {"Decor",           "Light",                 	 1231,   150},
    {"Decor",           "Blue Light",             	19122,   150},
    {"Decor",           "Green Light",              19123,   150},
    {"Decor",           "Red Light",           	    19124,   150},
	{"Decor",           "HeliPad",                   3928,   200},
    {"Weapons",         "9mm",                        346,    50},
    {"Weapons",         "Deagle",                     348,    50},
    {"Weapons",         "Shotgun",                    349,    50},
    {"Weapons",         "Ak-47",                      355,    50},
    {"Weapons",         "UZI",                        352,    50},
    {"Weapons",         "Camera",                     367,    50}
};
enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eMapIcon,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA
};

new const staticEntrances[][entranceEnum] =
{
	{"County General", 	 	 1,  1,  22, true, 2034.2003, -1402.1976, 17.2951, 180.0000, -2330.0376,111.4688,-5.3942, 180.0000},
	{"All Saints Hospital",  1,  2,  22, true, 1172.5100, -1325.3057, 15.4045, 270.0000, -2330.0376,111.4688,-5.3942, 180.0000},
	{"Mulholland Bank", 	 5,  3,  52, true,  1465.1348, -1010.5063, 26.8438, 180.0000, 1667.3536, -995.3700, 683.6913, 0.0000},
//	{"City Hall",            3,  4,  0,  false, 1482.6517, -1771.6108, 18.7958, 0.0000,   390.1344, 173.7334, 1008.3828, 90.0000},
	{"Police Department",    2,  5,  30, true,  1554.8918, -1675.6486, 16.1953, 90.0000,  1553.2065,-1674.0422,2110.5356, 270.0000},
	{"Licensing department", 3,  6,  55, false, 1219.2590, -1812.1093, 16.5938, 180.0000, -2029.7135, -119.2240, 1035.1719, 0.0000},

//	{"Police Department",    2,  5,  30, true,  1552.7358, -1675.8599, 16.1953, 90.0000,  1553.2065,-1674.0422,2110.5356, 270.0000},
//	{"Licensing department", 3,  6,  55, false, 1219.1294, -1811.7042, 16.5938, 180.0000, -2029.7135, -119.2240, 1035.1719, 0.0000},
	{"Donator Lounge",           3,  7,  59, true, 	1310.2443, -1367.5555, 13.5376, 270.0000, 1821.6951, -1309.9364, 1131.7552, 0.0000},
	{"Drug den",             5,  8,  23, false, 2160.9736, -1700.7681, 15.0859, 225.0000, 318.6025, 1114.9443, 1083.8828, 0.0000},
	{"Crack house",          5,  9,  23, false, 2351.9138, -1170.1725, 28.0507, 0.0000,   2352.3337, -1180.9257, 1027.9766, 90.0000},
	{"Heisenberg's trailer", 2,  10, 37, false, -65.0972, -1574.3820, 2.6107, 180.0000,   1.6362, -3.0563, 999.4284, 90.0000},
	{"FBI headquarters",     1,  11, 30, true,  330.6662, -1509.9915, 36.0391, 225.0000,  -501.1844, 286.8678, 2001.0950, 0.0000},
	{"Los Santos Casino",    0,  0, 25, true,  1603.5885,-1170.0281,24.0781, 180.0000, 1603.5900,-1173.1576,24.3658, 180.0000}
//	{"Rodeo Bank",           5,  13, 52, true,  593.5599, -1250.8365, 18.2484, 20.0000,   1667.3536, -995.3700, 683.6913, 0.0000}
};
enum locEnum
{
	locID,
	locName[32],
	bool:locExists,
	Float:locPosX,
	Float:locPosY,
	Float:locPosZ
};
new LocationInfo[MAX_LOCATIONS][locEnum];

enum impoundData {
	impoundID,
	impoundExists,
	Float:impoundLot[3],
	Float:impoundRelease[4],
	Text3D:impoundText3D,
	impoundPickup
};
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];


enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	jobActor,
	Float:actorangle
};

new const jobLocations[][jobEnum] =
{
	{"Pizzaman", 		2104.7771, -1805.1772, 13.5547, 155, 89.429504},
	{"Courier",     	1767.2609, -2042.0455, 13.5316, 236, 265.8613},
	{"Fisherman",   	393.2632, -2070.5837, 7.8359, 261, 77.575897},
	{"Weapons Dealer",  1365.9685, -1274.6963, 13.5469, 30, 138.5629},
	{"Mechanic",        1957.9480, -1578.8147, 13.7161, 8, 182.397354},
	{"Miner",           1262.5063, -1265.6266, 13.3809, 260, 0.892628},
	{"Street Sweeper",  2194.4561, -1973.1625, 13.5592, 67, 162.154998},
	{"Taxi Driver",     1748.1373, -1863.0981, 13.5755, 7, 356.196624},
	{"Drug Dealer",     2160.2219, -1698.5747, 15.0859, 28, 88.8670},
	{"Lawyer",          1381.0668, -1086.6857, 27.3906, 17, 98.304618},
	{"Detective",       1547.6234, -1680.8387, 13.5601, 147, 90.0000}, //xd
//	{"Thief",           1577.1469, -1475.1631, 14.2195, 29, 85.531280},
	{"Garbage Man",     2441.6909, -2115.9131, 13.5469, 142, 35.699779},
	{"Farmer",          -366.3515, -1412.8286, 25.7266, 131, 36.728786},
	{"Lumber Jack",      2359.1599,-650.2137,128.0523, 16, 276.390838}
//	{"Forklift",        2424.3030,-2098.8564,13.7151}
};

enum atmEnum
{
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmA
};

new const atmMachines[][atmEnum] =
{
 //   {2228.394775, -1714.255126, 13.158315, 270.000000},
    {1928.599975, -1779.941650, 13.136871, 90.000000},
//    {1493.294677, -1772.306640, 18.385747, 180.000000},
    {1102.299438, -1438.380981, 15.396868, 90.000000},
    {563.902526, -1293.948730, 16.858232, 180.000000},
    {2233.269042, -1158.040527, 25.540679, 270.000000},
    {827.125183, -1345.751220, 13.182147, 270.000000},
    {827.125183, -1346.811157, 13.182147, 270.000000},
    {1093.036621, 29.262479, 1000.309509, 0.000000},
    {-14.377381, -180.600250, 1003.186889, 180.000000},
    {9.334012, -31.044189, 1003.159179, 270.000000},
    {-24.413511, -91.806381, 1003.126708, 180.000000},
    {-21.125793, -140.438766, 1003.166564, 180.000000},
    {-24.290849, -57.946674, 1003.176574, 180.000000}
};

enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},
    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};

new const Float:minerPositions[][] =
{
    {1276.6024, -1252.0608, 13.8471},
	{1264.3618, -1240.3776, 16.0091},
	{1255.6558, -1242.5010, 17.6045},
	{1255.5265, -1251.3208, 13.8461}
};
new const Float:paintballTSpawns[][] =
{ // TDM Arena
	//   X         Y        Z          R
	{1303.8156, 1.8952, 1001.0244, 146.4729}, // Team 1
	{1260.6339, -66.3295, 1002.4949, 318.4712} // Team 2
};
new const Float:paintballDSpawns[][] =
{ // Deagle Arena
    //   X         Y        Z          R
    {1299.0728, 2103.4670, 11.0234, 10.4824},
	{1298.5331, 2196.3188, 11.0234, 2.9623},
	{1397.0685, 2101.0967, 11.0234, 260.1884},
	{1315.7385, 2206.4363, 16.8045, 205.3078},
	{1388.1871, 2206.5242, 16.7969, 267.3483},
	{1407.4728, 2140.1846, 17.6797, 195.9077},
	{1411.0127, 2107.6167, 12.0156, 172.0940},
	{1399.2078, 2206.6550, 12.0156, 213.8402},
	{1301.0807, 2212.7083, 12.0156, 92.1932}
};
new const Float:paintballSSpawns[][] =
{ // Sniper Arena
    //   X         Y        Z          R
    {-2233.8169, -1743.4373, 480.8561, 37.9961},
	//{-2386.9824, -1841.8787, 441.4585, 356.9490},
	{-2351.9800, -1714.6760, 479.6617, 27.9689},
	{-2344.3889, -1703.7188, 483.6255, 326.3146},
	{-2425.2998, -1623.8129, 524.8774, 212.5245}
};
new const Float:paintballFSpawns[][] =
{// FFA Arena
    //   X         Y        Z          R
	{1291.2968, -0.1334, 1001.0228, 180.0000},
	{1304.6259, -28.7442, 1001.0326, 90.0000},
	{1260.6687, -0.6802, 1001.0234, 180.0000},
	{1251.9862, -26.3548, 1001.0340, 270.0000},
	{1278.8584, -44.1545, 1001.0236, 0.0000},
	{1256.5944, -61.9047, 1002.4999, 0.0000},
	{1297.3204, -61.4144, 1002.4980, 0.0000}
};

new const Float:drivingTestCPs[][] =
{
    {1257.5657, -1849.3583, 13.0332},
	{1128.2242, -1849.8821, 13.0332},
	{1063.3004, -1839.3625, 13.0332},
	{987.0623, -1784.1073, 14.0711},
	{920.1835, -1758.3966, 13.3804},
	{919.8111, -1656.9091, 13.3828},
	{919.9860, -1560.1482, 13.3828},
	{930.4203, -1492.2578, 13.3754},
	{980.7775, -1492.2339, 13.3828},
	{1054.2943, -1491.7645, 13.3828},
	{1065.0643, -1416.5730, 13.3828},
	{1115.0032, -1408.2512, 13.3828},
	{1178.4860, -1408.3331, 13.3828},
	{1268.5947, -1408.8792, 13.3828},
	{1339.5221, -1416.9095, 13.3828},
	{1320.8999, -1494.4954, 13.3828},
	{1295.2820, -1573.4578, 13.3828},
	{1294.6698, -1666.3483, 13.3828},
	{1284.0913, -1709.6714, 13.3828},
	{1212.7543, -1709.5531, 13.3828},
	{1172.5828, -1724.7937, 13.6049},
	{1172.4504, -1783.9113, 13.3984},
	{1179.8055, -1855.1219, 13.3984},
	{1213.0060, -1842.1384, 13.3984}
};

new const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

new const Float:cellSpawns[][] =
{
    {1599.5602, -1660.2219, 2107.0806, 359.7994},
	{1602.2844, -1659.9176, 2107.0808, 359.7994},
	{1606.7863, -1659.4351, 2107.0813, 0.6927},
	{1203.2362, -1333.9489, 796.7505, 270.0000}
};


new const Float:arrestPoints[][] =
{
    {1229.3544, -1311.8627, 796.7859}, // PD interior
	{1528.5728, -1677.8324, 5.8906}, // PD garage
	{1564.6931, -1662.1338, 28.3956}, // PD roof
	{310.3752,  -1515.3691, 24.9219}, // FBI garage
	{1382.0898, -1393.6364, -33.7034} // army garage
};

new Float:SpawnBolnica[ 3 ][ 3 ] = {
    { -2272.7239, 98.7313, -4.6833 },
    { -2272.9255, 101.8626, -4.6833 },
    { -2272.8877, 105.0981, -4.6833 }
};
new const factionTypes[][] =
{
	{"Civilian"},
	{"Law enforcement"},
	{"Medical & fire"},
	{"News agency"},
	{"Government"},
	{"Hitman agency"},
	{"Federal police"},
	{"Armed Forces"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"}
};

new const clothingTypes[][] =
{
	{"Glasses"},
	{"Bandanas & masks"},
	{"Hats & caps"},
	{"Misc clothing"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone,
	clothingPrice
};

new const clothingArray[][clothingEnum] =
{
    {"Glasses",		        "Red tinted shades",        19006, 2, 500},
    {"Glasses",		        "Brown tinted shades",      19007, 2, 500},
    {"Glasses",		        "Green tinted shades",      19008, 2, 500},
    {"Glasses",		        "Blue tinted shades",       19009, 2, 500},
    {"Glasses",		        "Pink tinted shades",       19010, 2, 500},
    {"Glasses",		        "Spiralled shades",         19011, 2, 500},
    {"Glasses",		        "Black tinted shades",      19012, 2, 500},
    {"Glasses",		        "Gag glasses",       	    19013, 2, 500},
    {"Glasses",		        "Checkered shades",         19014, 2, 500},
    {"Glasses",		        "Reading glasses",    	    19015, 2, 500},
    {"Glasses",		        "X-Ray glasses",            19016, 2, 500},
    {"Glasses",		        "Plastic black shades",     19017, 2, 500},
    {"Glasses",		        "Plastic orange shades",    19018, 2, 500},
    {"Glasses",		        "Plastic red shades",       19019, 2, 500},
    {"Glasses",		        "Plastic blue shades",      19020, 2, 500},
    {"Glasses",		        "Plastic green shades",     19021, 2, 500},
    {"Glasses",		        "Clear sunglasses",         19022, 2, 500},
    {"Glasses",		        "Blue sunglasses",          19023, 2, 500},
    {"Glasses",		        "Purple sunglasses",        19024, 2, 500},
    {"Glasses",		        "Pink sunglasses",          19025, 2, 500},
    {"Glasses",		        "Red sunglasses",           19026, 2, 500},
    {"Glasses",		        "Brown sunglasses",         19027, 2, 500},
    {"Glasses",		        "Yellow sunglasses",        19028, 2, 500},
    {"Glasses",		        "Green sunglasses",         19029, 2, 500},
    {"Glasses",		        "Plain brown shades",       19030, 2, 500},
    {"Glasses",		        "Plain yellow shades",      19031, 2, 500},
    {"Glasses",		        "Plain red shades",         19032, 2, 500},
    {"Glasses",		        "Plain black shades",       19033, 2, 500},
    {"Glasses",		        "Checkered glasses",        19034, 2, 500},
    {"Glasses",		        "Wavy glasses",             19035, 2, 500},
    {"Bandanas & masks",	"Balaclava", 			    19801, 2, 375},
    {"Bandanas & masks",	"Dark blue bandana", 	   	18891, 2, 375},
    {"Bandanas & masks",	"Red bandana", 			   	18892, 2, 375},
    {"Bandanas & masks",	"Red & white bandana", 	   	18893, 2, 375},
    {"Bandanas & masks",	"Orange star bandana", 	   	18894, 2, 375},
    {"Bandanas & masks",	"Skull bandana", 		   	18895, 2, 375},
    {"Bandanas & masks",	"Black bandana", 		   	18896, 2, 375},
    {"Bandanas & masks",	"Blue bandana", 		   	18897, 2, 375},
    {"Bandanas & masks",	"Green bandana", 		   	18898, 2, 375},
    {"Bandanas & masks",	"Pink bandana", 		   	18899, 2, 375},
    {"Bandanas & masks",	"Hippie bandana", 		   	18900, 2, 375},
    {"Bandanas & masks",	"Tiger bandana", 		   	18901, 2, 375},
    {"Bandanas & masks",	"Yellow bandana",		   	18902, 2, 375},
    {"Bandanas & masks",	"Purple bandana", 		   	18903, 2, 375},
    {"Bandanas & masks",	"Cool blue bandana", 	   	18904, 2, 375},
    {"Bandanas & masks",	"Brown bandana", 		   	18905, 2, 375},
    {"Bandanas & masks",	"Skull bandana mask", 	   	18911, 2, 375},
    {"Bandanas & masks",	"Black bandana mask", 	   	18912, 2, 375},
    {"Bandanas & masks",	"Grove bandana mask", 	   	18913, 2, 375},
    {"Bandanas & masks",	"Camo bandana mask", 	   	18914, 2, 375},
    {"Bandanas & masks",	"Hippie bandana mask", 	   	18915, 2, 375},
    {"Bandanas & masks",	"Yellow bandana mask", 	   	18916, 2, 375},
    {"Bandanas & masks",	"Blue bandana mask", 	   	18917, 2, 375},
    {"Bandanas & masks",	"Green bandana mask", 	   	18918, 2, 375},
    {"Bandanas & masks",	"White bandana mask", 	   	18919, 2, 375},
    {"Bandanas & masks",	"Flower bandana mask", 	   	18920, 2, 375},
    {"Bandanas & masks",	"White hockey mask", 	    19036, 2, 375},
	{"Bandanas & masks",	"Red hockey mask", 		    19037, 2, 375},
	{"Bandanas & masks",	"Green hockey mask", 	    19038, 2, 375},
	{"Bandanas & masks",	"Sexy mask", 			    19557, 2, 375},
	{"Bandanas & masks",	"Devil mask", 			   	11704, 2, 375},
	{"Bandanas & masks",	"Gas mask", 			    19472, 2, 375},
	{"Bandanas & masks",	"Zorro mask", 			   	18974, 2, 375},
	{"Bandanas & masks",	"Gimp mask", 			    19163, 2, 375},
	{"Hats & caps",         "Santa hat",                19064, 2, 240},
    {"Hats & caps",			"Dude hat", 			    19160, 2, 240},
	{"Hats & caps",			"Top hat", 				    19352, 2, 240},
    {"Hats & caps",			"Witch hat",                19528, 2, 240},
    {"Hats & caps",			"Yellow fire hat", 		    19330, 2, 240},
	{"Hats & caps",			"Black fire hat", 	  	    19331, 2, 240},
	{"Hats & caps",			"Black beret", 			   	18921, 2, 240},
    {"Hats & caps",			"Brown beret", 			   	18922, 2, 240},
    {"Hats & caps",			"Blue beret", 			   	18923, 2, 240},
    {"Hats & caps",			"Camo beret", 			   	18924, 2, 240},
    {"Hats & caps",			"Red beret", 			   	18925, 2, 240},
    {"Hats & caps",			"Camo cap", 			   	18926, 2, 240},
    {"Hats & caps",			"Wave cap", 			   	18927, 2, 240},
    {"Hats & caps",			"Hippy cap", 			   	18928, 2, 240},
    {"Hats & caps",			"Green cap", 			   	18929, 2, 240},
    {"Hats & caps",			"Red cap", 				   	18930, 2, 240},
    {"Hats & caps",			"Blue cap", 			  	18931, 2, 240},
    {"Hats & caps",			"Orange cap", 			   	18932, 2, 240},
    {"Hats & caps",			"White cap", 			   	18933, 2, 240},
    {"Hats & caps",			"Plain pink cap", 		   	18934, 2, 240},
    {"Hats & caps",			"Plain yellow cap", 	   	18935, 2, 240},
    {"Hats & caps",			"Blue back cap", 		   	18939, 2, 240},
    {"Hats & caps",			"Wave back cap", 		   	18940, 2, 240},
    {"Hats & caps",			"Black back cap", 		   	18941, 2, 240},
    {"Hats & caps",			"White back cap", 		   	18942, 2, 240},
    {"Hats & caps",			"Green back cap", 		   	18943, 2, 240},
    {"Hats & caps",			"Red boater hat", 		   	18944, 2, 240},
    {"Hats & caps",			"Green boater hat", 	   	18945, 2, 240},
    {"Hats & caps",			"Striped boater hat", 	   	18946, 2, 240},
    {"Hats & caps",			"Black bowler hat", 	   	18947, 2, 240},
    {"Hats & caps",			"White bowler hat",		    19488, 2, 240},
    {"Hats & caps",			"Blue bowler hat", 		   	18948, 2, 240},
    {"Hats & caps",			"Green bowler hat", 	   	18949, 2, 240},
    {"Hats & caps",			"Red bowler hat", 		   	18950, 2, 240},
    {"Hats & caps",			"Yellow bowler hat", 	   	18951, 2, 240},
    {"Hats & caps",			"Black knit cap", 		   	18953, 2, 240},
    {"Hats & caps",			"White knit cap", 		   	18954, 2, 240},
    {"Hats & caps",			"Hippie hat", 			   	18960, 2, 240},
    {"Hats & caps",			"Born 2 truck hat", 	   	18961, 2, 240},
    {"Hats & caps",			"Brown cowboy hat", 	    19098, 2, 240},
	{"Hats & caps",			"Black cowboy hat",		    19096, 2, 240},
    {"Hats & caps",			"Skully cap", 			   	18964, 2, 240},
    {"Hats & caps",			"Black bucket hat", 	   	18967, 2, 240},
    {"Hats & caps",			"Plaid bucket hat", 	   	18968, 2, 240},
    {"Hats & caps",			"Zig-Zag bucket hat", 	   	18969, 2, 240},
    {"Hats & caps",			"Camo bucket hat", 		    19106, 2, 240},
    {"Hats & caps",			"Hippy hat", 			    19113, 2, 240},
    {"Hats & caps",			"Don't shoot me hat", 	    19114, 2, 240},
    {"Hats & caps",			"Skull hat", 			    19115, 2, 240},
    {"Hats & caps",			"Tiger hat", 			   	18970, 2, 240},
    {"Hats & caps",			"Hard hat", 			   	18638, 2, 240},
	{"Hats & caps",			"Straw hat", 			    19553, 2, 240},
	{"Hats & caps",			"Pizza hat", 			    19558, 2, 240},
	{"Hats & caps",			"Beanie hat", 			    19554, 2, 240},
    {"Hats & caps",			"Checkered fedora", 	   	18971, 2, 240},
    {"Hats & caps",			"Orange fedora", 		   	18972, 2, 240},
    {"Hats & caps",			"Yellow fedora", 		   	18973, 2, 240},
    {"Hats & caps",			"Camoflauge helmet", 	    19101, 2, 240},
    {"Hats & caps",			"Black helmet", 		    19116, 2, 240},
    {"Hats & caps",			"Red helmet", 			    19117, 2, 240},
    {"Hats & caps",			"Green helmet",	 		    19118, 2, 240},
    {"Hats & caps",			"Blue helmet", 			    19119, 2, 240},
    {"Hats & caps",			"Yellow helmet", 		    19120, 2, 240},
    {"Hats & caps",			"Boxing helmet", 		   	18952, 2, 240},
    {"Hats & caps",			"Motorcycle helmet",   	   	18645, 2, 240},
    {"Misc clothing",	    "Gold watch",	 			19039, 6, 500},
	{"Misc clothing",	    "Silver watch", 			19040, 6, 500},
	{"Misc clothing",	    "Bronze watch", 			19041, 6, 500},
	{"Misc clothing",	    "Yellow watch", 			19042, 6, 500},
	{"Misc clothing",	    "White watch", 			 	19043, 6, 500},
	{"Misc clothing",	    "Purple watch", 			19044, 6, 500},
	{"Misc clothing",	    "Pink watch", 				19045, 6, 500},
	{"Misc clothing",	    "Green watch", 			 	19046, 6, 500},
	{"Misc clothing",	    "Blue watch", 				19047, 6, 500},
	{"Misc clothing",	    "Camo watch", 				19053, 6, 500},
	{"Misc clothing",	    "White headphones", 		19421, 2, 500},
    {"Misc clothing",	    "Black headphones", 		19422, 2, 500},
    {"Misc clothing",	    "Orange headphones", 		19423, 2, 500},
    {"Misc clothing",	    "Blue headphones", 		 	19424, 2, 500},
	{"Misc clothing",	    "Red clown hair", 			19274, 2, 500},
    {"Misc clothing",	    "Grey clown hair", 		 	19518, 2, 500},
    {"Misc clothing",	    "Black hair", 				19077, 2, 500},
    {"Misc clothing",	    "Grey hair", 				19517, 2, 500},
	{"Misc clothing",	    "Bass guitar", 			 	19317, 1, 500},
	{"Misc clothing",	    "White guitar", 		 	19318, 1, 500},
	{"Misc clothing",	    "Black guitar", 			19319, 1, 500},
	{"Misc clothing",	    "Pilot hat", 				19520, 2, 500},
	{"Misc clothing",       "Bag of money",             1550,  1, 500},
	{"Misc clothing",	    "Shop basket", 			 	19592, 6, 500},
	{"Misc clothing",	    "Oil can", 				 	19621, 6, 500},
	{"Misc clothing",	    "Broom", 				 	19622, 1, 500},
	{"Misc clothing",	    "Camera", 					19623, 6, 500},
	{"Misc clothing",	    "Briefcase", 				19624, 6, 500},
	{"Misc clothing",	    "Cigarette", 				19625, 2, 500},
	{"Misc clothing",	    "Spade", 					19626, 1, 500},
	{"Misc clothing",	    "Left boxing glove", 		19555, 5, 500},
	{"Misc clothing",	    "Right boxing glove", 		19556, 6, 500},
	{"Misc clothing",	    "Scarf", 					19469, 2, 500},
	{"Misc clothing",	    "Eye patch", 				19085, 2, 500},
	{"Misc clothing",	    "Hiker backpack", 			19559, 1, 500},
	{"Misc clothing",	    "Construction vest", 		19904, 1, 500},
	{"Misc clothing",	    "Police radio", 			19942, 1, 500},
	{"Misc clothing",	    "Bodybag", 				 	19944, 1, 500},
	{"Misc clothing",	    "Sports bag", 				11745, 1, 500},
	{"Misc clothing",	    "Holster", 				 	19773, 8, 500},
    {"Misc clothing",	    "Fedora", 					18639, 2, 500},
    {"Misc clothing",	    "Afro", 					18640, 2, 500},
    {"Misc clothing",	    "Flashlight",          		18641, 6, 500},
    {"Misc clothing",	    "Hammer",              		18635, 6, 500},
    {"Misc clothing",	    "Wrench",              		18633, 2, 500},
    {"Misc clothing",       "Backpack",                  3026, 9, 500}
};


enum copEnum
{
	cModel,
	cBone,
	cName[24]
};

new const copClothing[][copEnum] =
{
	{18636, 2, "Police cap"},
	{19521, 2, "Police hat"},
	{19099, 2, "Black rim hat"},
	{19100, 2, "Brown rim hat"},
	{19139, 2, "Red shades"},
	{19140, 2, "Blue shades"},
	{19138, 2, "Black shades"},
	{19774, 1, "Badge"},
	{19942, 1, "Radio"},
	{19162, 2, "Blue cap"},
	{19161, 2, "Black cap"},
	{19200, 2, "Bike helmet"},
	{18637, 1, "Riot shield"},
	{19141, 2, "SWAT helmet"},
	{19142, 1, "SWAT armor"},
	{19515, 1, "Grey armor"},
	{19514, 2, "Grey helmet"},
	{19777, 1, "FBI insignia"},
	{19776, 1, "FBI ID card"},
	{18642, 1, "Taser"},
	{18641, 1, "Flashlight"},
	{11749, 1, "Handcuffs"},
	{11750, 1, "Closed cuff"},
	{19783, 1, "Police badge"},
	{19784, 1, "Police badge 2"},
	{19785, 1, "Senior Ld. badge"},
	{19778, 1, "Detective badge"},
	{19779, 1, "Detective badge 2"},
	{19780, 1, "Detective badge 3"},
	{19781, 1, "Sergeant badge"},
	{19782, 1, "Sergeant badge 2"}
};

enum achievementEnum
{
	aName[24],
	aDescription[64]
};

new const achievementInfo[][achievementEnum] =
{
	{"First wheels", 	"Purchase a vehicle for the first time."},
	{"Working class",   "Earn $20,000 on your paycheck."},
	{"Legal driver",    "Acquire your drivers license at the DMV."},
	{"Meeting people",  "Shake a hand for the first time."},
	{"Regular",         "Play a total of 20 playing hours."},
	{"Addicted",        "Play a total of 40 playing hours."},
	{"Five stars",      "Achieve level 5 on your account."},
	{"Top tier",  		"Achieve level 10 on your account."},
	{"Dress up",        "Attach up to 5 clothing items at once."},
	{"Dirty deeds",     "Complete a drug deal with someone."},
	{"Dedication",      "Complete an entire matrun onfoot."},
	{"Obamacare",       "Spawn at a hospital while insured."},
	{"High roller",     "Earn $500,000 in total money."},
	{"I'm rich!",    	"Spend $500,000 in total money."},
	{"Benefits",        "Fully - a perk for the first time."},
	{"Experienced",     "Fully maximize your skill level for any job."},
	{"High times",  	"Get stoned for the first time."},
	{"Party hard",      "Buy alcohol at a bar and get drunk."},
	{"Flash mob",       "Dance with five other people at once."},
	{"Token Seeker",   "Earn a total of five tokens."},
	{"Diamond!",		"Mine a diamond."}
/*	{"Acme Dinamyte", 	"Get Exploded by an Admin."},
	{"A black Hole", 	"Get Admin Killed."},
	{"Illegal Weapon", 	"Buy a Weapon in the Ammunation."},
	{"Fitness", 		"Train yourself in a Gym."},
	{"At the End", 		"Finish your Tutorial."},
	{"Finally, A Job",  "Get your First Job."},
	{"Home Sweet Home", "Buy Your First House."},
	{"A Dirty Mind", 	"Wanking."},
	{"You're a hooker", "Make a Blowjob"}
*/
};

enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
	{"24/7 (version 1)", 		17, -25.9733, -187.8952, 1003.5468, 0.0000},
    {"24/7 (version 2)", 		10, 6.0159, -31.0345, 1003.5493, 0.0000},
    {"24/7 (version 3)", 		18, -30.9967, -91.4492, 1003.5468, 0.0000},
    {"24/7 (version 4)", 		16, -25.9416, -140.6656, 1003.5468, 0.0000},
    {"24/7 (version 5)", 		4, 	-27.3069, -30.8341, 1003.5573, 0.0000},
    {"24/7 (version 6)", 		6, 	-27.4368, -57.4361, 1003.5468, 0.0000},
    {"Ammunation (version 1)", 	7, 	315.7398, -143.1958, 999.6016, 0.0000},
    {"Ammunation (version 2)", 	1, 	285.3190, -41.1576, 1001.5156, 0.0000},
    {"Ammunation (version 3)", 	4, 	285.7825, -85.9860, 1001.5228, 0.0000},
    {"Ammunation (version 4)", 	6, 	296.7723, -111.6399, 1001.5156, 0.0000},
    {"Ammunation (version 5)", 	6, 	316.2890, -169.7619, 999.6010, 0.0000},
    {"Binco", 					15, 207.6329, -110.7673, 1005.1328, 0.0000},
    {"Pro-Laps", 				3, 	206.9459, -139.5319, 1003.5078, 0.0000},
    {"Didier Sachs", 			14,	204.2969, -168.3488, 1000.5233, 0.0000},
    {"Victim", 					5, 	226.7738, -8.2257, 1002.2108, 90.0000},
    {"Zip", 					18, 161.3670, -96.4953, 1001.8046, 0.0000},
    {"SubUrban", 				1, 	203.7149, -50.2200, 1001.8046, 0.0000},
    {"Betting (version 1)", 	3,  834.1848, 7.3453, 1004.1870, 90.0000},
	{"Betting (version 2)",     1,  -2170.3428, 640.7771, 1052.3817, 0.0000},
	{"Donut Shop", 				17, 377.0733, -193.0574, 1000.6400, 0.0000},
    {"Burger Shot", 			10, 363.1346, -74.8441, 1001.5078, 315.0000},
    {"Pizza Stack", 			5, 	372.3019, -133.1221, 1001.4921, 0.0000},
    {"Cluckin' Bell", 			9, 	364.8536, -11.1400, 1001.8516, 0.0000},
	{"Marco's Bistro",          1,  -795.0334, 489.8574, 1376.1953, 0.0000},
	{"Cafeteria",               4,  459.7685, -88.6637, 999.5547, 90.0000},
    {"Barber Shop", 			3, 	418.5545, -83.9392, 1001.8046, 0.0000},
    {"Tattoo Shop", 			3, 	-204.4362, -43.8119, 1002.2733, 0.0000},
    {"Ganton Gym", 				5, 	772.2800, -4.7154, 1000.7288, 0.0000},
    {"Las Venturas Gym", 		7, 	773.8508, -78.3952, 1000.6621, 0.0000},
    {"San Fierro Gym", 			6, 	774.1206, -49.9538, 1000.5858, 0.0000},
    {"Sex Shop", 				3, 	-100.3628, -24.4456, 1000.7188, 0.0000},
    {"RC Shop", 				6, 	-2240.3610, 128.2816, 1035.4210, 270.0000},
    {"Four Dragons Casino", 	10, 2018.2132, 1017.7788, 996.8750, 90.0000},
    {"Caligulas Casino", 		1, 	2234.0485, 1714.1568, 1012.3596, 180.0000},
    {"Red Sands Casino", 		12, 1133.1075, -15.3114, 1000.6796, 0.0000},
    {"Alhambra", 				17, 493.3728, -23.9953, 1000.6796, 0.0000},
    {"Pig Pen", 				2, 	1204.7922, -13.2587, 1000.9218, 0.0000},
    {"Big Spread Ranch", 		3, 	1212.1400, -26.3005, 1000.9531, 180.0000},
    {"Ten Green Bottles", 		11, 501.9559, -67.9867, 998.7578, 180.0000},
    {"Lil' Probe Inn",          18, -228.7570, 1401.2421, 27.7656, 270.0000},
    {"Warehouse",               18, 1307.0178, 4.1193, 1001.0289, 90.0000}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 5, 227.3921, 1114.6572, 1080.9985, 267.4590},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
    {"Liberty City", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 1, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Alternative", "Alternative"},
    {"Alternative", "Adult Alternative"},
    {"Alternative", "Britpop"},
    {"Alternative", "Classic Alternative"},
    {"Alternative", "College"},
    {"Alternative", "Dancepunk"},
    {"Alternative", "Dream Pop"},
    {"Alternative", "Emo"},
    {"Alternative", "Goth"},
    {"Alternative", "Grunge"},
    {"Alternative", "Hardcore"},
    {"Alternative", "Indie Pop"},
    {"Alternative", "Indie Rock"},
    {"Alternative", "Industrial"},
    {"Alternative", "LoFi"},
    {"Alternative", "Modern Rock"},
    {"Alternative", "New Wave"},
    {"Alternative", "Noise Pop"},
    {"Alternative", "Post Punk"},
    {"Alternative", "Power Pop"},
    {"Alternative", "Punk"},
    {"Alternative", "Ska"},
    {"Alternative", "Xtreme"},
    {"Blues", "Blues"},
    {"Blues", "Acoustic Blues"},
    {"Blues", "Cajun and Zydeco"},
    {"Blues", "Chicago Blues"},
    {"Blues", "Contemporary Blues"},
    {"Blues", "Country Blues"},
    {"Blues", "Delta Blues"},
    {"Blues", "Electric Blues"},
    {"Classical", "Classical"},
    {"Classical", "Baroque"},
    {"Classical", "Chamber"},
    {"Classical", "Choral"},
    {"Classical", "Classical Period"},
    {"Classical", "Early Classical"},
    {"Classical", "Impressionist"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Alt Country"},
    {"Country", "Americana"},
    {"Country", "Bluegrass"},
    {"Country", "Classic Country"},
    {"Country", "Contemporary Country"},
    {"Country", "Honky Tonk"},
    {"Country", "Hot Country Hits"},
    {"Country", "Western"},
    {"Decades", "Decades"},
    {"Decades", "00s"},
    {"Decades", "30s"},
    {"Decades", "40s"},
    {"Decades", "50s"},
    {"Decades", "60s"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Easy Listening", "Easy Listening"},
    {"Easy Listening", "Exotica"},
    {"Easy Listening", "Light Rock"},
    {"Easy Listening", "Lounge"},
    {"Easy Listening", "Orchestral Pop"},
    {"Easy Listening", "Polka"},
    {"Easy Listening", "Space Age Pop"},
    {"Electronic", "Electronic"},
    {"Electronic", "Acid House"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Breakbeat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Downtempo"},
    {"Electronic", "Drum and Bass"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "Garage"},
    {"Electronic", "Hard House"},
    {"Electronic", "House"},
    {"Electronic", "IDM"},
    {"Electronic", "Jungle"},
    {"Electronic", "Progressive"},
    {"Electronic", "Techno"},
    {"Electronic", "Trance"},
    {"Electronic", "Tribal"},
    {"Electronic", "Trip Hop"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Contemporary Folk"},
    {"Folk", "Folk Rock"},
    {"Folk", "New Acoustic"},
    {"Folk", "Old Time"},
    {"Folk", "Traditional Folk"},
    {"Folk", "World Folk"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian"},
    {"Inspirational", "Christian Metal"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Christian Rock"},
    {"Inspirational", "Classic Christian"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Praise and Worship"},
    {"Inspirational", "Sermon and Services"},
    {"Inspirational", "Southern Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabic"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "Soca"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"International", "Worldbeat"},
    {"International", "Zouk"},
    {"Jazz", "Jazz"},
    {"Jazz", "Acid Jazz"},
    {"Jazz", "Avant Garde"},
    {"Jazz", "Big Band"},
    {"Jazz", "Bop"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Fusion"},
    {"Jazz", "Hard Bop"},
    {"Jazz", "Latin Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Swing"},
    {"Jazz", "Vocal Jazz"},
    {"Jazz", "World Fusion"},
    {"Latin", "Latin"},
    {"Latin", "Bachata"},
    {"Latin", "Banda"},
    {"Latin", "Bossa Nova"},
    {"Latin", "Cumbia"},
    {"Latin", "Flamenco"},
    {"Latin", "Latin Dance"},
    {"Latin", "Latin Pop"},
    {"Latin", "Latin Rap"},
    {"Latin", "Latin Rock"},
    {"Latin", "Mariachi"},
    {"Latin", "Merengue"},
    {"Latin", "Ranchera"},
    {"Latin", "Reggaeton"},
    {"Latin", "Regional Mexican"},
    {"Latin", "Salsa"},
    {"Latin", "Samba"},
    {"Latin", "Tango"},
    {"Latin", "Tejano"},
    {"Latin", "Tropicalia"},
    {"Metal", "Metal"},
    {"Metal", "Black Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Grindcore"},
    {"Metal", "Hair Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Metalcore"},
    {"Metal", "Power Metal"},
    {"Metal", "Progressive Metal"},
    {"Metal", "Thrash Metal"},
    {"Misc", "Misc"},
    {"New Age", "New Age"},
    {"New Age", "Environmental"},
    {"New Age", "Ethnic Fusion"},
    {"New Age", "Healing"},
    {"New Age", "Meditation"},
    {"New Age", "Spiritual"},
    {"Pop", "Pop"},
    {"Pop", "Adult Contemporary"},
    {"Pop", "Barbershop"},
    {"Pop", "Bubblegum Pop"},
    {"Pop", "Dance Pop"},
    {"Pop", "Idols"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Oldies"},
    {"Pop", "Soft Rock"},
    {"Pop", "Teen Pop"},
    {"Pop", "Top 40"},
    {"Pop", "World Pop"},
    {"Public Radio", "Public Radio"},
    {"Public Radio", "College"},
    {"Public Radio", "News"},
    {"Public Radio", "Sports"},
    {"Public Radio", "Talk"},
    {"Public Radio", "Weather"},
    {"R&B and Urban", "R&B and Urban"},
    {"R&B and Urban", "Classic R&B"},
    {"R&B and Urban", "Contemporary R&B"},
    {"R&B and Urban", "Funk"},
    {"R&B and Urban", "Motown"},
    {"R&B and Urban", "Neo Soul"},
    {"R&B and Urban", "Quiet Storm"},
    {"R&B and Urban", "Soul"},
    {"R&B and Urban", "Urban Contemporary"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Dirty South"},
    {"Rap", "East Coast Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Hip Hop"},
    {"Rap", "Mixtapes"},
    {"Rap", "Old School"},
    {"Rap", "Turntablism"},
    {"Rap", "Underground Hip Hop"},
    {"Rap", "West Coast Rap"},
    {"Reggae", "Reggae"},
    {"Reggae", "Contemporary Reggae"},
    {"Reggae", "Dancehall"},
    {"Reggae", "Dub"},
    {"Reggae", "Pop Reggae"},
    {"Reggae", "Ragga"},
    {"Reggae", "Reggae Roots"},
    {"Reggae", "Rock Steady"},
    {"Rock", "Rock"},
    {"Rock", "Adult Alternative"},
    {"Rock", "Celtic Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Garage Rock"},
    {"Rock", "Glam"},
    {"Rock", "Hard Rock"},
    {"Rock", "Jam Bands"},
    {"Rock", "JROCK"},
    {"Rock", "Progressive Rock"},
    {"Rock", "Psychedelic"},
    {"Rock", "Rock & Roll"},
    {"Rock", "Rockabilly"},
    {"Rock", "Singer & Songwriter"},
    {"Rock", "Surf"},
    {"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Kwanzaa"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Original Score"},
    {"Soundtracks", "Showtunes"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "BlogTalk"},
    {"Talk", "Comedy"},
    {"Talk", "Community"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Old Time Radio"},
    {"Talk", "Other Talk"},
    {"Talk", "Political"},
    {"Talk", "Scanner"},
    {"Talk", "Spoken Word"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Adult"},
    {"Themes", "Best Of"},
    {"Themes", "Chill"},
    {"Themes", "Eclectic"},
    {"Themes", "Experimental"},
    {"Themes", "Female"},
    {"Themes", "Heartache"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"},
    {"Themes", "Rainy Day Mix"},
    {"Themes", "Reality"},
    {"Themes", "Sexy"},
    {"Themes", "Shuffle"},
    {"Themes", "Travel Mix"},
    {"Themes", "Trippy"},
    {"Themes", "Work Mix"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};


new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Venturas Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Venturas Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"Liberty City",                 -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Venturas",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

// ---------------------------------------

native WP_Hash(buffer[], len, const str[]);
native IsValidVehicle(vehicleid);

// ---------------------------------------

main(){}

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

GetDate()
{
	new date[5], string[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(string, sizeof(string), "%i-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return string;
}

GetDateStats()
{
	new date[5], string[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(string, sizeof(string), "%02d:%02d %02d-%02d-%i", date[3], date[4], date[2], date[1], date[0]);
	return string;
}

GetDateFromTimestamp(timestamp, _form=0)
{
    new year=1970, day=0, month=0, hourt=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
    new returnstring[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hourt++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hourt, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hourt,mins);
		case 4: format(returnstring, 31, "%s %02d, %d", names_of_month[month],day+1,year);
        default: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
    }

    return returnstring;
}

FormatNumber(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "$", 0);
	if(number < 0)
		strins(value, "-", 0);

	return value;
}



GetAdminDivision(playerid)
{
	new division[4];
	if(PlayerData[playerid][pAdminPersonnel])
	{
		division = "AP";
	}
	else if(PlayerData[playerid][pHumanResources])
	{
	    division = "HR";
	}
	else if(PlayerData[playerid][pGameAffairs])
	{
	    division = "DGA";
	}
	else if(PlayerData[playerid][pWebDev])
	{
		division = "BM";
	}
	else if(PlayerData[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(PlayerData[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(PlayerData[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else if(PlayerData[playerid][pComplaintMod])
	{
	    division = "CM";
	}
	else if(PlayerData[playerid][pHelperManager])
	{
	    division = "PR";
	}
	else if(PlayerData[playerid][pDynamicAdmin])
	{
		division = "DA";
	}
	else if(PlayerData[playerid][pDeveloper])
	{
	    division = "DEV";
	}
	else
	{
	    division = "";
	}
	return division;
}

/*GetAdminDivisionFull(playerid)
{
    new division[32];
    if(PlayerData[playerid][pAdminPersonnel])
	{
		division = "Admin Personnel";
	}
	else if(PlayerData[playerid][pHumanResources])
	{
	    division = "Human Resources";
	}
	else if(PlayerData[playerid][pGameAffairs])
	{
	    division = "Game Affairs";
	}
	else if(PlayerData[playerid][pWebDev])
	{
		division = "Web Developer";
	}
	else if(PlayerData[playerid][pFactionMod])
	{
	    division = "Faction Moderator";
	}
	else if(PlayerData[playerid][pGangMod])
	{
	    division = "Gang Moderator";
	}
	else if(PlayerData[playerid][pBanAppealer])
	{
	    division = "Ban Appealer";
	}
	else if(PlayerData[playerid][pComplaintMod])
	{
	    division = "Complaint Mod";
	}
	else if(PlayerData[playerid][pHelperManager])
	{
	    division = "Public Relations";
	}
	else if(PlayerData[playerid][pDynamicAdmin])
	{
		division = "Refund Manager";
	}
	else if(PlayerData[playerid][pDeveloper])
	{
	    division = "Developer";
	}
	else
	{
	    division = "";
	}
    return division;
}*/

GetStaffRank(playerid)
{
	new string[24];

	if(PlayerData[playerid][pAdmin] > 0 && !PlayerData[playerid][pAdminHide])
	{
		switch(PlayerData[playerid][pAdmin])
		{
		    case 1: string = "Helper";
			case 2: string = "Moderator";
			case 3: string = "Administrator";
			case 4: string = "Senior Administrator";
			case 5: string = "Lead Administrator";
			case 6: string = "Staff Manager";
			case 7: string = "Community Manager";
		}
		return string;
	}
	else if(PlayerData[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	else
	{
	    string = "Undercover Admin";
	}
	return string;
}

GetAdminRank(playerid)
{
	new string[35];

	switch(PlayerData[playerid][pAdmin])
	{
	    case 0:
	    {
	        if(PlayerData[playerid][pFormerAdmin])
	            string = "Former Admin";
	        else
	            string = "None";
	    }
	    case 1: string = "Helper";
	    case 2: string = "Moderator";
	    case 3: string = "Administrator";
	    case 4: string = "Senior Administrator";
		case 5: string = "Lead Administrator";
		case 6: string = "Staff Manager";
		case 7: string = "Community Manager";


	}
	return string;
}
GetAdmCmdRank(playerid)
{
	new string[64];

	switch(PlayerData[playerid][pAdmin])
	{
	    case 1: string = "{1abc9c}Helper{FF6347}";
	    case 2: string = "{00FF00}Moderator{FF6347}";
	    case 3: string = "{00AA00}Administrator{FF6347}";
		case 4: string = "{FFA500}Senior Administrator{FF6347}";
		case 5: string = "{298EFF}Lead Administrator{FF6347}";
		case 6: string = "{298EFF}Staff Manager{FF6347}";
		case 7: string = "{c73232}Community Manager{FF6347}";
	}
	return string;
}
GetAdminRank2(playerid)
{
	new string[64];

	switch(PlayerData[playerid][pAdmin])
	{
	    case 0:
	    {
	        if(PlayerData[playerid][pFormerAdmin])
	            string = "Former Admin";
            else if(PlayerData[playerid][pDeveloper])
				string = "Developer";
	        else
	            string = "None";
	    }
	    case 1: string = "{1abc9c}Helper";
	    case 2: string = "{00FF00}Moderator";
	    case 3: string = "{00AA00}Administrator";
	    case 4: string = "{00AA00}Senior Administrator";
		case 5: string = "{FFA500}Lead Administrator";
		case 6: string = "{FF0000}Staff Manager";
		case 7: string = "{c73232}Community Manager";
	}
	return string;
}

GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

/*GetBoneName(boneid)
{
	new
	    string[16];

	switch(boneid)
	{
	    case 1: string = "Spine";
	    case 2: string = "Head";
	    case 3: string = "Left upper arm";
	    case 4: string = "Right upper arm";
	    case 5: string = "Left hand";
	    case 6: string = "Right hand";
	    case 7: string = "Left thigh";
	    case 8: string = "Right thigh";
	    case 9: string = "Left foot";
	    case 10: string = "Right foot";
	    case 11: string = "Right calf";
	    case 12: string = "Left calf";
	    case 13: string = "Left forearm";
	    case 14: string = "Right forearm";
	    case 15: string = "Left shoulder";
	    case 16: string = "Right shoulder";
	    case 17: string = "Neck";
	    case 18: string = "Jaw";
	}

	return string;
}*/

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Fists";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}
stock ReturnBodypartName(bodypart)
{
	new bodyname[20] = EOS;

	switch(bodypart)
	{
		case BODY_PART_CHEST:bodyname = "CHEST";
		case BODY_PART_GROIN:bodyname = "GROIN";
		case BODY_PART_LEFT_ARM:bodyname = "LEFT ARM";
		case BODY_PART_RIGHT_ARM:bodyname = "RIGHT ARM";
		case BODY_PART_LEFT_LEG:bodyname = "LEFT LEG";
		case BODY_PART_RIGHT_LEG:bodyname = "RIGHT LEG";
		case BODY_PART_HEAD:bodyname = "HEAD";
	}

	return bodyname;
}
GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetVIPRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "Donator";
	}

	return string;
}

GetVIPRankEx(level)
{
	new string[50];

	switch(level)
	{
	    case 0: string = "{FFFFFF}None";
	    case 1: string = "{A020F0}Donator";
	}

	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "None";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || PlayerData[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_COURIER:
		{
		    PlayerData[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET courierskill = courierskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your courier skill level is now %i/5. You will deliver more products and earn more money now.", level + 1);
			}
		}
		case JOB_FISHERMAN:
		{
		    PlayerData[playerid][pFishingSkill]++;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishingskill = fishingskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Your fishing skill level is now %i/5. You will catch bigger fish and your cooldowns are reduced.", level + 1);
			}
		}
		case JOB_WEAPONDEALER:
		{
		    PlayerData[playerid][pWeaponSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weaponskill = weaponskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your weapons dealer skill level is now %i/5. You have unlocked more weapons.", level + 1);
			}
		}
		case JOB_MECHANIC:
		{
		    PlayerData[playerid][pMechanicSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET mechanicskill = mechanicskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your mechanic skill level is now %i/5. You will now pay less for components.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
		    PlayerData[playerid][pSmugglerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET smugglerskill = smugglerskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your drug dealer skill level is now %i/5. You will now earn more cash for smuggling.", level + 1);
			}
		}
		case JOB_LAWYER:
		{
		    PlayerData[playerid][pLawyerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET lawyerskill = lawyerskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your lawyer skill level is now %i/5. Your cooldown times are reduced and you can free people for more time.", level + 1);
			}
		}
		case JOB_DETECTIVE:
		{
		    PlayerData[playerid][pDetectiveSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET detectiveskill = detectiveskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your detective skill level is now %i/5. Your cooldown times are now reduced.", level + 1);
			}
		}

		/*case JOB_FARMER:
		{
		    PlayerData[playerid][pThiefSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET thiefskill = thiefskill + 1 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your thief skill level is now %i/5. Your cooldown times are now reduced and it takes less time to crack trunks.", level + 1);
			}
		}*/
	}

	if(GetJobLevel(playerid, jobid) != level && GetJobLevel(playerid, jobid) == 5)
	{
	    AwardAchievement(playerid, "Experienced");
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_COURIER)
	{
	    if(0 <= PlayerData[playerid][pCourierSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerData[playerid][pCourierSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerData[playerid][pCourierSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerData[playerid][pCourierSkill] <= 349) {
			return 4;
		} else if(PlayerData[playerid][pCourierSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_FISHERMAN)
	{
	    if(0 <= PlayerData[playerid][pFishingSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerData[playerid][pFishingSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerData[playerid][pFishingSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerData[playerid][pFishingSkill] <= 349) {
			return 4;
		} else if(PlayerData[playerid][pFishingSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_WEAPONDEALER)
	{
	    if(0 <= PlayerData[playerid][pWeaponSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerData[playerid][pWeaponSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerData[playerid][pWeaponSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerData[playerid][pWeaponSkill] <= 499) {
			return 4;
		} else if(PlayerData[playerid][pWeaponSkill] >= 500) {
		    return 5;
		}
	}
	else if(jobid == JOB_MECHANIC)
	{
	    if(0 <= PlayerData[playerid][pMechanicSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerData[playerid][pMechanicSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerData[playerid][pMechanicSkill] <= 99) {
			return 3;
		} else if(100 <= PlayerData[playerid][pMechanicSkill] <= 199) {
			return 4;
		} else if(PlayerData[playerid][pMechanicSkill] >= 200) {
		    return 5;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= PlayerData[playerid][pSmugglerSkill] <= 99) {
	        return 1;
		} else if(100 <= PlayerData[playerid][pSmugglerSkill] <= 199) {
			return 2;
		} else if(200 <= PlayerData[playerid][pSmugglerSkill] <= 299) {
			return 3;
		} else if(300 <= PlayerData[playerid][pSmugglerSkill] <= 399) {
			return 4;
		} else if(PlayerData[playerid][pSmugglerSkill] >= 500) {
		    return 5;
		}
	}
	else if(jobid == JOB_LAWYER)
	{
	    if(0 <= PlayerData[playerid][pLawyerSkill] <= 24) {
	        return 1;
		} else if(25 <= PlayerData[playerid][pLawyerSkill] <= 49) {
			return 2;
		} else if(50 <= PlayerData[playerid][pLawyerSkill] <= 99) {
			return 3;
		} else if(100 <= PlayerData[playerid][pLawyerSkill] <= 199) {
			return 4;
		} else if(PlayerData[playerid][pLawyerSkill] >= 200) {
		    return 5;
		}
	}
	else if(jobid == JOB_DETECTIVE)
	{
	    if(0 <= PlayerData[playerid][pDetectiveSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerData[playerid][pDetectiveSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerData[playerid][pDetectiveSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerData[playerid][pDetectiveSkill] <= 399) {
			return 4;
		} else if(PlayerData[playerid][pDetectiveSkill] >= 400) {
		    return 5;
		}
	}


	return 0;
}

GetPlayerCapacity(playerid, item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 50000 + (PlayerData[playerid][pInventoryUpgrade] * 10000);
		}
		case CAPACITY_WEED:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
		    {
		        case 0: return 50;
		        case 1: return 75;
		        case 2: return 100;
		        case 3: return 125;
		        case 4: return 150;
		        case 5: return 200;
			}
		}
		case CAPACITY_COCAINE:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 125;
		        case 5: return 150;
			}
		}
		case CAPACITY_METH:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 20;
		        case 1: return 40;
		        case 2: return 60;
		        case 3: return 80;
		        case 4: return 100;
		        case 5: return 150;
			}
		}
        case CAPACITY_PAINKILLERS:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 5;
		        case 1: return 10;
		        case 2: return 15;
		        case 3: return 20;
		        case 4: return 25;
		        case 5: return 30;
			}
		}
		case CAPACITY_SEEDS:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 20;
		        case 2: return 30;
		        case 3: return 40;
		        case 4: return 50;
		        case 5: return 60;
			}
		}
		case CAPACITY_EPHEDRINE:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 15;
		        case 2: return 20;
		        case 3: return 25;
		        case 4: return 30;
		        case 5: return 40;
			}
		}
		case CAPACITY_OIL:
		{
		    switch(PlayerData[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 150;
		        case 5: return 200;
			}
		}
	}

	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        foreach(new i : House)
	        {
	            if(HouseInfo[i][hExists] && PlayerData[playerid][pID] == HouseInfo[i][hOwnerID])
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
         	foreach(new i : Business)
	        {
	            if(BusinessInfo[i][bExists] && PlayerData[playerid][pID] == BusinessInfo[i][bOwnerID])
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
         	foreach(new i : Garage)
	        {
	            if(GarageInfo[i][gExists] && PlayerData[playerid][pID] == GarageInfo[i][gOwnerID])
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        switch(PlayerData[playerid][pDonator])
			{
			    case 2: return 4;
			    case 3: return 6;
			}

			switch(PlayerData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(PlayerData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(PlayerData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
            switch(PlayerData[playerid][pDonator])
			{
			    case 1: return 10;
			    case 2: return 15;
			    case 3: return 20;
			}

	        switch(PlayerData[playerid][pAssetUpgrade])
	        {
	            case 0: return 3;
	            case 1: return 4;
	            case 2: return 5;
	            case 3: return 7;
	            case 4: return 10;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}
IsAFarmerCar(carid)
{
	for(new v = 0; v < sizeof(FarmerVehicles); v++)
	{
	    if(carid == FarmerVehicles[v]) return 1;
	}
	if(VehicleInfo[carid][vJob] == JOB_FARMER) return 1;
	return 0;
}
IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(GetFactionType(killerid) == FACTION_HITMAN && PlayerData[killerid][pContractTaken] == playerid)
	{
	    new price = PlayerData[playerid][pContracted] / 2;

	    SendClientMessageEx(killerid, COLOR_YELLOW, "You have completed your contract on %s and received %s.", GetRPName(playerid), FormatNumber(price));
	    SendClientMessageEx(playerid, COLOR_YELLOW, "You have been killed by a hitman and lost %s.", FormatNumber(price));

	    SendFactionMessage(PlayerData[killerid][pFaction], COLOR_YELLOW, "Contract: %s has successfully completed the contract on %s and gained %s.", GetRPName(killerid), GetRPName(playerid), FormatNumber(price));

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerData[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerData[killerid][pCompletedHits]++;
	    PlayerData[playerid][pContracted] = 0;
	    PlayerData[playerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET completedhits = %i WHERE uid = %i", PlayerData[killerid][pCompletedHits], PlayerData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerData[i][pContractTaken] == playerid)
            {
                PlayerData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) successfully completed their hit on %s (uid: %i) for $%i.", GetRPName(killerid), PlayerData[killerid][pID], GetRPName(playerid), PlayerData[playerid][pID], price);
	}
	else if(PlayerData[playerid][pContractTaken] == killerid)
	{
	    new price = PlayerData[killerid][pContracted];

	    SendClientMessageEx(playerid, COLOR_YELLOW, "You have failed your contract on %s and lost %s.", GetRPName(playerid), FormatNumber(price));
	    SendClientMessageEx(killerid, COLOR_YELLOW, "You have killed a hitman chasing after you and received %s. The contract on your head has been removed.", FormatNumber(price));
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_YELLOW, "Contract: %s has failed the contract on %s and lost %s.", GetRPName(playerid), GetRPName(killerid), FormatNumber(price));

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerData[playerid][pFailedHits]++;
	    PlayerData[killerid][pContracted] = 0;
	    PlayerData[killerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET failedhits = %i WHERE uid = %i", PlayerData[playerid][pFailedHits], PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerData[i][pContractTaken] == killerid)
            {
                PlayerData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) failed their hit on %s (uid: %i) and lost $%i.", GetRPName(playerid), PlayerData[playerid][pID], GetRPName(killerid), PlayerData[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pMaskOn] > 0 && PlayerData[playerid][pAdminDuty] == 0)
	{
		format(name, sizeof(name), "Stranger_%d", PlayerData[playerid][pMaskID]);
	}
	else
	{
		GetPlayerName(playerid, name, sizeof(name));
		for(new i = 0, l = strlen(name); i < l; i ++)
		{
			if(name[i] == '_')
			{
				name[i] = ' ';
			}
		}
	}
	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;
	if(GetPlayerInterior(playerid))
	{
		if((id = GetInsideHouse(playerid)) >= 0)
		{
		    x = HouseInfo[id][hPosX];
		    y = HouseInfo[id][hPosY];
		    z = HouseInfo[id][hPosZ];
		    return 1;
		}
		else if((id = GetInsideBusiness(playerid)) >= 0)
		{
		    x = BusinessInfo[id][bPosX];
		    y = BusinessInfo[id][bPosY];
		    z = BusinessInfo[id][bPosZ];
		    return 1;
		}
		else if((id = GetInsideGarage(playerid)) >= 0)
		{
		    x = GarageInfo[id][gPosX];
		    y = GarageInfo[id][gPosY];
		    z = GarageInfo[id][gPosZ];
		    return 1;
		}
		else if((id = GetInsideEntrance(playerid)) >= 0)
		{
		    x = EntranceInfo[id][ePosX];
		    y = EntranceInfo[id][ePosY];
		    z = EntranceInfo[id][ePosZ];
		    return 1;
		}
		else if(GetPlayerInterior(playerid))
		{
			for(new i = 0; i < sizeof(staticEntrances); i ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]))
			    {
			        x = staticEntrances[i][ePosX];
			        y = staticEntrances[i][ePosY];
			        z = staticEntrances[i][ePosZ];
			        return 1;
				}
			}
		}
	}
 	GetPlayerPos(playerid, x, y, z);
  	return 1;
}

GetVehicleCranePrice(vehicleid, bool:extras = true)
{
	new amount;

    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) || (courierVehicles[0] <= vehicleid <= courierVehicles[6]) || (sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) || (taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) || (testVehicles[0] <= vehicleid <= testVehicles[4]))
    {
        return 0;
	}
	if((VehicleInfo[vehicleid][vID] > 0) && (VehicleInfo[vehicleid][vFactionType] > 0 || VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vJob] >= 0))
	{
	    return 0;
	}

	switch(GetVehicleModel(vehicleid))
	{
	    case 481, 509, 510: // Bicycles.
	        amount = 800;

	    case 448, 462, 463, 468, 471: // Mid bikes.
	        amount = 1500;

		case 461, 521, 522, 581: // High bikes.
		    amount = 2000;

		case 402, 429, 475, 477, 494, 496, 502..504, 558..562, 565, 587, 589, 602, 603: // Muscle cars and mid sports cars.
		    amount = 3000;

		case 411, 415, 451, 506, 541: // High sports cars.
		    amount = 4000;

		case 403, 408, 414, 443, 455, 456, 498, 499, 514, 515, 524, 578, 609: // Boxed trucks and trucks.
		    amount = 3500;

		case 413, 418, 422, 440, 459, 478, 482, 543, 552, 554, 582, 600, 605: // Pickup trucks and vans.
		    amount = 2500;

		case 400, 424, 444, 470, 489, 495, 500, 505, 556, 557, 568, 573, 579: // Offroad vehicles
		    amount = 2750;

		case 412, 534..536, 566, 567, 575, 576: // Lowriders
		    amount = 2500;

		case 401, 404, 405, 410, 419, 421, 426, 436, 445, 458, 466, 467, 474, 479, 491, 492, 516..518, 526, 527, 529, 540, 542, 546, 547, 549..551, 580, 585, 604: // Saloon cars & station wagons.
		    amount = 2000;
 	}

 	if((extras && amount > 0) && VehicleInfo[vehicleid][vOwnerID] > 0)
 	{
 	    if(VehicleInfo[vehicleid][vNeon] != 0)
		 	amount += 1000; // $1k extra for neon.
 	    if(VehicleInfo[vehicleid][vAlarm] != 0)
 	        amount += VehicleInfo[vehicleid][vAlarm] * 500; // Extra $500 per alarm level.
 	    if(VehicleInfo[vehicleid][vTrunk] != 0)
 	        amount += VehicleInfo[vehicleid][vTrunk] * 250; // Extra $250 per trunk level.
 	}

 	return amount;
}

GetVehicleValue(vehicleid)
{
	new
		price = VehicleInfo[vehicleid][vPrice];

	switch(VehicleInfo[vehicleid][vAlarm])
	{
	    case 1: price += 15000;
	    case 2: price += 30000;
	    case 3: price += 60000;
	}

	if(VehicleInfo[vehicleid][vNeon])
	{
	    price += 30000;
	}
	if(VehicleInfo[vehicleid][vTrunk])
	{
	    price += VehicleInfo[vehicleid][vTrunk] * 10000;
	}
	return price;
}


GetVehicleLinkedID(id)
{
    foreach(new i: Vehicle)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}

GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

PreviewClothing(playerid, index)
{
    if(PlayerData[playerid][pCash] < clothingArray[index][clothingPrice])
    {
        SendClientMessage(playerid, COLOR_GREY, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		PlayerData[playerid][pEditType] = EDIT_CLOTHING_PREVIEW;
        PlayerData[playerid][pSelected] = index;

		SendClientMessageEx(playerid, COLOR_AQUA, "You are now previewing {FF6347}%s{33CCFF}. This clothing item costs {00AA00}%s{33CCFF} to purchase.", clothingArray[index][clothingName], FormatNumber(clothingArray[index][clothingPrice]));
		SendClientMessageEx(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditAttachedObject(playerid, 9);
	}
}

ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerData[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerData[playerid][pCategory]]))
        {
	        if(PlayerData[playerid][pClothingIndex] == -1)
	        {
	            PlayerData[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[PlayerData[playerid][pCategory]], models, index);
}

PurchaseLandObject(playerid, landid, index)
{
    if(PlayerData[playerid][pCash] < landArray[index][fPrice])
    {
        SendClientMessage(playerid, COLOR_GREY, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(PlayerData[playerid][pEditType] == EDIT_LAND_OBJECT_PREVIEW && IsValidDynamicObject(PlayerData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(PlayerData[playerid][pEditObject]);
            PlayerData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		PlayerData[playerid][pEditType] = EDIT_LAND_OBJECT_PREVIEW;
		PlayerData[playerid][pEditObject] = CreateDynamicObject(landArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= landArray[index][fModel] <= 19417) || (19426 <= landArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		PlayerData[playerid][pObjectLand] = landid;
        PlayerData[playerid][pSelected] = index;

		SendClientMessageEx(playerid, COLOR_AQUA, "You are now previewing {FF6347}%s{33CCFF}. This object costs {00AA00}%s{33CCFF} to purchase.", landArray[index][fName], FormatNumber(landArray[index][fPrice]));
		SendClientMessageEx(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        Streamer_Update(playerid);
        EditDynamicObject(playerid, PlayerData[playerid][pEditObject]);
	}
}
ShowLandObjects(playerid, type)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerData[playerid][pFurnitureIndex] = -1;

	for(new i = 0; i < sizeof(landArray); i ++)
	{
	    if(!strcmp(landArray[i][fCategory], landCategories[PlayerData[playerid][pCategory]]))
	    {
	        if(PlayerData[playerid][pFurnitureIndex] == -1)
	        {
	            PlayerData[playerid][pFurnitureIndex] = i;
			}

	        models[index++] = landArray[i][fModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, type, landCategories[PlayerData[playerid][pCategory]], models, index);
}
SetPlayerSpecialTag(playerid, type)
{
	new
	    string[128];

	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]);
        PlayerData[playerid][pSpecialTag] = INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_MASK)
		    ShowPlayerNameTagForPlayer(i, playerid, 0);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	switch(type)
    {
		case TAG_MASK:
		{
		    format(string, sizeof(string), "Stranger_%d", PlayerData[playerid][pMaskID]);
			PlayerData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);

		}
	}
	PlayerData[playerid][pTagType] = type;
}
ClearChat(playerid)
{
	for(new i = 0; i < 30; i ++)
	{
	    SendClientMessage(playerid, -1, " ");
	}
}

Float:Streamer_GetExtraFloat(objectid, type)
{
	new
	    string[24];

	getproperty(.id = objectid, .value = type, .string = string);
	strunpack(string, string);
	return floatstr(string);
}

Streamer_SetExtraFloat(objectid, type, Float:value)
{
	new
	    string[24];

	format(string, sizeof(string), "%f", value);
	setproperty(.id = objectid, .value = type, .string = string);
	return 1;
}
Dialog:WeaponDamages(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new count;

	    for(new i = 0; i < sizeof(WeaponDamages); i ++)
		{
		    if(IsValidDamageWeapon(i))
		    {
				if(count++ == listitem)
				{
				    PlayerData[playerid][pSelected] = i;
	    			return Dialog_Show(playerid, SetDamage, DIALOG_STYLE_INPUT, "{FFFFFF}Set Damage", "Please enter the weapon damage to set for %s (use 0 for default).", "Submit", "Back", GetWeaponNameEx(PlayerData[playerid][pSelected]));
				}
			}
		}
	}
	return 1;
}

Dialog:SetDamage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new Float:damage;

	    if (sscanf(inputtext, "f", damage))
	    {
	        return Dialog_Show(playerid, SetDamage, DIALOG_STYLE_INPUT, "{FFFFFF}Set Damage", "Please enter the weapon damage to set for %s (use 0 for default).", "Submit", "Back", GetWeaponNameEx(PlayerData[playerid][pSelected]));
		}
		else if (damage < 0.0 || damage > 100.0)
		{
		    return Dialog_Show(playerid, SetDamage, DIALOG_STYLE_INPUT, "{FFFFFF}Set Damage", "The specified damage can't be below 0 or above 100.\n\nPlease enter the weapon damage to set for %s (use 0 for default).", "Submit", "Back", GetWeaponNameEx(PlayerData[playerid][pSelected]));
		}
		else
		{
		    new weaponid = PlayerData[playerid][pSelected];

		    SetWeaponDamage(weaponid, damage);

		    if (damage == 0.0)
		    {
		    	SendAdminMessage(COLOR_ADM, "Admin: %s has set the damage for %s to default.", GetRPName(playerid), GetWeaponNameEx(weaponid));
			}
			else
			{
			    SendAdminMessage(COLOR_ADM, "Admin: %s has set the damage for %s to %.1f.", GetRPName(playerid), GetWeaponNameEx(weaponid), damage);
			}
		}
	}
	else
	{
	    ShowWeaponDamageEditMenu(playerid);
	}
	return 1;
}
Dialog:DIALOG_USECOOKIES(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(PlayerData[playerid][pJailType] > 0 && listitem != 2)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't redeem your tokens while in prison or jail.");
		}

        switch(listitem)
        {
			case 0:
			{
                if(PlayerData[playerid][pDiamonds] < 1)
				{
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds. You can't redeem this item.");
                }
                PlayerData[playerid][pDiamonds] -= 1;
                PlayerData[playerid][pCookies] += 50;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i, cookies = %i WHERE uid = %i", PlayerData[playerid][pDiamonds], PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 1 diamond for {00AA00}50 Tokens{33CCFF}.");
			}
			case 1:
			{
			    if(PlayerData[playerid][pCookies] < 5)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }
                if(PlayerData[playerid][pJailType] != 3)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You are not in IC jail right now.");
				}

                PlayerData[playerid][pCookies] -= 5;
                PlayerData[playerid][pJailTime] /= 2;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, jailtime = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pJailTime], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 5 tokens for 50 percent off your {00AA00}IC jailtime{33CCFF}.");
			}
			case 2:
			{
                if(PlayerData[playerid][pCookies] < 6)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 8;
                PlayerData[playerid][pEXP] += 4;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, exp = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pEXP], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 8 tokens for {00AA00}+4 XP{33CCFF}.");
			}
			case 3:
			{
                if(PlayerData[playerid][pCookies] < 10)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }
                if(PlayerData[playerid][pMaterials] + 10000 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
	    			return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

                PlayerData[playerid][pCookies] -= 10;
                PlayerData[playerid][pMaterials] += 15000;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 10 tokens for {00AA00}10000 materials{33CCFF}.");
			}
			case 4:
			{
			    if(PlayerData[playerid][pCookies] < 20)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }
            	if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
				}

                PlayerData[playerid][pCookies] -= 20;

                GivePlayerWeaponEx(playerid, 24);
                GivePlayerWeaponEx(playerid, 27);
                GivePlayerWeaponEx(playerid, 29);
                GivePlayerWeaponEx(playerid, 31);
                GivePlayerWeaponEx(playerid, 34);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 20 tokens for a {00AA00}Full weapon set{33CCFF}.");
			}
			case 5:
			{
			    if(PlayerData[playerid][pCookies] < 25)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                Dialog_Show(playerid, DIALOG_COOKIENUMBER, DIALOG_STYLE_INPUT, "Number change", "Enter your phone number of choice:", "Submit", "Cancel");
			}
			case 6:
			{
			    if(PlayerData[playerid][pCookies] < 30)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

			    Dialog_Show(playerid, DIALOG_COOKIEJOB, DIALOG_STYLE_LIST, "Choose a job to 1x level up.", "Courier\nFisherman\nMechanic\nWeapons Dealer\nDrug Dealer\nLawyer\nDetective", "Select", "Cancel");
			}
			case 7:
			{
                if(PlayerData[playerid][pCookies] < 40)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 40;
                PlayerData[playerid][pDoubleXP] += 8;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, doublexp = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pDoubleXP], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 40 tokens for {00AA00}8 hours of Double XP{33CCFF}.");
			}
			case 8:
			{
			    if(PlayerData[playerid][pCookies] < 50)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 50;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Cookie prize', NOW(), 'Free vehicle (up to $200k value)')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 50 tokens for a {00AA00}Free vehicle ticket{33CCFF}. /report for your prize.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a vehicle ticket (up to $200k value).", GetRPName(playerid), playerid);
			}
			case 9:
			{
			    if(PlayerData[playerid][pCookies] < 160)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 160;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Cookie prize', NOW(), 'Free house (up to $250k value)')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 160 tokens for a {00AA00}Free house ticket{33CCFF}. /report for your prize.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a house ticket (up to $250k value).", GetRPName(playerid), playerid);
			}
			case 10:
			{
			    if(PlayerData[playerid][pCookies] < 200)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 200;
                PlayerData[playerid][pDonator] = 1;
                PlayerData[playerid][pVIPTime] = gettime() + 2592000;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, vippackage = 1, viptime = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pVIPTime], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 200 tokens for {00AA00}1 month Donator subscription{33CCFF}.");
			}
			case 11:
			{
			    if(PlayerData[playerid][pCookies] < 400)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
                }

                PlayerData[playerid][pCookies] -= 400;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Cookie prize', NOW(), 'Free business of any type')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 400 tokens for a {00AA00}Free business ticket{33CCFF}. /report for your prize.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a business ticket (any type).", GetRPName(playerid), playerid);
			}
		}
    }
    return 1;
}
Dialog:DIALOG_COOKIESHOUTOUT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!(3 <= strlen(inputtext) <= 64))
        {
            SendClientMessage(playerid, COLOR_GREY, "Your shoutout may only contain 3 to 64 characters.");
            return Dialog_Show(playerid, DIALOG_COOKIESHOUTOUT, DIALOG_STYLE_INPUT, "Shoutout of choice", "Enter a shoutout to broadcast to the server:", "Submit", "Cancel");
		}
		if(PlayerData[playerid][pCookies] < 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
        }

        PlayerData[playerid][pCookies] -= 3;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageToAllEx(COLOR_ORANGE, "Shoutout from %s: %s", GetRPName(playerid), inputtext);
		SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 3 tokens for a {00AA00}Shoutout{33CCFF} to the entire server.");
	}
	return 1;
}
Dialog:DIALOG_COOKIEWEATHER(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(PlayerData[playerid][pCookies] < 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
        }

        switch(listitem)
        {
            case 0: gWeather = 1;
            case 1: gWeather = 4;
            case 2: gWeather = 8;
            case 3: gWeather = 9;
            case 4: gWeather = 12;
            case 5: gWeather = 18;
            case 6: gWeather = 19;
		}

		SetWeather(gWeather);

		PlayerData[playerid][pCookies] -= 3;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have redeemed 3 tokens for a weather change to {00AA00}%s{33CCFF}.", inputtext);
	}
	return 1;
}
Dialog:DIALOG_COOKIENUMBER(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new number;

        if(sscanf(inputtext, "i", number))
        {
            return Dialog_Show(playerid, DIALOG_COOKIENUMBER, DIALOG_STYLE_INPUT, "Number change", "Enter your phone number of choice:", "Submit", "Cancel");
		}
		if(number == 0 || number == 911)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
		    return Dialog_Show(playerid, DIALOG_COOKIENUMBER, DIALOG_STYLE_INPUT, "Number change", "Enter your phone number of choice:", "Submit", "Cancel");
		}
		if(PlayerData[playerid][pCookies] < 25)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
        }
	 	PlayerData[playerid][pCookies] -= 25;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT phone FROM users WHERE phone = %i", number);
        mysql_tquery(connectionID, queryBuffer, "OnPlayerChangeNumber", "ii", playerid, number);
	}
	return 1;
}
Dialog:DIALOG_COOKIEJOB(playerid, response, listitem, inputtext[])
{
    new job, level;

    if(response)
	{
	    switch(listitem)
	    {
	        case 0: job = JOB_COURIER;
	        case 1: job = JOB_FISHERMAN;
	        case 2: job = JOB_MECHANIC;
            case 3: job = JOB_WEAPONDEALER;
            case 4: job = JOB_DRUGDEALER;
            case 5: job = JOB_LAWYER;
            case 6: job = JOB_DETECTIVE;
		}

		if((level = GetJobLevel(playerid, job)) >= 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Your level for this job is already at its maximum.");
	    }
	    if(PlayerData[playerid][pCookies] < 30)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough tokens. You can't redeem this item.");
        }

        PlayerData[playerid][pCookies] -= 30;

        switch(job)
        {
            case JOB_COURIER:
            {
                if(0 <= PlayerData[playerid][pCourierSkill] <= 49) {
			        PlayerData[playerid][pCourierSkill] = 50;
				} else if(50 <= PlayerData[playerid][pCourierSkill] <= 99) {
					PlayerData[playerid][pCourierSkill] = 100;
				} else if(100 <= PlayerData[playerid][pCourierSkill] <= 199) {
					PlayerData[playerid][pCourierSkill] = 200;
				} else if(200 <= PlayerData[playerid][pCourierSkill] <= 349) {
					PlayerData[playerid][pCourierSkill] = 350;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, courierskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pCourierSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
            case JOB_FISHERMAN:
			{
			    if(0 <= PlayerData[playerid][pFishingSkill] <= 49) {
			        PlayerData[playerid][pFishingSkill] = 50;
				} else if(50 <= PlayerData[playerid][pFishingSkill] <= 99) {
					PlayerData[playerid][pFishingSkill] = 100;
				} else if(100 <= PlayerData[playerid][pFishingSkill] <= 199) {
					PlayerData[playerid][pFishingSkill] = 200;
				} else if(200 <= PlayerData[playerid][pFishingSkill] <= 349) {
					PlayerData[playerid][pFishingSkill] = 350;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, fishingskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pFishingSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			case JOB_MECHANIC:
			{
			    if(0 <= PlayerData[playerid][pMechanicSkill] <= 24) {
     				PlayerData[playerid][pMechanicSkill] = 25;
				} else if(25 <= PlayerData[playerid][pMechanicSkill] <= 49) {
					PlayerData[playerid][pMechanicSkill] = 50;
				} else if(50 <= PlayerData[playerid][pMechanicSkill] <= 99) {
					PlayerData[playerid][pMechanicSkill] = 100;
				} else if(100 <= PlayerData[playerid][pMechanicSkill] <= 199) {
					PlayerData[playerid][pMechanicSkill] = 200;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, mechanicskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pMechanicSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			case JOB_WEAPONDEALER:
			{
			    if(0 <= PlayerData[playerid][pWeaponSkill] <= 49) {
			        PlayerData[playerid][pWeaponSkill] = 50;
				} else if(50 <= PlayerData[playerid][pWeaponSkill] <= 99) {
					PlayerData[playerid][pWeaponSkill] = 100;
				} else if(100 <= PlayerData[playerid][pWeaponSkill] <= 199) {
					PlayerData[playerid][pWeaponSkill] = 200;
				} else if(200 <= PlayerData[playerid][pWeaponSkill] <= 499) {
					PlayerData[playerid][pWeaponSkill] = 500;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, weaponskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pWeaponSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			case JOB_DRUGDEALER:
			{
			    if(0 <= PlayerData[playerid][pSmugglerSkill] <= 24) {
			        PlayerData[playerid][pSmugglerSkill] = 25;
				} else if(25 <= PlayerData[playerid][pSmugglerSkill] <= 49) {
					PlayerData[playerid][pSmugglerSkill] = 50;
				} else if(50 <= PlayerData[playerid][pSmugglerSkill] <= 74) {
					PlayerData[playerid][pSmugglerSkill] = 75;
				} else if(75 <= PlayerData[playerid][pSmugglerSkill] <= 99) {
					PlayerData[playerid][pSmugglerSkill] = 100;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, smugglerskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pSmugglerSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			case JOB_LAWYER:
			{
			    if(0 <= PlayerData[playerid][pLawyerSkill] <= 24) {
			        PlayerData[playerid][pLawyerSkill] = 25;
				} else if(25 <= PlayerData[playerid][pLawyerSkill] <= 49) {
					PlayerData[playerid][pLawyerSkill] = 50;
				} else if(50 <= PlayerData[playerid][pLawyerSkill] <= 99) {
					PlayerData[playerid][pLawyerSkill] = 100;
				} else if(75 <= PlayerData[playerid][pLawyerSkill] <= 199) {
					PlayerData[playerid][pLawyerSkill] = 200;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, lawyerskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pLawyerSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			case JOB_DETECTIVE:
			{
			    if(0 <= PlayerData[playerid][pDetectiveSkill] <= 49) {
			        PlayerData[playerid][pDetectiveSkill] = 50;
				} else if(50 <= PlayerData[playerid][pDetectiveSkill] <= 99) {
					PlayerData[playerid][pDetectiveSkill] = 100;
				} else if(100 <= PlayerData[playerid][pDetectiveSkill] <= 199) {
					PlayerData[playerid][pDetectiveSkill] = 200;
				} else if(200 <= PlayerData[playerid][pDetectiveSkill] <= 399) {
					PlayerData[playerid][pDetectiveSkill] = 400;
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, detectiveskill = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pDetectiveSkill], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		SendClientMessageEx(playerid, COLOR_AQUA, "You have redeemed 30 tokens to advance your {00AA00}%s{33CCFF} level from %i to %i.", GetJobName(job), level, level + 1);
    }
    return 1;
}
Dialog:ClothesNew(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
		    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", customSkins, sizeof(customSkins));
		}
		else if(listitem == 1)
		{
		    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkins, sizeof(clothesShopSkins));
		}
	}
	return 1;
}


stock CountPlayerHouses(playerid)
{
	new count = 0;

	for(new i = 0; i < MAX_HOUSES; i++){

		if(HouseInfo[i][hExists])
		{
			if(IsHouseOwner(playerid, i))
			{
				count++;
			}
		}
	}

	return count;
}
GetGangColor(gang)
{
	new
		color;
	color = GangInfo[gang][gColor] >>> 8;
	return color;
}
stock ClearDamages(playerid)
{
	for(new id = 0; id < MAX_DAMAGES; id++)
	{
		if(DamageData[playerid][id][damageTaken] != 0){
			DamageData[playerid][id][damageTaken] = 0;
			DamageData[playerid][id][damageBodypart] = 0;
			DamageData[playerid][id][damageTime] = 0;
			DamageData[playerid][id][damageWeapon] = -1;
			DamageData[playerid][id][damageBy] = -1;
		}
	}

	totalDamages[playerid] = 0;
	PlayerData[playerid][pLegShot] = false;

	return true;
}

stock ReturnDamages(damaged, playerid)
{
	new str[400], longstr[2500], title[90], count = 0;

	format(title, sizeof(title), "%s", GetRPName(damaged));

	for(new id = 0; id < MAX_DAMAGES; id++){
		if(DamageData[damaged][id][damageTaken] != 0) count++;
	}
	if(!count)return Dialog_Show(playerid, 1, DIALOG_STYLE_LIST, title, "There are no damages to show.", ">>>", "");
	else if(count > 0){
		for(new id = 0; id < MAX_DAMAGES; id++){

			if(DamageData[damaged][id][damageTaken] >= 1){

				format(str, sizeof(str), "%d dmg from %s to %s (Kevlarhit: %d) %d s ago\n", DamageData[damaged][id][damageTaken], GetWeaponNameEx(DamageData[damaged][id][damageWeapon]), ReturnBodypartName(DamageData[damaged][id][damageBodypart]), DamageData[damaged][id][damageArmor], gettime() - DamageData[damaged][id][damageTime]);
				strcat(longstr, str);
			}
		}

		Dialog_Show(playerid, 1, DIALOG_STYLE_LIST, title, longstr, ">>>", "");
	}

	return true;
}

stock ReturnDamagesAdmin(damaged, playerid)
{
	new str[400], longstr[2500], title[90], count = 0;

	format(title, sizeof(title), "%s", GetRPName(damaged));

	for(new id = 0; id < MAX_DAMAGES; id++){
		if(DamageData[damaged][id][damageTaken] != 0) count++;
	}
	if(!count)return Dialog_Show(playerid, 1, DIALOG_STYLE_LIST, title, "There are no damages to show.", ">>>", "");
	else if(count > 0){
		for(new id = 0; id < MAX_DAMAGES; id++){

			if(DamageData[damaged][id][damageTaken] != 0){
				format(str, sizeof(str), "{FF6346}(%s){FFFFFF} %d dmg from %s to %s (Kevlarhit: %d) %d s ago\n", DamageData[damaged][id][damageBy], DamageData[damaged][id][damageTaken], GetWeaponNameEx(DamageData[damaged][id][damageWeapon]), ReturnBodypartName(DamageData[damaged][id][damageBodypart]), DamageData[damaged][id][damageArmor], gettime() - DamageData[damaged][id][damageTime]);
				strcat(longstr, str);
			}
		}

		Dialog_Show(playerid, 1, DIALOG_STYLE_LIST, title, longstr, ">>>", "");
	}

	return true;
}
ProcessDamage(playerid, weaponid)
{
	new
	    Float:damage = WeaponDamages[weaponid],
		Float:health,
		Float:armor;

	if (damage != 0.0)
	{
	    GetPlayerHealth(playerid, health);
	    GetPlayerArmour(playerid, armor);

	    if (armor >= damage) {
		    armor -= damage;
		} else if (armor < damage) {
		    health -= (damage - armor), armor = 0;
		} else if (health >= damage) {
		    health -= damage;
		} else {
		    health = 0;
		}

		SetPlayerHealth(playerid, health);
		SetPlayerArmour(playerid, armor);
	}
}
IsValidDamageWeapon(weaponid)
{
	if(!(0 <= weaponid <= 46))
		return false;

    switch(weaponid)
	{
        case 0, 19..21, WEAPON_DILDO..WEAPON_FLOWER, WEAPON_GRENADE..WEAPON_MOLTOV, WEAPON_ROCKETLAUNCHER..WEAPON_MINIGUN, WEAPON_SATCHEL..WEAPON_PARACHUTE:
            return false;
	}

	return true;
}

ShowWeaponDamageEditMenu(playerid)
{
	static
	    string[512];

	string = "Weapon\tDamage";

	for(new i = 0; i < sizeof(WeaponDamages); i ++)
	{
	    if(IsValidDamageWeapon(i))
	    {
		    if (WeaponDamages[i] != 0.0)
				format(string, sizeof(string), "%s\n%s\t%.1f%c", string, GetWeaponNameEx(i), WeaponDamages[i], '%');
			else
		    	format(string, sizeof(string), "%s\n%s\tDefault", string, GetWeaponNameEx(i));
		}
	}

	Dialog_Show(playerid, WeaponDamages, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Select Weapon", string, "Change", "Cancel");
}

SetWeaponDamage(weaponid, Float:damage) // Edited by Grime (09-27-2017)
{
	if(IsValidDamageWeapon(weaponid))
	{
		format(queryBuffer, sizeof(queryBuffer), "INSERT INTO rp_gundamages (Weapon, Damage) VALUES(%i, %.4f) ON DUPLICATE KEY UPDATE Damage = %.4f", weaponid, damage, damage);
		mysql_tquery(connectionID, queryBuffer);
		WeaponDamages[weaponid] = damage;
	}
}

stock AddDamages(playerid, issuerid, weaponid, bodypart, Float:amount)
{
	new id;

	totalDamages[playerid]++;

	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		if(!DamageData[playerid][i][damageTaken]){
			id = i;
			break;
		}
	}

	new Float: Armour;
	GetPlayerArmour(playerid, Armour);

	if(Armour > 1 && bodypart == BODY_PART_CHEST){
		DamageData[playerid][id][damageArmor] = 1;
	}
	else{
		DamageData[playerid][id][damageArmor] = 0;
	}

	DamageData[playerid][id][damageTaken] = floatround(amount, floatround_round);
	DamageData[playerid][id][damageWeapon] = weaponid;
	DamageData[playerid][id][damageBodypart] = bodypart;
	DamageData[playerid][id][damageTime] = gettime();
	format(DamageData[playerid][id][damageBy], 90, "%s", GetPlayerNameEx(issuerid));
	return true;
}
IsRepairShopInUse(id)
{
	foreach(new i : Player)
	{
		if(PlayerData[i][pRepairShop] == id && IsPlayerInRangeOfPoint(i, 10.0, g_RepairShops[id][3], g_RepairShops[id][4], g_RepairShops[id][5]))
		{
			return 1;
		}
	}

	return 0;
}

Dialog:Graffiti_Type(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			Dialog_Show(playerid, Dialog_Tag_Default, DIALOG_STYLE_LIST, "Default Tag", "Pink graffiti Temple Drive Ballas\nOrange graffiti Varrio loz aztecas\nDark green graffiti Seville BLVD\nOrange graffiti Varrio Los Aztecas\nPurple graffiti Kilo tray Ballas\nPurple graffiti San Fiero Rifa\nDark green graffiti Los Santos Vagos\nPurple graffiti Front Yard Ballaz\nPink graffiti Rollin Heights Ballas\nDark blue Temple drive Ballas", "Select", "Cancel");
		}
		if(listitem == 1)
		{
			Dialog_Show(playerid, Dialog_Tag_Font, DIALOG_STYLE_LIST, "Chose a font!", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\naaaiight! fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Select", "Cancel");
		}
	}
	return 1;
}

Dialog:Dialog_Tag_Default(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = Graffiti_Nearest(playerid);
	    switch(listitem)
	    {
			case 0:
			{
			    gang_tag_chosen[playerid] = 1529;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 1:
			{
			    gang_tag_chosen[playerid] = 1531;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));

			}
			case 2:
			{
			    gang_tag_chosen[playerid] = 18660;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 3:
			{
			    gang_tag_chosen[playerid] = 18661;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 4:
			{
			    gang_tag_chosen[playerid] = 18662;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 5:
			{
			    gang_tag_chosen[playerid] = 18663;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 6:
			{
			    gang_tag_chosen[playerid] = 18665;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 7:
			{
			    gang_tag_chosen[playerid] = 18666;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 8:
			{
			    gang_tag_chosen[playerid] = 18667;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
			case 9:
			{
			    gang_tag_chosen[playerid] = 18664;
			    SendClientMessageEx(playerid, -1, "You've chose %s", inputtext);
   		        PlayerData[playerid][pGraffiti] = id;
		        PlayerData[playerid][pGraffitiTime] = 15;
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
				SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
				SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
	    }
	}
	return 1;
}
Dialog:Dialog_Tag_Font(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(gang_tag_font[playerid], 50, inputtext);
 		Dialog_Show(playerid, Graffiti_Text, DIALOG_STYLE_INPUT, "Graffiti Text", "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
	}
	return 1;
}
Dialog:BuyFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		PlayerData[playerid][pSelected] = listitem;
		ShowFurniturePreviewer(playerid);
	}
	return 1;
}
Dialog:ChangeMat(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(listitem == 0 || listitem == 1) return ShowColorList(playerid);
	new t = -1;
	for(new x = 0; x < sizeof(MaterialIDs); x++)
	{
		if(strcmp(inputtext, MaterialIDs[x][Name], true) == 0)
		{
			t = x;
			break;
		}
	}
	if(t == -1) return SendClientMessage(playerid, COLOR_RED, "An error has occurred, please try it later! (DEBUG: \"ChangeMatHandler\")");
	FurnitureChange(playerid, GetPVarInt(playerid, "FurnID"), GetPVarInt(playerid, "MatSlot"), t, 1);
	return true;
}

Dialog:ChangeColor(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(listitem == 0 || listitem == 1) return MaterialRes
	FurnitureChange(playerid, GetPVarInt(playerid, "FurnID"), GetPVarInt(playerid, "MatSlot"), listitem, 2);
	return true;
}



ListTexture(playerid)
{
    new fid = GetPVarInt(playerid, "FurnID");

	new list[256], header[64];
	format(header, sizeof(header), "You are now editing ID: %d.", GetPVarInt(playerid, "FurnID"));
	format(list, sizeof(list), "Index 1: %s\nIndex 2: %s\nIndex 3: %s\n \nClear Textures", Furniture[fid][fMaterial][0] ? ("{FFFF00}In Use") : ("{C3C3C3}Empty"), Furniture[fid][fMaterial][1] ? ("{FFFF00}In Use") : ("{C3C3C3}Empty"), Furniture[fid][fMaterial][2] ? ("{FFFF00}In Use") : ("{C3C3C3}Empty"));
	Dialog_Show(playerid, MaterialHandler, DIALOG_STYLE_LIST, header, list, ">>", "Cancel");
	return 1;
}

Dialog:MaterialHandler(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(listitem == 4)
	{
	    for(new i = 0; i != 3; i ++)
		{
      		Furniture[GetPVarInt(playerid, "FurnID")][fMaterial][i] = 0;
      		Furniture[GetPVarInt(playerid, "FurnID")][fMatColour][i] = 0;
      		SetDynamicObjectMaterial(Furniture[GetPVarInt(playerid, "FurnID")][fObject], i, -1, "none", "none", 0);
		}
	    SaveFurniture(GetPVarInt(playerid, "FurnID"));
	}
	SetPVarInt(playerid, "MatSlot", listitem);
    MaterialRes
	//ShowMaterialList(playerid);
	return true;
}

Dialog:TextureResources(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	new gstr[2056], gString[256];
    format(gString, sizeof(gString), " << {F3FF02}Select Color\n");
    strcat(gstr, gString);
	for(new i = 0; i < sizeof(MaterialIDs); i++)
	{
	    if(strcmp("None", MaterialIDs[i][Resource], true) == 0) continue;
		if(strcmp(inputtext, MaterialIDs[i][Resource], true) == 0)
		{
			strcat(gstr, MaterialIDs[i][Name]);
			strcat(gstr, "\n");
		}
	}
	Dialog_Show(playerid, ChangeMat, DIALOG_STYLE_LIST, "Texture List", gstr, ">>", "Cancel");
	return 1;
}

ShowColorList(playerid)
{
	new list[4056], bigStr[256], gString[256];
    format(gString, sizeof(gString), " << {F3FF02}Select Texture\n");
    strcat(list, gString);
	for(new i = 0; i < sizeof(MaterialColors); i++)
	{
	    if(strcmp("none", MaterialColors[i][ColorName], true) == 0) continue;
		format(bigStr, sizeof(bigStr), "%s\n", MaterialColors[i][ColorName]);
		strcat(list, bigStr);
	}
	Dialog_Show(playerid, ChangeColor, DIALOG_STYLE_LIST, "Color List", list, ">>", "Cancel");
	return 1;
}

FurnitureChange(playerid, furnid, index, list, status = 1) // 1 for mat, 2 for color
{
    new model, txd[24], texture[24], color;
	switch(status)
	{
	    case 1:
	    {
	        SendClientMessage(playerid, -1, "Furniture texture has been updated.");
	        Furniture[furnid][fMaterial][index] = list;
	        SetDynamicObjectMaterial(Furniture[furnid][fObject], index, MaterialIDs[ Furniture[furnid][fMaterial][index] ][ModelID], MaterialIDs[ Furniture[furnid][fMaterial][index] ][TxdName], MaterialIDs[ Furniture[furnid][fMaterial][index] ][TextureName], MaterialColors[ Furniture[furnid][fMatColour][index] ][ColorHex]);
			SaveFurniture(furnid);
		}
	    case 2:
	    {
	        if(Furniture[furnid][fMaterial][index] == 0)
	        {
	            Furniture[furnid][fMatColour][index] = list;
	            SetDynamicObjectMaterial(Furniture[furnid][fObject], index, -1, MaterialIDs[ Furniture[furnid][fMaterial][index] ][TxdName], MaterialIDs[ Furniture[furnid][fMaterial][index] ][TextureName], MaterialColors[ Furniture[furnid][fMatColour][index] ][ColorHex]);
                SaveFurniture(furnid);
			}
            else
            {
		        SendClientMessage(playerid, -1, "Furniture color has been updated.");
		        Furniture[furnid][fMatColour][index] = list;
		    	GetDynamicObjectMaterial(Furniture[furnid][fObject], index, model, txd, texture, color);
				SetDynamicObjectMaterial(Furniture[furnid][fObject], index, model, txd, texture, MaterialColors[ Furniture[furnid][fMatColour][index] ][ColorHex]);
	            SaveFurniture(furnid);
            }
		}
	}
	return 1;
}
Dialog:HouseFurniture(playerid, response, listitem, inputtext[])
{
    new
		house = PlayerData[playerid][pHouse];

    if(!GetInsideHouse(playerid) && !GetFurnitureHouse(playerid)) return SendErrorMessage(playerid, "You are not nearby or in a house that you own.");

	if (!IsValidHouseID(house) || !IsHouseOwner(playerid, house))
	{
        return 0;
	}
	if (response)
	{
	    switch (listitem)
	    {
		    case 0: // Buy furniture
		    {
		        ShowFurnitureCategories(playerid);
		    }
		    case 1: // Edit furniture
		    {
		        if (HouseInfo[house][hEdit])
		        {
					PlayerData[playerid][pHouseEdit] = -1;

					SetFurnitureEditMode(house, false);
		            SendInfoMessage(playerid, "You are no longer editing your furniture.");
				}
				else
				{
				    if (PlayerData[playerid][pHouseEdit] != -1)
				    {
				        SetFurnitureEditMode(PlayerData[playerid][pHouseEdit], false);
				    }
				    PlayerData[playerid][pHouseEdit] = house;

				    SetFurnitureEditMode(house, true);
					SendInfoMessage(playerid, "You are now in edition mode. Use /cancel to stop editing.");
				}
			}
		}
	}
	return 1;
}


Dialog:Treadmill(playerid, response, listitem, inputtext[])
{
	if ((response) && IsPlayerInRangeOfPoint(playerid, 3.0, 773.5131, -2.1218, 1000.8479))
	{
		PlayerData[playerid][pSpeedLevel] = listitem + 1;
		Timers[playerid][tWorkout] = SetTimerEx("DecreasePower", 150, true, "i", playerid);

		ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_geton", 4.1, 0, 0, 0, 1, 0, 1);
		SetTimerEx("BeginWorkout", 2000, false, "ii", playerid, WORKOUT_TREADMILL);
	}
	else
	{
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

Dialog:LiftWeights(playerid, response, listitem, inputtext[])
{
	if ((response) && IsPlayerInRangeOfPoint(playerid, 3.0, 771.7793, 5.4092, 1000.7802))
	{
		PlayerData[playerid][pWeight] = (listitem + 2) * 10;
		Timers[playerid][tWorkout] = SetTimerEx("DecreasePower", 200, true, "i", playerid);

		ApplyAnimation(playerid, "Freeweights", "gym_free_pickup", 4.1, 0, 0, 0, 0, 0, 1);
		SetTimerEx("BeginWorkout", 2500, false, "ii", playerid, WORKOUT_DUMBELLS);
	}
	else
	{
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	new
		company = PlayerData[playerid][pCompany];

	if (!IsValidCompanyID(company))
	{
		return 0;
	}
	if (response)
	{
		new amount, modelid = PlayerData[playerid][pSelected];

		if (sscanf(inputtext, "i", amount))
		{
			return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "Please input the price to set for '%s' below.", "Submit", "Cancel", GetVehicleModelName(modelid));
		}
		else if (amount < 1)
		{
			return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "The price must be above $0.\n\nPlease input the price to set for '%s' below.", "Submit", "Cancel", GetVehicleModelName(modelid));
		}
		else
		{
			new
				id = AddVehicleToDealership(company, modelid, amount);

			if (id == -1)
			{
				return SendErrorMessage(playerid, "There are no available dealership car slots.");
			}
			else
			{
				SendInfoMessage(playerid, "You have added a %s to company %i.", GetVehicleModelName(modelid), company);
				ShowDealershipEditMenu(playerid, company);
			}
		}
	}
	return 1;
}

Dialog:DealerAdd(playerid, response, listitem, inputtext[])
{
	new
		company = PlayerData[playerid][pCompany];

	if (!IsValidCompanyID(company))
	{
		return 0;
	}
	if (response)
	{
		new model[32], modelid;

		if (sscanf(inputtext, "s[32]", model))
		{
			return Dialog_Show(playerid, DealerAdd, DIALOG_STYLE_INPUT, "{FFFFFF}Add Vehicle", "Please enter the model ID or name of the vehicle to add:", "Submit", "Back");
		}
		else if (!(modelid = GetVehicleModelFromName(model)))
		{
			return SendErrorMessage(playerid, "The specified model doesn't exist.");
		}
		else if (IsVehicleInDealership(company, modelid))
		{
			return SendErrorMessage(playerid, "This vehicle is already sold at this dealership.");
		}
		else
		{
			PlayerData[playerid][pSelected] = modelid;
			Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "Please input the price to set for '%s' below.", "Submit", "Cancel", GetVehicleModelName(modelid));
		}
	}
	return 1;
}
Dialog:DIALOG_BUYVEHICLE2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, PlayerData[playerid][pSelected]);
	}
	return 1;
}
PlayerCanAfford(playerid, amount)
{
	return PlayerData[playerid][pCash] >= amount;
}

PurchaseVehicle(playerid)
{
	new item = PlayerData[playerid][pSelected];
    if(!PlayerCanAfford(playerid, DealershipCars[item][dcPrice]))
    {
        SendClientMessage(playerid, COLOR_GREY, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            string[128];

		format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for {00AA00}$%i{FFD700}?", vehicleNames[DealershipCars[PlayerData[playerid][pSelected]][dcModel] - 400], DealershipCars[PlayerData[playerid][pSelected]][dcPrice]);
		Dialog_Show(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
	}
}

ShowVehicleSelectionMenu(playerid, type)
{
	new
	    models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
	    index, company = GetInsideBusiness(playerid);

	for(new i = 0; i < sizeof(DealershipCars); i ++)
	{
		if (DealershipCars[i][dcCompany] == BusinessInfo[company][bID] && DealershipCars[i][dcModel] > 0 && DealershipCars[i][dcExists])
		{
			models[index++] = DealershipCars[i][dcModel];
		}
	}
	ShowPlayerSelectionMenu(playerid, type, "Buy a Vehicle", models, index);
}

Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}
SetRewardPlay(enable)
{
	gHReward = enable;
}
SetDoubleXP(enable)
{
	gDoubleXP = enable;
}

CreateObjectEx(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:drawdistance = 0.0)
{
	new
		objectid = CreateObject(modelid, x, y, z, rx, ry, rz, drawdistance);

	if(objectid != INVALID_OBJECT_ID)
	{
	    gScriptObject{objectid} = 1;
	}

	return objectid;

}

GetStaticEntranceWorld(name[])
{
	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
     	if(!strcmp(staticEntrances[i][eName], name))
        {
            return staticEntrances[i][eWorld];
		}
	}

	return 0;
}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}
GetClosestDoor(playerid, Float:range)
{
	for (new i = 0; i < MAX_FURNITURE; i ++)
	{
		if (Furniture[i][fExists] && IsDoorModel(Furniture[i][fModel]) && IsPlayerNearPoint(playerid, range, Furniture[i][fSpawn][0], Furniture[i][fSpawn][1], Furniture[i][fSpawn][2], Furniture[i][fInterior], Furniture[i][fWorld]))
		{
			return i;
		}
	}
	return -1;
}

GateCheck(playerid)
{
	new id;

    if(IsPlayerInRangeOfPoint(playerid, 10.0, 1544.639892, -1631.008666, 13.252797)) // PD barrier
	{
	    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this gate.");
		}

		if(!Streamer_GetExtraInt(gPDGates[0], E_OBJECT_OPENED))
		{
		    ShowActionBubble(playerid, "* %s uses their remote to open the gate.", GetRPName(playerid));
		    MoveDynamicObject(gPDGates[0], 1544.689941, -1630.818481, 13.116797, 0.2, 0.000000, 0.000000, 90.000000);
		    Streamer_SetExtraInt(gPDGates[0], E_OBJECT_OPENED, 1);
		}
		else
		{
		    ShowActionBubble(playerid, "* %s uses their remote to close the gate.", GetRPName(playerid));
		    MoveDynamicObject(gPDGates[0], 1544.639892, -1631.008666, 13.252797, 0.2, 0.000000, 90.000000, 90.000000);
		    Streamer_SetExtraInt(gPDGates[0], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1588.042602, -1638.079956, 14.602818)) // PD garage gate
	{
	    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this gate.");
		}

		if(!Streamer_GetExtraInt(gPDGates[1], E_OBJECT_OPENED))
		{
		    ShowActionBubble(playerid, "* %s uses their remote to open the gate.", GetRPName(playerid));
		    MoveDynamicObject(gPDGates[1], 1597.332763, -1638.079956, 14.602818, 3.0);
		    Streamer_SetExtraInt(gPDGates[1], E_OBJECT_OPENED, 1);
		}
		else
		{
		    ShowActionBubble(playerid, "* %s uses their remote to close the gate.", GetRPName(playerid));
		    MoveDynamicObject(gPDGates[1], 1588.042602, -1638.079956, 14.602818, 3.0);
		    Streamer_SetExtraInt(gPDGates[1], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, 321.255279, -1488.601318, 25.281988)) // FBI garage gate
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this gate.");
		}

		if(!Streamer_GetExtraInt(gFBIGates[0], E_OBJECT_OPENED))
		{
		    ShowActionBubble(playerid, "* %s uses their remote to open the gate.", GetRPName(playerid));
		    MoveDynamicObject(gFBIGates[0], 327.033508, -1492.691650, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[0], E_OBJECT_OPENED, 1);
		}
		else
		{
		    ShowActionBubble(playerid, "* %s uses their remote to close the gate.", GetRPName(playerid));
		    MoveDynamicObject(gFBIGates[0], 321.255279, -1488.601318, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[0], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 10.0, 283.590423, -1542.835083, 25.281988)) // FBI garage gate
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this gate.");
		}

		if(!Streamer_GetExtraInt(gFBIGates[1], E_OBJECT_OPENED))
		{
		    ShowActionBubble(playerid, "* %s uses their remote to open the gate.", GetRPName(playerid));
		    MoveDynamicObject(gFBIGates[1], 289.593841, -1547.023071, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[1], E_OBJECT_OPENED, 1);
		}
		else
		{
		    ShowActionBubble(playerid, "* %s uses their remote to close the gate.", GetRPName(playerid));
		    MoveDynamicObject(gFBIGates[1], 283.590423, -1542.835083, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[1], E_OBJECT_OPENED, 0);
		}

		return 1;
	}

	if((id = GetNearbyLand(playerid)) >= 0 && (IsLandOwner(playerid, id) || PlayerData[playerid][pLandPerms] == id))
	{
		for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
		{
    		if(IsValidDynamicObject(i) && IsGateObject(i) && IsPlayerInRangeOfPoint(playerid, 10.0, Streamer_GetExtraFloat(i, E_OBJECT_X), Streamer_GetExtraFloat(i, E_OBJECT_Y), Streamer_GetExtraFloat(i, E_OBJECT_Z)) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandGate", "ii", playerid, i);
			    return 1;
			}
		}
	}

	return 0;
}

DoorCheck(playerid)
{
    new Float:angle, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0; i < sizeof(gPDDoors); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPDDoors[i], 3.0))
	    {
	        if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this door.");
			}

			Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPDDoors[i], E_STREAMER_R_Z, angle);

			if(!Streamer_GetExtraInt(gPDDoors[i], E_OBJECT_OPENED))
			{
			    ShowActionBubble(playerid, "* %s uses their card to open the door.", GetRPName(playerid));
			    SetDynamicObjectRot(gPDDoors[i], 0.0000, 0.0000, angle + 90.0);
			    Streamer_SetExtraInt(gPDDoors[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    ShowActionBubble(playerid, "* %s uses their card to close the door.", GetRPName(playerid));
			    SetDynamicObjectRot(gPDDoors[i], 0.0000, 0.0000, angle - 90.0);
			    Streamer_SetExtraInt(gPDDoors[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}
	if(houseid)
	{
		if (IsValidFurnitureID(GetClosestDoor(playerid, 2.0)))
		{
			if (Furniture[GetClosestDoor(playerid, 2.0)][fDoorOpen] == 1)
			{
				Furniture[GetClosestDoor(playerid, 2.0)][fSpawn][5] = Furniture[GetClosestDoor(playerid, 2.0)][fSpawn][5] + 90.0;
				Furniture[GetClosestDoor(playerid, 2.0)][fDoorOpen] = 0;
				UpdateFurniture(GetClosestDoor(playerid, 2.0));
			}
			else
			{
				Furniture[GetClosestDoor(playerid, 2.0)][fSpawn][5] = Furniture[GetClosestDoor(playerid, 2.0)][fSpawn][5] - 90.0;
				Furniture[GetClosestDoor(playerid, 2.0)][fDoorOpen] = 1;
				UpdateFurniture(GetClosestDoor(playerid, 2.0));
			}
		}
	}
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
			if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

	return 0;
}

EnterCheck(playerid)
{
	new id, string[40];

	if((gettime() - PlayerData[playerid][pLastEnter]) < 3 && PlayerData[playerid][pAdminDuty] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Please wait a moment before entering or exiting again.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, vehicleid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && GetVehicleModel(closestcar) == 519)
	{
	    if(VehicleStatus{closestcar} == 1) return SendClientMessage(playerid, COLOR_WHITE, "You're not allowed to enter this Shamal as it's been damaged!");
   		ShowActionBubble(playerid, "* %s enters the Shamal airplane as a passenger.", GetRPName(playerid));

     	SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
     	SetPlayerFacingAngle(playerid, 82.14);
        SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pWorld] = closestcar;
		SetPlayerVirtualWorld(playerid, closestcar);
		PlayerData[playerid][pInterior] = 1;
        SetPlayerInterior(playerid, 1);
		InsideShamal[playerid] = closestcar;
		SendClientMessage(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");

	}
    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
			ShowPlayerFooter(playerid, "~r~Locked");
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);

		    ShowActionBubble(playerid, "* %s has entered their house.", GetRPName(playerid));
		}
		else
		{
			ShowActionBubble(playerid, "* %s has entered the house.", GetRPName(playerid));
		}

        PlayerData[playerid][pLastEnter] = gettime();
        SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerPos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		if(HouseInfo[id][hLights] == 1)
        {
            TextDrawHideForPlayer(playerid, houseLights);
        }
        else
        {
            TextDrawShowForPlayer(playerid, houseLights);
		}
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
			ShowPlayerFooter(playerid, "~r~Locked");
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    ShowActionBubble(playerid, "* %s has entered their garage.", GetRPName(playerid));
		}
		else
		{
			ShowActionBubble(playerid, "* %s has entered the garage.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToCoords(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    PlayerData[playerid][pLastEnter] = gettime();
			SetPlayerPos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
			ShowPlayerFooter(playerid, "~r~Closed");
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);

		    ShowActionBubble(playerid, "* %s has entered their business.", GetRPName(playerid));
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0 && BusinessInfo[id][bType] == BUSINESS_GYM || BusinessInfo[id][bType] == BUSINESS_BARCLUB)
			{
				if(PlayerData[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay the entry fee. You may not enter.");
		        }

		        format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		        GameTextForPlayer(playerid, string, 5000, 1);

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			ShowActionBubble(playerid, "* %s has entered the business.", GetRPName(playerid));

			switch(BusinessInfo[id][bType])
			{
				case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB:
					SendClientMessageEx(playerid, COLOR_GREEN, "Welcome to %s's %s [%i products]. /buy to purchase from this business.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType], BusinessInfo[id][bProducts]);
				case BUSINESS_GYM:
				    SendClientMessageEx(playerid, COLOR_GREEN, "Welcome to %s's %s. /buy to purchase a fighting style.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType]);
				case BUSINESS_AGENCY:
				    SendClientMessageEx(playerid, COLOR_GREEN, "Welcome to %s's %s. /(ad)vertise to make an advertisement.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType]);
			}
		}

		PlayerData[playerid][pLastEnter] = gettime();
		SetPlayerPos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !PlayerData[playerid][pRepairTime])
	{
		for(new i = 0; i < sizeof(g_RepairShops); i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, g_RepairShops[i][0], g_RepairShops[i][1], g_RepairShops[i][2]))
			{
				if(IsRepairShopInUse(i))
				{
					return SendErrorMessage(playerid, "This Pay n' Spray is currently in use.");
				}
				if((!PlayerCanAfford(playerid, 500)) && (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC))
				{
					return SendErrorMessage(playerid, "You can't afford the entry cost.");
				}

				SetVehiclePos(GetPlayerVehicleID(playerid), g_RepairShops[i][3], g_RepairShops[i][4], g_RepairShops[i][5]);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), g_RepairShops[i][6]);

				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, COLOR_WHITE, "Garage: You will be moved out the garage in 8 seconds.");

				if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_MEDIC)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Your vehicle is fixed free of charge due to being in a government faction!");
				}
				else
				{
					GivePlayerCash(playerid, -500);
				}

				PlayerData[playerid][pRepairTime] = 8;
				PlayerData[playerid][pRepairShop] = i;
				return 1;
			}
		}
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
			ShowPlayerFooter(playerid, "~r~Locked");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This entrance has no interior and therefore cannot be entered.");
		    return 0;
		}
		if(EntranceInfo[id][eType] == 2)
		{
		    SendClientMessage(playerid, COLOR_GREY, "You cannot enter this type of entrance!");
		    return 0;
		}

		if(!PlayerData[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && PlayerData[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SendClientMessage(playerid, COLOR_GREY, "Your administrator level is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SendClientMessage(playerid, COLOR_GREY, "This entrance is only accesible to a specific faction type. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eGang] >= 0 && EntranceInfo[id][eGang] != PlayerData[playerid][pGang])
			{
		    	SendClientMessage(playerid, COLOR_GREY, "This entrance is only accesible to a specific gang. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && PlayerData[playerid][pDonator] < EntranceInfo[id][eVIP])
			{
		    	SendClientMessage(playerid, COLOR_GREY, "This entrance is restricted to donators.");
		    	return 0;
			}
		}

        PlayerData[playerid][pLastEnter] = gettime();
		ShowActionBubble(playerid, "* %s has entered the building.", GetRPName(playerid));

		if(EntranceInfo[id][eType] == 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "This entrance can be used for OOC duels. Use /offerduel to initiate one!");
		}
		else if(EntranceInfo[id][eType] == 2)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "This entrance can be used to repair vehicles, use /repaircar.");
		}

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    GameTextForPlayer(playerid, string, 5000, 1);
		}

		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]))
	        {
	            if(!strcmp(staticEntrances[i][eName], "Donator lounge") && PlayerData[playerid][pDonator] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "This lounge is only available for Donators.");
	                return 0;
	            }

	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);
				}
				else
				{
				    SetPlayerPos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);

   					format(string, sizeof(string), "~w~%s", staticEntrances[i][eName]);
	            	GameTextForPlayer(playerid, string, 5000, 1);
				}

                PlayerData[playerid][pLastEnter] = gettime();
	            ShowActionBubble(playerid, "* %s has entered the building.", GetRPName(playerid));
	            SetPlayerFacingAngle(playerid, staticEntrances[i][eIntA]);
	            SetPlayerInterior(playerid, staticEntrances[i][eInterior]);
				SetPlayerVirtualWorld(playerid, staticEntrances[i][eWorld]);
				SetCameraBehindPlayer(playerid);
	            return 1;
			}
		}
	}

	return 0;
}

ExitCheck(playerid)
{
	new id;

    if((gettime() - PlayerData[playerid][pLastEnter]) < 3 && PlayerData[playerid][pAdminDuty] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Please wait a moment before entering or exiting again.");
	}
    if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750))
	{
        ShowActionBubble(playerid, "* %s exits the Shamal airplane.", GetRPName(playerid));


        if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
            SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000);
        }
        else {
            new Float:X, Float:Y, Float:Z;
            GetVehiclePos(InsideShamal[playerid], X, Y, Z);
            SetPlayerPos(playerid, X-4, Y-2.3, Z);

        }

        PlayerData[playerid][pWorld] = 0;
        SetPlayerVirtualWorld(playerid, 0);
        PlayerData[playerid][pInterior] = 0;
        SetPlayerInterior(playerid, 0);
        InsideShamal[playerid] = INVALID_VEHICLE_ID;
    }
    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{

	    PlayerData[playerid][pLastEnter] = gettime();
		ShowActionBubble(playerid, "* %s has exited the house.", GetRPName(playerid));
		SetPlayerPos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetFreezePos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		TextDrawHideForPlayer(playerid, houseLights);
		return 1;

	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if((GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{

		    ShowActionBubble(playerid, "* %s has exited the garage.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        PlayerData[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    PlayerData[playerid][pLastEnter] = gettime();


		ShowActionBubble(playerid, "* %s has exited the business.", GetRPName(playerid));

		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    if(EntranceInfo[id][eType] == 1)
	    {
	        SetPlayerWeapons(playerid);
     	}

	    PlayerData[playerid][pLastEnter] = gettime();

	    ShowActionBubble(playerid, "* %s has exited the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && GetPlayerVirtualWorld(playerid) == staticEntrances[i][eWorld])
			{
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}
				else
				{
                    SetPlayerPos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}

                PlayerData[playerid][pLastEnter] = gettime();

			    ShowActionBubble(playerid, "* %s has exited the building.", GetRPName(playerid));

	            SetPlayerFacingAngle(playerid, staticEntrances[i][ePosA]);
	            SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
		}
	}

	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new x = 0; x < MAX_REPORTS; x ++)
	{
	    if(!ReportInfo[x][rExists])
	    {
	        strcpy(ReportInfo[x][rText], text, 128);

	        ReportInfo[x][rExists] = 1;
			ReportInfo[x][rAccepted] = 0;
			ReportInfo[x][rReporter] = playerid;
			ReportInfo[x][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[x][rTime] = 5;

	        PlayerData[playerid][pLastReport] = gettime();

	        foreach(new i : Player)
	        {
	            if(PlayerData[i][pAdmin] > 0 && !PlayerData[i][pToggleReports])
				{
	        		SendClientMessageEx(i, COLOR_YELLOW2, "Report from [%i]%s (RID: %i): %s", playerid, GetRPName(playerid), x, text);
				}
			}

	        return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	if(!isnull(username) && !isnull(ip))
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
		mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
	}
}

UpdateLandText(landid)
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_UPDATE_LANDLABELS, landid);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(IsPlayerConnected(playerid))
	{
		if(!strcmp(from, SERVER_ANTICHEAT))
		{
		    gAnticheatBans++;
	    	SaveServerInfo();
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", PlayerData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
		mysql_tquery(connectionID, queryBuffer);

		AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
		KickIP(GetPlayerIP(playerid));
	}
}

Rangeban(playerid, from[], reason[])
{
    if(IsPlayerConnected(playerid))
	{
		AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", PlayerData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
		mysql_tquery(connectionID, queryBuffer);

		KickIP(GetPlayerIP(playerid));
	}
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetPlayerHealthEx(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetPlayerArmourEx(playerid)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

// ---------------------------------------
// These functions are forwarded so they can be called by filterscripts using CallRemoteFunction.


//LS ELEVATOR
// Public:

forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);
//----------------------------------------
forward SetScriptPos(playerid, Float:x, Float:y, Float:z);
public SetScriptPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPos(playerid, x, y, z);
}
forward FinishServerShutdown();
public FinishServerShutdown()
{

	foreach(new i : Player) {
	    Kick(i);
	}

	SendRconCommand("exit");
	return 1;
}
forward SendMSG();
public SendMSG()
{
    new randMSG = random(sizeof(RandomMSG));
    SendClientMessageToAll(-1, RandomMSG[randMSG]);
}
forward SetScriptArmour(playerid, Float:amount);
public SetScriptArmour(playerid, Float:amount)
{
    PlayerData[playerid][pACTime] = gettime() + 5;
	PlayerData[playerid][pArmorTime] = gettime() + 5;
	PlayerData[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    PlayerData[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET skin = %i WHERE uid = %i", PlayerData[playerid][pSkin], PlayerData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward DestroyDamageTD(playerid);
public DestroyDamageTD(playerid)
{
	if(PlayerData[playerid][pDamageTimer] >= 0)
	{
	    TextDrawHideForPlayer(playerid, Damage[playerid]);
	    PlayerData[playerid][pDamageTimer] = -1;
	}
}

forward TurnOffFlash(playerid);
public TurnOffFlash(playerid)
{
	PlayerTextDrawHide(playerid, _vhudFlash[playerid]);
	return 1;
}

IsPlayerSpawned(playerid) return PlayerData[playerid][pLogged];
Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    return GetPlayerDistanceFromPoint(targetid, Pos[0], Pos[1], Pos[2]);
}
stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) {
    return floatsqroot(floatpower(x1 - x2, 2) + floatpower(y1 - y2, 2) + floatpower(z1 - z2, 2));
}

forward UnloadTruckJob(playerid);
public UnloadTruckJob(playerid)
{
	new JobID = PlayerTruckJob[playerid][pTDJobID];
	new Float:VehHealth; GetVehicleHealth(GetPlayerVehicleID(playerid), VehHealth);
	new Float:VehDamage = 1000.0 - VehHealth;
	VehDamage = (VehDamage/1000.0)*100.0;
	new string[128], str[5000], ExpGained;

	TogglePlayerControllable(playerid, 1);

	if(PlayerTruckJob[playerid][pTDLegal] == 1)
	{
	    // Work out Price for Job
		new OriginalPrice = LegalTruckJobInfo[JobID][pTJPrice];
		new Float:DamageFirst = ((OriginalPrice*VehDamage)/100);
		new Float:DamagePrice, NewPrice;
		if(PlayerTruckJob[playerid][pTDSpeeding] != 0)
		{
			DamagePrice = (DamageFirst * (PlayerTruckJob[playerid][pTDSpeeding]*2));
			NewPrice = floatround((OriginalPrice - DamagePrice),floatround_ceil);
		}
		else
		{
			NewPrice = floatround((OriginalPrice - DamageFirst),floatround_ceil);
		}

		// Calculate Experience Points Received
		ExpGained = floatround((NewPrice/10),floatround_floor);

		format(string, sizeof(string), "Goods Delivered: %s\n", LegalTruckJobInfo[JobID][pTJDesc]);
		strcat(str, string);
		format(string, sizeof(string), "Distance Travelled: %.2f Km\n", PlayerTruckJob[playerid][pTDDistance]);
		strcat(str, string);
		format(string, sizeof(string), "Damage Taken: %.2f Percent\n", VehDamage);
		strcat(str, string);
		format(string, sizeof(string), "Speeding Offenses: %d\n\n", PlayerTruckJob[playerid][pTDSpeeding]);
		strcat(str, string);

		format(string, sizeof(string), "Original Job Payment: $%d\n", OriginalPrice);
		strcat(str, string);
		if(PlayerTruckJob[playerid][pTDDistance] > 60.0)
		{
		    strcat(str, "Distance Bonus: $2000\n");
		    NewPrice += 2000;
		}
		if(PlayerTruckJob[playerid][pTDSpeeding] != 0)
		{
			format(string, sizeof(string), "Payments Lost: $%d\n", floatround(DamagePrice,floatround_ceil));
			strcat(str, string);
		}
		else
		{
		    format(string, sizeof(string), "Payments Lost: $%d\n", floatround(DamageFirst,floatround_ceil));
			strcat(str, string);
		}
		format(string, sizeof(string), "Payment Received: $%d\n\n", NewPrice);
		strcat(str, string);

		// Give Payment
		GivePlayerCash(playerid, NewPrice);

		// Clear Job Variables
		ClearTruckJob(playerid);
		new veh = GetPlayerVehicleID(playerid);
		DetachTrailerFromVehicle(veh);
	}
	else
	{
	    // Work out Price for Job
		new OriginalPrice = IllegalTruckJobInfo[JobID][pTJPrice];
		new Float:DamageFirst = ((OriginalPrice*VehDamage)/100);
		new Float:DamagePrice, NewPrice;
		if(PlayerTruckJob[playerid][pTDSpeeding] != 0)
		{
			DamagePrice = (DamageFirst * (PlayerTruckJob[playerid][pTDSpeeding]*2));
			NewPrice = floatround((OriginalPrice - DamagePrice),floatround_ceil);
		}
		else
		{
			NewPrice = floatround((OriginalPrice - DamageFirst),floatround_ceil);
		}

		// Calculate Experience Points Received
		ExpGained = floatround((NewPrice/10),floatround_floor);

	    format(string, sizeof(string), "Goods Delivered: %s\n", IllegalTruckJobInfo[JobID][pTJDesc]);
		strcat(str, string);
		format(string, sizeof(string), "Distance Travelled: %.2f Km\n", PlayerTruckJob[playerid][pTDDistance]);
		strcat(str, string);
		format(string, sizeof(string), "Damage Taken: %.2f Percent\n", VehDamage);
		strcat(str, string);
		format(string, sizeof(string), "Speeding Offenses: %d\n\n", PlayerTruckJob[playerid][pTDSpeeding]);
		strcat(str, string);

		format(string, sizeof(string), "Original Job Payment: $%d\n", OriginalPrice);
		strcat(str, string);
		if(PlayerTruckJob[playerid][pTDDistance] > 60.0)
		{
		    strcat(str, "Distance Bonus: $3000\n");
		    NewPrice += 3000;
		}
		if(PlayerTruckJob[playerid][pTDSpeeding] != 0)
		{
			format(string, sizeof(string), "Payments Lost: $%d\n", floatround(DamagePrice,floatround_ceil));
			strcat(str, string);
		}
		else
		{
		    format(string, sizeof(string), "Payments Lost: $%d\n", floatround(DamageFirst,floatround_ceil));
			strcat(str, string);
		}
		format(string, sizeof(string), "Payment Received: $%d\n\n", NewPrice);
		strcat(str, string);

		// Give Payment
		GivePlayerCash(playerid, NewPrice);

		// Clear Job Variables
		new veh = GetPlayerVehicleID(playerid);
		DetachTrailerFromVehicle(veh);
		ClearTruckJob(playerid);
	}
	format(string, sizeof(string), "Old Trucking Experience: %d XP\n", PlayerData[playerid][pTruckingXP]);
	strcat(str, string);
	format(string, sizeof(string), "XP Gained: %d XP\n", ExpGained);
	strcat(str, string);
	format(string, sizeof(string), "New Trucking Experience: %d XP\n\n", PlayerData[playerid][pTruckingXP]+ExpGained);
	strcat(str, string);

	new OldXP = PlayerData[playerid][pTruckingXP];
	PlayerData[playerid][pTruckingXP] += ExpGained;
	new NewXP = PlayerData[playerid][pTruckingXP];
	new TruckLevel = PlayerData[playerid][pTruckingLevel];

	if((TruckLevel == 1 && OldXP < 5000 && NewXP >= 5000) ||
	(TruckLevel == 2 && OldXP < 10000 && NewXP >= 10000) ||
	(TruckLevel == 3 && OldXP < 15000 && NewXP >= 15000) ||
	(TruckLevel == 4 && OldXP < 20000 && NewXP >= 20000) ||
	(TruckLevel == 5 && OldXP < 30000 && NewXP >= 30000) ||
	(TruckLevel == 6 && OldXP < 40000 && NewXP >= 40000) ||
	(TruckLevel == 7 && OldXP < 50000 && NewXP >= 50000) ||
	(TruckLevel == 8 && OldXP < 60000 && NewXP >= 60000) ||
	(TruckLevel == 9 && OldXP < 80000 && NewXP >= 80000) ||
	(TruckLevel == 10 && OldXP < 100000 && NewXP >= 100000) ||
	(TruckLevel == 11 && OldXP < 120000 && NewXP >= 120000) ||
	(TruckLevel == 12 && OldXP < 140000 && NewXP >= 140000) ||
	(TruckLevel == 13 && OldXP < 160000 && NewXP >= 160000) ||
	(TruckLevel == 14 && OldXP < 200000 && NewXP >= 200000))
	{
	    PlayerData[playerid][pTruckingLevel] ++;

	    strcat(str, "{00FF00}You have just advanced a Trucking Level!\n");
		format(string, sizeof(string), "Your new Trucking Level is %d!\n\n", PlayerData[playerid][pTruckingLevel]);
		strcat(str, string);
	}

	if(TruckLevel == 1) strcat(str, "{FFFFFF}Next Level At: 5000 XP");
	if(TruckLevel == 2) strcat(str, "{FFFFFF}Next Level At: 10000 XP");
	if(TruckLevel == 3) strcat(str, "{FFFFFF}Next Level At: 15000 XP");
	if(TruckLevel == 4) strcat(str, "{FFFFFF}Next Level At: 20000 XP");
	if(TruckLevel == 5) strcat(str, "{FFFFFF}Next Level At: 30000 XP");
	if(TruckLevel == 6) strcat(str, "{FFFFFF}Next Level At: 40000 XP");
	if(TruckLevel == 7) strcat(str, "{FFFFFF}Next Level At: 50000 XP");
	if(TruckLevel == 8) strcat(str, "{FFFFFF}Next Level At: 60000 XP");
	if(TruckLevel == 9) strcat(str, "{FFFFFF}Next Level At: 80000 XP");
	if(TruckLevel == 10) strcat(str, "{FFFFFF}Next Level At: 100000 XP");
	if(TruckLevel == 11) strcat(str, "{FFFFFF}Next Level At: 120000 XP");
	if(TruckLevel == 12) strcat(str, "{FFFFFF}Next Level At: 140000 XP");
	if(TruckLevel == 13) strcat(str, "{FFFFFF}Next Level At: 160000 XP");
	if(TruckLevel == 14) strcat(str, "{FFFFFF}Next Level At: 200000 XP");
	if(TruckLevel == 15) strcat(str, "{FFFFFF}Currently no more levels available.");
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `users` SET `truckingxp` = %i, `truckinglevel` = %i WHERE `uid` = %i", PlayerData[playerid][pTruckingXP], PlayerData[playerid][pTruckingLevel], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Delivery Complete", str, "Ok", "Cancel");
}

forward LoadTruckJob(playerid, legal);
public LoadTruckJob(playerid, legal)
{
	TogglePlayerControllable(playerid, 1);
	new string[128], str[3000];
	if(legal == 1)
	{
	    // Work out the Distance in KM Between Depot's
        new Float:PosX, Float:PosY, Float:PosZ;
        new Float:DPosX, Float:DPosY, Float:DPosZ;
        GetPlayerPos(playerid, PosX, PosY, PosZ);
		DPosX = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosX];
		DPosY = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosY];
		DPosZ = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosZ];
        format(string,sizeof(string),"Delivery Destination: %s\n", TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDName]);
        strcat(str, string);
        format(string,sizeof(string),"Delivery Goods: %s\n", LegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDesc]);
        strcat(str, string);
        strcat(str, "{FF0000}A marker has been set to the Delivery Location on your GPS.\n");
        strcat(str, "{FFFFFF}Deliver the goods with minimal damage and do not get caught speeding.\n\n");
        strcat(str, "Use /unloadtrailer to unload your goods when you have reached the destination.");
        Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Delivery Information", str, "Ok", "Cancel");
        SetPlayerCheckpoint(playerid, DPosX, DPosY, DPosZ, 5.0);
        PlayerData[playerid][pCP] = CHECKPOINT_TRUCKDELIVERY;
        PlayerTruckJob[playerid][pTDTrailer] = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	}
	else
	{
        new Float:PosX, Float:PosY, Float:PosZ;
        new Float:DPosX, Float:DPosY, Float:DPosZ;
        GetPlayerPos(playerid, PosX, PosY, PosZ);
		DPosX = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosX];
		DPosY = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosY];
		DPosZ = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosZ];
        format(string,sizeof(string),"Delivery Destination: %s\n", TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDName]);
        strcat(str, string);
        format(string,sizeof(string),"Delivery Goods: %s\n", IllegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDesc]);
        strcat(str, string);

        strcat(str, "{FF0000}A marker has been set to the Delivery Location on your GPS.\n");
        strcat(str, "{FFFFFF}Deliver the goods with minimal damage and do not get caught speeding.\n\n");
        strcat(str, "Use /unloadtrailer to unload your goods when you have reached the destination.");
        Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Delivery Information", str, "Ok", "Cancel");

        SetPlayerCheckpoint(playerid, DPosX, DPosY, DPosZ, 5.0);
        PlayerData[playerid][pCP] = CHECKPOINT_TRUCKDELIVERY;
        PlayerTruckJob[playerid][pTDTrailer] = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	}
}

forward ClearTruckJob(playerid);
public ClearTruckJob(playerid)
{
    PlayerTruckJob[playerid][pTDDestDepot] =0;
	PlayerTruckJob[playerid][pTDJobID] =0;
	PlayerTruckJob[playerid][pTDDamage] =0;
	PlayerTruckJob[playerid][pTDSpeeding] =0;
	PlayerTruckJob[playerid][pTDActive] =0;
	PlayerTruckJob[playerid][pTDLegal] =0;
	PlayerTruckJob[playerid][pTDDistance] =0.0;
	PlayerTruckJob[playerid][pTDTrailer] =0;

	DisablePlayerCheckpoint(playerid);
	PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
}


forward Impound_Load();
public Impound_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundID] = cache_get_field_content_int(i, "impoundID");
	    ImpoundData[i][impoundLot][0] = cache_get_field_content_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_content_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_content_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_content_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_content_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_content_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_content_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	    return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id(connectionID);
	Impound_Save(impoundid);

	return 1;
}
forward GiveWeaponToPlayer(playerid, weaponid, bool:temp);
public GiveWeaponToPlayer(playerid, weaponid, bool:temp)
{
	GivePlayerWeaponEx(playerid, weaponid, temp);
}
public OnPlayerStreamOut(playerid, forplayerid)
{

	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]))
	{
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 1);
	}
    return 1;
}
forward TakeOffMask(playerid);
public TakeOffMask(playerid)
{
	PlayerTextDrawHide(playerid, _Mask[playerid]);
	return 1;
}

forward OnDealershipCarAdded(id);
public OnDealershipCarAdded(id)
{
	DealershipCars[id][dcID] = cache_insert_id(connectionID);

	SaveDealershipCar(id);
}
forward OnLoadDealershipCars();
public OnLoadDealershipCars()
{
    new
	    rows = cache_get_row_count(connectionID);

	for (new i = 0; i < rows; i ++)
	{
	    DealershipCars[i][dcExists] = 1;
	    DealershipCars[i][dcID] = cache_get_field_content_int(i, "ID");
	    DealershipCars[i][dcCompany] = cache_get_field_content_int(i, "Company");
	    DealershipCars[i][dcModel] = cache_get_field_content_int(i, "Model");
	    DealershipCars[i][dcPrice] = cache_get_field_content_int(i, "Price");
	}
}
forward BeginWorkout(playerid, type);
public BeginWorkout(playerid, type)
{
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][60], "0");
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][62], "0");

	switch (type)
	{
		case WORKOUT_DUMBELLS:
		{
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][59], "Reps");
			ShowPlayerTextDraws(playerid, 58, 60);

			gWeights[playerid][0] = SetAttachedObject(playerid, 3072, 5, 0.0, 0.0, 0.0);
			gWeights[playerid][1] = SetAttachedObject(playerid, 3071, 6, 0.0, 0.0, 0.0);

			ShowPlayerProgressBar(playerid, PlayerData[playerid][pBars][0]);
			SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], 0.0);
		}
		case WORKOUT_TREADMILL:
		{
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][59], "Level");
			PlayerTextDrawFormatString(playerid, PlayerData[playerid][pText][60], "%i", PlayerData[playerid][pSpeedLevel]);

			ShowPlayerProgressBar(playerid, PlayerData[playerid][pBars][0]);
			SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], 50.0);

			PlayerPlaySound(playerid, 17801, 0.0, 0.0, 0.0);
			ShowPlayerTextDraws(playerid, 58, 62);
		}
	}
	PlayerData[playerid][pWorkout] = type;
	PlayerData[playerid][pDistanceRan] = 0;
	PlayerData[playerid][pReps] = 0;

	return TogglePlayerControllable(playerid, 0);
}

forward DecreasePower(playerid);
public DecreasePower(playerid)
{
	new
		Float:value = GetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0]);

	switch (PlayerData[playerid][pWorkout])
	{
		case WORKOUT_DUMBELLS:
		{
			if (value > 0.0)
			{
				SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value - 3.0);
			}
		}
		case WORKOUT_TREADMILL:
		{
			if (value > 0.0)
			{
				SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value - (PlayerData[playerid][pSpeedLevel] + 8));
			}
			else
			{
				StopWorkout(playerid);
				ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_falloff", 4.1, 0, 0, 0, 0, 0, 1);
			}
		}
	}
}

forward ReturnChatAnimation(playerid, text[]);
public ReturnChatAnimation(playerid, text[])
{
    if(!PlayerUseAnims(playerid) || PlayerData[playerid][pLoopAnim] != 0)
	{
	    return 1;
	}
	switch(PlayerData[playerid][pChatstyle])
	{
		case 0: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,1,0,1,1,1);
		case 1: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKA",4.0,1,0,0,1,1,1);
		case 2: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKB", 4.0,1,0,0,1,1,1);
		case 3: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKD", 4.0,1,0,0,1,1,1);
		case 4: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKE", 4.0,1,0,0,1,1,1);
		case 5: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKF", 4.0,1,0,0,1,1,1);
		case 6: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKG", 4.0,1,0,0,1,1,1);
		case 7: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKH", 4.0,1,0,0,1,1,1);
	}
	if(strlen(text) <= 16) SetTimerEx("TIMER_EndChatAnim",2000, 0, "i", playerid);
	else if(strlen(text) <= 32 && strlen(text) > 16) SetTimerEx("TIMER_EndChatAnim",3500, 0, "i", playerid);
	else if(strlen(text) <= 64 && strlen(text) > 32) SetTimerEx("TIMER_EndChatAnim",4000, 0, "i", playerid);
	else if(strlen(text) <= 96 && strlen(text) > 64) SetTimerEx("TIMER_EndChatAnim",4500, 0, "i", playerid);
	else if(strlen(text) <= 128 && strlen(text) > 96) SetTimerEx("TIMER_EndChatAnim",5000, 0, "i", playerid);
	else if(strlen(text) > 128) SetTimerEx("TIMER_EndChatAnim",5500, 0, "i", playerid);
	return 1;
}

forward TIMER_EndChatAnim(playerid);
public TIMER_EndChatAnim(playerid)
{
	if(PlayerData[playerid][pInjured] != 1)
		return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 1);
	return 1;
}
forward AnimationCameraView(playerid, viewid, bool:play);
public AnimationCameraView(playerid, viewid,bool:play) {
	if(play) {
	    TogglePlayerSpectating(playerid, true);
		switch(viewid) {
		    case 1: {
		        InterpolateCameraPos(playerid, 2001.022338, -1680.001831, 111.524520, 1847.486328, -1588.119262, 45.335948, 10000);
				InterpolateCameraLookAt(playerid, 1996.748535, -1677.679321, 110.366386, 1842.846801, -1588.866577, 43.628067, 6000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,2,true);
				return 1;
		    }
		    case 2: {
		        InterpolateCameraPos(playerid, 1350.769897, -1161.625610, 63.912643, 1345.028564, -1381.431640, 37.928005, 10000);
				InterpolateCameraLookAt(playerid, 1350.744140, -1165.983520, 61.461566, 1349.314086, -1383.640136, 36.602577, 6000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,3,true);
				return 1;
		    }
		    case 3: {
				InterpolateCameraPos(playerid, 1715.645019, -1938.294555, 14.028053, 1714.797729, -1859.568725, 16.619020, 10000);
				InterpolateCameraLookAt(playerid, 1715.549194, -1933.334594, 14.652102, 1719.508422, -1858.186523, 15.670925, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,4,true);
				return 1;
		    }
		    case 4: {
		        InterpolateCameraPos(playerid, 2527.106445, -1651.230468, 59.606048, 2258.847900, -1651.125366, 33.323886, 10000);
				InterpolateCameraLookAt(playerid, 2523.139892, -1653.018554, 57.142471, 2254.557861, -1652.318969, 31.049913, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,5,true);
				return 1;
		    }
		    case 5: {
		        InterpolateCameraPos(playerid, 2209.850585, -1115.027709, 37.585510, 2019.370605, -1123.279907, 45.939300, 10000);
				InterpolateCameraLookAt(playerid, 2205.017089, -1116.304321, 37.493427, 2017.365600, -1127.638549, 44.531455, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,6,true);
				return 1;
		    }
		    case 6: {
		        InterpolateCameraPos(playerid, 1828.507446, -1052.825073, 30.756277, 1583.096679, -1035.206054, 32.867546, 10000);
				InterpolateCameraLookAt(playerid, 1823.512207, -1053.039550, 30.793386, 1584.801879, -1039.839111, 32.075389, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,7,true);
				return 1;
			}
			case 7: {
			    InterpolateCameraPos(playerid, 1531.205566, -978.054687, 60.876388, 1461.443481, -810.305114, 77.579307, 10000);
				InterpolateCameraLookAt(playerid, 1526.846191, -975.952758, 59.620300, 1456.799926, -812.138061, 77.300292, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,8,true);
				return 1;
			}
			case 8: {
			    InterpolateCameraPos(playerid, 635.315673, -1780.251342, 21.155647, 417.544250, -1759.125366, 26.359794, 15000);
				InterpolateCameraLookAt(playerid, 630.351623, -1779.681518, 20.973197, 415.232757, -1763.481567, 25.535095, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,9,true);
				return 1;
			}
			case 9: {
			    InterpolateCameraPos(playerid, 836.923767, -1779.394165, 18.188320, 970.047790, -1792.450439, 21.380487, 15000);
				InterpolateCameraLookAt(playerid, 840.450439, -1775.850219, 18.139299, 966.497192, -1789.023559, 20.574161, 10000);
				ViewCam[playerid] = SetTimerEx("AnimationCameraView", 7000, false, "iib", playerid,1,true);
				return 1;
			}

		}
	}
	else {
		KillTimer(ViewCam[playerid]);
		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}
forward AntiNameTag();
public AntiNameTag()
{
	if(antiNT)
	{
    	foreach(new playerid : Player)
    	{
        	foreach(new i : Player)
        	{
            	if(i == playerid)
					continue;
				if(PlayerData[i][pAdminDuty])
			    	continue;

				if(GetPlayerDistanceFromPlayer(playerid, i) <= 30.0) {
                	ShowPlayerNameTagForPlayer(playerid, i, true);
   				} else {
                	ShowPlayerNameTagForPlayer(playerid, i, false);
            	}
        	}
    	}
	}
}
forward AddToPaycheck(playerid, amount);
public AddToPaycheck(playerid, amount)
{
	if(PlayerData[playerid][pLogged])
	{
		PlayerData[playerid][pPaycheck] = PlayerData[playerid][pPaycheck] + amount;

		if(PlayerData[playerid][pPaycheck] >= 20000)
		{
		    AwardAchievement(playerid, "Working class");
		}

		if(!PlayerData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET paycheck = paycheck + %i WHERE uid = %i", amount, PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			AddToTaxVault(-amount);
		}
	}
}
IsPhoneBusy(number)
{
	new targetid = GetPhonePlayerID(number);

	return (targetid != INVALID_PLAYER_ID && PlayerData[targetid][pCalling] > 0);
}

GetPhonePayphoneID(number)
{
	for (new i = 0; i < MAX_PAYPHONES; i ++)
	{
		if (IsValidPayphoneID(i) && Payphones[i][phNumber] == number)
		{
			return i;
		}
	}

	return -1;
}

GetPhonePlayerID(number)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pPhone] == number)
		{
			return i;
		}
	}

	return INVALID_PLAYER_ID;
}
IsCallIncoming(playerid)
{
	return (PlayerData[playerid][pCalling] == 1 && PlayerData[playerid][pCaller] != INVALID_PLAYER_ID);
}

IsPlayerNearRingingPayphone(playerid)
{
	new payphone = GetClosestPayphone(playerid);

	return (IsValidPayphoneID(payphone) && Payphones[payphone][phCaller] != INVALID_PLAYER_ID);
}
IsPlayerNearPoint(playerid, Float:range, Float:x, Float:y, Float:z, interior = -1, world = -1)
{
	if (interior == -1)
		interior = GetPlayerInterior(playerid);

	if (world == -1)
		world = GetPlayerVirtualWorld(playerid);

	return (IsPlayerInRangeOfPoint(playerid, range, x, y, z)) && (GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world);
}
GetClosestPayphone(playerid)
{
	for (new i = 0; i < MAX_PAYPHONES; i ++)
	{
		if (Payphones[i][phExists] && IsPlayerNearPoint(playerid, 2.0, Payphones[i][phX], Payphones[i][phY], Payphones[i][phZ], Payphones[i][phInterior], Payphones[i][phWorld]))
		{
			return i;
		}
	}
	return -1;
}

AddPayphone(Float:x, Float:y, Float:z, Float:angle, interior, world)
{
	new
		id = GetNextPayphoneID();

	if (id != -1)
	{
		Payphones[id][phExists] = 1;
		Payphones[id][phNumber] = Random(1000000, 9999999);
		Payphones[id][phOccupied] = 0;
		Payphones[id][phCaller] = INVALID_PLAYER_ID;
		Payphones[id][phX] = x;
		Payphones[id][phY] = y;
		Payphones[id][phZ] = z;
		Payphones[id][phA] = angle;
		Payphones[id][phInterior] = interior;
		Payphones[id][phWorld] = world;
		Payphones[id][phObject] = INVALID_OBJECT_ID;
		Payphones[id][phText] = INVALID_3DTEXT_ID;

		UpdatePayphone(id);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO rp_payphones (phInterior) VALUES(%i)", interior);
		mysql_tquery(connectionID, queryBuffer, "OnPayphoneAdded", "i", id);
	}
	return id;
}
forward OnATMAdded(id);
public OnATMAdded(id)
{
	ATM[id][atmID] = cache_insert_id(connectionID);

	SaveATM(id);
}
forward OnPayphoneAdded(id);
public OnPayphoneAdded(id)
{
	Payphones[id][phID] = cache_insert_id(connectionID);

	SavePayphone(id);
}

SavePayphone(id)
{
	static
	    queryString[512];

	if (!Payphones[id][phExists]) return 0;

	format(queryString, sizeof(queryString), "UPDATE rp_payphones SET phNumber = %i, phX = %.4f, phY = %.4f, phZ = %.4f, phA = %.4f, phInterior = %i, phWorld = %i WHERE phID = %i",
	    Payphones[id][phNumber],
	    Payphones[id][phX],
	    Payphones[id][phY],
	    Payphones[id][phZ],
	    Payphones[id][phA],
	    Payphones[id][phInterior],
	    Payphones[id][phWorld],
	    Payphones[id][phID]
	);

	return mysql_tquery(connectionID, queryString);
}
stock GetPlayerSQLId(playerid)
{
	return PlayerData[playerid][pID];
}
forward GetPlayerCash(playerid);
public GetPlayerCash(playerid)
{
	return PlayerData[playerid][pCash];
}
IsValidPayphoneID(id)
{
	return (id >= 0 && id < MAX_PAYPHONES) && Payphones[id][phExists];
}
GetNextPayphoneID()
{
	for (new i = 0; i < MAX_PAYPHONES; i ++)
	{
		if (!Payphones[i][phExists])
		{
			return i;
		}
	}
	return -1;
}


stock CheckServerAd(szInput[]) {

	new
		iCount,
		iPeriod,
		iDash,
		iPos,
		iChar,
		iColon;

	while((iChar = szInput[iPos++])) {
		if('0' <= iChar <= '9') iCount++;
		else if(iChar == '.') iPeriod++;
		else if(iChar == '-') iDash++;
		else if(iChar == ':') iColon++;
	}
	if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, ":7777") > -1) {
		return 1;
	}

	return 0;
}

//==============================================================================
stock IsARestricted(modelid) {
	switch(modelid)
	{
		case 460,476,511,512,513,520,519,553,577,592,593,548,425,417,488,497,563,447,416,433,523,427,490,528,407,544,596,598,597,599,432,601,472,473
		,493,595,484,430,453,452,446,454,441,464,465,501,522,564,594,538,532,486,406,537,571,449,539,435,450,569,570,584,590,591,606,607,608,610,611,568
		,444,556,557,470,495,415,494,502,503,504,524:
		return 1;
	}
	return 0;
}
#define PROPERTY_OFFSET(%0) \
        ((((%0) * ((%0) << 1)) << 2) + 65536)
stock GetVehicleColor(vehicleID, &color1, &color2)
{
	vehicleID = PROPERTY_OFFSET(vehicleID);
	if(existproperty(_, "", vehicleID))
	{
        new
            colorStr[24],
            strPos;
        getproperty(_, "", vehicleID, colorStr);
        strunpack(colorStr, colorStr);
        if((strPos = strfind(colorStr, "-")) != -1)
        {
            color1 = strval(colorStr);
            color2 = strval(colorStr[strPos + 1]);
            return 1;
        }
	}
	return 0;
}

func CreateLSPDMap()
{
	gPDDoors[0] = CreateDynamicObject(1567, 1586.21436, -1654.44727, 2109.51294,   0.00000, 0.00000, 360.11990);
	gPDDoors[1] = CreateDynamicObject(1567, 1578.64783, -1657.78467, 2109.51294,   0.00000, 0.00000, 183.42041);
	gPDDoors[2] = CreateDynamicObject(1567, 1554.74219, -1656.79309, 2109.51294,   0.00000, 0.00000, 180.56023);

	gPDDoors[3] = CreateDynamicObject(1567, 1583.28503, -1675.50513, 2109.51294,   0.00000, 0.00000, 179.64014);
	gPDDoors[4] = CreateDynamicObject(1567, 1580.09802, -1675.50806, 2109.51294,   0.00000, 0.00000, 179.88002);
	gPDDoors[5] = CreateDynamicObject(1567, 1568.14197, -1673.16602, 2109.51294,   0.00000, 0.00000, 450.79984);
	gPDDoors[6] = CreateDynamicObject(1567, 1555.60840, -1670.54663, 2109.53345,   0.00000, 0.00000, -0.72000);
    new lspdenterijer;
			//---------------------[LSPD]----------------------------//
// lspd interior
	lspdenterijer = CreateDynamicObjectEx(1721,1560.026,-1665.081,2109.537,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(3077,1587.324,-1670.981,2109.539,0.000,0.000,303.739,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	SetDynamicObjectMaterial(lspdenterijer, 1, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19430,1568.770,-1669.211,2111.657,90.000,179.994,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(14566,1568.745,-1669.603,2111.555,0.000,0.000,44.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 1, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 2, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 4, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 5, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 6, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 7, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 8, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	lspdenterijer = CreateDynamicObjectEx(19327,1583.751,-1657.967,2111.874,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterialText(lspdenterijer, 0, "?????????", 120, "Ariel", 40, 1, -1, 0, 1);
	lspdenterijer = CreateDynamicObjectEx(19455,1552.662,-1675.364,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1567.988,-1674.938,2108.537,0.000,179.994,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14623, "mafcasmain", "ab_tileStar2", 0);
	lspdenterijer = CreateDynamicObjectEx(19364,1550.984,-1670.629,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.038,-1670.342,2108.915,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1567.987,-1674.938,2113.990,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 4604, "buildblk555", "gm_labuld5_b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.010,-1671.152,2109.667,90.000,187.668,352.309,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.035,-1671.151,2112.886,90.000,168.458,11.530,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.032,-1664.016,2108.915,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.077,-1680.299,2108.915,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1564.697,-1670.573,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1557.401,-1679.881,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.035,-1656.879,2109.667,90.000,179.994,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.056,-1656.930,2112.886,90.000,179.994,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1547.034,-1657.753,2108.915,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1553.162,-1679.567,2112.037,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1561.909,-1679.570,2112.037,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18980,1562.021,-1679.480,2112.741,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19414,1562.349,-1673.988,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.370,-1679.673,2112.064,90.000,191.310,348.667,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19438,1555.324,-1679.900,2110.710,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1557.507,-1679.535,2112.037,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19438,1559.680,-1679.904,2110.730,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1552.884,-1670.593,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1553.890,-1670.594,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1555.525,-1670.563,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1557.250,-1670.582,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1558.885,-1670.576,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1559.776,-1670.582,2108.915,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1562.366,-1680.336,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19367,1562.348,-1670.776,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19364,1548.441,-1670.525,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1548.536,-1670.578,2109.667,90.000,180.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1550.215,-1670.584,2112.887,90.000,180.005,269.989,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19364,1550.579,-1670.478,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19364,1549.897,-1670.364,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1564.229,-1670.590,2112.887,90.000,180.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1564.229,-1670.590,2109.668,90.000,179.994,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18980,1562.021,-1679.480,2109.818,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1549.650,-1660.198,2109.535,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1552.874,-1660.119,2109.535,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1550.912,-1667.625,2109.535,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1553.711,-1667.579,2109.535,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.380,-1669.078,2108.915,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1548.847,-1664.514,2109.535,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.374,-1666.628,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.382,-1665.074,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.371,-1663.427,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.359,-1661.801,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1562.377,-1659.199,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.348,-1666.112,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.343,-1668.405,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.392,-1668.397,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.410,-1666.114,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.410,-1666.114,2112.924,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.333,-1666.116,2112.924,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.392,-1668.468,2112.926,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.343,-1668.468,2112.926,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.355,-1662.331,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.374,-1660.254,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.399,-1660.255,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.380,-1662.333,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.374,-1660.255,2112.918,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.374,-1660.254,2112.918,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.423,-1660.250,2112.918,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.380,-1662.333,2112.930,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.354,-1662.329,2112.930,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1562.376,-1664.685,2112.922,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2165,1556.219,-1659.926,2109.535,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19367,1562.451,-1657.477,2111.287,0.000,0.000,358.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19786,1550.248,-1647.593,2111.793,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	SetDynamicObjectMaterial(lspdenterijer, 1, 14803, "bdupsnew", "Bdup2_poster", 0);
	lspdenterijer = CreateDynamicObjectEx(19392,1553.989,-1656.801,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1547.495,-1657.146,2110.767,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1549.806,-1657.112,2109.864,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1551.954,-1657.128,2110.666,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1558.016,-1657.083,2112.659,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1560.254,-1656.987,2110.666,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2395,1548.306,-1657.430,2110.146,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1549.812,-1657.120,2112.733,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2395,1557.004,-1657.222,2110.116,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1556.026,-1656.859,2110.666,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1547.072,-1651.896,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1560.696,-1652.801,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1551.819,-1647.608,2111.287,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	lspdenterijer = CreateDynamicObjectEx(2206,1551.334,-1649.838,2109.535,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1586.926,-1647.672,2126.622,0.000,90.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14803, "bdupsnew", "Bdup2_carpet", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1556.387,-1648.072,2110.666,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1560.104,-1648.073,2110.666,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1558.290,-1648.112,2109.918,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1558.271,-1648.286,2112.729,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19364,1562.192,-1657.563,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2533,1547.666,-1669.887,2109.534,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 7650, "vgnusedcar", "lightyellow2_32", 0);
	lspdenterijer = CreateDynamicObjectEx(2689,1547.629,-1655.771,2110.743,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 11631, "mp_ranchcut", "CJ_PAINTING20", 0);
	lspdenterijer = CreateDynamicObjectEx(2689,1547.932,-1658.239,2110.747,0.000,0.000,95.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 11631, "mp_ranchcut", "CJ_PAINTING20", 0);
	lspdenterijer = CreateDynamicObjectEx(1721,1560.063,-1659.625,2109.537,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1721,1552.061,-1660.149,2109.537,0.000,0.000,190.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1721,1548.885,-1660.131,2109.537,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1558.057,-1656.936,2109.864,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14391, "dr_gsmix", "white_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19392,1553.986,-1656.775,2111.270,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0);
	lspdenterijer = CreateDynamicObjectEx(2635,1551.858,-1655.784,2109.940,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 1, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1567.223,-1669.244,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1567.195,-1659.030,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19392,1577.897,-1657.857,2111.287,0.000,0.000,91.983,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1576.181,-1654.192,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1580.646,-1651.671,2111.287,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2395,1582.230,-1657.723,2112.729,0.000,90.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1585.385,-1653.134,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19379,1554.696,-1663.838,2113.038,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1557.586,-1659.406,2113.430,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1552.614,-1659.413,2113.406,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1549.803,-1661.388,2113.381,0.000,90.000,269.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1549.796,-1665.847,2113.355,0.000,90.000,269.999,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1551.776,-1668.438,2113.331,0.000,90.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1556.765,-1668.436,2113.305,0.000,90.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1559.598,-1666.435,2113.281,0.000,90.000,269.999,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1559.590,-1661.582,2113.281,0.000,90.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1552.443,-1664.185,2113.381,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1556.723,-1664.174,2113.406,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19392,1582.890,-1669.204,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19431,1580.671,-1670.089,2111.288,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1576.076,-1670.833,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19392,1587.010,-1654.407,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1585.988,-1650.556,2111.287,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1588.949,-1659.078,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1585.989,-1650.582,2107.801,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1593.397,-1654.389,2111.287,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1593.722,-1654.357,2107.793,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1595.267,-1650.522,2111.287,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1595.265,-1650.546,2107.794,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1614.553,-1676.049,2105.082,0.000,179.994,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 14623, "mafcasmain", "ab_tileStar2", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1598.416,-1652.807,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1619.415,-1672.958,2109.798,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 4604, "buildblk555", "gm_labuld5_b", 0);
	lspdenterijer = CreateDynamicObjectEx(19071,1609.834,-1677.592,2114.016,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1604.815,-1650.479,2107.794,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1598.412,-1659.155,2107.831,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1607.685,-1659.090,2107.831,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1603.038,-1663.717,2107.831,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1607.729,-1649.536,2107.831,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.260,-1659.086,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.253,-1668.975,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.263,-1664.792,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.270,-1666.673,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.264,-1663.107,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2920,1576.277,-1661.375,2108.915,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.311,-1665.833,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.291,-1661.998,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.291,-1660.306,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1571.484,-1658.985,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.240,-1660.307,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.218,-1662.022,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.218,-1662.022,2112.922,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.225,-1660.046,2112.922,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.295,-1660.265,2112.922,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.300,-1661.948,2112.922,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.250,-1665.884,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.229,-1667.859,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.279,-1667.859,2109.606,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.277,-1667.859,2112.925,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.286,-1665.560,2112.927,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.235,-1665.562,2112.927,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.223,-1667.741,2112.927,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19834,1576.261,-1663.840,2112.927,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1603.422,-1661.993,2107.831,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1567.135,-1658.845,2109.864,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1564.454,-1658.913,2111.736,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1574.337,-1658.922,2111.736,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1571.939,-1658.817,2109.855,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1571.891,-1658.869,2112.610,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1567.135,-1658.845,2112.603,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1569.450,-1659.127,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 15040, "cuntcuts", "csnewspaper02", 0);
	lspdenterijer = CreateDynamicObjectEx(2180,1566.922,-1666.449,2109.533,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2180,1571.979,-1666.447,2109.533,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2180,1571.281,-1663.418,2109.533,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2180,1568.130,-1663.463,2109.533,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19327,1568.741,-1669.022,2111.542,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterialText(lspdenterijer, 0, "LSPD", 120, "Ariel", 100, 1, -1, 0, 1);
	lspdenterijer = CreateDynamicObjectEx(19455,1576.504,-1669.227,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1589.255,-1669.156,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1588.931,-1666.734,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(14566,1589.246,-1662.947,2111.610,0.000,0.000,314.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 1, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 2, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 4, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 5, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 6, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 7, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	SetDynamicObjectMaterial(lspdenterijer, 8, 17547, "eastbeach4a_lae2", "bluestucco1", 0);
	lspdenterijer = CreateDynamicObjectEx(19327,1588.725,-1663.594,2111.472,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterialText(lspdenterijer, 0, "LSPD", 120, "Ariel", 100, 1, -1, 0, 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1567.172,-1670.777,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1567.255,-1677.828,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19450,1569.376,-1657.631,2112.059,0.000,90.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1588.890,-1676.344,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19388,1568.137,-1672.420,2111.288,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1568.151,-1678.810,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1572.899,-1675.462,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19388,1579.317,-1675.515,2111.288,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1576.749,-1680.350,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1579.707,-1684.890,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1580.842,-1680.334,2111.287,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19388,1582.493,-1675.520,2111.288,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1588.895,-1675.500,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19455,1585.626,-1681.197,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19379,1582.482,-1663.336,2113.038,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1585.270,-1667.725,2113.406,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1580.671,-1667.720,2113.381,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1577.682,-1665.735,2113.381,0.000,90.000,269.999,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1577.707,-1661.008,2113.355,0.000,90.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1580.151,-1659.012,2113.331,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1584.706,-1659.016,2113.305,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1587.241,-1665.729,2113.381,0.000,90.000,269.999,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1587.238,-1660.962,2113.355,0.000,90.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1579.843,-1663.505,2113.306,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(18762,1584.695,-1663.519,2113.306,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	lspdenterijer = CreateDynamicObjectEx(2193,1582.772,-1663.178,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 5, 8396, "sphinx01", "luxorceiling02_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2193,1583.781,-1665.071,2109.538,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 5, 8396, "sphinx01", "luxorceiling02_128", 0);
	lspdenterijer = CreateDynamicObjectEx(2173,1587.162,-1678.882,2109.539,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1516,1574.761,-1668.375,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1516,1563.737,-1668.380,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1516,1561.538,-1671.217,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(14867,1575.028,-1670.647,2111.042,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19175,1588.770,-1678.234,2111.266,0.000,0.000,270.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 12855, "cunte_cop", "sw_PD", 0);
	lspdenterijer = CreateDynamicObjectEx(2533,1573.404,-1674.864,2109.538,0.000,0.000,179.994,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 3, 7650, "vgnusedcar", "lightyellow2_32", 0);
	lspdenterijer = CreateDynamicObjectEx(19370,1583.803,-1657.840,2111.287,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(2267,1583.702,-1657.977,2111.858,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 10765, "airportgnd_sfse", "white", 0);
	SetDynamicObjectMaterial(lspdenterijer, 1, 3899, "hospital2", "black", 0);
	lspdenterijer = CreateDynamicObjectEx(2206,1562.897,-1674.849,2109.537,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(14867,1567.734,-1677.318,2111.018,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(19396,1600.056,-1657.250,2107.831,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(19396,1606.181,-1657.225,2107.831,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 6095, "shops01_law", "GB_chatwall03b", 0);
	lspdenterijer = CreateDynamicObjectEx(1516,1571.840,-1674.901,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	lspdenterijer = CreateDynamicObjectEx(1516,1588.120,-1674.782,2109.538,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(lspdenterijer, 0, 8419, "vgsbldng1", "buildng01wind_128", 0);
	//
	lspdenterijer = CreateDynamicObjectEx(4150,1528.753,-1661.587,2109.287,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3975,1575.126,-1675.717,2109.912,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4186,1476.274,-1693.862,2116.288,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3985,1476.339,-1632.209,2108.790,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(712,1509.213,-1669.937,2119.231,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(713,1495.269,-1708.321,2109.510,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4163,1465.973,-1731.567,2109.288,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3997,1479.354,-1801.538,2109.357,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3980,1481.189,-1785.068,2119.242,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4002,1479.868,-1790.398,2152.548,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3994,1476.129,-1593.217,2109.154,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(620,1479.291,-1666.177,2109.488,356.857,0.000,3.136,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(647,1499.362,-1620.162,2112.333,356.852,0.000,359.544,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(647,1476.537,-1665.248,2112.094,356.852,0.000,357.264,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(647,1483.505,-1665.441,2112.094,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4016,1493.720,-1547.182,2114.406,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4144,1438.679,-1518.470,2109.134,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4008,1405.166,-1544.529,2116.760,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4206,1476.442,-1640.168,2110.530,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1226,1519.305,-1690.311,2113.031,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1229,1519.919,-1673.648,2110.762,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1226,1518.668,-1663.246,2113.131,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(700,1494.209,-1694.439,2110.458,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(646,1545.717,-1679.745,2110.814,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(646,1545.174,-1669.722,2110.824,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14532,1559.542,-1670.130,2110.519,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(16779,1583.820,-1680.460,2113.308,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1571.203,-1664.909,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2206,1560.099,-1660.420,2109.535,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14414,1591.156,-1652.326,2106.294,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(11713,1605.168,-1650.566,2107.543,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1550.413,-1647.991,2109.535,0.000,0.000,359.997,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3978,1391.996,-1654.935,2107.464,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4005,1414.503,-1681.482,2122.129,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4197,1392.087,-1655.128,2107.462,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4006,1406.946,-1620.322,2128.797,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4146,1367.592,-1583.277,2109.164,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4113,1382.926,-1572.090,2143.689,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4107,1361.333,-1801.521,2109.294,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1267,1416.740,-1723.454,2125.438,0.000,0.000,234.992,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(4113,1341.493,-1647.510,2135.439,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1569,1552.761,-1675.531,2109.537,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1569,1552.775,-1672.550,2109.537,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1547.025,-1667.344,2111.600,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1547.034,-1660.785,2111.600,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(11711,1552.772,-1674.032,2112.385,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1552.262,-1670.579,2111.600,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1559.265,-1670.579,2111.600,90.000,180.000,269.999,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(16779,1567.226,-1662.753,2113.218,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2201,1549.929,-1667.470,2110.321,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2202,1550.956,-1669.808,2109.535,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2186,1561.604,-1670.008,2109.535,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2225,1548.489,-1662.473,2109.534,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2816,1548.902,-1663.348,2110.332,0.000,0.000,178.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19787,1561.666,-1665.777,2112.271,9.997,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1897,1561.769,-1665.720,2113.248,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1555.000,-1678.416,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1556.000,-1678.416,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1557.000,-1678.413,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1558.000,-1678.416,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1559.000,-1678.415,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1560.000,-1678.413,2110.162,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1562.367,-1667.014,2111.600,90.000,179.994,359.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(16779,1570.612,-1665.858,2113.217,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1562.374,-1661.360,2111.600,90.000,180.005,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(16779,1554.787,-1652.722,2113.305,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19787,1561.669,-1668.174,2112.271,9.997,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1897,1561.743,-1668.197,2113.248,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19787,1561.840,-1662.619,2112.271,9.997,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19787,1562.140,-1660.076,2112.271,9.997,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1897,1561.927,-1662.729,2113.173,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1897,1562.212,-1660.066,2113.372,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2206,1559.970,-1665.812,2109.535,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2190,1560.461,-1666.467,2110.472,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2190,1560.517,-1661.197,2110.472,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1558.317,-1666.725,2110.162,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1558.568,-1661.350,2110.162,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1553.015,-1666.130,2110.162,0.000,0.000,89.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1550.286,-1666.187,2110.162,0.000,0.000,89.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1550.230,-1663.885,2110.162,0.000,0.000,359.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1550.318,-1661.637,2110.162,0.000,0.000,269.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1553.557,-1661.496,2110.162,0.000,0.000,269.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1811,1556.836,-1661.305,2110.162,0.000,0.000,269.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(16779,1558.564,-1675.033,2113.348,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1559.696,-1648.542,2111.599,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1599,1558.182,-1648.284,2111.219,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1599,1558.703,-1648.354,2111.718,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1600,1557.452,-1648.239,2110.681,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19808,1559.848,-1660.989,2110.489,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19808,1559.708,-1666.321,2110.489,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2204,1560.602,-1653.582,2109.535,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2568,1560.071,-1649.573,2109.535,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2608,1561.025,-1670.290,2111.847,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14633,1585.290,-1685.902,2111.016,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(11245,1547.760,-1647.113,2111.389,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2597,1547.644,-1658.274,2110.386,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2597,1547.604,-1656.028,2110.386,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2689,1547.647,-1658.484,2110.769,0.000,0.000,330.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2608,1550.065,-1670.140,2111.847,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1666,1552.521,-1667.561,2110.479,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1839,1560.076,-1661.952,2110.472,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1971,1553.483,-1647.694,2112.170,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2101,1559.865,-1667.369,2110.472,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1971,1552.734,-1677.235,2112.089,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2827,1550.796,-1660.183,2110.331,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2828,1550.844,-1649.974,2110.472,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1550.802,-1655.841,2109.535,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1558.900,-1655.780,2109.535,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1552.718,-1648.283,2109.535,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1727,1547.687,-1653.704,2109.534,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1727,1549.721,-1651.557,2109.534,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19787,1560.609,-1651.126,2111.207,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19808,1559.895,-1651.186,2110.405,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1558.625,-1651.056,2109.535,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2608,1547.379,-1653.165,2111.850,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1808,1561.807,-1678.744,2109.537,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1808,1552.390,-1670.397,2109.535,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1809,1561.551,-1657.902,2109.537,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1809,1561.551,-1657.901,2110.084,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1808,1556.021,-1656.257,2109.535,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2816,1551.962,-1655.750,2110.382,0.000,0.000,195.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1580.953,-1657.885,2111.602,90.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1554.440,-1664.519,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1557.547,-1664.482,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1560.203,-1664.475,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1558.773,-1664.492,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1556.221,-1659.982,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1559.500,-1659.995,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1555.220,-1659.980,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1560.457,-1660.001,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(3975,1575.031,-1628.487,2109.314,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1576.261,-1666.880,2111.600,90.000,180.005,359.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19325,1576.275,-1661.097,2111.600,90.000,180.005,359.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2930,1601.647,-1657.193,2108.718,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2207,1568.392,-1661.715,2109.537,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1568.082,-1664.901,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1571.069,-1667.907,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1566.001,-1667.928,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19430,1588.892,-1662.947,2111.647,90.000,180.005,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1533,1602.609,-1650.615,2106.081,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1582.744,-1663.797,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1583.869,-1663.827,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1586.698,-1663.838,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1587.647,-1663.852,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1587.373,-1659.434,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1586.248,-1659.413,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1583.222,-1659.389,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14680,1582.398,-1659.349,2111.508,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2930,1605.359,-1657.171,2108.643,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1806,1584.119,-1663.937,2109.539,0.000,0.000,118.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1806,1584.105,-1662.908,2109.539,0.000,0.000,89.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1588.489,-1678.314,2109.539,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14532,1563.210,-1659.790,2110.519,0.000,0.000,209.998,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14532,1580.027,-1683.856,2110.520,0.000,0.000,67.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2853,1587.116,-1678.912,2110.341,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2824,1566.030,-1666.479,2110.339,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2593,1588.380,-1675.993,2110.391,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2704,1588.156,-1675.943,2110.787,0.000,0.000,108.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1368,1605.864,-1663.183,2106.770,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1368,1600.567,-1663.191,2106.770,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1368,1602.978,-1660.436,2106.770,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1565.400,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1566.500,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1567.599,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1568.800,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1570.099,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1571.500,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2707,1572.900,-1659.321,2111.962,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2240,1563.772,-1668.448,2110.594,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2241,1574.785,-1668.356,2110.564,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2205,1580.827,-1654.112,2109.718,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1806,1579.433,-1654.640,2109.539,0.000,0.000,269.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2612,1585.020,-1675.635,2111.334,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1581.519,-1680.885,2109.539,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1583.181,-1680.588,2109.513,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1586.328,-1677.599,2109.539,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1808,1584.188,-1680.928,2109.539,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2608,1580.928,-1678.421,2111.708,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2608,1585.958,-1680.909,2111.708,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(14532,1581.250,-1676.828,2110.520,0.000,0.000,269.998,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19572,1585.421,-1680.879,2109.539,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(11743,1577.249,-1680.083,2110.341,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2173,1577.359,-1681.232,2109.539,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1577.177,-1682.255,2109.539,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1714,1578.025,-1679.989,2109.539,0.000,0.000,2.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1808,1576.992,-1678.450,2109.539,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2201,1562.744,-1672.687,2110.474,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19617,1554.977,-1647.693,2111.475,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1806,1581.649,-1653.706,2109.539,0.000,0.000,179.989,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1566.918,-1667.967,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1571.972,-1667.928,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1570.375,-1664.866,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1567.181,-1664.910,2110.034,0.000,0.000,177.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2190,1562.490,-1674.130,2110.474,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(19808,1563.199,-1674.282,2110.489,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1564.423,-1673.880,2110.033,0.000,0.000,267.978,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1998,1605.986,-1654.850,2106.081,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2776,1606.229,-1653.965,2106.579,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1578.683,-1684.270,2109.538,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1578.683,-1684.270,2110.933,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1578.109,-1684.281,2109.538,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1578.108,-1684.281,2110.933,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.532,-1684.267,2109.538,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.531,-1684.267,2110.933,0.000,0.000,179.994,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.328,-1677.437,2109.538,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.328,-1677.437,2110.933,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.331,-1676.860,2109.538,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.331,-1676.859,2110.933,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.322,-1676.285,2109.538,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1577.322,-1676.284,2110.907,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1576.925,-1682.992,2109.512,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1564.079,-1671.355,2109.512,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1564.078,-1671.355,2110.907,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1564.655,-1671.364,2109.512,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1564.654,-1671.363,2110.907,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1565.229,-1671.363,2109.512,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1565.229,-1671.362,2110.907,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1565.805,-1671.362,2109.512,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1565.805,-1671.360,2110.913,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1566.380,-1671.360,2109.512,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1566.380,-1671.359,2110.912,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1726,1576.879,-1674.806,2109.538,0.000,0.000,180.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1580.253,-1681.661,2109.512,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1580.230,-1681.086,2109.512,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1580.208,-1680.510,2109.512,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2066,1580.228,-1678.656,2109.512,0.000,0.000,270.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2827,1561.493,-1671.233,2110.060,0.000,0.000,250.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2930,1603.499,-1657.187,2108.718,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2930,1599.194,-1657.166,2108.643,0.000,0.000,90.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2853,1588.145,-1674.812,2110.062,0.000,0.000,0.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(2853,1571.788,-1674.858,2110.062,0.000,0.000,28.000,300.000,300.000);
	lspdenterijer = CreateDynamicObjectEx(1567,1568.142,-1673.166,2109.513,0.000,0.000,344.000,300.000,300.000);
	return 1;
}

stock LoadServerMOTD()
{
	new motd[128];
	format(motd, sizeof(motd), "%s", gServerMOTD);
	Textdraw2 = TextDrawCreate(242.000, 434.3, motd);
	TextDrawUseBox(Textdraw2,1);
	TextDrawBoxColor(Textdraw2,0x00000066);
	TextDrawAlignment(Textdraw2,2);
	TextDrawBackgroundColor(Textdraw2,0x000000ff);
	TextDrawFont(Textdraw2,1);
	TextDrawLetterSize(Textdraw2,0.220, 1.299);
	TextDrawColor(Textdraw2,0xffffffff);
	TextDrawSetOutline(Textdraw2,1);
	TextDrawSetProportional(Textdraw2,1);
	TextDrawSetShadow(Textdraw2,1);
}
stock LoadGeneralTextdraws()
{
	//Speedo
	Text_Speedo[0] = TextDrawCreate(529.000, 379.000, "_");
	TextDrawLetterSize(Text_Speedo[0], 0.319, 4.999);
	TextDrawTextSize(Text_Speedo[0], 618.000, 17.000);
	TextDrawAlignment(Text_Speedo[0], 1);
	TextDrawColor(Text_Speedo[0], -1);
	TextDrawUseBox(Text_Speedo[0], 1);
	TextDrawBoxColor(Text_Speedo[0], 150);
	TextDrawSetShadow(Text_Speedo[0], 1);
	TextDrawSetOutline(Text_Speedo[0], 1);
	TextDrawBackgroundColor(Text_Speedo[0], 150);
	TextDrawFont(Text_Speedo[0], 2);
	TextDrawSetProportional(Text_Speedo[0], 1);

	Text_Speedo[1] = TextDrawCreate(527.500, 410.510, "LD_SPAC:white");
	TextDrawLetterSize(Text_Speedo[1], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[1], 91.000, 1.000);
	TextDrawAlignment(Text_Speedo[1], 1);
	TextDrawColor(Text_Speedo[1], 8912895);
	TextDrawSetShadow(Text_Speedo[1], 0);
	TextDrawSetOutline(Text_Speedo[1], 0);
	TextDrawBackgroundColor(Text_Speedo[1], 255);
	TextDrawFont(Text_Speedo[1], 4);
	TextDrawSetProportional(Text_Speedo[1], 0);

	Text_Speedo[2] = TextDrawCreate(538.098, 381.229, "ENGINE");
	TextDrawLetterSize(Text_Speedo[2], 0.108, 0.839);
	TextDrawTextSize(Text_Speedo[2], 1280.000, 1280.000);
	TextDrawAlignment(Text_Speedo[2], 1);
	TextDrawColor(Text_Speedo[2], -741092353);
	TextDrawSetShadow(Text_Speedo[2], 0);
	TextDrawSetOutline(Text_Speedo[2], 0);
	TextDrawBackgroundColor(Text_Speedo[2], 255);
	TextDrawFont(Text_Speedo[2], 2);
	TextDrawSetProportional(Text_Speedo[2], 1);

	Text_Speedo[3] = TextDrawCreate(538.098, 390.154, "LIGHT");
	TextDrawLetterSize(Text_Speedo[3], 0.108, 0.839);
	TextDrawTextSize(Text_Speedo[3], 1280.000, 1280.000);
	TextDrawAlignment(Text_Speedo[3], 1);
	TextDrawColor(Text_Speedo[3], -741092353);
	TextDrawSetShadow(Text_Speedo[3], 0);
	TextDrawSetOutline(Text_Speedo[3], 0);
	TextDrawBackgroundColor(Text_Speedo[3], 255);
	TextDrawFont(Text_Speedo[3], 2);
	TextDrawSetProportional(Text_Speedo[3], 1);

	Text_Speedo[4] = TextDrawCreate(538.098, 399.281, "DOOR");
	TextDrawLetterSize(Text_Speedo[4], 0.108, 0.839);
	TextDrawTextSize(Text_Speedo[4], 1280.000, 1280.000);
	TextDrawAlignment(Text_Speedo[4], 1);
	TextDrawColor(Text_Speedo[4], -741092353);
	TextDrawSetShadow(Text_Speedo[4], 0);
	TextDrawSetOutline(Text_Speedo[4], 0);
	TextDrawBackgroundColor(Text_Speedo[4], 255);
	TextDrawFont(Text_Speedo[4], 2);
	TextDrawSetProportional(Text_Speedo[4], 1);

	Text_Speedo[5] = TextDrawCreate(533.666, 383.661, "LD_Beat:chit");
	TextDrawLetterSize(Text_Speedo[5], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[5], 3.000, 4.000);
	TextDrawAlignment(Text_Speedo[5], 1);
	TextDrawColor(Text_Speedo[5], -347323649);
	TextDrawSetShadow(Text_Speedo[5], 0);
	TextDrawSetOutline(Text_Speedo[5], 0);
	TextDrawBackgroundColor(Text_Speedo[5], 255);
	TextDrawFont(Text_Speedo[5], 4);
	TextDrawSetProportional(Text_Speedo[5], 0);

	Text_Speedo[6] = TextDrawCreate(533.232, 392.472, "LD_Beat:chit");
	TextDrawLetterSize(Text_Speedo[6], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[6], 3.418, 4.059);
	TextDrawAlignment(Text_Speedo[6], 1);
	TextDrawColor(Text_Speedo[6], -347323649);
	TextDrawSetShadow(Text_Speedo[6], 0);
	TextDrawSetOutline(Text_Speedo[6], 0);
	TextDrawBackgroundColor(Text_Speedo[6], 255);
	TextDrawFont(Text_Speedo[6], 4);
	TextDrawSetProportional(Text_Speedo[6], 0);

	Text_Speedo[7] = TextDrawCreate(533.666, 400.813, "LD_Beat:chit");
	TextDrawLetterSize(Text_Speedo[7], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[7], 3.000, 4.000);
	TextDrawAlignment(Text_Speedo[7], 1);
	TextDrawColor(Text_Speedo[7], -347323649);
	TextDrawSetShadow(Text_Speedo[7], 0);
	TextDrawSetOutline(Text_Speedo[7], 0);
	TextDrawBackgroundColor(Text_Speedo[7], 255);
	TextDrawFont(Text_Speedo[7], 4);
	TextDrawSetProportional(Text_Speedo[7], 0);

	Text_Speedo[8] = TextDrawCreate(549.666, 387.058, "_");
	TextDrawLetterSize(Text_Speedo[8], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[8], 22.000, 25.000);
	TextDrawAlignment(Text_Speedo[8], 1);
	TextDrawColor(Text_Speedo[8], -1);
	TextDrawSetShadow(Text_Speedo[8], 0);
	TextDrawSetOutline(Text_Speedo[8], 0);
	TextDrawBackgroundColor(Text_Speedo[8], 1);
	TextDrawFont(Text_Speedo[8], 5);
	TextDrawSetProportional(Text_Speedo[8], 0);
	TextDrawSetPreviewModel(Text_Speedo[8], 1650);
	TextDrawSetPreviewRot(Text_Speedo[8], 0.000, 0.000, 0.000, 2.000);
	TextDrawSetPreviewVehCol(Text_Speedo[8], 0, 0);

	Text_Speedo[9] = TextDrawCreate(551.000, 375.859, "_");
	TextDrawLetterSize(Text_Speedo[9], 0.479, 1.120);
	TextDrawTextSize(Text_Speedo[9], 19.270, 26.000);
	TextDrawAlignment(Text_Speedo[9], 1);
	TextDrawColor(Text_Speedo[9], -1);
	TextDrawSetShadow(Text_Speedo[9], 0);
	TextDrawSetOutline(Text_Speedo[9], 0);
	TextDrawBackgroundColor(Text_Speedo[9], 1);
	TextDrawFont(Text_Speedo[9], 5);
	TextDrawSetProportional(Text_Speedo[9], 0);
	TextDrawSetPreviewModel(Text_Speedo[9], 1240);
	TextDrawSetPreviewRot(Text_Speedo[9], 0.000, 0.000, 0.000, 2.000);
	TextDrawSetPreviewVehCol(Text_Speedo[9], 0, 0);

	Text_Global[0] = TextDrawCreate(524.000, 5.000, "PROSPECT");
	TextDrawLetterSize(Text_Global[0], 0.240, 1.399);
	TextDrawTextSize(Text_Global[0], 2.000, 6.000);
	TextDrawAlignment(Text_Global[0], 1);
	TextDrawColor(Text_Global[0], -846905345);
	TextDrawSetShadow(Text_Global[0], 1);
	TextDrawSetOutline(Text_Global[0], 1);
	TextDrawBackgroundColor(Text_Global[0], 255);
	TextDrawFont(Text_Global[0], 1);
	TextDrawSetProportional(Text_Global[0], 1);

	Text_Global[1] = TextDrawCreate(567.000, 5.000, "ROLEPLAY");
	TextDrawLetterSize(Text_Global[1], 0.250, 1.399);
	TextDrawAlignment(Text_Global[1], 1);
	TextDrawColor(Text_Global[1], -1);
	TextDrawSetShadow(Text_Global[1], 1);
	TextDrawSetOutline(Text_Global[1], 1);
	TextDrawBackgroundColor(Text_Global[1], 255);
	TextDrawFont(Text_Global[1], 1);
	TextDrawSetProportional(Text_Global[1], 1);
	//------------------------------------------//
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
    TextDrawLetterSize(Blind, 0.000000, 49.378147);
    TextDrawTextSize(Blind, -2.000000, 0.000000);
    TextDrawAlignment(Blind, 3);
    TextDrawColor(Blind, -1);
    TextDrawUseBox(Blind, true);
    TextDrawBoxColor(Blind, 255);
    TextDrawSetShadow(Blind, 0);
    TextDrawSetOutline(Blind, 0);
    TextDrawBackgroundColor(Blind, 255);
    TextDrawFont(Blind, 1);
    //--------------Login Screen----------------//
	// CreateDynamicArt3(nnahtann, 8, -648.2,1879.167, 600.0, 0, 0, -90);
	// LOGIN SCREEN NEW

    welcomepm = TextDrawCreate(204.743530, 134.166641, "Welcome to");
    TextDrawLetterSize(welcomepm, 0.449999, 1.600000);
    TextDrawAlignment(welcomepm, 1);
    TextDrawColor(welcomepm, -1);
    TextDrawSetShadow(welcomepm, 0);
    TextDrawSetOutline(welcomepm, 1);
    TextDrawBackgroundColor(welcomepm, 51);
    TextDrawFont(welcomepm, 1);
    TextDrawSetProportional(welcomepm, 1);

    welcomepm1 = TextDrawCreate(301.258972, 134.750045, "Prospect");
    TextDrawLetterSize(welcomepm1, 0.449999, 1.600000);
    TextDrawAlignment(welcomepm1, 1);
    TextDrawColor(welcomepm1, -5963521);
    TextDrawSetShadow(welcomepm1, 0);
    TextDrawSetOutline(welcomepm1, 1);
    TextDrawBackgroundColor(welcomepm1, 51);
    TextDrawFont(welcomepm1, 1);
    TextDrawSetProportional(welcomepm1, 1);

    welcomepm2 = TextDrawCreate(371.068969, 134.749969, "Roleplay~w~!");
    TextDrawLetterSize(welcomepm2, 0.449999, 1.600000);
    TextDrawAlignment(welcomepm2, 1);
    TextDrawColor(welcomepm2, 16777215);
    TextDrawSetShadow(welcomepm2, 0);
    TextDrawSetOutline(welcomepm2, 1);
    TextDrawBackgroundColor(welcomepm2, 51);
    TextDrawFont(welcomepm2, 1);
    TextDrawSetProportional(welcomepm2, 1);

    welcomepm3 = TextDrawCreate(265.183105, 277.083312, "Enjoy your stay!");
    TextDrawLetterSize(welcomepm3, 0.449999, 1.600000);
    TextDrawAlignment(welcomepm3, 1);
    TextDrawColor(welcomepm3, -1);
    TextDrawSetShadow(welcomepm3, 0);
    TextDrawSetOutline(welcomepm3, 1);
    TextDrawBackgroundColor(welcomepm3, 51);
    TextDrawFont(welcomepm3, 1);
    TextDrawSetProportional(welcomepm3, 1);

	Tutorial[0] = TextDrawCreate(529.000366, 396.818450, "usebox");
	TextDrawLetterSize(Tutorial[0], 0.000000, -14.743003);
	TextDrawTextSize(Tutorial[0], 106.999954, 0.000000);
	TextDrawAlignment(Tutorial[0], 1);
	TextDrawColor(Tutorial[0], 0);
	TextDrawUseBox(Tutorial[0], true);
	TextDrawBoxColor(Tutorial[0], 102);
	TextDrawSetShadow(Tutorial[0], 0);
	TextDrawSetOutline(Tutorial[0], 0);
	TextDrawBackgroundColor(Tutorial[0], 255);
	TextDrawFont(Tutorial[0], 0);

	Tutorial[1] = TextDrawCreate(232.666809, 265.896209, "Prospect Roleplay - Tutorial");
	TextDrawLetterSize(Tutorial[1], 0.335000, 1.616592);
	TextDrawAlignment(Tutorial[1], 1);
	TextDrawColor(Tutorial[1], 144559871);
	TextDrawSetShadow(Tutorial[1], 0);
	TextDrawSetOutline(Tutorial[1], 1);
	TextDrawBackgroundColor(Tutorial[1], 51);
	TextDrawFont(Tutorial[1], 1);
	TextDrawSetProportional(Tutorial[1], 1);

	Tutorial[2] = TextDrawCreate(318.666717, 290.370208, "Welcome to Prospect Roleplay! Thanks for choosing us as your Roleplay destination. We hope you enjoy our community.");
	TextDrawLetterSize(Tutorial[2], 0.195333, 1.052444);
	TextDrawAlignment(Tutorial[2], 2);
	TextDrawColor(Tutorial[2], -1);
	TextDrawSetShadow(Tutorial[2], 0);
	TextDrawSetOutline(Tutorial[2], 1);
	TextDrawBackgroundColor(Tutorial[2], 51);
	TextDrawFont(Tutorial[2], 1);
	TextDrawSetProportional(Tutorial[2], 1);




	// Time textdraw
 	TimeTD = TextDrawCreate(578.000000, 8.000000, "12:05AM");
	TextDrawAlignment(TimeTD, 2);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawFont(TimeTD, 2);
	TextDrawLetterSize(TimeTD, 0.230000, 1.500000);
	TextDrawColor(TimeTD, -1);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetSelectable(TimeTD, 0);


	// Animation textdraw
	AnimationTD = TextDrawCreate(435.000000, 426.000000, "Press ~r~~k~~PED_SPRINT~~w~ to stop animation");
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.260000, 1.299999);
	TextDrawColor(AnimationTD, -1);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetProportional(AnimationTD, 1);

	// Damage Informer Textdraw
	for(new i; i < MAX_PLAYERS; ++i)
	{
		Damage[i] = TextDrawCreate(198.000015, 382.874114, "Damage: You were shot by");
		TextDrawLetterSize(Damage[i], 0.213333, 1.110517);
		TextDrawAlignment(Damage[i], 1);
		TextDrawColor(Damage[i], -1);
		TextDrawSetShadow(Damage[i], 0);
		TextDrawSetOutline(Damage[i], 1);
		TextDrawBackgroundColor(Damage[i], 51);
		TextDrawFont(Damage[i], 1);
		TextDrawSetProportional(Damage[i], 1);
	}

	#if defined SERVER_INTRO
		introTextdraws[0] = TextDrawCreate(660.000000, -59.000000, "_");
		TextDrawBackgroundColor(introTextdraws[0], 255);
		TextDrawFont(introTextdraws[0], 1);
		TextDrawLetterSize(introTextdraws[0], 0.500000, 19.000000);
		TextDrawColor(introTextdraws[0], -1);
		TextDrawSetOutline(introTextdraws[0], 0);
		TextDrawSetProportional(introTextdraws[0], 1);
		TextDrawSetShadow(introTextdraws[0], 1);
		TextDrawUseBox(introTextdraws[0], 1);
		TextDrawBoxColor(introTextdraws[0], 255);
		TextDrawTextSize(introTextdraws[0], -50.000000, 0.000000);

		introTextdraws[1] = TextDrawCreate(651.000000, 338.000000, "_");
		TextDrawBackgroundColor(introTextdraws[1], 255);
		TextDrawFont(introTextdraws[1], 1);
		TextDrawLetterSize(introTextdraws[1], 0.500000, 19.000000);
		TextDrawColor(introTextdraws[1], -1);
		TextDrawSetOutline(introTextdraws[1], 0);
		TextDrawSetProportional(introTextdraws[1], 1);
		TextDrawSetShadow(introTextdraws[1], 1);
		TextDrawUseBox(introTextdraws[1], 1);
		TextDrawBoxColor(introTextdraws[1], 255);
		TextDrawTextSize(introTextdraws[1], -50.000000, 0.000000);

		introTextdraws[2] = TextDrawCreate(249.000000, 144.000000, "Grand Theft Auto");
		TextDrawBackgroundColor(introTextdraws[2], 255);
		TextDrawFont(introTextdraws[2], 2);
		TextDrawLetterSize(introTextdraws[2], 0.400000, 2.099999);
		TextDrawColor(introTextdraws[2], 144559871);
		TextDrawSetOutline(introTextdraws[2], 1);
		TextDrawSetProportional(introTextdraws[2], 1);

		introTextdraws[3] = TextDrawCreate(331.000000, 161.000000, "Presents...");
		TextDrawBackgroundColor(introTextdraws[3], 255);
		TextDrawFont(introTextdraws[3], 2);
		TextDrawLetterSize(introTextdraws[3], 0.300000, 1.799999);
		TextDrawColor(introTextdraws[3], -1);
		TextDrawSetOutline(introTextdraws[3], 1);
		TextDrawSetProportional(introTextdraws[3], 1);

		introTextdraws[4] = TextDrawCreate(288.000000, 156.000000, "Prospect Roleplay");
		TextDrawBackgroundColor(introTextdraws[4], 255);
		TextDrawFont(introTextdraws[4], 3);
		TextDrawLetterSize(introTextdraws[4], 0.750000, 2.999999);
		TextDrawColor(introTextdraws[4], -1);
		TextDrawSetOutline(introTextdraws[4], 1);
		TextDrawSetProportional(introTextdraws[4], 1);

		introTextdraws[5] = TextDrawCreate(261.000000, 233.000000, "Los Santos");
		TextDrawBackgroundColor(introTextdraws[5], 255);
		TextDrawFont(introTextdraws[5], 0);
		TextDrawLetterSize(introTextdraws[5], 0.599999, 2.699999);
		TextDrawColor(introTextdraws[5], 144559871);
		TextDrawSetOutline(introTextdraws[5], 1);
		TextDrawSetProportional(introTextdraws[5], 1);

	#endif
	// House Lights
   	houseLights = TextDrawCreate(0.0, 0.0, "|");
    TextDrawUseBox(houseLights, 1);
    TextDrawBoxColor(houseLights, 0x000000BB);
    TextDrawTextSize(houseLights, 660.000000, 22.000000);
    TextDrawAlignment(houseLights, 0);
    TextDrawBackgroundColor(houseLights, 0x000000FF);
    TextDrawFont(houseLights, 3);
    TextDrawLetterSize(houseLights, 1.000000, 52.200000);
    TextDrawColor(houseLights, 0x000000FF);
    TextDrawSetOutline(houseLights, 1);
    TextDrawSetProportional(houseLights, 1);
    TextDrawSetShadow(houseLights, 1);
}
stock CreatePlayerTextDraws( playerid )
{
	//Speedo
	Text_Player[playerid][0] = CreatePlayerTextDraw(playerid, 582.000, 386.000, "100 KMH");
	PlayerTextDrawLetterSize(playerid, Text_Player[playerid][0], 0.180, 1.598);
	PlayerTextDrawAlignment(playerid, Text_Player[playerid][0], 1);
	PlayerTextDrawColor(playerid, Text_Player[playerid][0], -741092353);
	PlayerTextDrawSetShadow(playerid, Text_Player[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Text_Player[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, Text_Player[playerid][0], 150);
	PlayerTextDrawFont(playerid, Text_Player[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, Text_Player[playerid][0], 1);

	Text_Player[playerid][1] = CreatePlayerTextDraw(playerid, 574.232, 412.954, "Faggio");
	PlayerTextDrawLetterSize(playerid, Text_Player[playerid][1], 0.133, 1.001);
	PlayerTextDrawTextSize(playerid, Text_Player[playerid][1], 1280.000, 1280.000);
	PlayerTextDrawAlignment(playerid, Text_Player[playerid][1], 2);
	PlayerTextDrawColor(playerid, Text_Player[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Text_Player[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Text_Player[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, Text_Player[playerid][1], 255);
	PlayerTextDrawFont(playerid, Text_Player[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, Text_Player[playerid][1], 1);

	Text_Player[playerid][2] = CreatePlayerTextDraw(playerid, 570.916, 384.548, "100%");
	PlayerTextDrawLetterSize(playerid, Text_Player[playerid][2], 0.119, 0.814);
	PlayerTextDrawTextSize(playerid, Text_Player[playerid][2], 1280.000, 1280.000);
	PlayerTextDrawAlignment(playerid, Text_Player[playerid][2], 2);
	PlayerTextDrawColor(playerid, Text_Player[playerid][2], -505290241);
	PlayerTextDrawSetShadow(playerid, Text_Player[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Text_Player[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, Text_Player[playerid][2], 255);
	PlayerTextDrawFont(playerid, Text_Player[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, Text_Player[playerid][2], 1);

	Text_Player[playerid][3] = CreatePlayerTextDraw(playerid, 569.666, 396.576, "100");
	PlayerTextDrawLetterSize(playerid, Text_Player[playerid][3], 0.119, 0.814);
	PlayerTextDrawTextSize(playerid, Text_Player[playerid][3], 1280.000, 1280.000);
	PlayerTextDrawAlignment(playerid, Text_Player[playerid][3], 2);
	PlayerTextDrawColor(playerid, Text_Player[playerid][3], -505290241);
	PlayerTextDrawSetShadow(playerid, Text_Player[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Text_Player[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, Text_Player[playerid][3], 255);
	PlayerTextDrawFont(playerid, Text_Player[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, Text_Player[playerid][3], 1);

	PlayerData[playerid][pText][58] = CreatePlayerTextDraw(playerid, 484.000000, 123.000000, "Power");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][58], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][58], 0.360000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][58], -1429936641);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][58], 1);

	PlayerData[playerid][pText][59] = CreatePlayerTextDraw(playerid, 497.000000, 139.000000, "Reps");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][59], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][59], 0.360000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][59], -1429936641);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][59], 1);

	PlayerData[playerid][pText][60] = CreatePlayerTextDraw(playerid, 608.000000, 139.000000, "0");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pText][60], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][60], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][60], 0.360000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][60], -1429936641);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][60], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][60], 1);

	PlayerData[playerid][pText][61] = CreatePlayerTextDraw(playerid, 469.000000, 156.000000, "Distance");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][61], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][61], 0.360000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][61], -1429936641);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][61], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][61], 1);

	PlayerData[playerid][pText][62] = CreatePlayerTextDraw(playerid, 608.000000, 156.000000, "0");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pText][62], 3);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][62], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][62], 0.360000, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][62], -1429936641);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][62], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][62], 1);


	playerfooter[playerid] = CreatePlayerTextDraw(playerid, 327.333190, 432.417785, ".");
	PlayerTextDrawLetterSize(playerid, playerfooter[playerid], 0.220000, 1.276443);
	PlayerTextDrawTextSize(playerid, playerfooter[playerid], 0.000000, 831.000000);
	PlayerTextDrawAlignment(playerid, playerfooter[playerid], 2);
	PlayerTextDrawColor(playerid, playerfooter[playerid], -1);
	PlayerTextDrawUseBox(playerid, playerfooter[playerid], 1);
	PlayerTextDrawBoxColor(playerid, playerfooter[playerid], 153);
	PlayerTextDrawSetShadow(playerid, playerfooter[playerid], 0);
	PlayerTextDrawSetOutline(playerid, playerfooter[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, playerfooter[playerid], 255);
	PlayerTextDrawFont(playerid, playerfooter[playerid], 2);
	PlayerTextDrawSetProportional(playerid, playerfooter[playerid], 1);



	LoadingObjects0[playerid] = CreatePlayerTextDraw(playerid, 219.267944, 377.416687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, LoadingObjects0[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LoadingObjects0[playerid], 205.212310, 58.333312);
	PlayerTextDrawAlignment(playerid, LoadingObjects0[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects0[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, LoadingObjects0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects0[playerid], 0);
	PlayerTextDrawFont(playerid, LoadingObjects0[playerid], 4);

	LoadingObjects1[playerid] = CreatePlayerTextDraw(playerid, 424.011718, 382.666687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, LoadingObjects1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LoadingObjects1[playerid], -204.743774, -5.250000);
	PlayerTextDrawAlignment(playerid, LoadingObjects1[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LoadingObjects1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects1[playerid], 0);
	PlayerTextDrawFont(playerid, LoadingObjects1[playerid], 4);

	LoadingObjects2[playerid] = CreatePlayerTextDraw(playerid, 424.011718, 378.000000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, LoadingObjects2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LoadingObjects2[playerid], -4.216674, 57.750000);
	PlayerTextDrawAlignment(playerid, LoadingObjects2[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LoadingObjects2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects2[playerid], 0);
	PlayerTextDrawFont(playerid, LoadingObjects2[playerid], 4);

	LoadingObjects3[playerid] = CreatePlayerTextDraw(playerid, 218.799423, 377.416687, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, LoadingObjects3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LoadingObjects3[playerid], 4.685211, 58.333312);
	PlayerTextDrawAlignment(playerid, LoadingObjects3[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LoadingObjects3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects3[playerid], 0);
	PlayerTextDrawFont(playerid, LoadingObjects3[playerid], 4);

	LoadingObjects4[playerid] = CreatePlayerTextDraw(playerid, 424.011718, 429.333312, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, LoadingObjects4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LoadingObjects4[playerid], -204.275253, 6.416687);
	PlayerTextDrawAlignment(playerid, LoadingObjects4[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LoadingObjects4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects4[playerid], 0);
	PlayerTextDrawFont(playerid, LoadingObjects4[playerid], 4);

	LoadingObjects5[playerid] = CreatePlayerTextDraw(playerid, 230.043624, 398.416717, "Loading Objects...");
	PlayerTextDrawLetterSize(playerid, LoadingObjects5[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LoadingObjects5[playerid], 1);
	PlayerTextDrawColor(playerid, LoadingObjects5[playerid], 255);
	PlayerTextDrawSetShadow(playerid, LoadingObjects5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LoadingObjects5[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LoadingObjects5[playerid], 51);
	PlayerTextDrawFont(playerid, LoadingObjects5[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LoadingObjects5[playerid], 1);

	_crTextTarget[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 388.000000, "Target Vehicle: ~r~N/A");
	PlayerTextDrawAlignment(playerid, _crTextTarget[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, _crTextTarget[playerid], 255);
	PlayerTextDrawFont(playerid, _crTextTarget[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _crTextTarget[playerid], 0.500000, 1.600000);
	PlayerTextDrawColor(playerid, _crTextTarget[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _crTextTarget[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _crTextTarget[playerid], 1);

	_crTextSpeed[playerid] = CreatePlayerTextDraw(playerid, 190.000000, 410.000000, "Speed: ~r~N/A");
	PlayerTextDrawAlignment(playerid, _crTextSpeed[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, _crTextSpeed[playerid], 255);
	PlayerTextDrawFont(playerid, _crTextSpeed[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _crTextSpeed[playerid], 0.500000, 1.600000);
	PlayerTextDrawColor(playerid, _crTextSpeed[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _crTextSpeed[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _crTextSpeed[playerid], 1);

	_crTickets[playerid] = CreatePlayerTextDraw(playerid, 340.000000, 410.000000, "Tickets: ~r~N/A");
	PlayerTextDrawAlignment(playerid, _crTickets[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, _crTickets[playerid], 255);
	PlayerTextDrawFont(playerid, _crTickets[playerid], 1);
	PlayerTextDrawLetterSize(playerid, _crTickets[playerid], 0.500000, 1.600000);
	PlayerTextDrawColor(playerid, _crTickets[playerid], -1);
	PlayerTextDrawSetOutline(playerid, _crTickets[playerid], 1);
	PlayerTextDrawSetProportional(playerid, _crTickets[playerid], 1);

	//-------------------------------------------------------------------------//

    TuningBuy[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 425.125000, 338.666687, "usebox");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 0 ], 0.000000, 8.627778);
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 0 ], 216.125000, 0.000000);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 0 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 0 ], true);
    PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 0 ], 102);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 0 ], 0);

    TuningBuy[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 319.375000, 337.749847, "Hydraulics");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 1 ], 0.386249, 1.156664);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 1 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 1 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 1 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 1 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 1 ], 51 );
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 1 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 1 ], 1 );
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 1 ], false );

    TuningBuy[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 198.375000, 361.583282, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 2 ], 18.981874, 0.514999);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 2 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 2 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 2 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 2 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 2 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 2 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 2 ], 1);

    TuningBuy[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 222.500000, 352.916656, "Left `Chrome Flames` Sideskirt");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 3 ], 0.244999, 1.092499);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 3 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 3 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 3 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 3 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 3 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 3 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 3 ], 1);

    TuningBuy[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 222.500000, 365.000000, "price: ~w~10000$");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 4 ], 0.244999, 1.092499);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 4 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 4 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 4 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 4 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 4 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 4 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 4 ], 1);

    TuningBuy[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 215.125000, 372.999877, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 5 ], 6.743125, 0.444999);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 5 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 5 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 5 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 5 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 5 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 5 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 5 ], 1);

    TuningBuy[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 206.750000, 347.166564, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 6 ], 18.981874, 0.514999);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 6 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 6 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 6 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 6 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 6 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 6 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 6 ], 1);

    TuningBuy[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 385.000000, 381.500000, "ld_beat:right");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 7 ], 0.449999, 1.600000);
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 7 ], 27.500000, 13.416657);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 7 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 7 ], -1);
    PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 7 ], true);
    PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 7 ], 255);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 7 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 7 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 7 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 7 ], 4);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 7 ], 1);
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 7 ], true);

    TuningBuy[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 230.375000, 381.916473, "ld_beat:left");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 8 ], 0.449999, 1.600000);
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 8 ], 27.500000, 13.416657);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 8 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 8 ], -1);
    PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 8 ], true);
    PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 8 ], 255);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 8 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 8 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 8 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 8 ], 4);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 8 ], 1);
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 8 ], true);

    TuningBuy[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 320.000000, 381.499938, "BUY");
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 9 ], 23.000000, 13.000000 );
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 9 ], 0.421249, 1.360832 );
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 9 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 9 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 9 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 9 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 9 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 9 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 9 ], 1);
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 9 ], true);

    TuningBuy[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 200.000000, 396.416656, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 10 ], 18.981874, 0.514999);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 10 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 10 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 10 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 10 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 10 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 10 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 10 ], 1);

    TuningBuy[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 225.000000, 401.916595, "Advanced tuning system");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 11 ], 0.258749, 0.987497);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 11 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 11 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 11 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 11 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 11 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 11 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 11 ], 1);

    TuningBuy[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 203.500000, 411.416839, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 12 ], 18.981874, 0.514998);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 12 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 12 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 12 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 12 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 12 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 12 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 12 ], 1);

    TuningBuy[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 404.500000, 337.999877, "ld_beat:cross");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 13 ], 0.449999, 1.600000);
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 13 ], 17.500000, 8.749991);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 13 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 13 ], -1);
    PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 13 ], true);
    PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 13 ], 255);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 13 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 13 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 13 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 13 ], 4);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 13 ], 1);
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 13 ], true);
    return 1;
}

stock IsComponentidCompatible( modelid, componentid ) {
    if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
		componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 ) {
        return componentid;
	}

    switch( modelid ) {
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
        case 409: if( componentid == 1009 ) return componentid;
        case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
        case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
        case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
        case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
        case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
        case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
        case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
        case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
        case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
        case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 506: if( componentid == 1009) return componentid;
        case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
        case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
        case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
        case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
        case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
        case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
        case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
        case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
        case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
        case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
        case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
        case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
        case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
        case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
        case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
        case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
        case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
    }
    return false;
}
stock GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 ) { // credits Pasha
    new Float:rot;
    GetVehicleZAngle( vehicleid, rot );
    rot = 360 - rot;
    GetVehiclePos( vehicleid, x, y, z );
    x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
    y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
    z = zoff + z;
}

IsADickVehicle(carid)
{
	switch(GetVehicleModel(carid)) {
		case 481, 509, 510: return 1;
	}
	return 0;
}
stock IsABike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510: return 1;
	}
	return 0;
}
GetPlayerVehicle(playerid, vehicleid)
{
	#pragma unused playerid
    for(new v = 0; v < MAX_VEHICLES; v++)
    {
        if(VehicleInfo[v][vID] == vehicleid)
        {
            return v;
        }
    }
    return 0;
}
stock IsAtImpoundingPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		for(new x; x < MAX_IMPOUNDPOINTS; x++)
		{
			if(ImpoundPoints[x][impoundPosX] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 4.0, ImpoundPoints[x][impoundPosX], ImpoundPoints[x][impoundPosY], ImpoundPoints[x][impoundPosZ]) && GetPlayerInterior(playerid) == ImpoundPoints[x][impoundInt] && GetPlayerVirtualWorld(playerid) == ImpoundPoints[x][impoundVW]) return 1;
			}
		}
	}
	return 0;
}

//new
//    Float:oldVehicleHealth[MAX_VEHICLES], Float:newVehicleHealth[MAX_VEHICLES]; // change MAX_VEHICLES to your own vehicle amount.

//Float:VehicleHealth(vehicleid)
//{
//  new
//      Float:health;
//  GetVehicleHealth(vehicleid, health);
//  return health;
//}

stock GetPlayerHelmet(playerid)
{
	switch(PlayerData[playerid][pHelmet])
	{
	    case 1: return 18645; //MotorcycleHelmet
		case 2: return 18976;	//MotorcycleHelmet2
		case 3: return 18977; 	//MotorcycleHelmet3
		case 4: return 18978;	//MotorcycleHelmet4
		case 5: return 18979;	//MotorcycleHelmet5
	}
	return true;
}
stock IsanewBike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}
stock Create3DandP( text[], Float:vXU, Float:vYU, Float:vZU, vInt, vVW, pickupid, Float:radius ) {
	CreateDynamic3DTextLabel(text, COLOR_AQUA, vXU, vYU, vZU, radius, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vVW, vInt, -1, 20.0);
	CreateDynamicPickup(pickupid, 1, vXU, vYU, vZU, vVW, vInt);
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float:Range)
{
    new Float:Pos[3];
	GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
	return IsPlayerInRangeOfPoint(playerid, Range, Pos[0], Pos[1], Pos[2]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}
stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock PlayerName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    return name;
}



ClearChatbox(playerid)
{
	for(new i = 0; i < 50; i++)
	{
		SendClientMessage(playerid, COLOR_WHITE, "");
	}
	return 1;
}
stock GetWeaponSlot(weaponid)
{
	switch( weaponid )
	{
		case 0, 1:
		{
			return 0;
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			return 1;
		}
		case 22, 23, 24:
		{
			return 2;
		}
		case 25, 26, 27:
		{
			return 3;
		}
		case 28, 29, 32:
		{
			return 4;
		}
		case 30, 31:
		{
			return 5;
		}
		case 33, 34:
		{
			return 6;
		}
		case 35, 36, 37, 38:
		{
			return 7;
		}
		case 16, 17, 18, 39, 40:
		{
			return 8;
		}
		case 41, 42, 43:
		{
			return 9;
		}
		case 10, 11, 12, 13, 14, 15:
		{
			return 10;
		}
		case 44, 45, 46:
		{
			return 11;
		}
	}
	return -1;
}
autoWeather()
{
	SetWeather(nextWeather);
	switch(random(21))
	{
 		case 0: nextWeather = 0;
   		case 1: nextWeather = 1;
	    case 2: nextWeather = 2;
	    case 3: nextWeather = 3;
	    case 4: nextWeather = 4;
	    case 5: nextWeather = 5;
	    case 6: nextWeather = 6;
	    case 7: nextWeather = 7;
	    case 8: nextWeather = 8;
	    case 9: nextWeather = 9;
	    case 10: nextWeather = 10;
	    case 11: nextWeather = 11;
	    case 12: nextWeather = 12;
	    case 13: nextWeather = 13;
	    case 14: nextWeather = 14;
	    case 15: nextWeather = 15;
	    case 16: nextWeather = 16;
	    case 17: nextWeather = 17;
        case 18: nextWeather = 18;
        case 19: nextWeather = 19;
        case 20: nextWeather = 20;
	}
}
stock IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}


stock GetTurfOwnerNameTextDraw(id)
{

    new turfname[128], name[32];

	if(TurfInfo[id][tCapturedGang] >= 0)
	{
		strcpy(name, GangInfo[TurfInfo[id][tCapturedGang]][gName]);
	}
	format(turfname, sizeof(turfname), "%s", name);
	return turfname;
}
stock IsValidColorCode(clr[])
{
	if (IsNumeric(clr)) {
		return -1;
	}
	if(strcmp(clr, "black", true)==0) return 0;
	else if(strcmp(clr, "white", true)==0) return 1;
	else if(strcmp(clr, "blue", true)==0) return 2;
	else if(strcmp(clr, "red", true)==0) return 3;
	else if(strcmp(clr, "green", true)==0) return 16;
	else if(strcmp(clr, "purple", true)==0) return 5;
	else if(strcmp(clr, "yellow", true)==0) return 6;
	else if(strcmp(clr, "lightblue", true)==0) return 7;
	else if(strcmp(clr, "navy", true)==0) return 94;
	else if(strcmp(clr, "beige", true)==0) return 102;
	else if(strcmp(clr, "darkgreen", true)==0) return 51;
	else if(strcmp(clr, "darkblue", true)==0) return 103;
	else if(strcmp(clr, "darkgrey", true)==0) return 13;
	else if(strcmp(clr, "gold", true)==0) return 99;
	else if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) return 55;
	else if(strcmp(clr, "darkbrown", true)==0) return 84;
	else if(strcmp(clr, "darkred", true)==0) return 74;
	else if(strcmp(clr, "maroon", true)==0) return 115;
	else if(strcmp(clr, "pink", true)==0) return 126;
	return -1;
}

forward GetColorCode(clr[]);
public GetColorCode(clr[])
{
	new color = -1;

	if (IsNumeric(clr)) {
		color = strval(clr);
		return color;
	}

	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}
stock GangTag_IntColor(color)
{
	if(color == 0) return color;
	new rgba = 0xFF + (color * 256);
	return rgba >>> 8 | rgba << 24;
}
stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetPlayerWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
	//	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}

stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidObject(g_BoothObject[id])) {
	    DestroyObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateObject(1583, arrBoothPositions[id][0] - 15.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}
stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}


stock GetPlayerNameExt(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

Float:GetDistanceBetweenPlayers(iPlayerOne, iPlayerTwo)
{
	new
		Float: fPlayerPos[3];

	GetPlayerPos(iPlayerOne, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
	return GetPlayerDistanceFromPoint(iPlayerTwo, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
}
stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(new x: Player)
	{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
	}
	return player;
}
stock GetPlayerID(name[]) {
	if(!isnull(name)) {
		foreach(new i : Player) {
			if(strmatch(PlayerName(i), name)) {
				return i;
			}
		}
	}
	return -1;
}
getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "Materials"; } // hollowpoimt
		case 2: { ret = "Low class weapons"; }// poisontip
		case 3: { ret = "Medium class weapons"; }// fmj
		case 4: { ret = "High class Weapons"; } // old weps
		case 5: { ret = "Traphouse"; }
		case 6: { ret = "Crackhouse"; }
		case 7: { ret = "Sales tax"; }
		case 8: { ret = "Locked"; }
	}
	return ret;
}
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }

    return sex;
}
stock GetWeaponLicStatus(weaponLicStatus) {
	new weapLic[20];
    switch(weaponLicStatus) {
        case 1: weapLic = "Passed";
        case 2: weapLic = "Permanent Passed";
        default: weapLic = "Not Passed";
    }

    return weapLic;
}
stock GetNameWithSpace(oldName[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", oldName);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	return name;
}
stock GetDriveLicStatus(driveLicStatus) {
	new driveLic[15];
    switch(driveLicStatus) {
        case 1: driveLic = "Passed";
        default: driveLic = "Not Passed";
    }

    return driveLic;
}
mysql_escaped(const string[])
{
	new
		retString[300];

	mysql_escape_string(string, retString);

	return retString;
}
IsVehicleSpawnSetup(company)
{
	return (BusinessInfo[company][cVehicle][0] != 0.0 && BusinessInfo[company][cVehicle][1] != 0.0 && BusinessInfo[company][cVehicle][2] != 0.0);
}
GetVehicleModelFromName(const string[])
{
	new
		modelid = strval(string);

	if (400 <= modelid <= 611)
	{
		return modelid;
	}
	else
	{
		for (new i = 0; i < sizeof(vehicleNames); i ++)
		{
			if (strfind(vehicleNames[i], string, true) != -1)
			{
				modelid = i + 400;

				return modelid;
			}
		}
	}
	return 0;
}

StopWorkout(playerid)
{
	if (PlayerData[playerid][pWorkout] != WORKOUT_NONE)
	{
		HidePlayerProgressBar(playerid, PlayerData[playerid][pBars][0]);
		HidePlayerTextDraws(playerid, 58, 62);

		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);

		KillTimer(Timers[playerid][tWorkout]);

		switch (PlayerData[playerid][pWorkout])
		{
			case WORKOUT_DUMBELLS:
			{
				PlayerData[playerid][pWeight] = 0;
				PlayerData[playerid][pReps] = 0;

				PlayerPlaySound(playerid, 17807, 0.0, 0.0, 0.0);

				RemovePlayerAttachedObject(playerid, gWeights[playerid][0]);
				RemovePlayerAttachedObject(playerid, gWeights[playerid][1]);
			}
			case WORKOUT_TREADMILL:
			{
				PlayerData[playerid][pSpeedLevel] = 0;
				PlayerData[playerid][pDistanceRan] = 0;

				PlayerPlaySound(playerid, 17808, 0.0, 0.0, 0.0);
			}
		}
		PlayerData[playerid][pWorkout] = WORKOUT_NONE;
	}
	return 1;
}
AddFitnessForPlayer(playerid)
{
	if (PlayerData[playerid][pFitness] < 100)
	{
		PlayerData[playerid][pFitness]++;
	}
}
WorkoutUpdate(playerid)
{
	if (PlayerData[playerid][pWorkout] != WORKOUT_NONE)
	{
		new
			Float:value = GetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0]);

		switch (PlayerData[playerid][pWorkout])
		{
			case WORKOUT_DUMBELLS:
			{
				switch (PlayerData[playerid][pWeight])
				{
					case 20..60:
					{
						ApplyAnimation(playerid, "Freeweights", "gym_free_A", 4.1, 0, 0, 0, 0, 0, 1);
					}
					case 70..110:
					{
						ApplyAnimation(playerid, "Freeweights", "gym_free_B", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
				if (value < 90.0)
				{
					AddPowerToMeter(playerid);
				}
				else
				{
					PlayerData[playerid][pReps]++;


					if (PlayerData[playerid][pFitness] < 100 && (PlayerData[playerid][pReps] % ((120 - PlayerData[playerid][pWeight]) / 5)) == 0)
					{
						AddFitnessForPlayer(playerid);
					}
					SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], 0.0);
					PlayerTextDrawFormatString(playerid, PlayerData[playerid][pText][60], "%i", PlayerData[playerid][pReps]);

					ApplyAnimation(playerid, "Freeweights", "gym_free_down", 4.1, 0, 0, 0, 0, 0, 1);
					ApplyAnimation(playerid, "Freeweights", "gym_free_down", 4.1, 0, 0, 0, 0, 0, 1);

					if (PlayerData[playerid][pReps] == 50 && !PlayerData[playerid][pGymMembership])
					{
						PlayerData[playerid][pWorkoutTime] = gettime() + 43200;
						StopWorkout(playerid);

						SendInfoMessage(playerid, "You have reached your limit for today!");
						ApplyAnimation(playerid, "Freeweights", "gym_free_putdown", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			case WORKOUT_TREADMILL:
			{
				PlayerData[playerid][pDistanceRan] = PlayerData[playerid][pDistanceRan] + 1;


				SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + (PlayerData[playerid][pSpeedLevel] + 12));
				PlayerTextDrawFormatString(playerid, PlayerData[playerid][pText][62], "%i", PlayerData[playerid][pDistanceRan]);

				if (PlayerData[playerid][pFitness] < 100 && (PlayerData[playerid][pDistanceRan] % 100) == 0)
				{
					AddFitnessForPlayer(playerid);
				}
				if (PlayerData[playerid][pDistanceRan] == 200 && !PlayerData[playerid][pGymMembership])
				{
					PlayerData[playerid][pWorkoutTime] = gettime() + 43200;
					StopWorkout(playerid);

					SendInfoMessage(playerid, "You have reached your limit for today!");
					ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_getoff", 4.1, 0, 0, 0, 0, 0, 1);
				}
			}
		}
	}
	return 1;
}

AddPowerToMeter(playerid)
{
	new
		Float:value = GetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0]);

	switch (PlayerData[playerid][pWeight])
	{
		case 20: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 22.0);
		case 30: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 20.5);
		case 40: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 19.0);
		case 50: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 18.0);
		case 60: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 16.0);
		case 70: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 14.0);
		case 80: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 12.0);
		case 90: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 10.0);
		case 100: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 8.0);
		case 110: SetPlayerProgressBarValue(playerid, PlayerData[playerid][pBars][0], value + 6.0);
	}
}
IsWeightsInUse(playerid)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pWorkout] == WORKOUT_DUMBELLS && IsPlayerInRangeOfPlayer(i, playerid, 10.0))
		{
			return 1;
		}
	}
	return 0;
}
IsPlayerNearGymEquipment(playerid)
{
	return (IsPlayerInRangeOfPoint(playerid, 2.0, 771.7793, 5.4092, 1000.7802) || IsPlayerInRangeOfPoint(playerid, 2.0, 773.5131, -2.1218, 1000.8479));
}

GymCheck(playerid)
{
	new company = GetInsideBusiness(playerid);

	if (company == -1 || BusinessInfo[company][bType] != BUSINESS_GYM)
	{
		return 0;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, 771.7793, 5.4092, 1000.7802))
	{
		if (!PlayerData[playerid][pWorkout])
		{
			if (PlayerData[playerid][pWorkoutTime] > gettime())
			{
				SendErrorMessage(playerid, "You have reached your limit for the day.");
			}
			else if (IsWeightsInUse(playerid))
			{
				SendErrorMessage(playerid, "The weights are already being used.");
			}
			else if (PlayerData[playerid][pWeight])
			{
				SendErrorMessage(playerid, "Please wait before using this command.");
			}
			else
			{
				SetPlayerPos(playerid, 771.7793, 5.4092, 1000.7802);
				SetPlayerFacingAngle(playerid, 270.0000);

				SetPlayerCameraPos(playerid, 775.425048, 5.364191, 1001.295227);
				SetPlayerCameraLookAt(playerid, 772.279235, 5.403525, 1000.780212);

				Dialog_Show(playerid, LiftWeights, DIALOG_STYLE_LIST, "{FFFFFF}Select weight", "20 lbs\n30 lbs\n40 lbs\n50 lbs\n60 lbs\n70 lbs\n80 lbs\n90 lbs\n100 lbs\n110 lbs", "Begin", "Cancel");
			}
		}
		else
		{
			StopWorkout(playerid);
			ApplyAnimation(playerid, "Freeweights", "gym_free_putdown", 4.1, 0, 0, 0, 0, 0, 1);
		}
		return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, 773.5131, -2.1218, 1000.8479))
	{
		if (!PlayerData[playerid][pWorkout])
		{
			if (PlayerData[playerid][pWorkoutTime] > gettime())
			{
				SendErrorMessage(playerid, "You have reached your limit for the day.");
			}
			else if (IsTreadmillInUse(playerid))
			{
				SendErrorMessage(playerid, "The treadmill is already being used.");
			}
			else if (PlayerData[playerid][pSpeedLevel])
			{
				SendErrorMessage(playerid, "Please wait before using this command.");
			}
			else
			{
				SetPlayerPos(playerid, 773.4777, -1.3239, 1000.7260);
				SetPlayerFacingAngle(playerid, 180.0000);

				SetPlayerCameraPos(playerid, 774.571166, -6.172124, 1001.582763);
				SetPlayerCameraLookAt(playerid, 773.482116, -3.338384, 1000.847900);

				Dialog_Show(playerid, Treadmill, DIALOG_STYLE_LIST, "{FFFFFF}Select level", "Level 1 (slowest)\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\nLevel 7\nLevel 8\nLevel 9\nLevel 10 (fastest)", "Begin", "Cancel");
			}
		}
		else
		{
			StopWorkout(playerid);
			ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_getoff", 4.1, 0, 0, 0, 0, 0, 1);
		}
		return 1;
	}
	return 0;
}
IsTreadmillInUse(playerid)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pWorkout] == WORKOUT_TREADMILL && IsPlayerInRangeOfPlayer(i, playerid, 10.0))
		{
			return 1;
		}
	}
	return 0;
}
ShowPlayerTextDraws(playerid, start, end)
{
	for (new i = start; i < end + 1; i ++)
	{
		PlayerTextDrawShow(playerid, PlayerData[playerid][pText][i]);
	}
}

HidePlayerTextDraws(playerid, start, end)
{
	for (new i = start; i < end + 1; i ++)
	{
		PlayerTextDrawHide(playerid, PlayerData[playerid][pText][i]);
	}
}
SetAttachedObject(playerid, modelid, bone, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, Float:sx = 1.0, Float:sy = 1.0, Float:sz = 1.0, materialcolor1 = 0, materialcolor2 = 0)
{
	for (new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
		if (!IsPlayerAttachedObjectSlotUsed(playerid, i))
		{
			SetPlayerAttachedObject(playerid, i, modelid, bone, x, y, z, rx, ry, rz, sx, sy, sz, materialcolor1, materialcolor2);
			return i;
		}
	}

	return -1;
}

stock strreplace2(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string)) {
		// No need to do anything if the limit is 0.
		if (limit == 0)
				return 0;

		new
						 sublen = strlen(search),
						 replen = strlen(replacement),
				bool:packed = ispacked(string),
						 maxlen = maxlength,
						 len = strlen(string),
						 count = 0
		;


		// "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
		// Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
		if (packed)
				maxlen *= 4;

		// If the length of the substring is 0, we have nothing to look for..
		if (!sublen)
				return 0;

		// In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
		while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
				// Delete the string we found
				strdel(string, pos, pos + sublen);

				len -= sublen;

				// If there's anything to put as replacement, insert it. Make sure there's enough room first.
				if (replen && len + replen < maxlen) {
						strins(string, replacement, pos, maxlength);

						pos += replen;
						len += replen;
				}

				// Is there a limit of number of replacements, if so, did we break it?
				if (limit != -1 && ++count >= limit)
						break;
		}

		return count;
}

stock strmatch(const string1[], const string2[])
{
    if ((strcmp(string1, string2, true, strlen(string2)) == 0) && (strlen(string2) == strlen(string1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
GetVehicleModelName(modelid)
{
	new string[32];

	if (400 <= modelid <= 611)
		strcpy(string, vehicleNames[modelid - 400]);

	else
		string = "Unknown";

	return string;
}
GetNextDealershipCarID()
{
    for (new i = 0; i < MAX_DEALERSHIP_CARS; i ++)
	{
	    if (!DealershipCars[i][dcExists])
	    {
	        return i;
		}
	}
	return -1;
}
ShowDealershipEditMenu(playerid, company)
{
	static
	    string[3072];

	if (BusinessInfo[company][bType] != BUSINESS_DEALERSHIP)
	{
	    return 0;
	}
	else
	{
	    new
	        index = 0;

	    string = "Add Vehicle";

	    for (new i = 0; i < MAX_DEALERSHIP_CARS; i ++)
    	{
	        if (DealershipCars[i][dcExists] && DealershipCars[i][dcCompany] == BusinessInfo[company][bID])
	        {
    	        format(string, sizeof(string), "%s\n%s (price: %s)", string, GetVehicleModelName(DealershipCars[i][dcModel]), FormatNumber(DealershipCars[i][dcPrice]));
				gListedItems[playerid][index++] = i;
	    	}
	    }
	    PlayerData[playerid][pCompany] = company;
    	Dialog_Show(playerid, DealerList, DIALOG_STYLE_LIST, "{FFFFFF}Dealership cars", string, "Select", "Back");
	}
	return 1;
}

ClearProducts(company)
{
	switch (BusinessInfo[company][bType])
	{
		case BUSINESS_DEALERSHIP:
		{
		    for (new i = 0; i < MAX_DEALERSHIP_CARS; i ++)
		    {
		        if (DealershipCars[i][dcExists] && DealershipCars[i][dcCompany] == BusinessInfo[company][bID])
		        {
		            DealershipCars[i][dcExists] = 0;
				}
		    }
		    format(queryBuffer, sizeof(queryBuffer), "DELETE FROM rp_dealercars WHERE Company = %i", BusinessInfo[company][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
SaveDealershipCar(id)
{
	static
	    queryString[128];

	if (!DealershipCars[id][dcExists]) return 0;

	format(queryString, sizeof(queryString), "UPDATE rp_dealercars SET Model = %i, Price = %i WHERE ID = %i", DealershipCars[id][dcModel], DealershipCars[id][dcPrice], DealershipCars[id][dcID]);
	return mysql_tquery(connectionID, queryString);
}
IsValidCompanyID(id)
{
	return (id >= 0 && id < MAX_BUSINESSES) && BusinessInfo[id][bExists];
}

IsVehicleInDealership(company, model)
{
	if (!IsValidCompanyID(company) || BusinessInfo[company][bType] != BUSINESS_DEALERSHIP)
	{
	    return 0;
	}
 	for (new i = 0; i < MAX_DEALERSHIP_CARS; i ++)
  	{
   		if (DealershipCars[i][dcExists] && DealershipCars[i][dcCompany] == BusinessInfo[company][bID] && DealershipCars[i][dcModel] == model)
		{
  			return 1;
		}
	}
	return 0;
}

AddVehicleToDealership(company, model, price)
{
	if (!IsValidCompanyID(company) || BusinessInfo[company][bType] != BUSINESS_DEALERSHIP)
	{
	    return -1;
	}

 	new
	 	id = GetNextDealershipCarID();

	if (id != -1)
	{
 		DealershipCars[id][dcExists] = 1;
  		DealershipCars[id][dcCompany] = BusinessInfo[company][bID];
    	DealershipCars[id][dcModel] = model;
	   	DealershipCars[id][dcPrice] = price;

		format(queryBuffer, sizeof(queryBuffer), "INSERT INTO rp_dealercars (Company) VALUES(%i)", DealershipCars[id][dcCompany]);
		mysql_tquery(connectionID, queryBuffer, "OnDealershipCarAdded", "i", id);
	}
	return id;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}
forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}
stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}
stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}

stock Impound_Delete(impoundid)
{
    if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_tquery(connectionID, query);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_VEHICLES; i ++) if (VehicleInfo[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
		    VehicleInfo[i][carImpounded] = 0;
		    VehicleInfo[i][carImpoundPrice] = 0;
		    ReloadVehicle(i);
		}
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
	    return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
	    return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundLot][0] = x;
	    ImpoundData[i][impoundLot][1] = y;
	    ImpoundData[i][impoundLot][2] = z;
	    ImpoundData[i][impoundRelease][0] = 0.0;
	    ImpoundData[i][impoundRelease][1] = 0.0;
	    ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_tquery(connectionID, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "[Impound %d]\n{FFFFFF}/impound to impound a vehicle.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	new
		query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
	);
	return mysql_tquery(connectionID, query);
}
Float:GetDistanceToTruckDepot(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	x1 = TruckDepotInfo[p1][pTDPosX];
	y1 = TruckDepotInfo[p1][pTDPosY];
	z1 = TruckDepotInfo[p1][pTDPosZ];
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
stock GetClosestTruckDepot(p1, level)
{
	new Float:dis,Float:dis2,player, count;
	player = -1;
	dis = 99999.99;
	for(new x=0; x<MAX_TRUCKDEPOTS; x++)
	{
	    if(TruckDepotInfo[x][pTDLevel] == level)
	    {
	        count ++;
			dis2 = GetDistanceToTruckDepot(x,p1);
			if(dis2 < dis && dis2 != -1.00)
			{
				dis = dis2;
				player = x;
			}
		}
	}
	if(count == 0) player = -1;
	return player;
}
stock g_mysql_ReturnEscaped(unEscapedString[], connectionHandle)
{
	new EscapedString[256];
	mysql_real_escape_string(unEscapedString, EscapedString, connectionHandle);
	return EscapedString;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}
stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}
stock ABroadCast(hColor, szMessage[], iLevel) {
	foreach(new i: Player)
	{
		if(PlayerData[i][pAdmin] >= iLevel) {
			SendClientMessageEx(i, hColor, szMessage);
		}
	}
	return 1;
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, playerfooter[playerid]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, playerfooter[playerid], string);
	PlayerTextDrawShow(playerid, playerfooter[playerid]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
	return 1;
}
forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, playerfooter[playerid]);
}

stock ShowFreezeTextdraw(playerid)
{
	PlayerTextDrawShow(playerid, LoadingObjects0[playerid]);
	PlayerTextDrawShow(playerid, LoadingObjects1[playerid]);
	PlayerTextDrawShow(playerid, LoadingObjects2[playerid]);
	PlayerTextDrawShow(playerid, LoadingObjects3[playerid]);
	PlayerTextDrawShow(playerid, LoadingObjects4[playerid]);
	PlayerTextDrawShow(playerid, LoadingObjects5[playerid]);

	return 1;
}

stock str_replace(sSearch[], sReplace[], const sSubject[], &iCount = 0)
{
	new
		iLengthTarget = strlen(sSearch),
		iLengthReplace = strlen(sReplace),
		iLengthSource = strlen(sSubject),
		iItterations = (iLengthSource - iLengthTarget) + 1;

	new
		sTemp[128],
		sReturn[128];

	strcat(sReturn, sSubject, 256);
	iCount = 0;

	for(new iIndex; iIndex < iItterations; ++iIndex)
	{
		strmid(sTemp, sReturn, iIndex, (iIndex + iLengthTarget), (iLengthTarget + 1));

		if(!strcmp(sTemp, sSearch, false))
		{
			strdel(sReturn, iIndex, (iIndex + iLengthTarget));
			strins(sReturn, sReplace, iIndex, iLengthReplace);

			iIndex += iLengthTarget;
			iCount++;
		}
	}
	return sReturn;
}

CMD:testcolor(playerid, params[])
{
	SendClientMessageEx(playerid, -1, "%d", GetGangColor(PlayerData[playerid][pGang]));
	return 1;
}

SetPlayerCellphoneAction(playerid, enable)
{
	if (PlayerData[playerid][pCuffed])
	{
		return 0;
	}
	else
	{
		if (enable)
		{
			if (VehicleHasDoors(GetPlayerVehicleID(playerid)))
			{
				ApplyAnimation(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 0, 0, 1, 0, 1);
			}
			else
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				SetPlayerAttachedObject(playerid, 5, 330, 6);
			}
		}
		else
		{
			if (VehicleHasDoors(GetPlayerVehicleID(playerid)))
			{
				ApplyAnimation(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 0, 0, 0, 0, 1);
			}
			else
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 5);
			}
		}
	}
	return 1;
}
ResetPayphone(playerid)
{
	if (PlayerData[playerid][pPayphone] != -1)
	{
		Payphones[PlayerData[playerid][pPayphone]][phOccupied] = 0;
		UpdatePayphoneText(PlayerData[playerid][pPayphone]);
	}
	PlayerData[playerid][pPayphone] = -1;
}

HangupCall(playerid)
{
	if (PlayerData[playerid][pCalling] > 0)
	{
		for (new i = 0; i < MAX_PAYPHONES; i ++)
		{
			if (IsValidPayphoneID(i) && Payphones[i][phCaller] == playerid)
			{
				Payphones[i][phCaller] = INVALID_PLAYER_ID;

				UpdatePayphoneText(i);
			}
		}
		if (PlayerData[playerid][pCaller] != INVALID_PLAYER_ID)
		{
			SetPlayerCellphoneAction(PlayerData[playerid][pCaller], false);

			SendInfoMessage(PlayerData[playerid][pCaller], "The other line has ended the call.");
			PlayerPlaySound(PlayerData[playerid][pCaller], 20601, 0.0, 0.0, 0.0);

			if (PlayerData[PlayerData[playerid][pCaller]][pPayphone] != -1)
			{
				ResetPayphone(PlayerData[playerid][pCaller]);
				ShowActionBubble(PlayerData[playerid][pCaller], "* %s hangs up the payphone.", GetRPName(PlayerData[playerid][pCaller]));
			}
			else
			{
				ShowActionBubble(PlayerData[playerid][pCaller], "* %s hangs up the phone and puts it in their pocket.", GetRPName(PlayerData[playerid][pCaller]));
			}

			PlayerData[PlayerData[playerid][pCaller]][pCalling] = 0;
			PlayerData[PlayerData[playerid][pCaller]][pCaller] = INVALID_PLAYER_ID;
		}
		SetPlayerCellphoneAction(playerid, false);
		PlayerPlaySound(playerid, 20601, 0.0, 0.0, 0.0);

		PlayerData[playerid][pCalling] = 0;
		PlayerData[playerid][pCaller] = INVALID_PLAYER_ID;

		if (PlayerData[playerid][pPayphone] != -1)
		{
			ResetPayphone(playerid);
			ShowActionBubble(playerid, "* %s hangs up the payphone.", GetRPName(playerid));
		}
		else
		{
			ShowActionBubble(playerid, "* %s hangs up the phone and puts it in their pocket.", GetRPName(playerid));
		}
	}
}

SendTextMessage(playerid, number, const text[])
{
	foreach (new i : Player)
	{
		if (number != 0 && PlayerData[i][pPhone] == number)
		{
			if (PlayerData[i][pTogglePhone])
			{
				return SendErrorMessage(playerid, "That player's phone is turned off.");
			}
			else
			{
				SendClientMessageEx(i, COLOR_YELLOW, "* Text from %i: %s", PlayerData[playerid][pPhone], text);
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Text to %i: %s",  number, text);
				return 1;
			}
		}
	}
	return SendErrorMessage(playerid, "The specified number is not in service.");
}
CallPayphone(playerid, payphone)
{
	foreach (new i : Player)
	{
		if (IsPlayerNearPoint(i, 20.0, Payphones[payphone][phX], Payphones[payphone][phY], Payphones[payphone][phZ], Payphones[payphone][phInterior], Payphones[payphone][phWorld]))
		{
			SendClientMessage(i, COLOR_PURPLE, "* The payphone is ringing. (( /answer ))");
		}
	}

	Payphones[payphone][phCaller] = playerid;

	UpdatePayphoneText(payphone);
}

AssignPayphone(playerid, payphone)
{
	if (IsValidPayphoneID(payphone))
	{
		PlayerData[playerid][pPayphone] = payphone;

		Payphones[payphone][phOccupied] = true;
		Payphones[payphone][phCaller] = INVALID_PLAYER_ID;

		UpdatePayphoneText(payphone);
	}
}

UpdatePayphoneText(id)
{
	new
		string[64];

	if (!Payphones[id][phExists]) return 0;

	if (IsPlayerConnected(Payphones[id][phCaller])) {
		format(string, sizeof(string), "ID: %i\nNumber: %i\n{FF0000}Ringing (/answer)", id, Payphones[id][phNumber]);
	}
	else if (Payphones[id][phOccupied]) {
		format(string, sizeof(string), "ID: %i\nNumber: %i\n{FF5030}Occupied", id, Payphones[id][phNumber]);
	}
	else {
		format(string, sizeof(string), "ID: %i\nNumber: %i\n{00ff00}Available (/call)", id, Payphones[id][phNumber]);
	}

	UpdateDynamic3DTextLabelText(Payphones[id][phText], COLOR_GREY, string);
	return 1;
}

UpdatePayphone(id)
{
	if (!Payphones[id][phExists]) return 0;

	DestroyDynamicObject(Payphones[id][phObject]);
	DestroyDynamic3DTextLabel(Payphones[id][phText]);

	Payphones[id][phObject] = CreateDynamicObject(1216, Payphones[id][phX], Payphones[id][phY], Payphones[id][phZ], 0.0, 0.0, Payphones[id][phA], Payphones[id][phWorld], Payphones[id][phInterior]);
	Payphones[id][phText] = CreateDynamic3DTextLabel("Payphone", COLOR_GREY, Payphones[id][phX], Payphones[id][phY], Payphones[id][phZ] + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Payphones[id][phWorld], Payphones[id][phInterior]);

	UpdatePayphoneText(id);
	return 1;
}
CallNumber(playerid, number, payphone = -1)
{
	if (PlayerData[playerid][pCalling] > 0)
	{
		return SendErrorMessage(playerid, "You are already on a call.");
	}
	else if (PlayerData[playerid][pPhone] == number)
	{
		return SendErrorMessage(playerid, "You can't dial your own number.");
	}
	else
	{
		new targetid = GetPhonePlayerID(number);

		if (IsValidPayphoneID(payphone))
		{
			ShowActionBubble(playerid, "* %s inserts a coin and picks up the payphone.", GetRPName(playerid));
			AssignPayphone(playerid, payphone);
		}
		else
		{
			ShowActionBubble(playerid, "* %s takes out their phone and dials a number.", GetRPName(playerid));
		}

		if (IsPlayerConnected(targetid))
		{
			if (PlayerData[targetid][pTogglePhone])
			{
				return SendClientMessage(playerid, COLOR_GREY, "* The phone is switched off. The number would automatically forward to voicemail. *");
			}
			else if (PlayerData[targetid][pCalling] > 0)
			{
				return SendClientMessage(playerid, COLOR_GREY, "* The other line is currently busy. *");
			}
			else
			{
				PlayerData[playerid][pCalling] = 1;
				PlayerData[playerid][pCaller] = targetid;

				PlayerData[targetid][pCalling] = 1;
				PlayerData[targetid][pCaller] = playerid;

				if (IsValidPayphoneID(payphone))
				{
					SendInfoMessage(targetid, "Payphone (%i) is attempting to call you (use /answer to answer).", Payphones[payphone][phNumber]);
				}
				else
				{
					SendInfoMessage(targetid, "Number %i is attempting to call you (use /answer to answer).", PlayerData[playerid][pPhone]);
				}
				ShowActionBubble(targetid, "* %s's phone starts to ring.", GetRPName(targetid));
				HandlePhoneRing(targetid);
			}
		}
		else
		{
			new id = GetPhonePayphoneID(number);

			if (IsValidPayphoneID(id) && !Payphones[id][phOccupied])
			{
				CallPayphone(playerid, id);
			}
			else
			{
				SetTimerEx("OnPhoneResponse", 3000, false, "ii", playerid, number);
			}
			PlayerData[playerid][pCalling] = 1;
		}

		SetPlayerCellphoneAction(playerid, true);
		HandlePhoneDial(playerid);

		SendInfoMessage(playerid, "You have dialed number: %i. Please wait for a connection...", number);
		PlayerPlaySound(playerid, 16001, 0.0, 0.0, 0.0);
	}
	return 1;
}

ListContacts(playerid)
{
	if (PlayerData[playerid][pPhone] > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM `rp_contacts` WHERE Phone = %i", PlayerData[playerid][pPhone]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerListContacts", "i", playerid);
	}
}

OpenPhone(playerid)
{
	new strHead[128];
	if (PlayerData[playerid][pPhone] > 0)
	{
		format(strHead,sizeof(strHead),"{FFFFFF}Phone: %i",PlayerData[playerid][pPhone]);
		Dialog_Show(playerid, PhoneMenu, DIALOG_STYLE_LIST, strHead, "Call a number\nSend a message\nContact list\nMusic\nBank\nSettings", "Select", "Cancel");
	}
}
forward OnPlayerTextPlayer(playerid, text[]);
public OnPlayerTextPlayer(playerid, text[])
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	if (!rows)
	{
		return SendErrorMessage(playerid, "You don't have that name in your contacts");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);
		SendTextMessage(playerid, number, text);
	}
	return 1;
}

forward OnPlayerCallContact(playerid);
public OnPlayerCallContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return SendErrorMessage(playerid, "You don't have that name in your contacts");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);
		CallNumber(playerid, number);
	}
	return 1;
}//Dialog_Show(playerid, PhoneSMStext, DIALOG_STYLE_INPUT, strHead, "Please type your message:", "Send", "Cancel");

forward OnPlayerTextContact(playerid);
public OnPlayerTextContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];

	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return 0;
	}
	else
	{
		new
			number;

		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);

		PlayerData[playerid][pPhoneSMS] = number;

		new strHead[64];
		format(strHead, sizeof(strHead), "{FFFFFF}SMS to %i", number);

		Dialog_Show(playerid, PhoneSMStext, DIALOG_STYLE_INPUT, strHead, "Please type your message:", "Send", "Cancel");
	}
	return 1;
}

forward OnPlayerListContacts(playerid);
public OnPlayerListContacts(playerid)
{
	new
		contact[MAX_PLAYER_NAME],
		string[1024],
		number;

	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	strcat(string, "Add Contact");

	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "Contact", contact);
		number = cache_get_field_content_int(i, "Number");
		format(string, sizeof(string), "%s\n%s (%i)", string, contact, number);

		gListedItems[playerid][i] = cache_get_field_content_int(i, "ID");
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "{FFFFFF}My contacts", string, "Select", "Cancel");
}



stock SaveImpoundPoint(id)
{
	new string[1024];
	format(string, sizeof(string), "UPDATE `impoundpoints` SET \
		`PosX`=%f, \
		`PosY`=%f, \
		`PosZ`=%f, \
		`VW`=%d, \
		`Int`=%d WHERE `id`=%d",
		ImpoundPoints[id][impoundPosX],
		ImpoundPoints[id][impoundPosY],
		ImpoundPoints[id][impoundPosZ],
		ImpoundPoints[id][impoundVW],
		ImpoundPoints[id][impoundInt],
		id
	);

	mysql_tquery(connectionID, string);
}

stock SaveImpoundPoints()
{
	for(new i = 0; i < MAX_ImpoundPoints; i++)
	{
		SaveImpoundPoint(i);
	}
	return 1;
}

stock RehashImpoundPoint(id)
{
	DestroyDynamic3DTextLabel(ImpoundPoints[id][impoundTextID]);
	ImpoundPoints[id][impoundSQLId] = -1;
	ImpoundPoints[id][impoundPosX] = 0.0;
	ImpoundPoints[id][impoundPosY] = 0.0;
	ImpoundPoints[id][impoundPosZ] = 0.0;
	ImpoundPoints[id][impoundVW] = 0;
	ImpoundPoints[id][impoundInt] = 0;
	LoadImpoundPoint(id);
}

stock RehashImpoundPoints()
{
	printf("[RehashImpoundPoints] Deleting impound Points from server...");
	for(new i = 0; i < MAX_ImpoundPoints; i++)
	{
		RehashImpoundPoint(i);
	}
	LoadImpoundPoints();
}

stock LoadImpoundPoint(id)
{
	new string[128];
	format(string, sizeof(string), "SELECT * FROM `impoundpoints` WHERE `id`=%d", id);
	mysql_tquery(connectionID, string, "OnLoadImpoundPoints", "i", id);
}

stock LoadImpoundPoints()
{
	printf("[LoadImpoundPoints] Loading data from database...");
	mysql_tquery(connectionID, "SELECT * FROM `impoundpoints`", "OnLoadImpoundPoints", "");
}



forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}


forward GivePlayerCash(playerid, amount);
public GivePlayerCash(playerid, amount)
{
	if(PlayerData[playerid][pLogged])
	{
		PlayerData[playerid][pCash] = PlayerData[playerid][pCash] + amount;
		if(amount < 0)
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET money_spent = money_spent + %i WHERE uid = %i", -amount, PlayerData[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE uid = %i AND money_spent >= 500000", PlayerData[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer, "OnPlayerCheckMoney", "is", playerid, "I'm rich!");
		}
		else if(amount > 0)
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET money_earned = money_earned + %i WHERE uid = %i", amount, PlayerData[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE uid = %i AND money_earned >= 500000", PlayerData[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer, "OnPlayerCheckMoney", "is", playerid, "High roller");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cash = cash + %i WHERE uid = %i", amount, PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}



forward AddBanForPlayer(playerid, from[], reason[], permanent);
public AddBanForPlayer(playerid, from[], reason[], permanent)
{
	BanPlayer(playerid, from, reason, permanent);
}

forward IsPlayerLoggedIn(playerid);
public IsPlayerLoggedIn(playerid)
{
	return PlayerData[playerid][pLogged];
}

forward IsPlayerScripter(playerid);
public IsPlayerScripter(playerid)
{
	return PlayerData[playerid][pDeveloper];
}

forward IsPlayerFormerAdmin(playerid);
public IsPlayerFormerAdmin(playerid)
{
	return PlayerData[playerid][pFormerAdmin];
}

forward IsPlayerAdminLevel(playerid, level);
public IsPlayerAdminLevel(playerid, level)
{
	return PlayerData[playerid][pAdmin] >= level;
}

forward IsPlayerInFaction(playerid, type);
public IsPlayerInFaction(playerid, type)
{
	return GetFactionType(playerid) == type;
}

forward GetPlayerData(playerid, pEnum:var);
public GetPlayerData(playerid, pEnum:var)
{
	return PlayerData[playerid][var];
}

forward SetPlayerData(playerid, pEnum:var, amount);
public SetPlayerData(playerid, pEnum:var, amount)
{
	PlayerData[playerid][var] = amount;
}

forward GetPlayerUID(playerid);
public GetPlayerUID(playerid)
{
	return PlayerData[playerid][pID];
}

forward mysql_connection_handle(type);
public mysql_connection_handle(type)
{
	if(type == 0)
		return connectionID;
	else if(type == 1)
		return connectionID;

	return 0;
}

// ---------------------------------------



// ---------------------------------------

FriskPlayer(playerid, targetid)
{
	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s's Items _____", GetRPName(targetid));

	if(PlayerData[targetid][pCash] < 5000)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i", PlayerData[targetid][pCash]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Cash: $5000+");
	}

	if(PlayerData[targetid][pPhone])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Mobile phone");
	}
	if(PlayerData[targetid][pWalkieTalkie])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Walkie talkie");
	}
    if(PlayerData[targetid][pSpraycans])
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Spraycans (%i)", PlayerData[targetid][pSpraycans]);
	}
	if(PlayerData[targetid][pBoombox])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Boombox");
	}
	if(PlayerData[targetid][pMP3Player])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "MP3 player");
	}
	if(PlayerData[targetid][pPhonebook])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Phonebook");
	}
	if(PlayerData[targetid][pPoliceScanner])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Police scanner");
	}
	if(PlayerData[targetid][pMaterials] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Materials (%i)", PlayerData[targetid][pMaterials]);
	}
	if(PlayerData[targetid][pFirstAid] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "First aid (%i)", PlayerData[targetid][pFirstAid]);
	}
	if(PlayerData[targetid][pBodykits] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Bodywork kits (%i)", PlayerData[targetid][pBodykits]);
	}
	if(PlayerData[targetid][pRimkits] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Rimkits (%i)", PlayerData[targetid][pRimkits]);
	}
    if(PlayerData[targetid][pWeed])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Weed (%ig)", PlayerData[targetid][pWeed]);
	}
	if(PlayerData[targetid][pCocaine])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Cocaine (%ig)", PlayerData[targetid][pCocaine]);
	}
	if(PlayerData[targetid][pMeth])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Meth (%ig)", PlayerData[targetid][pMeth]);
	}
	if(PlayerData[targetid][pPainkillers])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Painkillers (%i)", PlayerData[targetid][pPainkillers]);
	}
	if(PlayerData[targetid][pSeeds])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Marijuana seeds (%i)", PlayerData[targetid][pSeeds]);
	}
	if(PlayerData[targetid][pEphedrine])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Raw ephedrine (%i)", PlayerData[targetid][pEphedrine]);
	}
	switch(PlayerData[targetid][pSmuggleDrugs])
	{
	    case 1: SendClientMessageEx(playerid, COLOR_RED, "Seeds package");
	    case 2: SendClientMessageEx(playerid, COLOR_RED, "Cocaine package");
	    case 3: SendClientMessageEx(playerid, COLOR_RED, "Raw ephedrine package");
	}

	for(new i = 0; i < 13; i ++)
	{
	    if(PlayerData[targetid][pWeapons][i] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_RED, "%s", GetWeaponNameEx(PlayerData[targetid][pWeapons][i]));
		}
	}

    ShowActionBubble(playerid, "* %s searches for illegal items on %s.", GetRPName(playerid), GetRPName(targetid));
}
DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;
	new string[3000];
	new string2[3000];
	new string3[3000];
	new string4[3000];
	new string5[3000];
	new statstr[3000];
    new name[24], gender[8], insurance[24], Float:health, Float:armor;
    new job[32], secondjob[32];

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, PlayerData[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(PlayerData[playerid][pGender] == 1) gender = "Male";
	else if(PlayerData[playerid][pGender] == 2) gender = "Female";

	switch(PlayerData[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    case HOSPITAL_VIPLOUNGE: insurance = "Donator Lounge";
	    default: insurance = "None";
	}

	/*switch(PlayerData[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}*/

	if(playerid == MAX_PLAYERS)
	{
	    health = PlayerData[playerid][pHealth];
	    armor = PlayerData[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}

	if(PlayerData[playerid][pJob] != JOB_NONE)
	{
	    format(job, sizeof(job), "%s (%i)", GetJobName(PlayerData[playerid][pJob]), GetJobLevel(playerid, PlayerData[playerid][pJob]));
	}
	else
	{
	    job = "None";
	}

	if(PlayerData[playerid][pSecondJob] != JOB_NONE)
	{
	    format(secondjob, sizeof(secondjob), "%s (%i)", GetJobName(PlayerData[playerid][pSecondJob]), GetJobLevel(playerid, PlayerData[playerid][pSecondJob]));
	}
	else
	{
	    secondjob = "None";
	}
	new totalwealth = PlayerData[playerid][pCash] + PlayerData[playerid][pBank];

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && PlayerData[playerid][pID] == HouseInfo[i][hOwnerID])
        {
            totalwealth += HouseInfo[i][hCash];
		}
	}

 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && PlayerData[playerid][pID] == BusinessInfo[i][bOwnerID])
        {
            totalwealth += BusinessInfo[i][bCash];
		}
	}

	new phone[10];
	if(PlayerData[playerid][pPhone] == 0)
	{
		phone = "None";
	}
	else {
		valstr(phone,PlayerData[playerid][pPhone]);
	}

	new channel[10];
	if(PlayerData[playerid][pChannel] == 0)
	{
		channel = "None";
	}
	else {
		valstr(channel,PlayerData[playerid][pChannel]);
	}

	//SendClientMessageEx(targetid, COLOR_DARKGREEN, "___________________________________________________________________________________");
   // format(string, sizeof(string), "{03A9F4}________________________ %s [%s] ________________________", name, GetDateStats());
	//SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Level: {F7A763}%i\n{ffffff}Gender: {F7A763}%s\n{ffffff}Age: {F7A763}%i\n{FFFFFF}Experience: {F7A763}%s/%s\n{ffffff}Hours: {F7A763}%s\n{ffffff}Phone: {F7A763}%s\n{ffffff}Channel:{F7A763} %s\n\n",
	PlayerData[playerid][pLevel], gender, PlayerData[playerid][pAge], FormatNumber(PlayerData[playerid][pEXP], 0), FormatNumber((PlayerData[playerid][pLevel] * 4), 0), FormatNumber(PlayerData[playerid][pHours], 0), phone, channel);
   // SendClientMessage(targetid, COLOR_WHITE, string);

	format(string2, sizeof(string2), "{ffffff}Cash: {F7A763}%s\n{ffffff}Bank:{F7A763} %s\n{FFFFFF}Total Wealth: {F7A763}%s\n\n",
	FormatNumber(PlayerData[playerid][pCash]), FormatNumber(PlayerData[playerid][pBank]), FormatNumber(totalwealth));
    //SendClientMessage(targetid, COLOR_WHITE, string);

	format(string3, sizeof(string3), "{FFFFFF}Job: {F7A763}%s\n{FFFFFF}Second Job: {F7A763}%s\n{FFFFFF}Crimes Commited: {F7A763}%s\n{FFFFFF}Times Arrested:{F7A763} %s\n{FFFFFF}Wanted Level:{F7A763} %i\n{FFFFFF}Insurance: {F7A763}%s\n\n",
	job, secondjob, FormatNumber(PlayerData[playerid][pCrimes], 0), FormatNumber(PlayerData[playerid][pArrested], 0), PlayerData[playerid][pWantedLevel], insurance);
   // SendClientMessage(targetid, COLOR_WHITE, string);

    format(string4, sizeof(string4), "{FFFFFF}Donator: {F7A763}%s {FFFFFF}\nDouble XP: {F7A763}%i\n{FFFFFF}Tokens: {F7A763}%s\n{FFFFFF}Paycheck: {F7A763}%s\n{FFFFFF}Playtime: {F7A763}%i/60 min\n\n",
	(GetVIPRankEx(PlayerData[playerid][pDonator] == 1)) ? ("{A020F0}Yes") : ("No"), PlayerData[playerid][pDoubleXP], FormatNumber(PlayerData[playerid][pCookies], 0), FormatNumber(PlayerData[playerid][pPaycheck]), PlayerData[playerid][pMinutes]);
    //SendClientMessage(targetid, COLOR_WHITE, string);

    format(string5, sizeof(string5), "{FFFFFF}Weapon Restriction: {F7A763}%i hours\n{FFFFFF}Married To:{F7A763} %s\n{FFFFFF}DJ Rank: {F7A763}%d",
	PlayerData[playerid][pWeaponRestricted], PlayerData[playerid][pMarriedName], PlayerData[playerid][pDJ]);
   // SendClientMessage(targetid, COLOR_WHITE, string);

	strcat(statstr, string);
	strcat(statstr, string2);
	strcat(statstr, string3);
	strcat(statstr, string4);
	strcat(statstr, string5);

	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{d3d3d3}My statistics", statstr, "Close", "");


	if(PlayerData[targetid][pAdmin] > 0)
	{
	    format(string, sizeof(string), "Interior: %i - Virtual: %i - FPS: %i - AFK: %s - Reports: %s - Help Requests: %s - Newbie Replies: %s",
		(playerid == MAX_PLAYERS) ? (PlayerData[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (PlayerData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? (0) : (PlayerData[playerid][pFPS]), (playerid == MAX_PLAYERS) ? ("No") : ((PlayerData[playerid][pAFK]) ? ("Yes") : ("No")), FormatNumber(PlayerData[playerid][pReports], 0), FormatNumber(PlayerData[playerid][pHelpRequests], 0), FormatNumber(PlayerData[playerid][pNewbies], 0));
       // SendClientMessage(targetid, COLOR_LIGHTRED, string);
	}

   // SendClientMessageEx(targetid, COLOR_DARKGREEN, "{FFFFFF}___________________________________________________________________________________");

}

DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
    new string[800];
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	//SendClientMessageEx(targetid, COLOR_DARKGREEN, "{FFFFFF}___________________________________________________________________________________");

	format(string, sizeof(string), "{03A9F4}________________________ %s [%s] ________________________", GetPlayerNameEx(playerid), GetDateStats());
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Weed: %i/%ig - Cocaine: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i - Seeds: %i/%i", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED),
        PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE), PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH), PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS), PlayerData[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{03A9F4}Materials: %s/%s - Ephedrine: %i/%ig - Muriatic acid: %i/10 - Baking soda: %i/3", FormatNumber(PlayerData[playerid][pMaterials], 0), FormatNumber(GetPlayerCapacity(playerid, CAPACITY_MATERIALS), 0),
		PlayerData[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE), PlayerData[playerid][pMuriaticAcid], PlayerData[playerid][pBakingSoda]);
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Fishing rod: %s - Fish bait: %i/20 - Boombox: %s - MP3 player: %s - Phonebook: %s", (PlayerData[playerid][pFishingRod]) ? ("Yes") : ("No"), PlayerData[playerid][pFishingBait], (PlayerData[playerid][pBoombox]) ? ("Yes") : ("No"), (PlayerData[playerid][pMP3Player]) ? ("Yes") : ("No"), (PlayerData[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{03A9F4}Drivers license: %s - Components: %s - Cigars: %s - Spraycans: %i/20 - Bombs: %i/3", (PlayerData[playerid][pCarLicense]) ? ("Yes") : ("No"), FormatNumber(PlayerData[playerid][pComponents], 0), FormatNumber(PlayerData[playerid][pCigars], 0), PlayerData[playerid][pSpraycans], PlayerData[playerid][pBombs]);
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Walkie talkie: %s - Mobile phone: %s - First aid kits: %i/20 - Police scanner: %s", (PlayerData[playerid][pWalkieTalkie]) ? ("Yes") : ("No"), (PlayerData[playerid][pPhone]) ? ("Yes") : ("No"), PlayerData[playerid][pFirstAid], (PlayerData[playerid][pPoliceScanner]) ? ("Yes") : ("No"));
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{03A9F4}Gasoline: %i/20L | Bodykits: %i/10 | Rimkits: %i/5 | Rope: %i/10 | Watch: %s | GPS: %s", PlayerData[playerid][pGasCan], PlayerData[playerid][pBodykits], PlayerData[playerid][pRimkits], PlayerData[playerid][pRope], (PlayerData[playerid][pWatch]) ? ("Yes") : ("No"), (PlayerData[playerid][pGPS]) ? ("Yes") : ("No"));
	SendClientMessageEx(targetid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Diamond: %s | Oil: %i/%iL | Skates: %s | Crowbar: %i/5", FormatNumber(PlayerData[playerid][pDiamonds], 0), PlayerData[playerid][pOil],  GetPlayerCapacity(playerid, CAPACITY_OIL), (PlayerData[playerid][pSkates]) ? ("Yes") : ("No"), PlayerData[playerid][pCrowbar]);
	SendClientMessageEx(targetid, COLOR_WHITE, string);
	return 1;
}

stock LoginTDControl( playerid, bool:show ) {

    if( show == true ) {

		LoginTD[ playerid ][0]  = CreatePlayerTextDraw(playerid, 0.000, -1.000, "LOADSC13:loadsc13");
		PlayerTextDrawTextSize(playerid, LoginTD[ playerid ][0] , 642.000, 449.000);
		PlayerTextDrawAlignment(playerid, LoginTD[ playerid ][0] , 1);
		PlayerTextDrawColor(playerid, LoginTD[ playerid ][0] , 1768516095);
		PlayerTextDrawSetShadow(playerid, LoginTD[ playerid ][0] , 0);
		PlayerTextDrawSetOutline(playerid, LoginTD[ playerid ][0] , 0);
		PlayerTextDrawBackgroundColor(playerid, LoginTD[ playerid ][0] , 255);
		PlayerTextDrawFont(playerid, LoginTD[ playerid ][0] , 4);
		PlayerTextDrawSetProportional(playerid, LoginTD[ playerid ][0] , 1);

       	for( new i = 0; i < 1; i ++) {
			PlayerTextDrawShow( playerid, LoginTD[ playerid ][ i ] );
		}
    }
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[4096];

	switch(dialogid)
	{

		case DIALOG_NEWUPGRADE:
	    {
			format(string, sizeof(string), "Name\tLevel\n\
			    Inventory\t{ffff00}Currently Skill Level %i/5\n\
				Addict\t{ffff00}Currently Skill Level is %i/3\n\
				Trader\t{ffff00}Currently Skill Level %i/4\n\
				Asset\t{ffff00}Currently Skill Level %i/4\n\
				Labor\t{ffff00}Currently Skill Level %i/5\n\
				Spawn Health\t{ffff00}Currently Spawn Health is %.1f/100\n\
				Spawn Armor\t{ffff00}Currently Spawn Armour is %.1f/100\n",
				PlayerData[playerid][pInventoryUpgrade],
				PlayerData[playerid][pAddictUpgrade],
				PlayerData[playerid][pTraderUpgrade],
				PlayerData[playerid][pAssetUpgrade],
				PlayerData[playerid][pLaborUpgrade],
				PlayerData[playerid][pSpawnHealth],
				PlayerData[playerid][pSpawnArmor]);
			Dialog_Show(playerid, DIALOG_NEWUPGRADEONE, DIALOG_STYLE_TABLIST_HEADERS, "Upgrade List", string, "Upgrade", "Close");
		}

	    case DIALOG_SETTINGS2:
	    {
			format(string, sizeof(string), "Info\tStatus\n" \
				"PM\t%s\n" \
		        "Donator\t%s\n" \
		        "Faction\t%s\n" \
		        "Gang\t%s\n" \
		        "Spawn Camera\t%s\n" \
		        "HUD\t%s\n" \
				"Vehicle Camera\t%s\n" \
		        "<< Back",
		        (PlayerData[playerid][pTogglePM]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleVIP]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleFaction]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleGang]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleCam]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleHUD]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
				(PlayerData[playerid][pToggleVehCam] == 1) ? ("{ff0000}Off") : ("{00FF00}On"));
			Dialog_Show(playerid, DIALOG_SETTINGS2, DIALOG_STYLE_TABLIST_HEADERS, "{F7A763}Settings", string, "Tog", "Close");

	    }

		case DIALOG_SETTINGS:
		{
			format(string, sizeof(string), "Info\tStatus\n" \
				"Textdraws\t%s\n" \
		        "OOC\t%s\n" \
		        "Global\t%s\n" \
		        "Phone\t%s\n" \
		        "Whisper\t%s\n" \
		        "Newbie\t%s\n" \
		        "WalkieTalkie\t%s\n" \
		        "Radio\t%s\n" \
		        "Streams\t%s\n" \
		        "News\t%s\n" \
		        "Next >>",
		        (PlayerData[playerid][pToggleTextdraws]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleOOC]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleGlobal]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pTogglePhone]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleWhisper]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleNewbie]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleWT]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleRadio]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleMusic]== 1) ? ("{ff0000}Off") : ("{00FF00}On"),
		        (PlayerData[playerid][pToggleNews]== 1) ? ("{ff0000}Off") : ("{00FF00}On"));
			Dialog_Show(playerid, DIALOG_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, "{F7A763}Settings", string, "Tog", "Close");
		}
		case DIALOG_POST_APPLICATION:
		{
	 		format(string, sizeof(string), "Name:\n\
											Date of Birth:\n\
											Are you male or female:\n\
											Where are you from:\n\
											Where do you currently live:\n\
											Experience((150 words)):\n\
											Why do you want to join((150 words)):\n");
			Dialog_Show(playerid, DIALOG_POST_APPLICATION, DIALOG_STYLE_LIST, "PD Application ((IC))", string, "Submit", "Cancel");
		}
	    case DIALOG_STATS:
	    {
	        Dialog_Show(playerid, DIALOG_STATS, DIALOG_STYLE_LIST, "{F7A763}My statistics", "Stats\nAssets\nInventory\nJob Skill\nUpgrades\nAchievements\nFaction\nSkills\nOffenses", "Select", "Cancel");
		}
 	    case DIALOG_ADNEW:
	    {
	        format(string, sizeof(string), "Input the advertisement you want to place");
	        Dialog_Show(playerid, DIALOG_ADNEW, DIALOG_STYLE_INPUT, "Advertisement", string, "Okay", "Cancel");
		}
		case DIALOG_FOOD:
		{
			format(string, sizeof(string), "Sprunk ($50)\nCigar($35)\nHot Dog($25)\nRope ($20)\nChocolate($15)");
			Dialog_Show(playerid, DIALOG_FOOD, DIALOG_STYLE_LIST, "Select an item", string, "Buy", "Cancel");
		}
		case DIALOG_SKILL:
		{
		    new jobstring1[64], jobstring2[64], jobstring4[64], jobstring5[64],
		    jobstring6[64], jobstring7[64], jobstring8[64];
		    if(GetJobLevel(playerid, JOB_COURIER) < 5)
		    {
		        if(PlayerData[playerid][pCourierSkill] < 50) {
		        	format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 50 - PlayerData[playerid][pCourierSkill]);
		        } else if(PlayerData[playerid][pCourierSkill] < 100) {
		        	format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 100 - PlayerData[playerid][pCourierSkill]);
		        } else if(PlayerData[playerid][pCourierSkill] < 200) {
		        	format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 200 - PlayerData[playerid][pCourierSkill]);
	            } else if(PlayerData[playerid][pCourierSkill] < 350) {
		        	format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 350 - PlayerData[playerid][pCourierSkill]);
				}
			}
			else
			{
				format(jobstring1, sizeof(jobstring1), "You have reached the maximum skill level for this job.");
			}

		    if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
		    {
		        if(PlayerData[playerid][pFishingSkill] < 50) {
		        	format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 50 - PlayerData[playerid][pFishingSkill]);
		        } else if(PlayerData[playerid][pFishingSkill] < 100) {
		        	format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 100 - PlayerData[playerid][pFishingSkill]);
		        } else if(PlayerData[playerid][pFishingSkill] < 200) {
		        	format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 200 - PlayerData[playerid][pFishingSkill]);
	            } else if(PlayerData[playerid][pFishingSkill] < 350) {
		        	format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 350 - PlayerData[playerid][pFishingSkill]);
				}
			}
			else
			{
				format(jobstring2, sizeof(jobstring2), "You have reached the maximum skill level for this job.");
			}

		    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5)
		    {
		        if(PlayerData[playerid][pWeaponSkill] < 50) {
		        	format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 50 - PlayerData[playerid][pWeaponSkill]);
		        } else if(PlayerData[playerid][pWeaponSkill] < 100) {
		        	format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 100 - PlayerData[playerid][pWeaponSkill]);
		        } else if(PlayerData[playerid][pWeaponSkill] < 200) {
		        	format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 200 - PlayerData[playerid][pWeaponSkill]);
	            } else if(PlayerData[playerid][pWeaponSkill] < 500) {
		        	format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 500 - PlayerData[playerid][pWeaponSkill]);
				}
			}
			else
			{
				format(jobstring4, sizeof(jobstring4), "You have reached the maximum skill level for this job.");
			}

		    if(GetJobLevel(playerid, JOB_MECHANIC) < 5)
		    {
		        if(PlayerData[playerid][pMechanicSkill] < 25) {
		        	format(jobstring5, sizeof(jobstring5), "Fix & Refuel %i more vehicles to level up.", 25 - PlayerData[playerid][pMechanicSkill]);
		        } else if(PlayerData[playerid][pMechanicSkill] < 50) {
		        	format(jobstring5, sizeof(jobstring5), "Fix & Refuel %i more vehicles to level up.", 50 - PlayerData[playerid][pMechanicSkill]);
		        } else if(PlayerData[playerid][pMechanicSkill] < 100) {
		        	format(jobstring5, sizeof(jobstring5), "Fix & Refuel %i more vehicles to level up.", 100 - PlayerData[playerid][pMechanicSkill]);
	            } else if(PlayerData[playerid][pMechanicSkill] < 200) {
		        	format(jobstring5, sizeof(jobstring5), "Fix & Refuel %i more vehicles to level up.", 200 - PlayerData[playerid][pMechanicSkill]);
				}
			}
			else
			{
				format(jobstring5, sizeof(jobstring5), "You have reached the maximum skill level for this job.");
			}

		    if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
		    {
		        if(PlayerData[playerid][pSmugglerSkill] < 25) {
		        	format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 25 - PlayerData[playerid][pSmugglerSkill]);
		        } else if(PlayerData[playerid][pSmugglerSkill] < 50) {
		        	format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 50 - PlayerData[playerid][pSmugglerSkill]);
		        } else if(PlayerData[playerid][pSmugglerSkill] < 75) {
		        	format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 75 - PlayerData[playerid][pSmugglerSkill]);
	            } else if(PlayerData[playerid][pSmugglerSkill] < 100) {
		        	format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 100 - PlayerData[playerid][pSmugglerSkill]);
				}
			}
			else
			{
				format(jobstring6, sizeof(jobstring6), "You have reached the maximum skill level for this job.");
			}

		    if(GetJobLevel(playerid, JOB_LAWYER) < 5)
		    {
		        if(PlayerData[playerid][pLawyerSkill] < 25) {
		        	format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 25 - PlayerData[playerid][pLawyerSkill]);
		        } else if(PlayerData[playerid][pLawyerSkill] < 50) {
		        	format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 50 - PlayerData[playerid][pLawyerSkill]);
		        } else if(PlayerData[playerid][pLawyerSkill] < 100) {
		        	format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 100 - PlayerData[playerid][pLawyerSkill]);
	            } else if(PlayerData[playerid][pLawyerSkill] < 200) {
		        	format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 200 - PlayerData[playerid][pLawyerSkill]);
				}
			}
			else
			{
				format(jobstring7, sizeof(jobstring7), "You have reached the maximum skill level for this job.");
			}


		    if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
		    {
		        if(PlayerData[playerid][pDetectiveSkill] < 50) {
		        	format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 50 - PlayerData[playerid][pDetectiveSkill]);
		        } else if(PlayerData[playerid][pDetectiveSkill] < 100) {
		        	format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 100 - PlayerData[playerid][pDetectiveSkill]);
		        } else if(PlayerData[playerid][pDetectiveSkill] < 200) {
		        	format(jobstring8, sizeof(jobstring8), "You need to find %i more people to level up.", 200 - PlayerData[playerid][pDetectiveSkill]);
	            } else if(PlayerData[playerid][pDetectiveSkill] < 400) {
		        	format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 400 - PlayerData[playerid][pDetectiveSkill]);
				}
			}
			else
			{
				format(jobstring8, sizeof(jobstring8), "You have reached the maximum skill level for this job.");
		 	}

			format(string, sizeof(string), "Job Courier\t{ffff00}Level: %d\t%s\n" \
			                                "Job Lawyer\t{ffff00}Level: %d\t%s\n" \
			                                "Job Detective\t{ffff00}Level: %d\t%s\n" \
											"Job Fisherman\t{ffff00}Level: %d\t%s\n" \
											"Job Weapon Dealer\t{ffff00}Level: %d\t%s\n" \
											"Job Drug Dealer\t{ffff00}Level: %d\t%s\n" \
											"Job Mechanic\t{ffff00}Level: %d\t%s\n" \
											"Job Trucker\t{ffff00}Level: %d\tCurrently XP: %d",
		                                    GetJobLevel(playerid, JOB_COURIER), jobstring1,
		                                    GetJobLevel(playerid, JOB_LAWYER), jobstring7,
		                                    GetJobLevel(playerid, JOB_DETECTIVE), jobstring8,
		                                    GetJobLevel(playerid, JOB_FISHERMAN), jobstring2,
		                                    GetJobLevel(playerid, JOB_WEAPONDEALER), jobstring4,
		                                    GetJobLevel(playerid, JOB_DRUGDEALER), jobstring6,
		                                    GetJobLevel(playerid, JOB_MECHANIC), jobstring5,
											PlayerData[playerid][pTruckingLevel], PlayerData[playerid][pTruckingXP]);
			Dialog_Show(playerid, DIALOG_SKILL, DIALOG_STYLE_TABLIST, "{F7A763}My job skills", string, "Close", "");
		}
	    case DIALOG_BUYVEHICLENEW:
	    {
	        Dialog_Show(playerid, DIALOG_BUYVEHICLENEW, DIALOG_STYLE_LIST, "Vehicle Menu", "Browse as Model\nBrowse as List", "Select", "");
		}
		case DIALOG_NEWBIE:
		{
			Dialog_Show(playerid, DIALOG_NEWBIE, DIALOG_STYLE_INPUT, "Ask Newbie Question", "Please input your question\nPlease bare in mind only script/server related questions will be answered.", "Send", "Cancel");
		}
	    case ACCOUNT_CREATION:
	    {
	        new genderstring[12];
	        switch(PlayerData[playerid][pGender])
			{
				case 1: genderstring = "Male";
				case 2: genderstring = "Female";
				default: genderstring = "Unspecified";
			}
	        format(string, sizeof(string), "Name:\t%s\n\
				Gender:\t%s\n\
				Age:\t%d\n\
				Accent:\t%s\n\
				Skin:\t%d\n\
				Finished",
				GetPlayerNameEx(playerid),
				genderstring,
				PlayerData[playerid][pAge],
				PlayerData[playerid][pAccent],
				PlayerData[playerid][pSkin]);
			Dialog_Show(playerid, ACCOUNT_CREATION, DIALOG_STYLE_TABLIST, "Character Registration", string, "Select", "");


		}
		case DIALOG_REGISTER:
		{
        	Dialog_Show(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "{afafaf}Account Registration", "{afafaf}Welcome to {F7A763}Prospect Roleplay\n\n{afafaf}Enter your password of choice below to register:", "Register", "");

		}
		case DIALOG_LOGIN:
		{
     		Dialog_Show(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "{afafaf}Login", "{afafaf}Welcome to {F7A763}Prospect Roleplay.\n\n{afafaf}Enter your account password below to login:", "Login", "");
			SendClientMessage(playerid, COLOR_SERVERDEF, "[P:RP]{ffffff} You have 60 seconds to login otherwise you will be kicked from the server.");
		}
		case DIALOG_GENDER:
		{
		    Dialog_Show(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Please choose your character's gender.", "Male\nFemale", "Select", "");
		}
		case DIALOG_AGE:
		{
	   		Dialog_Show(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Please enter your character's age.", "Please input the age of your character below (10-99):", "Submit", "Back");
		}
		case DIALOG_REFERRAL:
		{
		    Dialog_Show(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "Have you been referred here by anyone?", "Please enter the name of the player who referred you here:\n(You can click on 'Skip' if you haven't been referred by anyone.)", "Submit", "Skip");
		}


		case DIALOG_ATM:
		{
		    format(string, sizeof(string), "What would you like to do today? (Your account balance is %s.)", FormatNumber(PlayerData[playerid][pBank]));
	        Dialog_Show(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, string, "Cash deposit\nCash withdraw", "Select", "Cancel");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to deposit? (Your account balance is %s.)", FormatNumber(PlayerData[playerid][pBank]));
	        Dialog_Show(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, "ATM Deposit", string, "Select", "Cancel");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is %s.)", FormatNumber(PlayerData[playerid][pBank]));
	        Dialog_Show(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, "ATM Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    Dialog_Show(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            PlayerData[playerid][pClothingIndex] = index;
            Dialog_Show(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s's %s [%i products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(PlayerData[playerid][pDonator] > 0) {
					Dialog_Show(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes are free for Donators.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.com/wiki/Skins:All ))", "Submit", "Cancel");
				} else {
					Dialog_Show(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes costs $2,000.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.com/wiki/Skins:All ))", "Submit", "Cancel");
				}
			}
		}
        case DIALOG_BUYVEHICLE:
		{
		    string = "Category\tVehicle\tPrice";

			for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t%s\t{00AA00}%s{FFFFFF}", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}
			ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
		}
/*		case DIALOG_BUYBOAT:
		{
		    string = "Vehicle\tPrice";

		    for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(!strcmp(vehicleArray[i][carCategory], "Boats"))
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t{00AA00}%s{FFFFFF}", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}

			ShowPlayerDialog(playerid, DIALOG_BUYBOAT, DIALOG_STYLE_TABLIST_HEADERS, "Boat Dealership", string, "Buy", "Cancel");
		}
		case DIALOG_BUYAIRCRAFT:
		{
		    string = "Vehicle\tPrice";

		    for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t{00AA00}%s{FFFFFF}", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}

			ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Aircraft Dealership", string, "Buy", "Cancel");
		}*/
 		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[PlayerData[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}%s{FFFFFF}", string, i, FactionRanks[PlayerData[playerid][pFactionEdit]][i], FormatNumber(FactionInfo[PlayerData[playerid][pFactionEdit]][fPaycheck][i]));
			}
			new header[128];
			format(header, sizeof(header), "%s - {FFD700}$%i available/$%i budget", FactionInfo[PlayerData[playerid][pFactionEdit]][fName], FormatNumber(FactionInfo[PlayerData[playerid][pFactionEdit]][fBudget] - GetTotalFactionPay(PlayerData[playerid][pFactionEdit])), FormatNumber(FactionInfo[PlayerData[playerid][pFactionEdit]][fBudget]));
			Dialog_Show(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Change", "Cancel");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (PlayerData[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    Dialog_Show(playerid, DIALOG_LANDBUILDTYPE, DIALOG_STYLE_LIST, "Choose your browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
  		case DIALOG_LANDBUILD1:
		{
		    for(new i = 0; i < sizeof(landCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, landCategories[i]);
		    }

		    Dialog_Show(playerid, DIALOG_LANDBUILD1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Back");
		}
		case DIALOG_LANDBUILD2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(landArray); i ++)
            {
                if(!strcmp(landArray[i][fCategory], landCategories[PlayerData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, landArray[i][fName], FormatNumber(landArray[i][fPrice]));
                }
            }

            PlayerData[playerid][pFurnitureIndex] = index;
            Dialog_Show(playerid, DIALOG_LANDBUILD2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_LANDMENU:
		{
		    new
		        landid = GetNearbyLand(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_MAINMENU, playerid);
		}
		case DIALOG_LANDOBJECTMENU:
		{
	        if(IsGateObject(PlayerData[playerid][pSelected]))
	        {
		        Dialog_Show(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Choose how you want to edit this object.", "Edit object\nEdit gate destination\nDuplicate object\nSell object", "Select", "Back");
	        }
			else
			{
                Dialog_Show(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Choose how you want to edit this object.", "Edit object\nDuplicate object\nSell object", "Select", "Back");
	        }
		}
		case DIALOG_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid >= 0 && HasLandPerms(playerid, landid))
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i ORDER BY id DESC LIMIT %i, %i", LandInfo[landid][lID], (PlayerData[playerid][pPage] - 1) * MAX_LISTED_OBJECTS, MAX_LISTED_OBJECTS);
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_LANDOBJECTS, playerid);
			}
		}
		case DIALOG_MP3PLAYER:
		{
 	 		 Dialog_Show(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nUploaded Music\nRadio Stations\nStop Music\nDonator Music", "Select", "Cancel");
  		}
		case DIALOG_MP3RADIO:
		{
		    Dialog_Show(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Browse Genres\nSearch by Name", "Select", "Back");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    Dialog_Show(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Choose a genre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], PlayerData[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			Dialog_Show(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Choose a subgenre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(PlayerData[playerid][pSearch])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, %i", PlayerData[playerid][pGenre], PlayerData[playerid][pGenre], (PlayerData[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(connectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
			else
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE genre = '%e' AND subgenre = '%e' ORDER BY name LIMIT %i, %i", PlayerData[playerid][pGenre], PlayerData[playerid][pSubgenre], (PlayerData[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(connectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    Dialog_Show(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Search by Name", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}
		/*case DIALOG_MP3APISEARCH:
		{
		    Dialog_Show(playerid, DIALOG_MP3APISEARCH, DIALOG_STYLE_INPUT, "Search by Name", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}*/
		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Weapons\nKevlar Vest\nDrugs\nClothes\nCrafting\nMaterials (%d/%d)\nCash ($%d/$%d)", GangInfo[PlayerData[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS), GangInfo[PlayerData[playerid][pGang]][gCash], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH));
		    Dialog_Show(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, "Gang Stash", string, "Select", "Cancel");
		}
		case DIALOG_GANGSTASHVEST:
		{
		    format(string, sizeof(string), "Withdraw (R%i+)\nChange Rank", GangInfo[PlayerData[playerid][pGang]][gVestRank]);
			Dialog_Show(playerid, DIALOG_GANGSTASHVEST, DIALOG_STYLE_LIST, "Gang stash | Kevlar Vest (Costs 200 materials.)", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    new gangstring[1260];
		    gangstring = "Amount\tName\tRank\t";
		    format(gangstring, sizeof(gangstring), "%s\n\
				[%i]\t 9mm\t (R%i+)\n\
				[%i]\t Sdpistol\t (R%i+)\n\
				[%i]\t Deagle\t (R%i+)\n\
				[%i]\t Shotgun\t (R%i+)\n\
				[%i]\t Tec-9\t (R%i+)\n\
				[%i]\t Micro Uzi\t (R%i+)\n\
				[%i]\t MP5\t (R%i+)\n\
				[%i]\t AK-47\t (R%i+)\n\
				[%i]\t Rifle\t (R%i+)",
				gangstring,
		        GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_9MM],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SDPISTOL],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_DEAGLE],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SHOTGUN],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_TEC9],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_UZI],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_MP5],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_AK47],
				GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_RIFLE]);

		    Dialog_Show(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_TABLIST_HEADERS, "Gang stash | Weapons", gangstring, "Select", "Back");
		}

		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Weed (%i/%ig)\nCocaine (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[PlayerData[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerData[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerData[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_METH), GangInfo[PlayerData[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    Dialog_Show(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang stash | Drugs", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerData[playerid][pSelected] == ITEM_WEED) {
		        Dialog_Show(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Weed", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerData[playerid][pSelected] == ITEM_COCAINE) {
			    Dialog_Show(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Cocaine", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerData[playerid][pSelected] == ITEM_METH) {
		        Dialog_Show(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Meth", "Withdraw\nDeposit", "Select", "Back");
			} else if(PlayerData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    Dialog_Show(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Painkillers", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHCRAFT:
		{
		    format(string, sizeof(string), "Gang stash | Crafting (Your safe has %i materials.)", GangInfo[PlayerData[playerid][pGang]][gMaterials]);
		    Dialog_Show(playerid, DIALOG_GANGSTASHCRAFT, DIALOG_STYLE_TABLIST_HEADERS, string, "#\tWeapon\tCost\n1\t9mm\t100 materials\n2\tSdpistol\t150 materials\n3\tShotgun\t200 materials\n4\tMicro SMG\t500 materials\n5\tTec-9\t500 materials\n6\tMP5\t1000 materials\n7\tRifle\t1000 materials\n8\tDesert Eagle\t2000 materials\n9\tAK-47\t3000 materials", "Craft", "Back");
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Withdraw (%i/%i)\nDeposit", GangInfo[PlayerData[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			Dialog_Show(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Gang stash | Materials", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Withdraw ($%i/$%i)\nDeposit", GangInfo[PlayerData[playerid][pGang]][gCash], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH));
  			Dialog_Show(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang stash | Cash", string, "Select", "Back");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much weed would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much cocaine would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerData[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to withdraw? (The safe contains %i/%i.)", GangInfo[PlayerData[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to withdraw? (The safe contains $%i/$%i.)", GangInfo[PlayerData[playerid][pGang]][gCash], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH));
			}
			Dialog_Show(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang stash | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much weed would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much cocaine would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[PlayerData[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerData[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to deposit? (The safe contains %i/%i.)", GangInfo[PlayerData[playerid][pGang]][gMaterials], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(PlayerData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to deposit? (The safe contains $%i/$%i.)", GangInfo[PlayerData[playerid][pGang]][gCash], GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH));
		    }
			Dialog_Show(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang stash | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSPRICES:
		{

			format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials",
   			GangInfo[PlayerData[playerid][pGang]][gArmsPrices][0], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][1], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][2], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][3], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][4], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][5], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][6], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][7], GangInfo[PlayerData[playerid][pGang]][gArmsPrices][8]);
			Dialog_Show(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a weapon price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    Dialog_Show(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Arms dealer", "Buy Guns\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Gang arms dealer (Materials available: %i.)", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials",
		        GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][0], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][1], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][2], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][3], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][4], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][5], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][6], GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][8]);
			Dialog_Show(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Back");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Arms dealer (Materials available: %i.)", GangInfo[PlayerData[playerid][pGang]][gArmsMaterials]);
			Dialog_Show(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit mats\nWithdraw mats", "Select", "Back");
		}
		case GangStashDepositMats:
		{
			format(string, sizeof(string), "How much materials would you like to deposit? (This arms dealer contains %i materials.)", GangInfo[PlayerData[playerid][pGang]][gArmsMaterials]);
			Dialog_Show(playerid, GangStashDepositMats, DIALOG_STYLE_INPUT, "Arms dealer | Deposit", string, "Submit", "Back");
		}
		case GangStashWithdrawMats:
		{
			format(string, sizeof(string), "How much materials would you like to withdraw? (This arms dealer contains %i materials.)", GangInfo[PlayerData[playerid][pGang]][gArmsMaterials]);
			Dialog_Show(playerid, GangStashWithdrawMats, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}

		case DIALOG_CRACKTRUNK:
		{
		    if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vWeed]/20 > 0) format(string, sizeof(string), "%s\nWeed (%ig)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vWeed]/20);
            if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vCocaine]/20 > 0) format(string, sizeof(string), "%s\nCocaine (%ig)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vCocaine]/20);
            if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vMeth]/20 > 0) format(string, sizeof(string), "%s\nMeth (%ig)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vMeth]/20);
            if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vPainkillers]/20 > 0) format(string, sizeof(string), "%s\nPainkillers (%ig)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vPainkillers]/20);
            if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vMaterials]/20 > 0) format(string, sizeof(string), "%s\nMaterials (%i)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vMaterials]/20);
            if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vCash]/20 > 0) format(string, sizeof(string), "%s\nCash ($%i)", string, VehicleInfo[PlayerData[playerid][pCocaineFrom]][vCash]/20);

            for(new x = 0; x < 5; x ++)
			{
			    if(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vWeapons][x] != 0)
        		{
        		    format(string, sizeof(string), "%s\n%s", string, GetWeaponNameEx(VehicleInfo[PlayerData[playerid][pCocaineFrom]][vWeapons][x]));
                }
            }

            Dialog_Show(playerid, DIALOG_CRACKTRUNK, DIALOG_STYLE_LIST, "Choose ONE item to take from the trunk.", string, "Take", "Cancel");
		}
		case DIALOG_RULES:
		{
		    Dialog_Show(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "List of Server Rules", "No third-party modifications such as cheats\nNo exploiting\nNo non-RP advertisements\nNo death-match\nNo spawn-killing\nNo revenge-killing\nNo non-RP car raming.\nNo heli-blading\nNo meta-gaming\nNo money farming\nNo lying to administrators\nRobbery Policy\nScamming Policy\nList of all rules may be available at www.prospectrp.net", "Close", "");
		}
		case DIALOG_LOCATE:
		{
		    Dialog_Show(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "GPS - Select Destination", "Job Locations\nNearest Businesses\nGeneral Locations\nFind Turfs\nFind Points\nMore Locations\nMy Houses\nMy Businesses", "Select", "Close");
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
			new lockerid = GetNearbyLocker(playerid);
	 		string = "Weapon\tPrice\n";
            if(LockerInfo[lockerid][locKevlar][0]) { format(string, sizeof(string), "%sKevlar Vest\t$%i\n", string, LockerInfo[lockerid][locKevlar][1]); }
            if(LockerInfo[lockerid][locMedKit][0]) { format(string, sizeof(string), "%sMedkit\t$%i\n", string, LockerInfo[lockerid][locMedKit][1]); }
            if(LockerInfo[lockerid][locNitestick][0]) { format(string, sizeof(string), "%sNitestick\t$%i\n", string, LockerInfo[lockerid][locNitestick][1]); }
            if(LockerInfo[lockerid][locMace][0]) { format(string, sizeof(string), "%sMace\t$%i\n", string, LockerInfo[lockerid][locMace][1]); }
            if(LockerInfo[lockerid][locDeagle][0]) { format(string, sizeof(string), "%sDeagle\t$%i\n", string, LockerInfo[lockerid][locDeagle][1]); }
            if(LockerInfo[lockerid][locShotgun][0]) { format(string, sizeof(string), "%sShotgun\t$%i\n", string, LockerInfo[lockerid][locShotgun][1]); }
            if(LockerInfo[lockerid][locMP5][0]) { format(string, sizeof(string), "%sMP5\t$%i\n", string, LockerInfo[lockerid][locMP5][1]); }
            if(LockerInfo[lockerid][locM4][0]) { format(string, sizeof(string), "%sM4\t$%i\n", string, LockerInfo[lockerid][locM4][1]); }
            if(LockerInfo[lockerid][locSpas12][0]) { format(string, sizeof(string), "%sSPAS-12\t$%i\n", string, LockerInfo[lockerid][locSpas12][1]); }
            if(LockerInfo[lockerid][locSniper][0]) { format(string, sizeof(string), "%sSniper\t$%i\n", string, LockerInfo[lockerid][locSniper][1]); }
            if(LockerInfo[lockerid][locCamera][0]) { format(string, sizeof(string), "%sCamera\t$%i\n", string, LockerInfo[lockerid][locCamera][1]); }
            if(LockerInfo[lockerid][locFireExt][0]) { format(string, sizeof(string), "%sFire Extinguisher\t$%i\n", string, LockerInfo[lockerid][locFireExt][1]); }
            if(LockerInfo[lockerid][locPainKillers][0]) { format(string, sizeof(string), "%sPainkillers\t$%i\n", string, LockerInfo[lockerid][locPainKillers][1]); }
			Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Locker", string, "Select", "Cancel");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	Dialog_Show(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Question", "What should the question be? (displayed globally)", "Submit", "Back");
			}
			if(CreateQuiz == 1)
			{
			    Dialog_Show(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Answer", "What should the answer be? (displayed once answered)", "Submit", "Back");
			}
		}
		case DIALOG_DELETEOBJECT:
		{
			format(string, sizeof(string), "Object %i selected\n{FFFFFF}Would you really like to {FF0000}delete{FFFFFF} it?", PlayerData[playerid][pSelected]);
  			Dialog_Show(playerid, DIALOG_DELETEOBJECT, DIALOG_STYLE_MSGBOX, "Delete Mode - Dynamic Object Selected", string, "Yes", "No");
		}
		case DIALOG_PAINTBALL:
		{
		    string =  "Name\tType\tCurrent Players\n";
		    format(string, sizeof(string), "%sDeathmatch Arena\tFFA\t%i\n", string, GetArenaPlayers(1));
		    format(string, sizeof(string), "%sTeam Deathmatch Arena\tTDM\t%i\n", string, GetArenaPlayers(2));
		    format(string, sizeof(string), "%sDeagle Arena\t1Shot\t%i\n", string, GetArenaPlayers(3));
		    format(string, sizeof(string), "%sSniper Arena\t1Shot\t%i\n", string, GetArenaPlayers(4));
		    Dialog_Show(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball", string, "Select", "Cancel");
		}
		case DIALOG_ADDSTATION:
		{
		    Dialog_Show(playerid, DIALOG_ADDSTATION, DIALOG_STYLE_INPUT, "Radio Station Manager", "Enter the link of the station you'd like to add", "Add", "Cancel");
		}
	}

	return 1;
}


GetArenaPlayers(arena)
{
	new players;
	foreach(new i : Player)
	{
	    if(PlayerData[i][pPaintball] == arena)
	    {
	        players++;
	    }
	}
	return players;
}
SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pSkin], 820.5590, -1342.6283, 13.5216, 90.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_NONE, PLAYER_STATE_WASTED:
		    {
			    SpawnPlayer(playerid);
			}
			default:
			{
			    OnPlayerSpawn(playerid);
			}
      	}
	}

	PlayerData[playerid][pACTime] = gettime() + 2;
}

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(PlayerData[playerid][pLogged] && !PlayerData[playerid][pAdminDuty] && !PlayerData[playerid][pUndercover][0])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !PlayerData[playerid][pJoinedEvent] && PlayerData[playerid][pPaintball] == 0 && !PlayerData[playerid][pAcceptedHelp] && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID && PlayerData[playerid][pPreviewHouse] == -1)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, PlayerData[playerid][pCameraX], PlayerData[playerid][pCameraY], PlayerData[playerid][pCameraZ]);
			GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			if(!PlayerData[playerid][pHHCheck])
			{
		        GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
		        GetPlayerArmour(playerid, PlayerData[playerid][pArmor]);
			}

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, upgradepoints = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i WHERE uid = %i", PlayerData[playerid][pCameraX], PlayerData[playerid][pCameraY],
			PlayerData[playerid][pCameraZ], PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ], PlayerData[playerid][pPosA], PlayerData[playerid][pInterior], PlayerData[playerid][pWorld], PlayerData[playerid][pHealth], PlayerData[playerid][pArmor], PlayerData[playerid][pMinutes], PlayerData[playerid][pWarnings], PlayerData[playerid][pInjured], PlayerData[playerid][pHospital], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pSpawnHealth],
			PlayerData[playerid][pSpawnArmor], PlayerData[playerid][pJailType], PlayerData[playerid][pJailTime], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, cookies = %i, toggletextdraws = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i WHERE uid = %i", PlayerData[playerid][pNewbieMuted], PlayerData[playerid][pHelpMuted], PlayerData[playerid][pAdMuted],
			PlayerData[playerid][pLiveMuted], PlayerData[playerid][pGlobalMuted], PlayerData[playerid][pReportMuted], PlayerData[playerid][pReportWarns], PlayerData[playerid][pFightStyle], PlayerData[playerid][pCookies], PlayerData[playerid][pToggleTextdraws], PlayerData[playerid][pToggleOOC], PlayerData[playerid][pTogglePhone], PlayerData[playerid][pToggleAdmin], PlayerData[playerid][pToggleHelper], PlayerData[playerid][pToggleNewbie], PlayerData[playerid][pToggleWT],
			PlayerData[playerid][pToggleVIP], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET toggleradio = %i,\
		togglepoint = %i, toggleturfs = %i, togglepm = %i, togglemusic = %i, togglefaction = %i, togglenews = %i,\
	    toggleglobal = %i, togglecam = %i, togglehud = %i, weedtime = %i, weedgrams = %i, showturfs = %i, showlands = %i, \
		watchon = %i, gpson = %i, couriercooldown = %i, pizzacooldown = %i, detectivecooldown = %i, thiefcooldown = %i, \
		crackcooldown = %i, duty = %i, bandana = %i WHERE uid = %i", PlayerData[playerid][pToggleRadio],
			PlayerData[playerid][pTogglePoints], PlayerData[playerid][pToggleTurfs], PlayerData[playerid][pToggleMusic], PlayerData[playerid][pTogglePM], PlayerData[playerid][pToggleFaction],
			PlayerData[playerid][pToggleNews], PlayerData[playerid][pToggleGlobal], PlayerData[playerid][pToggleCam], PlayerData[playerid][pToggleHUD], PlayerData[playerid][pWeedTime],
			PlayerData[playerid][pWeedGrams], PlayerData[playerid][pShowTurfs], PlayerData[playerid][pShowLands], PlayerData[playerid][pWatchOn], PlayerData[playerid][pGPSOn],
			PlayerData[playerid][pCourierCooldown], PlayerData[playerid][pPizzaCooldown],
			PlayerData[playerid][pDetectiveCooldown], PlayerData[playerid][pThiefCooldown], PlayerData[playerid][pCocaineCooldown], PlayerData[playerid][pDuty], PlayerData[playerid][pBandana], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET togglereports = %i, togglewhisper = %i, togglebug = %i, newbiemutetime = %i, reportmutetime = %i, globalmutetime = %i, adminhide = %i, totalpatients = %i, totalfires = %i, scanneron = %i, rarecooldown = %i WHERE uid = %i",
		    PlayerData[playerid][pToggleReports], PlayerData[playerid][pToggleWhisper], PlayerData[playerid][pToggleBug], PlayerData[playerid][pNewbieMuteTime], PlayerData[playerid][pReportMuteTime], PlayerData[playerid][pGlobalMuteTime], PlayerData[playerid][pAdminHide], PlayerData[playerid][pTotalPatients], PlayerData[playerid][pTotalFires], PlayerData[playerid][pScannerOn], PlayerData[playerid][pRareTime], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %d, cocaine = %d, meth = %d, materials = %d, rope = %d, spraycans = %d WHERE uid = %i",
			PlayerData[playerid][pWeed], PlayerData[playerid][pCocaine], PlayerData[playerid][pMeth], PlayerData[playerid][pMaterials], PlayerData[playerid][pRope], PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET togglevehicle = %d WHERE uid = %d", PlayerData[playerid][pToggleVehCam], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gunlicense = %d, housealarm = %i where uid = %d", PlayerData[playerid][pGunLicense], PlayerData[playerid][pHouseAlarm], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET chatstyle = %i WHERE uid = %i", PlayerData[playerid][pChatstyle], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spawntype = %i, spawnhouse = %i WHERE uid = %i", PlayerData[playerid][pSpawnSelect], PlayerData[playerid][pSpawnHouse], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
}

SavePlayerWeapons(playerid)
{
	if(PlayerData[playerid][pLogged] && !PlayerData[playerid][pJoinedEvent] && PlayerData[playerid][pPaintball] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET \
																					`weapon_0` = %i, \
																					`weapon_1` = %i, \
																					`weapon_2` = %i, \
																					`weapon_3` = %i, \
																					`weapon_4` = %i, \
																					`weapon_5` = %i, \
																					`weapon_6` = %i, \
																					`weapon_7` = %i, \
																					`weapon_8` = %i, \
																					`weapon_9` = %i, \
																					`weapon_10` = %i, \
																					`weapon_11` = %i, \
																					`weapon_12` = %i \
																					WHERE `uid` = %i",
	        																		PlayerData[playerid][pWeapons][0],
																					PlayerData[playerid][pWeapons][1],
																					PlayerData[playerid][pWeapons][2],
																					PlayerData[playerid][pWeapons][3],
																					PlayerData[playerid][pWeapons][4],
																					PlayerData[playerid][pWeapons][5],
																					PlayerData[playerid][pWeapons][6],
																					PlayerData[playerid][pWeapons][7],
																					PlayerData[playerid][pWeapons][8],
																					PlayerData[playerid][pWeapons][9],
																					PlayerData[playerid][pWeapons][10],
																					PlayerData[playerid][pWeapons][11],
																					PlayerData[playerid][pWeapons][12],
																					PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ammo_0 = %i, ammo_1 = %i, ammo_2 = %i, ammo_3 = %i, ammo_4 = %i, ammo_5 = %i, ammo_6 = %i, ammo_7 = %i, ammo_8 = %i, ammo_9 = %i, ammo_10 = %i, ammo_11 = %i, ammo_12 = %i WHERE uid = %i",
			PlayerData[playerid][pAmmo][0], PlayerData[playerid][pAmmo][1], PlayerData[playerid][pAmmo][2], PlayerData[playerid][pAmmo][3], PlayerData[playerid][pAmmo][4], PlayerData[playerid][pAmmo][5], PlayerData[playerid][pAmmo][6], PlayerData[playerid][pAmmo][7], PlayerData[playerid][pAmmo][8], PlayerData[playerid][pAmmo][9], PlayerData[playerid][pAmmo][10], PlayerData[playerid][pAmmo][11], PlayerData[playerid][pGunsAmmo][12], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

SendPaycheck(playerid)
{
    // Paycheck amounts are temporary until a job system is put in place.

	PlayerData[playerid][pPaycheck] += min(PlayerData[playerid][pLevel], 21) * 250;
	new str[2000], coordsstring[286];
    new paycheck = PlayerData[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 100) * gTax; // gTax = tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

    // If the player is a Donator, adjust his interest rate accordingly.
   	if(PlayerData[playerid][pDonator] == 0)
	{
		rate = 1;
	}
	if(PlayerData[playerid][pDonator] == 1)
	{
		rate = 3;
	}
	if(PlayerData[playerid][pDonator] == 2)
	{
		rate = 6;
	}
	if(PlayerData[playerid][pDonator] == 3)
	{
		rate = 8;
	}

	//Calculate the interest due.
	interest = (PlayerData[playerid][pBank] / 1000) * rate;

	//If the calculated interest is above $25000, then we need to shut that shit down and set the interest to $25,000 to avoid the previous exploit.
	if(interest > 25000)
	{
	    interest = 25000;
	}

	total += interest;

 	if(PlayerData[playerid][pRentingHouse])
	{
		foreach(new i : House)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == PlayerData[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}

    format(coordsstring, sizeof(coordsstring), "_____________ Paycheck _______________\n");
	strcat(str, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Paycheck: {33CC33}+%s\n", FormatNumber(paycheck));
	strcat(str, coordsstring);
	if(PlayerData[playerid][pFaction] >= 0 && FactionInfo[PlayerData[playerid][pFaction]][fPaycheck][PlayerData[playerid][pFactionRank]] > 0)
	{
	    format(coordsstring, sizeof(coordsstring), "Faction Pay: {33CC33}+%s\n", FormatNumber(FactionInfo[PlayerData[playerid][pFaction]][fPaycheck][PlayerData[playerid][pFactionRank]]));
	    total += FactionInfo[PlayerData[playerid][pFaction]][fPaycheck][PlayerData[playerid][pFactionRank]];
		strcat(str, coordsstring);
	}

	format(coordsstring, sizeof(coordsstring), "Interest: {33CC33}+%s {C8C8C8}(rate: %.1f) (max: $25,000)\n", FormatNumber(interest), floatdiv(float(rate), 10));
	strcat(str, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Income Tax: {FF6347}-%s {C8C8C8}(%i percent)\n", FormatNumber(tax), gTax);
	strcat(str, coordsstring);
	if(renting != -1)
	{
		if(total >= rent || PlayerData[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	PlayerData[playerid][pBank] -= rent;
			}

			format(coordsstring, sizeof(coordsstring), "Rent Paid: {FF6347}-%s\n", FormatNumber(rent));
			strcat(str, coordsstring);
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}
	switch(PlayerData[playerid][pDonator])
	{
		case 1:
		{
			format(coordsstring, sizeof(coordsstring), "Donator Bonus: $1,500\n");
			total+= 1500;
		}
		case 2:
		{
		   format(coordsstring, sizeof(coordsstring), "Donator Bonus: $2,000\n");
		   total+= 2000;
		}
		case 3:
		{
		   format(coordsstring, sizeof(coordsstring), "Donator Bonus: $2,500\n");
		   total+= 2500;
		}
	}
	strcat(str, coordsstring);
	format(coordsstring, sizeof(coordsstring), "Old Balance: %s\n", FormatNumber(PlayerData[playerid][pBank]));
	strcat(str, coordsstring);
	format(coordsstring, sizeof(coordsstring), "______________________________________\n");
	strcat(str, coordsstring);
	format(coordsstring, sizeof(coordsstring), "New Balance: %s", FormatNumber(PlayerData[playerid][pBank] + total));
	strcat(str, coordsstring);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have played %i/25 minutes this hour and earned your paycheck.", PlayerData[playerid][pMinutes]);
	ShowPlayerFooter(playerid, "~y~Payday~n~~w~Paycheck");
	Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Paycheck", str, "Okay", "");
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rentinghouse = 0 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerData[playerid][pRentingHouse] = 0;
	    SendClientMessage(playerid, COLOR_RED, "You couldn't afford to pay rent and were evicted as a result.");
	}
    AddToTaxVault(-total);
	AddToTaxVault(tax);

	if((gDoubleXP) || PlayerData[playerid][pDoubleXP] > 0)
		PlayerData[playerid][pEXP] += 2;
	else
	    PlayerData[playerid][pEXP]++;

	if(PlayerData[playerid][pGang] >= 0)
	{
	    GiveGangPoints(PlayerData[playerid][pGang], 1);
	}

	callcmd::levelup(playerid);
    PlayerData[playerid][pHours]++;
  	PlayerData[playerid][pCookies] += 3;
  	SendClientMessageEx(playerid, COLOR_AQUA, "You've received {00aa00}'3 Tokens'{33CCFF} for playing 1 hour.");
    PlayerData[playerid][pBank] += total;
    PlayerData[playerid][pMinutes] = 0;
    PlayerData[playerid][pPaycheck] = 0;

    // reward player (ToiletDuck)
    if(gHReward)
    {

		switch(PlayerData[playerid][pHours])
		{
		    case 2:
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "You may now possess/use weapons!");
			    SendClientMessageEx(playerid, COLOR_GLOBAL, " You have reached 2 Playing hours (/rewards) to check all the Playing hours rewards!");

			}
		    case 8:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 10 First aid Kit and 1 Rim Kit for spending 8 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        PlayerData[playerid][pFirstAid] += 10;
		        PlayerData[playerid][pRimkits] += 1;
		    }
		    case 25:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 15 Tokens for spending 25 Hours of Time in Playing ");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");

				PlayerData[playerid][pCookies] += 15; //rewardplay
		    }
		    case 48:
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 5 Upgrade Points and 1 Exp Token for spending 48 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        PlayerData[playerid][pUpgradePoints] += 5;
				PlayerData[playerid][pEXP] += 1;
			}
		    case 60:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 50g Narcotic Drugs and 50,000 Materials for spending 60 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
				PlayerData[playerid][pWeed] += 50;
				PlayerData[playerid][pCocaine] += 50;
				PlayerData[playerid][pMaterials] += 50000;

		    }
		    case 85:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive $100,000 of Cash and 2 Exp Token for spending 85 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        GivePlayerCash(playerid, 100000);
				PlayerData[playerid][pEXP] += 2;
		    }
		    case 100:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 20 Tokens for spending 100 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");

				PlayerData[playerid][pCookies] += 20;
		    }
		    case 120:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 7 Days Emerald VIP for spending 120 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
				if(PlayerData[playerid][pDonator] < 2)
				{
					new days;
					PlayerData[playerid][pDonator] = 2;
					PlayerData[playerid][pVIPTime] = gettime() + (days * 86400);
					PlayerData[playerid][pVIPCooldown] = 0;
				}
		    }
		    case 180:
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 1 Car for spending 180 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Server', NOW(), 'Reward Vehicle.')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		    case 260:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 2 Exp Tokens, 2 Rim Kits, 15 First aid Kit for spending 260 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        PlayerData[playerid][pEXP] += 2;
		        PlayerData[playerid][pFirstAid] += 15;
		        PlayerData[playerid][pRimkits] += 2;
		    }
		    case 300:
		    {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, "* "#SERVER_NAME" Automate Playing Hours Reward *");
		        SendClientMessageEx(playerid, COLOR_GLOBAL, " You receive 7 Days Emerald VIP Voucher, 1 Car Voucher, 1 Rim Kit, 3 Exp Tokens for spending 300 Hours of Time in Playing");
		        SendClientMessageEx(playerid, COLOR_YELLOW, "_______________________________________________________________________");
		        PlayerData[playerid][pEXP] += 3;
				if(PlayerData[playerid][pDonator] < 2)
				{
					new days;
					PlayerData[playerid][pDonator] = 2;
					PlayerData[playerid][pVIPTime] = gettime() + (days * 86400);
					PlayerData[playerid][pVIPCooldown] = 0;
				}
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Server', NOW(), 'Reward Vehicle.')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
		        PlayerData[playerid][pRimkits] += 3;
		    }
		}
	}
	if(PlayerData[playerid][pWeaponRestricted] > 0)
	{
		PlayerData[playerid][pWeaponRestricted]--;
	}
	if((!gDoubleXP) && PlayerData[playerid][pDoubleXP] > 0)
	{
	    PlayerData[playerid][pDoubleXP]--;

	    if(PlayerData[playerid][pDoubleXP] > 0)
	        SendClientMessageEx(playerid, COLOR_YELLOW, "Your double XP token expires in %i more hours.", PlayerData[playerid][pDoubleXP]);
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "Your double XP token has expired.");
	}

	if(PlayerData[playerid][pHours] >= 20)
	{
		AwardAchievement(playerid, "Regular");
	}
	if(PlayerData[playerid][pHours] >= 40)
	{
	    AwardAchievement(playerid, "Addicted");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", PlayerData[playerid][pEXP], PlayerData[playerid][pBank], PlayerData[playerid][pWeaponRestricted], PlayerData[playerid][pDoubleXP], PlayerData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    gTotalHours++;
    SaveServerInfo();

}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}
SaveMysqlInformation()
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `server_info` SET \
	`totalconnections` = %i, `tax` = %i, `govvault` = %i", gConnections, gTax, gVault);
	mysql_tquery(connectionID, queryBuffer, "OnSaveMysqlInfo");
}
func OnSaveMysqlInfo()
{
	if(cache_affected_rows(connectionID) > 0)
	{
	 //   printf("saved");
	}
	else
	{
	  //  printf("fucks");
	}
	return 1;
}
SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);
	SaveMysqlInformation();
    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i|%i|%i|", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, gDoubleXP, RobberyInfo[rTime], adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gacooldown, gNewsVault);
        fwrite(file, string);
        fclose(file);
	}
}
LoadObjects()
{
	CreateDynamicObject(3055, 2071.46143, -1831.12000, 13.68281,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1843.35388, -1855.81506, 13.09352,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 1025.12244, -1029.34338, 32.27671,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 719.81921, -462.47787, 16.34370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -99.94527, 1111.47241, 16.62420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -99.94527, 1111.47241, 21.64419,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1420.79822, 2591.23022, 52.79280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1420.79822, 2591.23022, 57.77278,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -2425.93945, 1028.25513, 47.49768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -2425.93945, 1028.25513, 52.47769,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1904.72595, 277.80399, 38.01996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, -1904.72595, 277.80399, 43.01995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 1968.21545, 2162.34033, 11.35032,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3055, 2386.81738, 1043.47742, 10.54739,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 488.70782, -1735.24133, 11.63138,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(3055, 2004.66003, 2303.51660, 10.82031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3055, 2004.66003, 2317.93896, 10.82031,   0.00000, 0.00000, 0.00000);

	// Gym objects
	CreateDynamicObject(2916, 772.496765, 5.770771, 999.879760, 0.000000, 0.000000, -90.000000);
	CreateDynamicObject(2916, 772.527404, 5.051626, 999.879760, 0.000000, 0.000000, -90.000000);

    //==========================Salon Plovila By Johnson===========================//
	new sbokolo[9];
	new sbstaklo[24];
	new sbplafon[4];
	new sbpod[4];
	new sbstubovi[18];
	new sbdrzac[3];
	//GYM
	CreateDynamicObject(1311, 2234.80591, -1734.44592, 16.55470,   0.00000, 0.00000, 89.70003);
	CreateDynamicObject(1560, 2262.45874, -1710.80872, 13.44523,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1560, 2238.39355, -1710.87537, 13.44523,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1560, 2249.69751, -1710.73682, 13.62974,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(18980, 2227.12012, -1710.91528, 11.97258,   90.00000, 0.00000, -6.68000);
	CreateDynamicObject(18980, 2228.07983, -1702.70776, 12.19232,   90.90000, 0.00000, -6.68000);
	CreateDynamicObject(640, 2270.47046, -1701.81262, 13.16422,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(620, 2274.99634, -1693.75964, 8.07813,   3.14159, -0.08727, -3.14159);
	CreateDynamicObject(640, 2293.64429, -1705.15649, 13.16420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 2293.63232, -1710.15540, 13.16420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 2293.62646, -1715.36169, 13.16420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 2293.61279, -1720.55542, 13.16420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1281, 2290.22485, -1696.52087, 13.40500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2280.51660, -1697.39929, 13.44040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 2291.66577, -1708.94873, 13.12050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 2282.25293, -1722.07422, 13.12053,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 2270.13159, -1708.50342, 13.10659,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 2270.17236, -1706.76196, 13.10659,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1257, 2255.68335, -1724.50037, 13.63165,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1258, 2271.26782, -1704.66125, 13.12366,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1341, 2279.57788, -1717.26489, 13.40303,   0.00000, 0.00000, 86.70000);
	CreateDynamicObject(1342, 2275.20459, -1716.78992, 13.45892,   0.00000, 0.00000, 88.01999);
	CreateDynamicObject(6289, 2279.55273, -1710.78235, 14.96920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 2287.52808, -1708.92053, 13.12050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 2287.42505, -1722.04907, 13.12053,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1340, 2277.78809, -1717.18982, 13.61429,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1257, 2245.17261, -1739.39966, 13.63160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1340, 2251.34326, -1739.82019, 13.61429,   0.00000, 0.00000, 110.82001);
	CreateDynamicObject(1498, 2232.22388, -1687.38440, 13.01590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17978, 2259.26343, -1672.23450, 13.30904,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2253.66406, -1687.38428, 12.67169,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2269.76758, -1687.39819, 12.67169,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2276.74634, -1701.16296, 12.67169,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 2245.42139, -1702.63989, 12.21404,   -1.00000, 0.00000, 0.00000);
	CreateDynamicObject(6977, 2249.68774, -1700.23352, 12.20542,   0.00000, 0.00000, 90.00001);
	CreateDynamicObject(4690, 2262.21240, -1704.14026, -135.28027,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3569, 2233.92, -1742.31, 11.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(3569, 2251.60, -1742.39, 11.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(3569, 2269.27, -1742.46, 11.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(3569, 2286.95, -1742.54, 11.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(3569, 2295.97, -1742.60, 10.99,   0.00, 0.00, 90.00);
	CreateDynamicObject(1237, 2305.11, -1744.45, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2306.20, -1744.19, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2306.08, -1742.88, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2305.99, -1740.38, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2304.50, -1740.09, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2224.41, -1740.42, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2224.57, -1741.33, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2224.05, -1743.15, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, 2224.67, -1744.21, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1282, 2223.88, -1742.16, 13.15,   0.00, 0.00, -25.00);
	CreateDynamicObject(1435, 2305.26, -1741.01, 12.55,   0.00, 0.00, 100.00);
	CreateDynamicObject(1435, 2305.37, -1742.55, 12.55,   0.00, 0.00, 70.00);
	CreateDynamicObject(1237, 2235.53, -1745.31, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1435, 2234.14, -1745.28, 12.65,   0.00, 0.00, 135.00);
	CreateDynamicObject(6959, 2248.902099, -1704.515380, 12.627983, 0.199999, 0.000000, -6.000000);
	//TERESA 
    /*CreateDynamicObject(19381,825.4628900,-1745.2266800,12.4772000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,825.4628900,-1754.8403300,12.4644000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,835.9489100,-1754.8403300,12.4644000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,825.4628900,-1735.5954600,12.4772000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,825.4771700,-1725.9744900,12.4772000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,846.4418900,-1754.8403300,12.4644000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19449,829.5120800,-1745.2312000,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19449,829.5120800,-1735.6003400,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19449,829.5120800,-1725.9779100,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14409,831.4857200,-1747.0854500,12.8303000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19449,832.7500000,-1745.2312000,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,834.2056900,-1745.2301000,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19459,840.8800000,-1745.1993400,14.2832000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,835.9447000,-1750.0479700,13.8059000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19387,839.2069100,-1749.9672900,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19459,838.1243900,-1743.2334000,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19378,838.5792200,-1745.2366900,12.4645000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19449,847.2169800,-1749.9674100,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,851.9610000,-1745.2354700,14.2832000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19449,851.9610000,-1735.6186500,14.2832000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19449,851.9650300,-1731.4870600,14.2832000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19449,847.2068500,-1726.7650100,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19454,847.2199100,-1747.6717500,15.9479000,0.0000000,90.0000000,90.0000000); //
CreateDynamicObject(19454,837.5958300,-1747.6717500,15.9479000,0.0000000,90.0000000,90.0000000); //
CreateDynamicObject(19430,833.4810800,-1749.9672900,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,841.6054100,-1749.9672900,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19454,834.2476800,-1743.5063500,15.9479000,0.0000000,90.0000000,90.0000000); //
CreateDynamicObject(19379,834.6804800,-1736.9493400,15.9479000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,834.6804800,-1727.3245800,15.9479000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,846.7999900,-1731.5391800,15.9479000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,846.7860100,-1741.1110800,15.9479000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19454,837.5958300,-1751.1615000,15.9479000,0.0000000,90.0000000,90.0000000); //
CreateDynamicObject(19454,847.2199100,-1751.1615000,15.9479000,0.0000000,90.0000000,90.0000000); //
CreateDynamicObject(19379,837.9177200,-1741.1110800,15.9500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,837.9177200,-1731.4940200,15.9500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(13188,843.3855000,-1750.0279500,13.8431000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(13188,848.8322800,-1750.0279500,13.8431000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,832.7500000,-1741.1221900,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,829.5120800,-1740.1723600,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,829.5120800,-1736.9683800,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,829.5120800,-1733.7845500,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,829.5120800,-1730.5804400,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,829.5120800,-1727.3785400,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19387,831.0564600,-1741.7269300,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,847.2067900,-1726.7650100,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,834.2562900,-1726.7650100,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,840.5968000,-1726.7594000,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,834.2694700,-1736.3913600,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,851.9650300,-1727.4913300,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,851.9650300,-1729.8951400,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,851.9650300,-1733.1024200,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,833.4710100,-1745.8508300,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,851.9650300,-1736.3127400,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,851.9650300,-1741.1098600,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,851.9650300,-1744.3172600,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,851.2509800,-1745.8508300,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,851.9650300,-1738.7066700,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3361,835.6163900,-1727.8024900,17.4379000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,831.1774900,-1728.8228800,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,834.3654800,-1728.8228800,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,837.5748300,-1728.8228800,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,835.9168100,-1745.9311500,18.1988000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(1649,839.2058100,-1745.9311500,18.1988000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(1649,848.8078000,-1745.9311500,18.1988000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(1649,845.5438200,-1745.9311500,18.1988000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19387,842.3670000,-1745.8508300,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19387,842.4907200,-1730.9720500,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19449,847.2271100,-1735.6879900,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,842.4907200,-1727.7659900,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,842.4907200,-1734.1684600,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,829.4995100,-1743.5562700,16.5742000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,852.0047000,-1747.6800500,16.5742000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,832.8250100,-1751.1407500,16.5742000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,852.0047000,-1751.1407500,16.5742000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,832.8250100,-1747.6800500,16.5742000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,829.5120800,-1727.3785400,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19449,834.2562900,-1726.7650100,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,847.2067900,-1726.7650100,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19449,840.5968000,-1726.7594000,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19380,838.5792200,-1745.2366900,15.9035000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(3850,848.4545900,-1752.8900100,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,844.9921300,-1752.8900100,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,841.5324100,-1752.8900100,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,838.0766000,-1752.8900100,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,834.6270100,-1752.8900100,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,850.1870100,-1752.8890400,16.5742000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19403,842.3670000,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19403,829.5120800,-1730.5804400,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,829.5120800,-1733.7845500,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(615,859.3391100,-1732.6046100,12.2109000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(19357,851.9650300,-1728.3112800,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,851.9650300,-1731.5120800,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,851.9650300,-1745.1142600,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,851.9618500,-1742.7135000,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,851.9650300,-1739.5096400,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,851.9650300,-1736.3105500,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,851.9813800,-1733.9137000,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,831.0672000,-1735.3178700,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19387,832.7500000,-1737.9735100,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19403,832.7500000,-1742.7395000,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,831.2293700,-1735.3090800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,832.7550000,-1736.0399200,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19454,831.2063000,-1736.9641100,19.4514000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(3850,831.2025100,-1741.7382800,20.0738000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3850,829.4641100,-1739.9980500,20.0738000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3850,829.4641100,-1736.5531000,20.0738000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19377,847.9633200,-1754.8403300,12.4444000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,847.9633200,-1745.2390100,12.4444000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,847.9633200,-1735.6680900,12.4444000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,847.9633200,-1726.0881300,12.4444000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19456,848.3118300,-1726.5813000,13.1600000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19456,825.0642700,-1726.5572500,11.7797000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19403,835.8602900,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,833.4710100,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,851.2509800,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19403,848.8645000,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,832.7500000,-1740.3514400,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,832.7500000,-1745.1362300,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,839.1646100,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,845.5648200,-1745.8508300,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,837.9036900,-1745.8582800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,846.9531300,-1745.8582800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2129,851.3441800,-1737.2840600,16.0326000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2304,851.3643200,-1736.2923600,16.0326000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2128,851.3441800,-1739.2646500,16.0326000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2127,844.4262100,-1736.3039600,16.0325000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2130,847.3975200,-1736.3039600,16.0324000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2129,850.3682900,-1736.3039600,16.0326000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2129,849.3913000,-1736.3039600,16.0326000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2129,846.4179100,-1736.3039600,16.0326000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2129,851.3441800,-1738.2834500,16.0326000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,845.5438200,-1745.9311500,18.1988000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(1649,845.5438200,-1745.9311500,18.1988000,0.0000000,90.0000000,180.0000000); //
CreateDynamicObject(1649,848.8078000,-1745.9311500,18.1988000,0.0000000,90.0000000,180.0000000); //
CreateDynamicObject(1649,839.2058100,-1745.9311500,18.1988000,0.0000000,90.0000000,180.0000000); //
CreateDynamicObject(1649,835.9168100,-1745.9311500,18.1988000,0.0000000,90.0000000,180.0000000); //
CreateDynamicObject(1649,835.9447000,-1750.0479700,13.8059000,0.0000000,90.0000000,180.0000000); //
CreateDynamicObject(1491,838.4256000,-1749.9956100,12.5515000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1491,841.5889900,-1745.8728000,16.0377000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1491,830.2719700,-1741.7336400,16.0349000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1649,851.9611800,-1741.1413600,17.7739000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,851.9611800,-1729.4852300,17.7739000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,829.4921300,-1730.3909900,17.7739000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,829.4921300,-1730.3909900,17.7739000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,851.9611800,-1741.1413600,17.7739000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,851.9611800,-1729.4852300,17.7739000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1491,842.4840700,-1731.7182600,16.0377000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1703,837.9437900,-1739.7222900,16.0336000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2296,833.1366000,-1741.7334000,16.0331000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1703,835.0179400,-1737.5299100,16.0336000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1703,837.0632900,-1743.8565700,16.0336000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(1255,834.8657200,-1749.7584200,16.6057000,0.0000000,0.0000000,-80.0000000); //
CreateDynamicObject(1255,838.6808500,-1749.6116900,16.6057000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(643,848.5297200,-1750.0291700,16.5098000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9833,822.4732100,-1747.1611300,11.0856500,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(638,820.6530800,-1754.7020300,13.2562000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1481,826.1735800,-1750.5188000,13.2494000,0.0000000,0.0000000,10.0000000); //
CreateDynamicObject(744,824.3917200,-1730.1058300,9.9471700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(642,836.7116700,-1748.1031500,17.4081000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1820,847.3992900,-1745.0186800,16.0305500,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2310,849.4362800,-1744.6175500,16.5237000,0.0000000,0.0000000,-10.0000000); //
CreateDynamicObject(1458,824.3302600,-1741.1396500,12.8202000,0.0000000,0.0000000,-150.0000000); //
CreateDynamicObject(3439,827.5686000,-1759.5139200,14.2895000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1408,826.6840200,-1749.9821800,13.1216000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(11665,840.8150000,-1733.7860100,16.7083000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2816,847.8305100,-1744.5268600,16.5457000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1408,823.4780900,-1749.9821800,13.1216000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2029,846.2266800,-1740.8596200,16.0340000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2029,844.2612300,-1740.8596200,16.0340000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1828,835.7859500,-1740.7407200,16.0371000,0.0000000,0.0000000,80.0000000); //
CreateDynamicObject(2230,832.9702100,-1737.9056400,16.0380000,0.0000000,0.0000000,80.0000000); //
CreateDynamicObject(2230,832.9032000,-1742.8806200,16.0380000,0.0000000,0.0000000,100.0000000); //
CreateDynamicObject(2124,848.6751700,-1740.8380100,16.8705000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2118,831.9301800,-1731.4117400,16.0366000,0.0000000,0.0000000,10.0000000); //
CreateDynamicObject(630,851.3864100,-1745.1408700,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,843.6200000,-1745.3028600,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,841.2603100,-1745.3028600,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,833.4436600,-1745.2977300,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,833.4466600,-1737.0294200,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,830.1468500,-1729.3989300,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,842.0186800,-1727.3994100,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2310,846.4303000,-1744.7846700,16.5237000,0.0000000,0.0000000,-170.0000000); //
CreateDynamicObject(2124,842.8581500,-1740.7446300,16.8705000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2124,844.6218900,-1739.4464100,16.8705000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2124,845.9267600,-1739.4102800,16.8705000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2124,847.2321200,-1739.4289600,16.8705000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2124,844.5268600,-1742.3059100,16.8705000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2124,847.1400800,-1742.2973600,16.8705000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2124,845.8408800,-1742.2963900,16.8705000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2310,830.1489300,-1731.7169200,16.5237000,0.0000000,0.0000000,-170.0000000); //
CreateDynamicObject(2310,834.2529900,-1731.1843300,16.5237000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2310,831.9972500,-1729.9013700,16.5237000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2310,832.4089400,-1732.8471700,16.5237000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,829.4921300,-1737.6658900,17.7739000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,829.4921300,-1737.6658900,17.7739000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2255,833.3292200,-1743.8824500,17.6902500,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2254,834.2238800,-1736.2804000,17.9210300,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2257,839.9472700,-1726.8692600,17.6821400,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2275,847.9450100,-1736.2670900,17.5186000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2254,851.8519900,-1743.4460400,17.9649000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(19174,829.6394000,-1733.7728300,17.8766000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2270,834.9051500,-1737.0015900,17.5015800,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,820.3892800,-1750.0217300,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,820.3892800,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,851.8837300,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,854.7374300,-1752.4206500,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19379,837.9309100,-1741.1014400,19.4550000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,846.7860100,-1741.1110800,19.4514000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(615,821.6526500,-1739.5648200,12.2109000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(19377,837.9177200,-1741.1110800,19.4440000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,846.7860100,-1741.1110800,19.4450000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(870,827.4364000,-1747.9921900,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,825.9338400,-1746.3955100,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,821.7683700,-1743.0991200,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,827.3742100,-1733.6341600,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,827.9041700,-1735.7545200,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,827.5081800,-1738.6160900,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,825.3004800,-1737.9327400,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(870,821.7918700,-1732.9454300,12.7882000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,834.9335300,-1743.9115000,12.5527400,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,840.3252600,-1744.3109100,12.5527400,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19395,839.2050200,-1749.9472700,14.2832000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2964,837.1555800,-1746.4095500,12.5124000,0.0000000,0.0000000,10.0000000); //
CreateDynamicObject(3106,837.4033200,-1746.0156300,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3104,837.2905900,-1746.5697000,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3103,837.1804200,-1746.7005600,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3102,837.1274400,-1746.1931200,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3101,837.0991800,-1746.0344200,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3100,836.4036900,-1746.3175000,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3003,836.6243900,-1746.3532700,13.4487900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3002,836.5885000,-1746.7852800,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3001,837.9043600,-1746.4909700,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3000,837.6272000,-1746.7318100,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2999,837.7816800,-1746.2988300,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2998,837.9470800,-1746.2517100,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2997,836.6543000,-1746.6612500,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2996,837.8555900,-1746.0918000,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2995,836.4630100,-1746.1261000,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2965,836.5269200,-1746.7218000,13.4488600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(338,836.7388900,-1743.3990500,12.8540000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(338,836.8389300,-1743.3990500,12.8540000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(338,837.0988800,-1743.3990500,12.8540000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2309,840.5604900,-1748.0494400,12.5517000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2309,840.6049800,-1748.7262000,12.5517000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2309,834.4848600,-1749.1312300,12.5517000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2309,835.6298800,-1743.5777600,12.5517000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2224,838.7594000,-1743.5527300,12.5523000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(16780,837.3831800,-1746.5361300,15.9533000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2523,849.4034400,-1727.3877000,16.0259600,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2526,848.4118000,-1731.8371600,16.0494000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2525,850.5788000,-1731.7747800,16.0311000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2741,850.5468100,-1726.9228500,17.2832000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2836,848.3770800,-1729.9769300,16.0320300,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2256,848.2708100,-1726.8665800,17.9432000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19387,844.1276900,-1732.4320100,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19387,845.6499000,-1727.7170400,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,845.6499000,-1730.8979500,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,847.3165900,-1732.4320100,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,850.3723100,-1732.4300500,17.7811000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1491,845.6555200,-1728.4592300,16.0377000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2259,845.0832500,-1730.3570600,17.2457000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2271,843.0811800,-1728.7199700,17.5176000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(630,843.2246100,-1727.4245600,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2816,842.8936200,-1733.4757100,16.0351000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1417,843.5733600,-1735.2603800,16.2585000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(1208,845.8588900,-1735.2872300,16.0350800,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,847.5139800,-1734.0304000,17.7811000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(912,846.4787000,-1732.9338400,16.5739000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2846,846.3056600,-1735.3348400,16.0362000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2845,846.3773200,-1735.5127000,16.1529000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2844,846.4102800,-1735.5616500,16.2237000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2843,846.3037700,-1735.5827600,16.3557000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2819,844.3209200,-1735.7103300,16.0364500,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1491,843.3458900,-1732.4406700,16.0377000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19377,846.7999900,-1731.5391800,19.4450000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,846.7999900,-1731.4991500,19.4514000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19379,841.5830100,-1731.4791300,19.4550000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,841.5825200,-1731.4991500,19.4440000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(9131,820.3892800,-1727.0462600,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,820.3892800,-1739.1529500,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,837.3627900,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,823.9697900,-1759.6554000,13.2230000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(983,849.0316800,-1759.6554000,13.2230000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(9131,845.4268800,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,833.7609900,-1759.6554000,13.2230000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(9131,830.1931800,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,827.5626200,-1759.5216100,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,820.2202100,-1755.9456800,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,820.2202100,-1749.5434600,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,820.2202100,-1743.1724900,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,820.2202100,-1736.7833300,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,820.2202100,-1730.3673100,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,851.9976800,-1755.9648400,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3439,830.1929900,-1759.5139200,14.2895000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3439,837.3731100,-1759.5139200,14.2895000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(3439,845.4365800,-1759.5139200,14.2895000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19462,831.1925000,-1730.5625000,19.4550000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19462,834.5900300,-1733.5549300,19.4525000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19454,834.5900300,-1733.5549300,19.4514000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19454,831.1915300,-1730.5615200,19.4500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19449,840.7708100,-1740.0712900,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19387,836.0354000,-1735.3090800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,833.6348300,-1735.3090800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,839.2371200,-1735.3090800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19387,844.1126700,-1742.7209500,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,844.1126700,-1739.5106200,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,850.4384800,-1737.9733900,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,847.2293100,-1737.9733900,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,844.8386200,-1737.9733900,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,844.1126700,-1745.1246300,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,844.1126700,-1736.3039600,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19387,844.1126700,-1733.1075400,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,844.1126700,-1729.9212600,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,844.1126700,-1726.7266800,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,842.5803200,-1731.4549600,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19387,839.5385100,-1731.4572800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19430,837.1406300,-1731.4572800,21.2635000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19357,836.4243800,-1729.9212600,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19357,836.4243800,-1726.7425500,21.2635000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(19430,840.7719700,-1745.1274400,21.2635000,0.0000000,0.0000000,0.0000000); //
//CreateDynamicObject(966,844.7628200,-1759.5158700,12.5427000,0.0000000,0.0000000,0.0000000); //
//CreateDynamicObject(968,844.8366100,-1759.5112300,13.3585000,0.0000000,-90.0000000,0.0000000); //
CreateDynamicObject(1491,835.2482300,-1735.3167700,19.5377000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1491,838.7675200,-1731.4659400,19.5377000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1491,832.7506700,-1738.7116700,19.5377000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1491,844.1226800,-1733.8606000,19.5377000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1491,844.1093800,-1743.4709500,19.5377000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,848.7888200,-1745.8505900,21.3367000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(1649,842.3303800,-1745.8505900,21.3367000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(1649,835.9350000,-1745.8505900,21.3367000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(1649,832.7409100,-1742.7639200,21.3367000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,829.5272200,-1730.1878700,21.3367000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,851.9667400,-1731.5759300,21.3367000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,851.9666700,-1736.3106700,21.3367000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,851.9666700,-1742.3929400,21.3367000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1649,851.9666700,-1742.3929400,21.3367000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,851.9666700,-1736.3106700,21.3367000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,851.9666700,-1731.5759300,21.3367000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,848.7888200,-1745.8505900,21.3367000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1649,842.3303800,-1745.8505900,21.3367000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1649,835.9350000,-1745.8505900,21.3367000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1649,832.7409100,-1742.7639200,21.3367000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1649,829.5272200,-1730.1878700,21.3367000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2330,838.7838100,-1744.2343800,19.5384000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2323,834.3294100,-1741.2791700,19.5411000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2300,849.1539900,-1733.4027100,19.5374000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2298,836.7031300,-1739.2490200,19.5413000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(1796,844.7053800,-1741.5706800,19.5374000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1796,851.1516100,-1741.5706800,19.5374000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2818,847.6148100,-1740.9158900,19.5361000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2817,836.9913900,-1740.9886500,19.5404000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2841,847.3526600,-1733.8247100,19.5361300,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(14867,848.0200200,-1727.3324000,21.0633000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2199,847.8499800,-1738.1398900,19.5336000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2185,849.6453200,-1745.2800300,19.5335900,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1806,850.8413700,-1743.7939500,19.5338000,0.0000000,0.0000000,150.0000000); //
CreateDynamicObject(1742,838.0523100,-1735.3001700,19.5419500,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(14455,838.2423700,-1729.1001000,17.5831000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2245,833.1625400,-1741.4384800,20.7410000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2251,849.8012100,-1745.2960200,21.1972000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2253,847.1474000,-1745.5828900,19.8086000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,841.3411300,-1741.9337200,20.5638200,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,833.3141500,-1735.8374000,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,840.2007400,-1735.8938000,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,833.3301400,-1745.2873500,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,840.1155400,-1745.2862500,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,830.1636400,-1727.3656000,20.5638200,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,835.8087200,-1729.2275400,20.5638200,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,844.6918300,-1737.4282200,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2010,851.3420400,-1737.3137200,19.5390700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2087,851.6818200,-1733.4095500,19.5380000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2088,846.0982100,-1744.2760000,19.5384000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(912,841.2624500,-1740.5961900,20.0806000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(19172,844.0275900,-1737.8498500,21.5168000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(19173,840.6771200,-1740.5616500,21.4000000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1670,848.5160500,-1749.9781500,16.9275000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(11665,831.2236300,-1733.4154100,20.2302000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(19319,833.0628100,-1735.1883500,21.6866000,0.0000000,30.0000000,180.0000000); //
CreateDynamicObject(19317,831.9818700,-1735.1883500,21.6866000,0.0000000,30.0000000,180.0000000); //
CreateDynamicObject(2251,841.2662400,-1740.2341300,21.4989000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3802,832.0111100,-1740.3032200,21.9446000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2259,835.8562600,-1730.6020500,21.0140900,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2258,833.3836700,-1726.8779300,21.3404200,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2256,840.8886700,-1737.6634500,21.4999900,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2267,844.2425500,-1730.4715600,21.4586000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2271,844.6899400,-1735.1695600,21.1737600,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(2266,851.3998400,-1734.0113500,21.3495400,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2245,851.5778800,-1733.2580600,20.8816000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,843.6510000,-1746.3884300,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(630,841.2445100,-1746.3651100,17.0584000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2522,841.0571300,-1727.3664600,19.5415700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2518,842.3329500,-1730.8553500,19.5042000,0.0000000,0.0000000,180.0000000); //
CreateDynamicObject(2528,838.1421500,-1727.3767100,19.5411000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2835,841.3631000,-1730.4147900,19.5419300,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2273,836.9920700,-1728.9934100,21.0552000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(630,837.1214000,-1730.8878200,20.5638200,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2286,832.5786100,-1738.8392300,17.9370000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(2245,845.7509200,-1740.8885500,17.0800000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(638,824.0211800,-1759.2408400,13.2562000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(638,833.7841200,-1759.1873800,13.2562000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(638,848.9844400,-1759.1715100,13.2562000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(638,851.5556000,-1756.1138900,13.2562000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2240,851.4412200,-1729.9731400,20.0444700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(2240,829.9742400,-1728.3404500,20.0444700,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1255,830.2153900,-1736.6004600,20.0910000,0.0000000,0.0000000,-80.0000000); //
CreateDynamicObject(19377,837.9177200,-1741.1110800,22.9451000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,846.7860100,-1741.1110800,22.9500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,846.7999900,-1731.5391800,22.9500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,837.9177200,-1731.4940200,22.9451000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(19377,834.6804800,-1730.5780000,22.9500000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(5816,853.4959700,-1732.4303000,19.5233000,0.0000000,0.0000000,-90.0000000); //
CreateDynamicObject(19377,849.7191200,-1747.7200900,12.4744000,0.0000000,90.0000000,0.0000000); //
CreateDynamicObject(759,856.6181600,-1741.9399400,12.1875000,356.8584000,0.0000000,-0.4276100); //
CreateDynamicObject(760,857.1060800,-1752.8839100,12.1796900,356.8584000,0.0000000,-0.0332100); //
CreateDynamicObject(760,856.3400900,-1754.9294400,12.1796900,356.8584000,0.0000000,-0.0332100); //
CreateDynamicObject(9131,851.8837300,-1752.4206500,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(983,854.9652100,-1748.8117700,13.2230000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(9131,854.7374300,-1745.2520800,13.6184000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(638,853.3113400,-1752.4177200,13.2562000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(3928,842.1941500,-1738.6212200,23.0478000,0.0000000,0.0000000,90.0000000); //
CreateDynamicObject(1687,833.6045500,-1729.8635300,23.8469000,0.0000000,0.0000000,0.0000000); //
CreateDynamicObject(1687,833.6046100,-1732.3592500,23.8469000,0.0000000,0.0000000,0.0000000); //


//Objects converted: 422
//Vehicles converted: 0
//Vehicle models found: 0
//----------------------
//In the time this conversion took to finish light could have travelled around the world 0.04 times!*/


	//ALHAMBRA
	CreateDynamicObject(5004, 1883.55, -1736.30, 12.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(5812, 1879.80, -1725.63, 12.64,   0.00, -0.10, 90.00);
	CreateDynamicObject(5812, 1879.80, -1725.63, 12.52,   0.00, -0.10, 90.00);
	CreateDynamicObject(5812, 1879.80, -1638.97, 12.64,   0.00, -0.10, 90.00);
	CreateDynamicObject(5812, 1879.80, -1638.97, 12.52,   0.00, -0.10, 90.00);
	CreateDynamicObject(620, 1861.45, -1638.97, 10.80,   356.86, 0.00, -28.59);
	CreateDynamicObject(620, 1880.57, -1638.97, 10.80,   356.86, 0.00, -161.07);
	CreateDynamicObject(620, 1899.97, -1638.97, 10.80,   0.00, 0.00, -161.07);
	CreateDynamicObject(620, 1880.57, -1725.63, 10.80,   356.86, 0.00, -161.07);
	CreateDynamicObject(620, 1899.97, -1725.63, 10.80,   0.00, 0.00, -161.07);
	CreateDynamicObject(620, 1861.45, -1725.63, 10.80,   356.86, 0.00, -28.59);
	CreateDynamicObject(3515, 1842.56, -1638.97, 12.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(3515, 1842.35, -1725.63, 12.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 1902.13, -1680.72, 10.05,   90.00, 0.00, 90.00);
	CreateDynamicObject(5644, 1900.47, -1680.72, 10.04,   90.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1914.93, -1667.14, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1914.93, -1694.30, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1890.41, -1694.30, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1890.41, -1667.14, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1885.45, -1667.14, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(18770, 1885.45, -1694.30, -65.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(1523, 1889.44, -1694.30, 12.35,   0.00, 0.00, 180.00);
	CreateDynamicObject(1523, 1886.41, -1694.37, 12.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1523, 1889.44, -1667.14, 12.35,   0.00, 0.00, 180.00);
	CreateDynamicObject(1523, 1886.41, -1667.14, 12.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 1900.45, -1680.72, 19.53,   90.00, 0.00, 0.00);
	CreateDynamicObject(5644, 1902.13, -1680.73, 19.51,   90.00, 0.00, 90.00);
	CreateDynamicObject(3552, 1886.70, -1694.30, 20.66,   0.00, 180.00, 0.00);
	CreateDynamicObject(3552, 1889.16, -1694.30, 20.66,   0.00, 180.00, 0.00);
	CreateDynamicObject(3552, 1889.14, -1694.30, 28.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1886.72, -1694.30, 28.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1886.72, -1667.14, 28.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1889.14, -1667.14, 28.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1889.16, -1667.14, 20.66,   0.00, 180.00, 0.00);
	CreateDynamicObject(3552, 1886.70, -1667.14, 20.66,   0.00, 180.00, 0.00);
	CreateDynamicObject(3552, 1886.04, -1686.47, 21.78,   90.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1886.04, -1674.76, 21.78,   90.00, 0.00, 180.00);
	CreateDynamicObject(3552, 1886.07, -1680.62, 27.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1886.07, -1680.62, 27.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19129, 1904.86, -1680.72, 12.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(19135, 1885.45, -1667.14, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19135, 1890.41, -1667.14, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19135, 1914.93, -1667.14, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19135, 1885.45, -1694.30, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19135, 1890.41, -1694.30, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19135, 1914.93, -1694.30, 34.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(18646, 1886.07, -1680.60, 33.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(3526, 1885.49, -1669.39, 22.07,   0.00, -20.00, 0.00);
	CreateDynamicObject(3526, 1885.48, -1691.71, 22.08,   0.00, -20.00, 0.00);
	CreateDynamicObject(6965, 1872.16, -1680.67, 15.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(6964, 1872.16, -1680.67, 11.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(6964, 1872.16, -1680.67, 11.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(9833, 1871.71, -1680.65, 22.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.05, -1656.40, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.05, -1661.78, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.05, -1667.14, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.27, -1708.03, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.27, -1702.65, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1833.27, -1697.27, 13.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(14434, 1900.19, -1674.03, 21.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 1911.53, -1676.60, 15.50,   40.00, 0.00, 90.00);
	CreateDynamicObject(19158, 1904.56, -1680.72, 20.33,   0.00, 180.00, 0.00);
	CreateDynamicObject(18102, 1901.73, -1676.67, 17.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(18653, 1895.57, -1670.84, 12.35,   0.00, 0.00, 135.00);
	CreateDynamicObject(18653, 1895.57, -1690.62, 12.35,   0.00, 0.00, -135.00);
	CreateDynamicObject(18655, 1913.62, -1690.64, 12.35,   0.00, 0.00, -45.00);
	CreateDynamicObject(18655, 1913.70, -1670.82, 12.35,   0.00, 0.00, 45.00);
	CreateDynamicObject(18102, 1911.84, -1674.63, 2.27,   0.00, 180.00, -90.16);
	CreateDynamicObject(18102, 1911.84, -1678.41, 2.27,   0.00, 180.00, -90.16);
	CreateDynamicObject(18102, 1911.84, -1670.39, 2.27,   0.00, 180.00, -90.16);
	CreateDynamicObject(2179, 1894.55, -1680.72, 14.04,   0.00, 0.00, 30.00);
	CreateDynamicObject(2179, 1894.55, -1675.72, 14.04,   0.00, 0.00, 30.00);
	CreateDynamicObject(2179, 1894.55, -1685.72, 14.04,   0.00, 0.00, 30.00);
	CreateDynamicObject(16151, 1893.39, -1684.81, 12.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19129, 1894.59, -1680.72, 6.77,   0.00, -90.00, 0.00);
	CreateDynamicObject(19129, 1894.79, -1680.72, 6.77,   0.00, -90.00, 180.00);
	CreateDynamicObject(1432, 1888.36, -1685.77, 12.48,   0.00, 0.00, -80.82);
	CreateDynamicObject(1432, 1888.75, -1682.22, 12.48,   0.00, 0.00, -36.54);
	CreateDynamicObject(1432, 1889.13, -1679.06, 12.48,   0.00, 0.00, -103.02);
	CreateDynamicObject(1432, 1888.22, -1675.12, 12.48,   0.00, 0.00, -117.06);
	CreateDynamicObject(2780, 1904.53, -1673.40, 15.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, 1904.53, -1688.26, 15.99,   0.00, 0.00, 180.00);
	CreateDynamicObject(2773, 1889.24, -1664.93, 12.85,   0.00, 0.00, 20.00);
	CreateDynamicObject(2773, 1886.58, -1664.93, 12.85,   0.00, 0.00, -20.00);
	CreateDynamicObject(2773, 1886.59, -1696.51, 12.85,   0.00, 0.00, 20.00);
	CreateDynamicObject(2773, 1889.25, -1696.51, 12.85,   0.00, 0.00, -20.00);
	CreateDynamicObject(2592, 1896.63, -1680.72, 13.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(2592, 1896.10, -1680.69, 13.32,   0.00, 0.00, -90.00);
	CreateDynamicObject(1957, 1896.32, -1679.35, 13.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1957, 1896.32, -1682.03, 13.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(14820, 1896.27, -1680.69, 13.31,   0.00, 0.00, -90.00);
	CreateDynamicObject(1886, 1913.93, -1693.29, 16.92,   0.00, 0.00, -135.00);
	CreateDynamicObject(2773, 1889.60, -1692.10, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 1886.28, -1692.10, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 1886.30, -1669.33, 12.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(2773, 1889.62, -1669.33, 12.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(2229, 1914.40, -1669.92, 12.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(2232, 1914.07, -1669.06, 12.97,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1668.83, 12.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(2232, 1914.07, -1669.06, 14.17,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1669.92, 13.54,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1668.83, 13.54,   0.00, 0.00, -90.00);
	CreateDynamicObject(2232, 1914.07, -1691.94, 12.97,   0.00, 0.00, -90.00);
	CreateDynamicObject(2232, 1914.07, -1691.94, 14.15,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1691.72, 12.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1692.78, 12.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1692.78, 13.54,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1914.40, -1691.72, 13.54,   0.00, 0.00, -90.00);
	CreateDynamicObject(2292, 1912.63, -1667.59, 12.36,   0.00, 0.00, -79.50);
	CreateDynamicObject(8643, 1904.49, -1672.47, 2.38,   -90.00, 0.00, 0.00);
	CreateDynamicObject(8643, 1904.49, -1688.99, 2.38,   -90.00, 0.00, 180.00);
	CreateDynamicObject(3552, 1886.07, -1680.62, 15.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(3552, 1886.07, -1680.62, 15.96,   0.00, 0.00, 90.00);
	CreateDynamicObject(16151, 1893.39, -1676.53, 12.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(16780, 1891.15, -1680.72, 21.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(16780, 1891.15, -1686.72, 21.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(16780, 1891.15, -1674.72, 21.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(18646, 1896.63, -1680.69, 12.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(19143, 1896.84, -1680.72, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19144, 1896.84, -1681.72, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19154, 1896.84, -1680.72, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19145, 1896.84, -1682.15, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19145, 1896.84, -1679.26, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(2293, 1910.81, -1667.61, 12.36,   0.00, 0.00, -97.80);
	CreateDynamicObject(2293, 1909.19, -1667.67, 12.36,   0.00, 0.00, -81.18);
	CreateDynamicObject(2292, 1911.26, -1693.02, 12.38,   0.00, 0.00, 181.68);
	CreateDynamicObject(2293, 1909.10, -1692.81, 12.38,   0.00, 0.00, 171.60);
	CreateDynamicObject(2293, 1906.05, -1692.95, 12.38,   0.00, 0.00, 192.72);
	CreateDynamicObject(2596, 1913.63, -1694.32, 14.88,   0.00, 0.00, -90.00);
	CreateDynamicObject(2596, 1913.63, -1667.19, 15.37,   0.00, 0.00, -90.00);
	CreateDynamicObject(2229, 1896.21, -1682.60, 12.91,   0.00, -90.00, 90.00);
	CreateDynamicObject(2229, 1896.21, -1682.60, 13.29,   0.00, -90.00, 90.00);
	CreateDynamicObject(2229, 1896.21, -1678.82, 12.29,   0.00, 90.00, 90.00);
	CreateDynamicObject(2229, 1896.21, -1678.82, 12.64,   0.00, 90.00, 90.00);
	CreateDynamicObject(2232, 1896.44, -1677.12, 13.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(2232, 1896.44, -1684.32, 13.02,   0.00, 0.00, 90.00);
	CreateDynamicObject(18646, 1896.38, -1680.72, 14.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, 1835.23, -1670.77, 12.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(1319, 1835.23, -1694.31, 12.07,   0.00, 0.00, 90.00);
	CreateDynamicObject(18694, 1835.23, -1669.25, 11.91,   90.00, 0.00, 0.00);
	CreateDynamicObject(18694, 1835.23, -1692.79, 11.91,   90.00, 0.00, 0.00);
	CreateDynamicObject(700, 1835.67, -1633.97, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1836.24, -1643.97, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1835.67, -1720.63, 12.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1835.67, -1730.63, 12.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1930.17, -1688.90, 12.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1930.08, -1673.35, 12.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1835.23, -1655.73, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1835.94, -1708.42, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1855.94, -1708.42, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1855.23, -1655.73, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1875.23, -1655.73, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1875.94, -1708.42, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1895.23, -1655.73, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3509, 1895.94, -1708.42, 12.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1533, 1891.43, -1668.03, 12.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(733, 1919.29, -1725.61, 12.41,   0.00, 0.00, -35.52);
	CreateDynamicObject(733, 1919.86, -1638.65, 12.41,   0.00, 0.00, -81.96);
	CreateDynamicObject(1705, 1913.35, -1671.38, 21.78,   0.00, 0.00, -92.82);
	CreateDynamicObject(1705, 1908.30, -1667.46, 21.78,   0.00, 0.00, 4.08);
	CreateDynamicObject(1702, 1905.17, -1667.48, 21.78,   0.00, 0.00, -1.08);
	CreateDynamicObject(1702, 1913.48, -1673.43, 21.78,   0.00, 0.00, -89.64);
	CreateDynamicObject(1702, 1911.45, -1668.00, 21.78,   0.00, 0.00, -44.70);
	CreateDynamicObject(1825, 1912.26, -1690.56, 21.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(1825, 1907.16, -1690.55, 21.78,   0.00, 0.00, 110.76);
	CreateDynamicObject(1825, 1902.49, -1690.25, 21.78,   0.00, 0.00, -30.24);
	CreateDynamicObject(1825, 1897.27, -1690.07, 21.78,   0.00, 0.00, -79.08);
	CreateDynamicObject(1825, 1892.17, -1690.41, 21.78,   0.00, 0.00, -30.24);
	CreateDynamicObject(14611, 1902.13, -1680.73, 30.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(14537, 1902.13, -1680.73, 23.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(14629, 1907.23, -1673.13, 30.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(14651, 1891.27, -1675.72, 24.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(14651, 1891.27, -1685.72, 24.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(2315, 1909.95, -1670.16, 21.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(2315, 1910.85, -1671.10, 21.78,   0.00, 0.00, -90.00);
	CreateDynamicObject(2852, 1908.65, -1670.15, 22.27,   0.00, 0.00, -65.22);
	CreateDynamicObject(2816, 1910.86, -1671.70, 22.27,   0.00, 0.00, -53.34);
	CreateDynamicObject(1487, 1909.57, -1670.28, 22.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(1670, 1910.95, -1672.64, 22.29,   0.00, 0.00, -36.54);
	CreateDynamicObject(1665, 1910.02, -1670.11, 22.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(3027, 1909.88, -1670.10, 22.29,   0.00, 90.00, 0.00);
	CreateDynamicObject(18673, 1910.02, -1670.07, 22.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(18673, 1911.00, -1672.66, 22.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(19121, 1906.85, -1680.77, 26.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(19121, 1902.11, -1685.41, 26.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(19121, 1902.18, -1676.08, 26.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(19121, 1897.48, -1680.82, 26.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(19087, 1890.69, -1675.28, 26.27,   0.00, 180.00, 0.00);
	CreateDynamicObject(19087, 1890.69, -1675.28, 28.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19087, 1890.69, -1685.28, 28.73,   0.00, 180.00, 0.00);
	CreateDynamicObject(19087, 1890.69, -1685.28, 26.27,   0.00, 180.00, 0.00);
	CreateDynamicObject(1670, 1902.42, -1690.15, 22.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(1670, 1912.07, -1690.49, 22.67,   0.00, 0.00, -106.98);
	CreateDynamicObject(2830, 1897.26, -1689.93, 22.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(1517, 1907.17, -1690.71, 22.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(2674, 1901.38, -1683.94, 21.80,   0.00, 0.00, 10.02);
	CreateDynamicObject(2674, 1899.14, -1677.58, 21.80,   0.00, 0.00, 178.08);
	CreateDynamicObject(1533, 1891.44, -1667.93, 21.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(1702, 1888.22, -1681.62, 21.78,   0.00, 0.00, 91.08);
	CreateDynamicObject(1702, 1888.24, -1690.19, 21.78,   0.00, 0.00, 98.22);
	CreateDynamicObject(1702, 1887.90, -1673.18, 21.78,   0.00, 0.00, 80.46);
	CreateDynamicObject(2229, 1890.82, -1668.28, 21.78,   0.00, 0.00, 54.54);
	CreateDynamicObject(2229, 1889.30, -1692.75, 21.78,   0.00, 0.00, -200.70);
	CreateDynamicObject(2229, 1899.61, -1694.58, 21.78,   0.00, 0.00, -187.62);
	CreateDynamicObject(2229, 1913.25, -1694.30, 21.78,   0.00, 0.00, -134.46);
	CreateDynamicObject(2229, 1900.10, -1666.67, 21.78,   0.00, 0.00, 14.46);
	CreateDynamicObject(19154, 1896.84, -1679.72, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19154, 1896.84, -1681.72, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19155, 1896.84, -1680.32, 12.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(19155, 1896.84, -1681.12, 12.95,   0.00, 0.00, -90.00);
	//BANK
	CreateDynamicObject(3851, 1436.27, -1021.79, 4.93,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1446.37, -1019.81, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1437.64, -1019.82, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1486.43, -1021.79, 24.93,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1477.61, -1021.82, 24.93,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1487.56, -1021.79, 28.22,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1477.64, -1021.81, 28.22,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1486.53, -1020.02, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1477.68, -1020.02, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1471.96, -1015.40, 30.09,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1471.96, -1018.97, 27.27,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1471.96, -1019.86, 27.27,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1452.04, -1015.37, 30.09,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1452.00, -1017.75, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1457.75, -1020.08, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1457.83, -1020.09, 34.20,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1457.82, -1022.08, 32.30,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1468.88, -1020.08, 30.56,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1466.36, -1022.08, 32.30,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1466.32, -1020.09, 34.20,   0.00, 80.00, 90.00);
    CreateDynamicObject(3851, 1452.13, -1016.46, 32.30,   0.00, 0.00, 0.00);
    CreateDynamicObject(3851, 1471.97, -1016.45, 32.30,   0.00, 0.00, 0.00);
    CreateDynamicObject(1597, 1477.12, -1023.45, 25.84,   0.00, 0.00, 91.00);
    CreateDynamicObject(1597, 1487.49, -1023.38, 25.84,   0.00, 0.00, 91.00);
    CreateDynamicObject(3877, 1452.55, -1021.46, 23.73,   0.00, 0.00, 0.00);
    CreateDynamicObject(3877, 1471.50, -1021.45, 23.73,   0.00, 0.00, 0.00);
    CreateDynamicObject(3471, 1452.59, -1023.00, 23.54,   0.00, 0.00, -90.00);
    CreateDynamicObject(3471, 1471.54, -1022.95, 23.54,   0.00, 0.00, -90.00);
    CreateDynamicObject(1523, 1472.02, -1013.47, 25.85,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1471.96, -1007.77, 30.34,   0.00, 0.00, 0.00);
    CreateDynamicObject(1523, 1471.93, -1010.45, 25.85,   0.00, 0.00, -90.00);
    CreateDynamicObject(3851, 1471.96, -1004.86, 26.42,   0.00, 0.00, 0.00);
    CreateDynamicObject(2942, 1471.30, -1009.92, 26.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(2942, 1462.39, -1010.18, 26.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(1523, 1451.99, -1010.43, 25.85,   0.00, 0.00, -90.00);
    CreateDynamicObject(1523, 1452.05, -1013.44, 25.85,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1451.99, -1007.89, 30.34,   0.00, 0.00, 0.00);
    CreateDynamicObject(3851, 1451.97, -1004.95, 26.42,   0.00, 0.00, 0.00);
    CreateDynamicObject(2773, 1463.08, -1011.02, 26.34,   0.00, 0.00, 0.00);
    CreateDynamicObject(2773, 1461.71, -1010.99, 26.34,   0.00, 0.00, 0.00);
    CreateDynamicObject(2942, 1452.92, -1009.93, 26.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(2921, 1471.68, -1009.49, 28.98,   0.00, 0.00, 69.00);
    CreateDynamicObject(2921, 1452.55, -1009.68, 28.98,   0.00, 0.00, 166.00);
    CreateDynamicObject(2921, 1462.26, -1009.79, 28.98,   0.00, 0.00, 132.00);
    CreateDynamicObject(2940, 1475.73, -1019.59, 25.82,   -108.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1480.85, -1013.61, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1475.92, -1013.50, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1486.81, -1013.60, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1492.77, -1013.61, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1481.73, -1019.60, 25.82,   -108.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1487.71, -1019.59, 25.82,   -108.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1493.66, -1019.60, 25.82,   -108.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1447.63, -1013.68, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1441.70, -1013.67, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1435.72, -1013.65, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1429.78, -1013.65, 25.82,   -19.00, 0.00, 0.00);
    CreateDynamicObject(3462, 1491.05, -1010.58, 26.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(3462, 1491.18, -1018.27, 26.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1490.56, -1012.87, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1490.68, -1015.76, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1487.10, -1011.22, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1486.59, -1015.68, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1483.20, -1011.50, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1479.03, -1011.41, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1482.65, -1015.61, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1478.68, -1015.45, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(1432, 1479.03, -1011.41, 25.86,   0.00, 0.00, 0.00);
    CreateDynamicObject(2002, 1487.82, -1019.09, 25.84,   0.00, 0.00, 182.00);
    CreateDynamicObject(2002, 1477.12, -1019.14, 25.84,   0.00, 0.00, 182.00);
    CreateDynamicObject(2012, 1479.44, -1019.03, 25.84,   0.00, 0.00, 181.00);
    CreateDynamicObject(2012, 1482.41, -1018.98, 25.84,   0.00, 0.00, 181.00);
    CreateDynamicObject(2012, 1485.37, -1018.93, 25.84,   0.00, 0.00, 181.00);
    CreateDynamicObject(2173, 1475.15, -1017.76, 25.83,   0.00, 0.00, 270.00);
    CreateDynamicObject(2173, 1475.15, -1015.50, 25.83,   0.00, 0.00, 270.00);
    CreateDynamicObject(1514, 1475.18, -1016.41, 26.73,   0.00, 0.00, 38.00);
    CreateDynamicObject(1514, 1475.18, -1018.79, 26.73,   0.00, 0.00, 38.00);
    CreateDynamicObject(2190, 1475.59, -1015.50, 26.63,   0.00, 0.00, -62.00);
    CreateDynamicObject(2190, 1475.58, -1017.75, 26.63,   0.00, 0.00, -62.00);
    CreateDynamicObject(2218, 1478.79, -1015.69, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1482.75, -1015.83, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1486.63, -1015.95, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1490.78, -1016.02, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1490.59, -1013.07, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1487.10, -1011.46, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1483.18, -1011.74, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(2218, 1479.18, -1011.60, 26.56,   -26.00, 29.00, 0.00);
    CreateDynamicObject(1671, 1474.41, -1018.32, 26.26,   0.00, 0.00, 91.00);
    CreateDynamicObject(1671, 1474.40, -1015.94, 26.26,   0.00, 0.00, 91.00);
    CreateDynamicObject(3851, 1450.47, -1017.83, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1450.46, -1015.60, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1431.99, -1019.79, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1431.99, -1015.78, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1432.00, -1011.80, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(3851, 1431.99, -1010.75, 27.25,   90.00, -2.00, 2.00);
    CreateDynamicObject(18830, 1437.89, -1035.30, 21.10,   0.00, -172.00, -90.00);
    CreateDynamicObject(18830, 1444.70, -1035.23, 21.12,   0.00, -172.00, -90.00);
    CreateDynamicObject(3851, 1433.91, -1014.16, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1437.90, -1014.15, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1441.89, -1014.15, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1445.85, -1014.17, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1448.50, -1014.18, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1449.98, -1008.07, 25.86,   0.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1445.64, -1009.59, 27.79,   0.00, 0.00, 90.00);
    CreateDynamicObject(3851, 1434.35, -1009.63, 27.79,   0.00, 0.00, 90.00);
    CreateDynamicObject(3877, 1432.56, -1010.18, 25.73,   0.00, 0.00, 0.00);
    CreateDynamicObject(3877, 1450.40, -1010.12, 25.73,   0.00, 0.00, 0.00);
    CreateDynamicObject(1597, 1422.74, -1023.87, 25.84,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1432.30, -1014.61, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1432.35, -1014.53, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1436.79, -1014.61, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1444.45, -1014.51, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1440.63, -1014.61, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(3578, 1448.45, -1014.54, 25.08,   0.00, 0.00, 90.00);
    CreateDynamicObject(4639, 1429.54, -1026.29, 24.56,   0.00, 0.00, 0.00);
    CreateDynamicObject(3877, 1429.44, -1023.41, 23.73,   0.00, 0.00, 0.00);
    CreateDynamicObject(3851, 1433.97, -1024.57, 22.80,   33.00, 90.00, 0.00);
    CreateDynamicObject(2940, 1434.93, -1019.82, 25.84,   17.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1440.83, -1019.82, 25.84,   17.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1446.84, -1019.80, 25.84,   17.00, 0.00, 0.00);
    CreateDynamicObject(2940, 1447.56, -1019.79, 25.84,   17.00, 0.00, 0.00);
    CreateDynamicObject(3851, 1437.92, -1024.53, 22.80,   33.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1441.90, -1024.54, 22.80,   33.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1445.87, -1024.53, 22.80,   33.00, 90.00, 0.00);
    CreateDynamicObject(3851, 1448.60, -1024.52, 22.80,   33.00, 90.00, 0.00);
    //CITYHALL
    CreateDynamicObject(10377, 1481.15, -1792.93, 30.59,   0.00, 0.00, 89.43);
	CreateDynamicObject(7090, 1481.28, -1774.69, 35.03,   0.00, 8.00, 90.00);
	CreateDynamicObject(712, 1465.09, -1774.37, 22.06,   0.00, 0.00, 270.00);
	CreateDynamicObject(712, 1497.77, -1774.39, 22.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1215, 1492.91, -1774.49, 13.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1469.70, -1774.24, 13.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1453.10, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1457.40, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1461.60, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1465.70, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1473.40, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1477.60, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1487.10, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1491.30, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1500.50, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1504.70, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 1508.80, -1742.30, 13.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1454.40, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1459.70, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1465.00, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1474.10, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1476.90, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1487.80, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1490.60, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1501.20, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1506.50, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1508.10, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(970, 1451.10, -1744.30, 13.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(970, 1510.80, -1744.40, 13.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1256, 1451.50, -1744.50, 13.20,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1510.40, -1744.50, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1453.81, -1742.70, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1216, 1412.50, -1752.70, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1216, 1411.00, -1752.70, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1216, 1410.04, -1753.50, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1216, 1410.04, -1755.00, 13.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1216, 1547.90, -1752.70, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1216, 1546.20, -1752.70, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1216, 1548.80, -1753.30, 13.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1216, 1548.80, -1755.00, 13.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(1223, 1409.70, -1752.30, 12.00,   0.00, 0.00, 315.00);
	CreateDynamicObject(1223, 1549.20, -1752.40, 12.00,   0.00, 0.00, 215.00);
	CreateDynamicObject(18981, 1512.12, -1609.72, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1512.14, -1634.67, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1512.12, -1659.54, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1512.10, -1684.43, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1512.10, -1709.04, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1512.10, -1733.70, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.23, -1609.78, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.23, -1634.47, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.23, -1659.31, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.23, -1684.29, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.25, -1709.22, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1487.23, -1734.13, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.46, -1609.60, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.52, -1634.58, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.52, -1659.37, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.50, -1684.32, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.52, -1709.19, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1462.52, -1734.07, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1438.03, -1609.69, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1441.99, -1634.33, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1442.79, -1658.89, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1438.10, -1683.56, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1437.64, -1707.52, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 1437.98, -1732.34, 11.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(10368, 1479.35, -1678.98, 32.87,   0.00, 0.00, -180.00);
	CreateDynamicObject(655, 1520.22, -1723.10, 12.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(655, 1438.17, -1723.05, 12.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 1462.22, -1718.38, 12.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 1482.94, -1718.67, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(712, 1515.45, -1699.30, 22.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(712, 1515.75, -1678.49, 22.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 1482.92, -1659.16, 12.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 1462.18, -1659.31, 12.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(712, 1443.07, -1678.55, 22.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(712, 1443.10, -1699.15, 22.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(655, 1519.89, -1634.66, 12.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(655, 1438.46, -1634.64, 12.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(16061, 1485.49, -1602.62, 12.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(16061, 1485.50, -1631.74, 12.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(6965, 1482.81, -1616.72, 15.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1461.06, -1631.56, 13.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, 1473.99, -1631.56, 13.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, 1492.50, -1631.56, 13.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, 1503.39, -1631.56, 13.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, 1503.63, -1602.17, 13.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1492.48, -1602.17, 13.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1476.86, -1602.17, 13.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1461.43, -1602.17, 13.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(3853, 1438.14, -1601.00, 16.17,   0.00, 0.00, 90.00);
	CreateDynamicObject(3853, 1520.55, -1600.91, 16.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1257, 1436.48, -1629.19, 13.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(1229, 1435.56, -1626.23, 13.85,   0.00, 0.00, 270.00);
	CreateDynamicObject(14468, 1481.73, -1602.55, 12.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1471.47, -1602.49, 12.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1487.51, -1602.49, 12.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1496.13, -1602.19, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1499.87, -1601.89, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1508.03, -1602.35, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1465.26, -1602.27, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1456.79, -1602.19, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1456.56, -1631.44, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1464.72, -1631.64, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1469.88, -1631.47, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1478.73, -1631.43, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1482.99, -1631.52, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1487.65, -1631.53, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1496.56, -1631.58, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1499.15, -1631.46, 12.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(14468, 1507.32, -1631.65, 12.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(8623, 1450.36, -1616.66, 12.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(647, 1450.48, -1619.61, 12.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1450.37, -1616.41, 12.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1450.21, -1612.75, 12.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(3439, 1450.09, -1610.33, 16.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(3439, 1450.37, -1622.71, 16.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(1294, 1522.71, -1640.77, 16.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(1294, 1522.71, -1656.79, 16.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(1294, 1522.71, -1674.98, 16.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(1294, 1522.71, -1702.54, 16.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(1294, 1486.39, -1725.71, 16.84,   0.00, 0.00, 90.00);
	CreateDynamicObject(1294, 1458.80, -1725.71, 16.84,   0.00, 0.00, 90.00);
	CreateDynamicObject(1294, 1436.15, -1702.61, 16.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(1294, 1436.15, -1675.37, 16.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(1294, 1436.15, -1656.06, 16.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(1294, 1436.15, -1642.41, 16.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(1359, 1438.28, -1633.54, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1359, 1520.39, -1633.62, 13.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(8673, 1509.88, -1599.75, 13.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(8673, 1489.49, -1599.75, 13.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(8673, 1469.06, -1599.75, 13.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(8673, 1448.63, -1599.75, 13.81,   0.00, 0.00, 0.00);

	CreateDynamicObject(17049, 1773.74927, -1410.13440, 12.08925,   0.00000, 0.00000, 161.27414);
	CreateDynamicObject(17049, 1781.37366, -1330.43884, 12.50003,   0.00000, 0.00000, 264.60080);
	CreateDynamicObject(17049, 1754.49316, -1331.21521, 11.90426,   0.00000, 0.00000, 340.70377);
	CreateDynamicObject(17049, 1759.99072, -1410.44495, 12.23744,   0.00000, 0.00000, 62.67809);
	CreateDynamicObject(19334, 1767.64795, -1363.13806, 3.26959,   0.00000, 0.00000, 349.25977);
	CreateDynamicObject(8038, 1767.56311, -1370.15369, 32.07963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1836.84851, -1372.78540, 10.15638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1823.46167, -1372.80786, 10.22789,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(641, 1827.70251, -1372.76758, 9.99775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1831.74500, -1372.67847, 10.17732,   0.00000, 0.00000, 358.63239);
	CreateDynamicObject(641, 1818.71655, -1372.74731, 10.13205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1836.90796, -1362.68445, 10.16409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1832.45801, -1362.61023, 10.23546,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1827.81897, -1362.64124, 10.10587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1823.49268, -1362.71277, 10.14486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(641, 1818.88062, -1362.82300, 10.12789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6965, 1802.82837, -1366.07422, 16.22380,   0.00000, 0.00000, 358.90695);
	CreateDynamicObject(3877, 1767.94995, -1362.95569, 31.90493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 1764.78320, -1397.31348, 53.37221,   0.00000, 0.00000, 0.30301);
	CreateDynamicObject(3877, 1772.81335, -1405.43616, 53.37115,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3877, 1764.68188, -1405.54980, 53.84048,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1773.94885, -1410.26038, 35.44177,   356.85840, 0.00000, 4.26689);
	CreateDynamicObject(3525, 1781.99072, -1335.70520, 15.66369,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1781.95447, -1344.26306, 15.66369,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1781.99072, -1335.70520, 15.66369,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1781.88428, -1381.71704, 15.83360,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(3525, 1781.94080, -1390.00305, 15.83360,   0.00000, 0.00000, 359.69696);
	CreateDynamicObject(1597, 1818.27466, -1367.22656, 15.17522,   0.00000, 0.00000, 89.33646);
	CreateDynamicObject(3472, 1802.86084, -1378.48999, 12.32035,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1803.39832, -1353.69897, 12.40380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1814.64441, -1359.12781, 12.39899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1806.67151, -1384.25830, 12.49899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1783.42542, -1340.02759, 12.49899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1815.62903, -1374.96204, 12.49899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1790.94165, -1384.95667, 12.29389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1782.66931, -1386.42505, 12.50002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 1767.92090, -1333.05579, 22.31321,   0.00000, 0.00000, 359.36902);
	CreateDynamicObject(1692, 1767.53223, -1391.43030, 22.31321,   0.00000, 0.00000, 359.36902);
	CreateDynamicObject(1693, 1767.79199, -1344.84033, 21.48782,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1693, 1767.69788, -1382.35754, 21.48782,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1833.41846, -1363.70715, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1835.71667, -1363.73730, 13.14665,   0.00000, 0.00000, 268.88937);
	CreateDynamicObject(2773, 1830.79517, -1363.68262, 13.14665,   0.00000, 0.00000, 268.88937);
	CreateDynamicObject(2773, 1816.62537, -1362.52856, 13.23132,   0.00000, 0.00000, 219.93089);
	CreateDynamicObject(2773, 1828.39417, -1363.67358, 13.14665,   0.00000, 0.00000, 268.88937);
	CreateDynamicObject(2773, 1826.03394, -1363.68372, 13.14665,   0.00000, 0.00000, 268.88937);
	CreateDynamicObject(2773, 1823.65417, -1363.76270, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1821.24414, -1363.75317, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1818.78906, -1363.69385, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1833.41846, -1363.70715, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1835.43823, -1371.93799, 13.14665,   0.00000, 0.00000, 268.88937);
	CreateDynamicObject(2773, 1832.87048, -1371.91479, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1832.87048, -1371.91479, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1830.26807, -1371.89343, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1830.26807, -1371.89343, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1827.86426, -1371.87976, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1825.45886, -1371.86768, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1823.05457, -1371.87549, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1820.68884, -1371.88098, 13.23132,   0.00000, 0.00000, 269.27017);
	CreateDynamicObject(2773, 1818.38831, -1372.28357, 13.23132,   0.00000, 0.00000, 292.90271);
	CreateDynamicObject(2773, 1816.60754, -1373.72388, 13.12726,   0.00000, 0.00000, 315.16061);
	CreateDynamicObject(2773, 1815.31653, -1360.54871, 13.23132,   0.00000, 0.00000, 207.32259);
	CreateDynamicObject(3877, 1772.90027, -1397.09839, 53.57354,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1759.99438, -1410.39441, 35.78680,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(3515, 1781.38562, -1330.27380, 35.98780,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(3515, 1754.72986, -1331.39087, 35.48681,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(3515, 1773.94800, -1410.28308, 35.48680,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(3578, 1836.18176, -1378.24512, 13.33372,   0.00000, 0.00000, 90.04182);
	CreateDynamicObject(3578, 1836.18457, -1388.43469, 13.33372,   0.00000, 0.00000, 90.10182);
	CreateDynamicObject(3578, 1836.18457, -1388.43469, 13.33372,   0.00000, 0.00000, 90.10182);
	CreateDynamicObject(3578, 1836.23779, -1418.75793, 13.33372,   0.00000, 0.00000, 90.04182);
	CreateDynamicObject(3578, 1836.24414, -1428.79321, 13.33372,   0.00000, 0.00000, 90.04182);
	CreateDynamicObject(3578, 1836.21484, -1439.03296, 13.33372,   0.00000, 0.00000, 90.04182);
	CreateDynamicObject(3578, 1836.21545, -1445.60059, 13.33372,   0.00000, 0.00000, 90.04182);
	CreateDynamicObject(3578, 1831.31982, -1450.14026, 13.33372,   0.00000, 0.00000, 179.88528);
	CreateDynamicObject(3578, 1824.79749, -1450.11365, 13.33372,   0.00000, 0.00000, 179.88528);
	CreateDynamicObject(3578, 1814.61719, -1449.25415, 13.33372,   0.00000, 0.00000, 170.99692);
	CreateDynamicObject(3578, 1806.87756, -1447.93506, 13.33372,   0.00000, 0.00000, 169.88391);
	CreateDynamicObject(3578, 1797.05518, -1445.32654, 13.34083,   0.00000, 0.00000, 161.02098);
	CreateDynamicObject(3578, 1787.54944, -1442.02795, 13.34083,   0.00000, 0.00000, 161.02098);
	CreateDynamicObject(3578, 1777.94739, -1438.71887, 13.34083,   0.00000, 0.00000, 161.02098);
	CreateDynamicObject(3578, 1769.28503, -1435.67114, 13.34083,   0.00000, 0.00000, 161.02098);
	CreateDynamicObject(3578, 1759.64307, -1433.07214, 13.34083,   0.00000, 0.00000, 169.18799);
	CreateDynamicObject(3578, 1749.63977, -1431.12305, 13.34083,   0.00000, 0.00000, 169.18799);
	CreateDynamicObject(3578, 1739.51465, -1430.19763, 13.34083,   0.00000, 0.00000, 180.43277);
	CreateDynamicObject(3578, 1730.00586, -1430.23083, 13.34083,   0.00000, 0.00000, 180.43277);
	CreateDynamicObject(3578, 1725.39819, -1425.20972, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.43298, -1415.39270, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.47876, -1405.22180, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.52283, -1395.14685, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.53772, -1385.24866, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.64417, -1372.04626, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.74060, -1345.91125, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.75256, -1336.75122, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.84814, -1327.40381, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.88245, -1317.60376, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.89050, -1315.86292, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1731.26685, -1311.15002, 13.34083,   0.00000, 0.00000, 183.54016);
	CreateDynamicObject(3578, 1737.05383, -1310.71277, 13.34083,   0.00000, 0.00000, 184.60144);
	CreateDynamicObject(3578, 1746.78442, -1309.22595, 13.34083,   0.00000, 0.00000, 192.78281);
	CreateDynamicObject(3578, 1756.25720, -1306.53284, 13.34083,   0.00000, 0.00000, 199.39363);
	CreateDynamicObject(3578, 1756.97681, -1306.28345, 13.34083,   0.00000, 0.00000, 199.39363);
	CreateDynamicObject(3578, 1766.32825, -1302.20984, 13.34083,   0.00000, 0.00000, 207.63203);
	CreateDynamicObject(3578, 1775.15894, -1297.63855, 13.34083,   0.00000, 0.00000, 207.63203);
	CreateDynamicObject(3578, 1782.63843, -1293.56323, 13.34083,   0.00000, 0.00000, 209.54909);
	CreateDynamicObject(3578, 1790.98474, -1287.95776, 13.34083,   0.00000, 0.00000, 218.08900);
	CreateDynamicObject(3578, 1799.02844, -1281.84973, 13.34083,   0.00000, 0.00000, 215.94038);
	CreateDynamicObject(3578, 1807.65503, -1276.43994, 13.34083,   0.00000, 0.00000, 208.13133);
	CreateDynamicObject(3578, 1817.06909, -1272.88818, 13.34083,   0.00000, 0.00000, 193.38162);
	CreateDynamicObject(3578, 1827.08960, -1271.68115, 13.34083,   0.00000, 0.00000, 180.38295);
	CreateDynamicObject(3578, 1831.48718, -1271.67212, 13.34083,   0.00000, 0.00000, 180.38295);
	CreateDynamicObject(3578, 1836.21631, -1276.53992, 13.34083,   0.00000, 0.00000, 269.17691);
	CreateDynamicObject(3578, 1836.10400, -1286.08032, 13.34083,   0.00000, 0.00000, 269.17691);
	CreateDynamicObject(3578, 1836.05969, -1295.69641, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.13745, -1305.18188, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.25623, -1314.39246, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.29688, -1324.51038, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.33289, -1334.56616, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.30640, -1344.79150, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.21582, -1357.20313, 13.34083,   0.00000, 0.00000, 270.40738);
	CreateDynamicObject(3578, 1836.22205, -1348.99683, 13.34083,   0.00000, 0.00000, 269.50229);
	CreateDynamicObject(1231, 1726.55005, -1429.17163, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1726.81763, -1312.85242, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.19995, -1272.59253, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.28796, -1361.58752, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.26477, -1373.31982, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.26477, -1373.31982, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.40723, -1449.15417, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.51611, -1308.66711, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.23779, -1334.98792, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.11829, -1414.90601, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1801.44385, -1446.07019, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1765.86707, -1433.22595, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1727.40149, -1368.22205, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1727.26135, -1352.53625, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1762.04492, -1305.38232, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1795.04736, -1286.07739, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1835.22205, -1393.22754, 15.13572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10011, 1819.31812, -1416.94958, 7.77049,   0.00000, 0.00000, 252.40675);
	CreateDynamicObject(1290, 1808.14856, -1419.18970, 17.98647,   0.00000, 0.00000, 254.39674);
	CreateDynamicObject(1226, 1809.31702, -1392.46631, 16.34867,   0.00000, 0.00000, 128.69363);
	CreateDynamicObject(2727, 1498.75037, -1582.37988, 19.86535,   90.00000, 0.00000, 358.34869);
	CreateDynamicObject(0, 1807.80786, -1376.91357, 21.41417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 1845.50525, -1383.42908, 20.00578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5399, 1780.23950, -1362.62170, 15.03325,   0.00000, 0.00000, 89.82710);
	CreateDynamicObject(3851, 1781.78357, -1350.12415, 13.86453,   0.00000, 0.00000, 359.66611);
	CreateDynamicObject(3851, 1781.64307, -1373.92004, 13.96654,   0.00000, 0.00000, 358.26196);
	CreateDynamicObject(3851, 1781.84741, -1350.52124, 13.62005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1781.81165, -1373.96301, 13.62005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1781.83691, -1358.24158, 14.13855,   0.00000, 0.00000, 89.20717);
	CreateDynamicObject(1649, 1781.81726, -1366.93860, 14.03755,   0.00000, 0.00000, 90.08510);
	CreateDynamicObject(1649, 1781.80225, -1362.64771, 14.03755,   0.00000, 0.00000, 90.04167);
	CreateDynamicObject(1557, 1781.88171, -1361.20740, 12.50500,   0.00000, 0.00000, 270.21509);
	CreateDynamicObject(1557, 1781.88171, -1364.17407, 12.50500,   0.00000, 0.00000, 90.44890);
	CreateDynamicObject(1215, 1795.00000, 9326.00000, -1355.00000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1783.00000, 757.00000, 9098.00000,   86.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1781.00000, 9766.00000, -1356.00000,   86.00000, 0.00000, 160.00000);
	CreateDynamicObject(3785, 1782.04443, -1368.27734, 13.08128,   0.00000, 0.00000, 5.21052);
	CreateDynamicObject(3785, 1782.01245, -1368.34485, 15.68518,   0.00000, 0.00000, 5.21052);
	CreateDynamicObject(3785, 1782.03723, -1356.78198, 13.08228,   0.00000, 0.00000, 5.21052);
	CreateDynamicObject(3785, 1782.15051, -1362.51404, 18.58154,   0.00000, 0.00000, 5.45577);
	CreateDynamicObject(3785, 1782.00000, 265.00000, -1356.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3785, 1782.07886, -1356.78186, 15.68418,   0.00000, 0.00000, 5.21052);
	CreateDynamicObject(2728, 500.00000, 7319.00000, 7499.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2728, 1496.00000, 6401.00000, -1584.00000,   25.00000, 0.00000, 0.00000);
	CreateDynamicObject(2728, 1493.00000, 6976.00000, -1586.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 1459.76965, -1578.32617, 37.93961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2728, 1459.63916, -1578.27856, 40.55825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(621, 1833.01709, -1284.49097, 12.43551,   0.00000, 0.00000, 1.04950);
	CreateDynamicObject(621, 1729.86719, -1340.81604, 12.02216,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(624, 1834.98572, -1357.53003, 11.55103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(624, 1835.34229, -1377.68909, 11.55103,   0.00000, 0.00000, -1.20000);
	CreateDynamicObject(621, 1777.38965, -1434.40295, 12.10022,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(621, 1729.25842, -1399.23315, 12.05894,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18170, 1847.11841, -1313.77856, 17.08887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18270, 1784.30200, -1314.10815, 23.44537,   0.00000, 0.00000, 113.37655);
	CreateDynamicObject(1688, 1757.94788, -1342.24805, 21.71188,   0.00000, 0.00000, 87.99409);
	CreateDynamicObject(1688, 1776.61182, -1333.55139, 21.71188,   0.00000, 0.00000, 87.99409);
	CreateDynamicObject(1688, 1760.51245, -1396.05786, 21.71188,   0.00000, 0.00000, 87.99409);
	CreateDynamicObject(1688, 1775.37927, -1377.93237, 21.71188,   0.00000, 0.00000, 87.99409);
	CreateDynamicObject(1689, 1756.11890, -1382.05127, 21.65529,   0.00000, 0.00000, 89.42489);
	CreateDynamicObject(1635, 1753.00964, -1390.97778, 15.32842,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1635, 1752.97278, -1383.73340, 15.22842,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1269, 1807.93237, -1397.71826, 13.14132,   0.00000, 0.00000, 446.56030);
	CreateDynamicObject(647, 1768.59375, -1266.10156, 14.73438,   3.14159, 0.00000, 0.17957);
	CreateDynamicObject(647, 1774.89844, -1265.36719, 14.73438,   3.14159, 0.00000, 0.17957);
	CreateDynamicObject(620, 1773.87500, -1267.32031, 12.94531,   3.14159, 0.00000, 2.44346);
	CreateDynamicObject(3948, 1808.33435, -1289.62207, 20.82049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1725.78369, -1348.18665, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(3578, 1725.58655, -1375.65198, 13.34083,   0.00000, 0.00000, 269.81931);
	CreateDynamicObject(624, 1728.81531, -1367.79773, 10.25434,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(624, 1729.24902, -1352.65063, 10.76444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1782.04688, -1336.96069, 13.85925,   0.00000, 0.00000, 92.87735);
	CreateDynamicObject(2690, 1753.57068, -1339.83142, 13.44281,   0.00000, 0.00000, 79.47469);
	CreateDynamicObject(3864, 1782.12402, -1378.07776, 16.78703,   0.00000, 0.00000, 222.80936);
	CreateDynamicObject(3864, 1782.25977, -1345.74988, 16.78703,   0.00000, 0.00000, 133.52936);
	CreateDynamicObject(8041, 1835.57385, -1403.63147, 17.89092,   0.00000, 0.00000, 359.39694);
	CreateDynamicObject(8417, 1815.34973, -1292.13257, 12.23066,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1815.30457, -1363.93933, 12.52257,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8647, 1786.46960, -1343.97302, 13.36522,   0.00000, 0.00000, 269.74725);
	CreateDynamicObject(8647, 1820.77234, -1344.09509, 13.36522,   0.00000, 0.00000, 89.18996);
	CreateDynamicObject(8647, 1821.25659, -1384.17920, 13.36522,   0.00000, 0.00000, 90.30711);
	CreateDynamicObject(8647, 1786.59351, -1384.02332, 13.36522,   0.00000, 0.00000, 269.23608);
	CreateDynamicObject(8417, 1802.25745, -1364.41272, 12.62156,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1787.44312, -1404.34387, 12.34912,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1816.16052, -1323.99036, 12.42356,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1802.65210, -1324.58496, 12.42457,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1782.67163, -1311.66882, 12.22857,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1744.63159, -1325.01294, 12.32256,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1746.22681, -1364.93811, 12.32356,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1746.87244, -1412.97180, 12.22657,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1801.19006, -1384.27185, 12.49899,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(1568, 1801.13782, -1344.07288, 12.49899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1806.17773, -1343.94141, 12.49899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1754.55505, -1353.74377, 13.41413,   0.00000, 0.00000, 90.29595);
	CreateDynamicObject(1331, 1754.57739, -1367.84924, 13.41413,   0.00000, 0.00000, 90.29595);
	CreateDynamicObject(1331, 1834.70862, -1416.77124, 13.39684,   0.00000, 0.00000, 83.00848);
	CreateDynamicObject(1339, 1837.36743, -1361.68567, 13.26329,   0.00000, 0.00000, 84.86100);
	CreateDynamicObject(942, 1763.28418, -1328.13184, 14.80596,   0.00000, 0.00000, 180.21701);
	CreateDynamicObject(1449, 1781.36865, -1326.92590, 12.95858,   0.00000, 0.00000, -187.50000);
	CreateDynamicObject(1219, 1768.17505, -1328.86060, 12.50302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1825.49377, -1345.84644, 13.25235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1827.81299, -1345.68408, 13.25235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1826.65161, -1345.77087, 13.25235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1366, 1805.93542, -1415.33203, 12.93726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1366, 1804.95569, -1415.10730, 12.93866,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1366, 1756.95459, -1422.17102, 13.04977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 1818.43066, -1390.46301, 13.74956,   0.00000, 0.00000, 269.96719);
	CreateDynamicObject(918, 1769.97144, -1411.39404, 12.85886,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1768.97302, -1411.63257, 12.85886,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1769.46033, -1411.49622, 12.85886,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1766.53918, -1411.20264, 13.73865,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(956, 1764.91235, -1411.49817, 12.88145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1977, 1753.12708, -1379.51221, 12.62815,   0.00000, 0.00000, 273.12268);
	CreateDynamicObject(717, 1752.36206, -1415.94385, 12.64010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 1740.67700, -1405.30554, 12.64010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 1732.85754, -1420.49219, 12.64010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1730.53772, -1408.55713, 12.61608,   0.00000, 0.00000, 359.89084);
	CreateDynamicObject(737, 1739.80884, -1415.28784, 12.62116,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 1774.86877, -1328.50208, 13.46275,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1815.52417, -1403.87231, 12.34606,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1779.85400, -1413.18384, 12.34607,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1786.24768, -1404.95947, 12.24506,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 1746.52222, -1404.89758, 12.42556,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(5464, 1902.41260, -1309.37976, 29.86950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1308, 1837.07507, -1370.04065, 12.89112,   0.00000, 0.00000, 343.86874);
	CreateDynamicObject(1297, 1842.39941, -1371.81189, 15.91406,   356.85840, 0.00000, 170.07841);
	//IDLEWOOD GAS STATION
	CreateDynamicObject(11292,1926.69995117,-1770.79003906,14.60000038,90.00000000,179.99450684,270.00000000); //object(gasstatiohut) (1)
	CreateDynamicObject(11292,1926.69995117,-1782.00000000,14.55000019,90.00000000,179.99450684,270.23901367); //object(gasstatiohut) (2)
	CreateDynamicObject(11292,1926.69921875,-1770.80004883,10.39999962,90.00000000,179.99450684,269.98901367); //object(gasstatiohut) (4)
	CreateDynamicObject(11292,1926.69921875,-1782.00000000,10.39999962,90.00000000,180.00549316,269.97802734); //object(gasstatiohut) (5)
	CreateDynamicObject(11292,1926.69921875,-1777.59960938,12.50000000,0.00000000,90.00000000,0.00000000); //object(gasstatiohut) (6)
	CreateDynamicObject(11292,1923.69921875,-1784.89941406,14.55000019,90.00000000,179.99450684,179.99450684); //object(gasstatiohut) (7)
	CreateDynamicObject(11292,1918.79980469,-1784.89941406,14.55000019,90.00000000,179.99450684,179.99450684); //object(gasstatiohut) (9)
	CreateDynamicObject(11292,1923.69995117,-1784.90002441,10.39999962,90.00000000,179.99450684,179.99450684); //object(gasstatiohut) (10)
	CreateDynamicObject(11292,1918.80004883,-1784.90002441,10.39999962,90.00000000,180.00549316,179.98352051); //object(gasstatiohut) (11)
	CreateDynamicObject(11292,1915.90002441,-1781.90002441,14.55000019,90.00000000,179.99450684,89.99453735); //object(gasstatiohut) (12)
	CreateDynamicObject(11292,1915.89941406,-1781.89941406,10.39999962,90.00000000,180.00549316,89.98352051); //object(gasstatiohut) (13)
	CreateDynamicObject(11292,1915.90002441,-1770.80004883,15.19999981,270.00000000,181.08157349,271.07040405); //object(gasstatiohut) (14)
	CreateDynamicObject(11292,1915.90002441,-1770.80004883,11.00000000,270.00000000,176.02844238,266.01745605); //object(gasstatiohut) (15)
	CreateDynamicObject(11292,1918.90002441,-1767.80004883,14.55000019,90.00000000,180.00549316,359.98364258); //object(gasstatiohut) (16)
	CreateDynamicObject(11292,1923.77929688,-1767.79980469,14.60000038,90.00000000,180.00549316,359.97802734); //object(gasstatiohut) (17)
	CreateDynamicObject(11292,1918.90002441,-1767.80004883,10.39999962,90.00000000,180.00549316,359.98352051); //object(gasstatiohut) (18)
	CreateDynamicObject(11292,1923.78002930,-1767.80004883,10.39999962,90.00000000,180.00549316,359.97802734); //object(gasstatiohut) (19)
	CreateDynamicObject(1522,1928.20996094,-1773.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(gen_doorshop3) (1)
	CreateDynamicObject(1522,1928.20996094,-1775.39941406,12.50000000,0.00000000,0.00000000,270.00000000); //object(gen_doorshop3) (2)
	CreateDynamicObject(16107,1921.40002441,-1771.30004883,12.97000027,0.00000000,0.00000000,90.00000000); //object(des_ngassta) (1)
	CreateDynamicObject(3034,1928.29980469,-1769.59960938,14.50000000,0.00000000,0.00000000,90.00000000); //object(bd_window) (1)
	CreateDynamicObject(3034,1928.30004883,-1779.69995117,14.50000000,0.00000000,0.00000000,90.00000000); //object(bd_window) (2)
	CreateDynamicObject(3034,1928.29980469,-1784.29980469,14.50000000,0.00000000,0.00000000,90.00000000); //object(bd_window) (3)
	CreateDynamicObject(3034,1923.90002441,-1786.50000000,14.50000000,0.00000000,0.00000000,0.00000000); //object(bd_window) (4)
	CreateDynamicObject(3034,1918.00000000,-1786.50000000,14.50000000,0.00000000,0.00000000,0.00000000); //object(bd_window) (5)
	CreateDynamicObject(2714,1928.40002441,-1778.59997559,15.00000000,0.00000000,0.00000000,90.00000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(1280,1928.59997559,-1784.30004883,12.89999962,0.00000000,0.00000000,180.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,1928.59997559,-1779.59997559,12.89999962,0.00000000,0.00000000,179.99450684); //object(parkbench1) (2)
	CreateDynamicObject(1337,1920.89941406,-1786.89941406,13.19999981,0.00000000,0.00000000,0.00000000); //object(binnt07_la) (5)
	CreateDynamicObject(3034,1924.09997559,-1766.19995117,14.50000000,0.00000000,0.00000000,180.00000000); //object(bd_window) (1)
	CreateDynamicObject(3034,1918.19995117,-1766.09997559,14.50000000,0.00000000,0.00000000,179.99450684); //object(bd_window) (1)
	CreateDynamicObject(1691,1919.59997559,-1770.30004883,17.20000076,0.00000000,0.00000000,270.00000000); //object(gen_roofbit5) (1)
	CreateDynamicObject(8674,1898.69995117,-1762.40002441,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (1)
	CreateDynamicObject(8674,1903.90002441,-1767.59997559,14.00000000,0.00000000,0.00000000,270.00000000); //object(csrsfence02_lvs) (2)
	CreateDynamicObject(8674,1903.90002441,-1777.90002441,14.00000000,0.00000000,0.00000000,270.00000000); //object(csrsfence02_lvs) (3)
	CreateDynamicObject(8674,1903.90002441,-1788.19995117,14.00000000,0.00000000,0.00000000,270.00000000); //object(csrsfence02_lvs) (4)
	CreateDynamicObject(8674,1903.90002441,-1792.09997559,14.00000000,0.00000000,0.00000000,270.00000000); //object(csrsfence02_lvs) (5)
	CreateDynamicObject(8674,1909.00000000,-1797.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (6)
	CreateDynamicObject(8674,1919.30004883,-1797.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (7)
	CreateDynamicObject(8674,1929.59960938,-1797.29980469,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (8)
	CreateDynamicObject(8674,1939.90002441,-1797.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (9)
	CreateDynamicObject(8674,1946.50000000,-1797.30004883,14.00000000,0.00000000,0.00000000,0.00000000); //object(csrsfence02_lvs) (10)
	CreateDynamicObject(1484,1921.40002441,-1786.80004883,12.80000019,0.00000000,34.00000000,0.00000000); //object(cj_bear_bottle) (1)
	CreateDynamicObject(1484,1921.50000000,-1786.90002441,12.69999981,0.00000000,119.99993896,0.00000000); //object(cj_bear_bottle) (2)
	CreateDynamicObject(1484,1921.59997559,-1786.90002441,12.69999981,0.00000000,119.99813843,40.00000000); //object(cj_bear_bottle) (3)
	CreateDynamicObject(1484,1921.59997559,-1786.59997559,12.80000019,0.00000000,62.00000000,89.99572754); //object(cj_bear_bottle) (4)
	CreateDynamicObject(1775,1928.80004883,-1772.45397949,13.63899994,0.00000000,0.00000000,90.00000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(2780,1911.09997559,-1775.80004883,6.40000010,0.00000000,0.00000000,90.00000000); //object(cj_smoke_mach) (1)
	CreateDynamicObject(11489,1928.26000977,-1786.59997559,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (1)
	CreateDynamicObject(11489,1928.30004883,-1777.00000000,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (2)
	CreateDynamicObject(11489,1928.30004883,-1774.00000000,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (3)
	CreateDynamicObject(11489,1928.30004883,-1766.30004883,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (4)
	CreateDynamicObject(11489,1914.30004883,-1766.30004883,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (5)
	CreateDynamicObject(11489,1914.31994629,-1786.55004883,-2.20000005,0.00000000,0.00000000,0.00000000); //object(dam_statues) (6)
	CreateDynamicObject(1215,1951.59997559,-1762.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1951.69995117,-1777.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(970,1951.69995117,-1775.19995117,13.00000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1951.69995117,-1771.09997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1951.69995117,-1767.00000000,13.00000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1951.69995117,-1764.59997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(1257,1953.19995117,-1769.80004883,13.80000019,0.00000000,0.00000000,180.00000000); //object(bustopm) (1)
	CreateDynamicObject(1650,1921.90002441,-1786.59997559,12.80000019,0.00000000,0.00000000,180.00000000); //object(petrolcanm) (1)
	CreateDynamicObject(1229,1956.00000000,-1766.00000000,14.10000038,0.00000000,0.00000000,180.00000000); //object(bussign1) (1)
	CreateDynamicObject(1549,1928.50000000,-1777.19995117,12.50000000,0.00000000,0.00000000,274.00000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(1886,1934.09960938,-1780.89941406,17.89999962,34.49926758,0.00000000,147.99536133); //object(shop_sec_cam) (1)
	//PIZZA STACK
	CreateDynamicObject(1360,2258.8999000,-1343.1000000,23.8000000,0.0000000,0.0000000,270.0000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,2256.0000000,-1343.1000000,23.8000000,0.0000000,0.0000000,272.0000000); //object(cj_bush_prop3) (2)
	CreateDynamicObject(970,2222.5000000,-1372.2000000,23.5000000,0.0000000,0.0000000,270.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,2224.6001000,-1370.1000000,23.5000000,0.0000000,0.0000000,180.5000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,2228.7000000,-1370.1000000,23.5000000,0.0000000,0.0000000,180.2500000); //object(fencesmallb) (4)
	CreateDynamicObject(970,2232.8000000,-1370.1000000,23.5000000,0.0000000,0.0000000,180.2470000); //object(fencesmallb) (5)
	CreateDynamicObject(1775,2232.8999000,-1368.8000000,24.1000000,0.0000000,0.0000000,270.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1281,2228.5000000,-1366.0000000,23.8000000,0.0000000,0.0000000,0.0000000); //object(parktable1) (1)
	CreateDynamicObject(1281,2225.8000000,-1359.6000000,23.8000000,0.0000000,0.0000000,34.0000000); //object(parktable1) (2)
	CreateDynamicObject(2837,2225.3999000,-1360.1000000,23.8000000,0.0000000,0.0000000,0.0000000); //object(gb_takeaway02) (1)
	CreateDynamicObject(2837,2224.8999000,-1365.1000000,23.0000000,0.0000000,0.0000000,0.0000000); //object(gb_takeaway02) (2)
	CreateDynamicObject(1216,2232.8999000,-1366.6000000,23.7000000,0.0000000,0.0000000,270.0000000); //object(phonebooth1) (1)
	CreateDynamicObject(2867,2227.8000000,-1365.6000000,23.8000000,0.0000000,0.0000000,0.0000000); //object(gb_foodwrap05) (1)
	CreateDynamicObject(1340,2231.8000000,-1362.2000000,24.1000000,0.0000000,0.0000000,180.0000000); //object(chillidogcart) (1)
	CreateDynamicObject(3578,2229.6001000,-1355.3000000,22.3000000,0.0000000,0.0000000,0.0000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,2229.5000000,-1350.0000000,22.3000000,0.0000000,0.0000000,0.0000000); //object(dockbarr1_la) (3)
	CreateDynamicObject(3578,2229.7000000,-1344.4000000,22.3000000,0.0000000,0.0000000,0.0000000); //object(dockbarr1_la) (4)
	CreateDynamicObject(3578,2229.8000000,-1339.0000000,22.3000000,0.0000000,0.0000000,0.0000000); //object(dockbarr1_la) (5)
	CreateDynamicObject(1257,2234.1001000,-1378.0000000,24.3000000,0.0000000,0.0000000,90.0000000); //object(bustopm) (1)
	CreateDynamicObject(949,2232.8999000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,2225.6001000,-1338.4000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(949,2231.7000000,-1338.3000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(949,2230.7998000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(949,2229.9004000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (5)
	CreateDynamicObject(949,2229.1006000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (6)
	CreateDynamicObject(949,2228.2000000,-1338.3000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (7)
	CreateDynamicObject(949,2227.2998000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (8)
	CreateDynamicObject(949,2226.4004000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (9)
	CreateDynamicObject(949,2224.7000000,-1338.4000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (10)
	CreateDynamicObject(949,2232.6006000,-1338.2998000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (24)
	CreateDynamicObject(949,2232.0000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (25)
	CreateDynamicObject(949,2231.1001000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (26)
	CreateDynamicObject(949,2230.2000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (27)
	CreateDynamicObject(949,2229.3000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (28)
	CreateDynamicObject(949,2228.3999000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (29)
	CreateDynamicObject(949,2227.5000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (30)
	CreateDynamicObject(949,2226.6001000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (31)
	CreateDynamicObject(949,2225.7000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (32)
	CreateDynamicObject(949,2224.7000000,-1356.0000000,23.6000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (33)
	CreateDynamicObject(970,2100.3999000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,2104.5000000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,2112.7000000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (8)
	CreateDynamicObject(970,2116.8000000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (9)
	CreateDynamicObject(1226,2125.8999000,-1788.6000000,16.4000000,0.0000000,0.0000000,318.0000000); //object(lamppost3) (1)
	CreateDynamicObject(970,2120.8999000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (10)
	CreateDynamicObject(970,2125.0000000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (11)
	CreateDynamicObject(970,2129.1001000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (12)
	CreateDynamicObject(970,2133.2000000,-1786.1000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (13)
	CreateDynamicObject(1364,2098.0000000,-1782.3000000,13.4000000,0.0000000,0.0000000,261.5000000); //object(cj_bush_prop) (1)
	CreateDynamicObject(792,2098.6001000,-1779.5000000,12.6000000,0.0000000,0.0000000,351.7500000); //object(aw_streettree1) (1)
	CreateDynamicObject(792,2097.7000000,-1785.2000000,12.6000000,0.0000000,0.0000000,350.4970000); //object(aw_streettree1) (2)
	CreateDynamicObject(1364,2098.8000000,-1776.6000000,13.4000000,0.0000000,0.0000000,261.4970000); //object(cj_bush_prop) (2)
	CreateDynamicObject(792,2099.5000000,-1773.8000000,12.6000000,0.0000000,0.0000000,351.2490000); //object(aw_streettree1) (3)
	CreateDynamicObject(1364,2099.8999000,-1771.0000000,13.4000000,0.0000000,0.0000000,256.2470000); //object(cj_bush_prop) (3)
	CreateDynamicObject(792,2101.3999000,-1768.4000000,12.6000000,0.0000000,0.0000000,308.9940000); //object(aw_streettree1) (4)
	CreateDynamicObject(997,2105.6001000,-1767.2000000,12.6000000,0.0000000,0.0000000,22.0000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,2108.6001000,-1766.0000000,12.6000000,0.0000000,0.0000000,59.2450000); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,2110.2000000,-1763.2000000,12.6000000,0.0000000,0.0000000,98.9940000); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,2109.6001000,-1760.0000000,12.6000000,0.0000000,0.0000000,136.9920000); //object(lhouse_barrier3) (4)
	CreateDynamicObject(997,2107.2000000,-1757.8000000,12.6000000,0.0000000,0.0000000,172.2390000); //object(lhouse_barrier3) (5)
	CreateDynamicObject(997,2104.0000000,-1757.4000000,12.6000000,0.0000000,0.0000000,182.4880000); //object(lhouse_barrier3) (6)
	CreateDynamicObject(997,2095.2000000,-1762.2000000,12.6000000,0.0000000,0.0000000,58.4830000); //object(lhouse_barrier3) (7)
	CreateDynamicObject(6958,2104.5000000,-1806.7000000,21.3000000,0.0000000,0.0000000,0.0000000); //object(vgnmallsigns14) (1)
	CreateDynamicObject(2364,2110.5000000,-1788.5000000,12.6000000,0.0000000,0.0000000,38.0000000); //object(cj_shop_sign_2) (1)
	CreateDynamicObject(1775,2112.7000000,-1790.5000000,13.7000000,0.0000000,0.0000000,180.5000000); //object(cj_sprunk1) (2)
	CreateDynamicObject(1363,2098.8000000,-1766.7000000,13.4000000,0.0000000,0.0000000,344.0000000); //object(cj_phone_kiosk) (1)
	CreateDynamicObject(1234,2098.6001000,-1767.9000000,14.1000000,0.0000000,0.0000000,0.0000000); //object(phonesign) (1)
	CreateDynamicObject(1216,2114.0000000,-1790.6000000,13.2000000,0.0000000,0.0000000,180.0000000); //object(phonebooth1) (2)
	CreateDynamicObject(1233,2125.0000000,-1789.2000000,14.1000000,0.0000000,0.0000000,238.0000000); //object(noparkingsign1) (1)
	CreateDynamicObject(8661,2131.6001000,-1811.4000000,12.6000000,0.0000000,0.0000000,267.5000000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(3578,2133.8000000,-1791.6000000,11.9000000,0.0000000,0.0000000,359.5000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,2133.8000000,-1795.6000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (6)
	CreateDynamicObject(3578,2133.8000000,-1799.6000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (7)
	CreateDynamicObject(3578,2133.8000000,-1803.7000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (8)
	CreateDynamicObject(3578,2133.7000000,-1807.8000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (9)
	CreateDynamicObject(3578,2133.7000000,-1812.4000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (10)
	CreateDynamicObject(3578,2133.7000000,-1816.6000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (11)
	CreateDynamicObject(3578,2133.7000000,-1820.7000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (12)
	CreateDynamicObject(3578,2133.6001000,-1824.9000000,11.9000000,0.0000000,0.0000000,359.4950000); //object(dockbarr1_la) (13)
	CreateDynamicObject(8661,2125.8000000,-1821.9000000,12.6000000,0.0000000,0.0000000,179.4950000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(966,2106.1001000,-1823.7000000,12.5000000,0.0000000,0.0000000,88.7500000); //object(bar_gatebar01) (1)
	CreateDynamicObject(968,2106.1001000,-1823.5000000,13.0000000,0.0770000,88.0010000,268.7510000); //object(barrierturn) (1)
	CreateDynamicObject(1233,2106.1001000,-1831.3000000,14.1000000,0.0000000,0.0000000,237.9970000); //object(noparkingsign1) (2)
	CreateDynamicObject(3578,2121.6001000,-1781.3000000,11.7000000,0.0000000,0.0000000,359.9950000); //object(dockbarr1_la) (14)
	CreateDynamicObject(3578,2121.7000000,-1776.2000000,11.7000000,0.0000000,0.0000000,359.9950000); //object(dockbarr1_la) (15)
	CreateDynamicObject(3578,2121.7000000,-1770.8000000,11.7000000,0.0000000,0.0000000,359.9950000); //object(dockbarr1_la) (16)
	CreateDynamicObject(3578,2121.7000000,-1765.9000000,11.7000000,0.0000000,0.0000000,359.9950000); //object(dockbarr1_la) (17)
	CreateDynamicObject(3578,2101.6001000,-1781.5000000,11.7000000,0.0000000,0.0000000,359.9950000); //object(dockbarr1_la) (18)
	CreateDynamicObject(3578,2101.8999000,-1776.1000000,11.7000000,0.0000000,0.0000000,359.2450000); //object(dockbarr1_la) (19)
	CreateDynamicObject(3578,2101.8999000,-1770.7000000,11.7000000,0.0000000,0.0000000,359.2420000); //object(dockbarr1_la) (20)
	CreateDynamicObject(997,2123.8999000,-1762.4000000,12.6000000,0.0000000,0.0000000,68.9890000); //object(lhouse_barrier3) (8)
	CreateDynamicObject(997,2125.1001000,-1759.4000000,12.6000000,0.0000000,0.0000000,32.7330000); //object(lhouse_barrier3) (9)
	CreateDynamicObject(997,2127.8000000,-1757.8000000,12.6000000,0.0000000,0.0000000,5.7280000); //object(lhouse_barrier3) (10)
	CreateDynamicObject(970,2099.1001000,-1791.0000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (18)
	CreateDynamicObject(970,2095.0000000,-1791.0000000,13.1000000,0.0000000,0.0000000,359.5000000); //object(fencesmallb) (19)
	CreateDynamicObject(970,2097.8000000,-1802.5000000,13.1000000,0.0000000,0.0000000,359.4950000); //object(fencesmallb) (20)
	CreateDynamicObject(970,2093.6001000,-1802.5000000,13.1000000,0.0000000,0.0000000,0.4950000); //object(fencesmallb) (21)
	CreateDynamicObject(970,2097.7000000,-1811.7000000,13.1000000,0.0000000,0.0000000,359.2440000); //object(fencesmallb) (22)
	CreateDynamicObject(970,2093.6001000,-1811.7000000,13.1000000,0.0000000,0.0000000,1.2420000); //object(fencesmallb) (23)
	CreateDynamicObject(970,2093.7000000,-1822.4000000,12.9000000,0.0000000,0.0000000,0.4910000); //object(fencesmallb) (24)
	CreateDynamicObject(970,2097.8000000,-1822.4000000,12.9000000,0.0000000,0.0000000,0.4890000); //object(fencesmallb) (25)
	CreateDynamicObject(1432,2071.6001000,-1778.6000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (1)
	CreateDynamicObject(1432,2075.8999000,-1765.0000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (2)
	CreateDynamicObject(2837,2075.8999000,-1764.6000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(gb_takeaway02) (3)
	CreateDynamicObject(2866,2070.0000000,-1775.7000000,12.6000000,0.0000000,0.0000000,0.0000000); //object(gb_foodwrap04) (1)
	CreateDynamicObject(1359,2095.2000000,-1763.4000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(cj_bin1) (1)
	CreateDynamicObject(1359,2077.2998000,-1768.5000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(cj_bin1) (2)
	CreateDynamicObject(1359,2104.9004000,-1805.0000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(cj_bin1) (3)
	CreateDynamicObject(1340,2126.8999000,-1775.2000000,13.7000000,0.0000000,0.0000000,180.0000000); //object(chillidogcart) (2)
	CreateDynamicObject(1281,2121.3000000,-1789.3000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(parktable1) (3)
	CreateDynamicObject(1281,2117.3999000,-1789.3000000,13.4000000,0.0000000,0.0000000,0.0000000); //object(parktable1)
	//drug house
	CreateDynamicObject(12938, 2149.36597, -1700.65686, 17.98168,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(12940, 2148.39282, -1666.28088, 17.90306,   0.00000, 0.00000, -87.24002);
	CreateDynamicObject(1264, 2175.75977, -1664.65320, 14.57031,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2175.12280, -1664.71887, 14.57031,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2174.78638, -1664.25952, 14.57031,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2175.23853, -1663.81653, 14.57031,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2174.99268, -1664.23755, 14.86930,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2175.29199, -1664.69495, 14.86930,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2175.41211, -1664.20374, 14.86930,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(14497, 2150.76831, -1692.10657, 14.58194,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1710, 2139.34204, -1677.13025, 14.07798,   0.00000, 0.00000, 59.88000);
	CreateDynamicObject(1710, 2142.60400, -1681.23267, 14.07798,   0.00000, 0.00000, 147.48000);
	CreateDynamicObject(1710, 2144.61060, -1676.07129, 14.07798,   0.00000, 0.00000, -98.57999);
	CreateDynamicObject(1264, 2149.87866, -1668.77222, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2149.90942, -1668.16968, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2149.88501, -1667.67004, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2149.51147, -1668.22961, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2142.06396, -1672.97314, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2141.83276, -1672.45911, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2141.17041, -1672.52234, 14.27568,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1292, 2142.60107, -1698.29944, 14.58457,   0.00000, 0.00000, -135.00002);
	CreateDynamicObject(1292, 2144.95630, -1668.28503, 14.58457,   0.00000, 0.00000, 35.45998);
	CreateDynamicObject(1369, 2138.32373, -1697.41809, 14.67586,   0.00000, 0.00000, 145.91997);
	CreateDynamicObject(1362, 2152.49536, -1692.97339, 14.66582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 2147.37793, -1695.83325, 14.66582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 2156.25806, -1684.60071, 14.66582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 2156.22729, -1686.21960, 14.66582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1362, 2141.84131, -1677.72009, 14.66582,   0.00000, 0.00000, 0.00000);

	CreateDynamicObject(1211, 2153.03320, -1684.62415, 14.13390,   68.93999, 91.92005, 0.00000);
	CreateDynamicObject(1211, 2139.59253, -1683.14478, 14.13390,   68.93999, 91.92005, -99.89999);
	CreateDynamicObject(1299, 2145.62036, -1701.98303, 14.04797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2145.38452, -1678.47900, 14.43393,   -3.00000, 44.82001, 133.98000);
	CreateDynamicObject(1440, 2143.98193, -1687.22375, 14.59416,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(1440, 2147.37256, -1666.01880, 14.59416,   0.00000, 0.00000, 7.92000);
	CreateDynamicObject(1227, 2128.45239, -1693.67664, 14.87828,   0.00000, 0.00000, 270.59988);
	CreateDynamicObject(1227, 2128.56006, -1696.48328, 14.87828,   0.00000, 0.00000, 270.59988);
	CreateDynamicObject(1227, 2167.95361, -1692.68176, 14.87583,   0.00000, 0.00000, 90.96001);
	CreateDynamicObject(1227, 2167.93604, -1695.25269, 14.87583,   0.00000, 0.00000, 90.96001);
	CreateDynamicObject(1264, 2168.69727, -1691.36865, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2168.02222, -1691.11560, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2168.88184, -1691.91138, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2168.54468, -1693.94714, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2168.28540, -1696.57434, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2167.50439, -1696.73254, 14.45872,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2167.46704, -1693.87158, 15.91056,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1946, 2148.16333, -1691.21643, 14.21075,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1946, 2141.51416, -1678.62427, 14.23054,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 2147.35400, -1667.18530, 16.26323,   3.14159, 0.00000, -175.98010);
	CreateDynamicObject(946, 2148.11987, -1698.82495, 16.26323,   3.14159, 0.00000, 361.68005);
	CreateDynamicObject(19868, 2162.65942, -1718.58044, 14.28498,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19868, 2167.85425, -1718.52075, 14.28498,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19868, 2170.76270, -1715.86023, 14.28498,   0.00000, 0.00000, 82.01997);
	CreateDynamicObject(19868, 2171.30444, -1710.68750, 14.28498,   0.00000, 0.00000, 86.99994);
	CreateDynamicObject(19868, 2168.83154, -1707.44458, 14.28498,   0.00000, 0.00000, 165.89992);
	CreateDynamicObject(19868, 2159.98926, -1715.91345, 14.28498,   0.00000, 0.00000, -84.83998);
	CreateDynamicObject(19868, 2160.48926, -1710.82532, 14.28498,   0.00000, 0.00000, -106.01999);
	CreateDynamicObject(946, 2161.38257, -1717.29382, 16.41716,   3.14159, 0.00000, 309.17996);
	CreateDynamicObject(1946, 2166.35425, -1715.52869, 14.39479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 2170.12476, -1709.08154, 16.60114,   3.14159, 0.00000, 492.30029);
	CreateDynamicObject(18663, 2137.72095, -1655.48169, 15.45434,   0.00000, 0.00000, 2.76000);
	CreateDynamicObject(18663, 2131.69751, -1662.99036, 15.40218,   0.00000, 0.00000, 92.76000);
	CreateDynamicObject(18663, 2155.69482, -1654.35889, 15.50738,   0.00000, 0.00000, 3.00000);
	CreateDynamicObject(18663, 2155.78320, -1656.58044, 15.44910,   16.02000, 0.42000, 3.00000);
	CreateDynamicObject(18663, 2166.64160, -1671.72937, 15.54291,   0.00000, 0.00000, 2.64000);
	CreateDynamicObject(18663, 2164.26465, -1704.31567, 15.45391,   0.00000, 0.00000, 91.25999);
	CreateDynamicObject(18663, 2139.51953, -1711.24780, 15.46285,   0.00000, 0.00000, 1.26000);
	CreateDynamicObject(18663, 2132.32568, -1704.96716, 15.46772,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(18663, 2134.03784, -1704.96008, 15.46772,   -59.22000, 178.31992, -88.86000);
	CreateDynamicObject(2672, 2149.63647, -1695.53955, 14.37355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2142.94458, -1675.05530, 14.37355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19868, 2181.57593, -1654.95923, 14.28498,   0.00000, 0.00000, 79.19994);
	CreateDynamicObject(19868, 2181.03491, -1656.71863, 14.28498,   0.00000, 0.00000, 67.61992);
	CreateDynamicObject(19868, 2174.55078, -1659.72925, 14.28498,   0.00000, 0.00000, -24.24007);
	CreateDynamicObject(19868, 2171.31445, -1656.17920, 14.28498,   0.00000, 0.00000, -70.98006);
	CreateDynamicObject(19868, 2172.50854, -1652.10095, 14.28498,   0.00000, 0.00000, -140.82008);
	CreateDynamicObject(19868, 2177.09375, -1651.07593, 14.28498,   0.00000, 0.00000, -191.40012);
	CreateDynamicObject(19868, 2179.64380, -1651.64246, 14.28498,   0.00000, 0.00000, -198.24010);
	CreateDynamicObject(2629, 2174.67749, -1652.40247, 14.05883,   0.00000, 0.00000, 23.40000);
	CreateDynamicObject(2629, 2172.73193, -1654.55139, 14.05883,   0.00000, 0.00000, 70.13999);
	CreateDynamicObject(2629, 2179.14209, -1652.88477, 14.05883,   0.00000, 0.00000, -31.08002);
	CreateDynamicObject(11730, 2172.68091, -1658.40649, 14.08169,   0.00000, 0.00000, 136.14001);
	CreateDynamicObject(11730, 2172.12280, -1657.50256, 14.08169,   0.00000, 0.00000, 117.36003);
	CreateDynamicObject(11730, 2138.01465, -1679.24353, 14.08057,   0.00000, 0.00000, 126.71999);
	CreateDynamicObject(11730, 2138.09863, -1677.57227, 14.08057,   0.00000, 37.56000, 83.03996);
	CreateDynamicObject(11730, 2137.73022, -1678.23840, 14.08057,   0.00000, 0.00000, 95.21998);
	CreateDynamicObject(11730, 2139.29150, -1680.90515, 14.08057,   -1.86000, 54.06001, 126.71999);
	CreateDynamicObject(11730, 2157.13599, -1689.40576, 14.08040,   -34.26001, 7.32001, 197.69989);
	CreateDynamicObject(2632, 2179.62744, -1656.36475, 14.08060,   -1.32000, 1.44000, -113.22002);
	CreateDynamicObject(19868, 2172.24170, -1652.47778, 14.28498,   0.00000, 0.00000, -140.82008);
	CreateDynamicObject(19868, 2171.15210, -1655.78076, 14.28498,   0.00000, 0.00000, -70.98006);
	CreateDynamicObject(19868, 2174.04639, -1659.50635, 14.28498,   0.00000, 0.00000, -24.24007);
	CreateDynamicObject(19868, 2180.80786, -1657.27942, 14.28498,   0.00000, 0.00000, 67.61992);
	CreateDynamicObject(19868, 2181.66284, -1654.51196, 14.28498,   0.00000, 0.00000, 79.19994);
	CreateDynamicObject(19868, 2170.77539, -1715.32190, 14.28498,   0.00000, 0.00000, 82.01997);
	CreateDynamicObject(19868, 2171.25781, -1710.27747, 14.28498,   0.00000, 0.00000, 86.99994);
	CreateDynamicObject(19868, 2168.06226, -1707.29675, 14.28498,   0.00000, 0.00000, 165.89992);
	CreateDynamicObject(19868, 2160.33423, -1711.65112, 14.28498,   0.00000, 0.00000, -106.01999);
	CreateDynamicObject(19868, 2159.93555, -1716.53259, 14.28498,   0.00000, 0.00000, -84.83998);
	CreateDynamicObject(19868, 2163.12598, -1718.62549, 14.28498,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(19868, 2168.21167, -1718.47168, 14.28498,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(2063, 2139.78345, -1691.31750, 14.92751,   0.00000, 0.00000, 62.93998);
	CreateDynamicObject(2063, 2156.92480, -1674.36243, 14.92751,   -8.58000, 0.00000, -128.28003);
	CreateDynamicObject(2693, 2156.10254, -1690.90527, 14.77523,   0.00000, 0.00000, -129.65997);
	CreateDynamicObject(2693, 2180.54004, -1659.34082, 14.77523,   0.00000, 0.00000, 7.08001);
	CreateDynamicObject(2692, 2139.13208, -1697.93457, 14.64941,   0.00000, 0.00000, 164.04004);
	CreateDynamicObject(2691, 2147.18018, -1664.98438, 15.45279,   0.00000, 0.00000, 2.70000);
	CreateDynamicObject(2696, 2166.55762, -1669.55566, 15.54572,   0.00000, 0.00000, 91.73999);
	CreateDynamicObject(2680, 2173.17603, -1658.13184, 15.07598,   0.00000, 0.00000, 122.88004);
	CreateDynamicObject(2680, 2172.68091, -1657.39270, 15.07598,   0.00000, 0.00000, 122.88004);
	CreateDynamicObject(2695, 2166.47974, -1704.25659, 15.90061,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2696, 2165.87915, -1704.27734, 15.90174,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2696, 2138.15430, -1678.12537, 15.11956,   0.00000, 0.00000, 122.16007);
	CreateDynamicObject(2695, 2147.29517, -1667.27710, 17.82212,   -2.16000, 63.42003, 4.50000);
	CreateDynamicObject(3594, 2144.26611, -1647.42957, 14.39655,   0.00000, 0.00000, 38.64000);
	CreateDynamicObject(3594, 2146.87744, -1647.16541, 14.39655,   -11.27999, -2.46000, -31.02000);
	CreateDynamicObject(13450, 2147.77856, -1683.46472, 16.23255,   0.00000, 0.00000, -88.43999);
//end of drug house

	CreateDynamicObject(10830, 227.62132, -1923.22278, 7.67234,   0.00000, 0.00000, 45.00000);
	sbokolo[0] = CreateDynamicObject(18763, 232.01503, -1887.42603, -1.23565,   0.00000, 90.00000, 90.00000);
	sbpod[0] = CreateDynamicObject(18766, 232.08464, -1892.43225, -0.23280,   90.00000, 0.00000, 0.00000);
	sbpod[1] = CreateDynamicObject(18766, 232.08459, -1897.42212, -0.23280,   90.00000, 0.00000, 0.00000);
	sbpod[2] = CreateDynamicObject(18766, 222.44701, -1892.43225, -0.23580,   90.00000, 0.00000, 0.00000);
	sbpod[3] = CreateDynamicObject(18766, 222.44710, -1897.42212, -0.23580,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 230.49959, -1889.96826, 0.22397,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 233.50180, -1889.95703, 0.22400,   0.00000, 0.00000, 180.00000);
	sbstubovi[0] = CreateDynamicObject(18762, 236.60831, -1890.42493, 1.11630,   0.00000, 0.00000, 0.00000);
	sbstubovi[1] = CreateDynamicObject(18762, 217.92990, -1890.42859, 1.11630,   0.00000, 0.00000, 0.00000);
	sbstubovi[2] = CreateDynamicObject(18762, 217.91879, -1899.42847, 1.11630,   0.00000, 0.00000, 0.00000);
	sbstubovi[3] = CreateDynamicObject(18762, 236.56694, -1899.43579, 1.11627,   0.00000, 0.00000, 0.00000);
	sbstaklo[0] = CreateDynamicObject(1649, 237.02290, -1892.87329, 1.93570,   0.00000, 0.00000, 90.00000);
	sbstaklo[1] = CreateDynamicObject(1649, 237.02290, -1897.30957, 1.93570,   0.00000, 0.00000, 90.00000);
	sbstubovi[4] = CreateDynamicObject(18762, 236.60880, -1892.42627, 4.10698,   0.00000, 90.00000, 90.00000);
	sbstubovi[5] = CreateDynamicObject(18762, 236.60931, -1897.41687, 4.10698,   0.00000, 90.00000, 90.00000);
	sbstaklo[2] = CreateDynamicObject(1649, 217.44431, -1892.81067, 1.93570,   0.00000, 0.00000, 90.00000);
	sbstaklo[3] = CreateDynamicObject(1649, 217.44431, -1897.24561, 1.93570,   0.00000, 0.00000, 90.00000);
	sbstaklo[4] = CreateDynamicObject(1649, 220.36880, -1899.90735, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstaklo[5] = CreateDynamicObject(1649, 224.80780, -1899.90735, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstaklo[6] = CreateDynamicObject(1649, 233.84129, -1899.91089, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstubovi[6] = CreateDynamicObject(18762, 227.29352, -1899.41577, 1.11627,   0.00000, 0.00000, 0.00000);
	sbstubovi[7] = CreateDynamicObject(18762, 231.19859, -1899.41272, 1.11627,   0.00000, 0.00000, 0.00000);
	sbstaklo[7] = CreateDynamicObject(1649, 233.90800, -1890.00073, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstaklo[8] = CreateDynamicObject(1649, 229.47430, -1890.00757, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstaklo[9] = CreateDynamicObject(1649, 225.06120, -1890.00525, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstaklo[10] = CreateDynamicObject(1649, 220.65520, -1889.99878, 1.93570,   0.00000, 0.00000, 0.00000);
	sbstubovi[8] = CreateDynamicObject(18762, 217.92990, -1892.42615, 4.10700,   0.00000, 90.00000, 90.00000);
	sbstubovi[9] = CreateDynamicObject(18762, 217.93100, -1897.40393, 4.10700,   0.00000, 90.00000, 90.00000);
	sbstubovi[10] = CreateDynamicObject(18762, 220.92108, -1899.40784, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[11] = CreateDynamicObject(18762, 225.88821, -1899.40955, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[12] = CreateDynamicObject(18762, 230.88657, -1899.40881, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[13] = CreateDynamicObject(18762, 233.60590, -1899.41174, 4.10400,   0.00000, 90.00000, 0.00000);
	sbstubovi[14] = CreateDynamicObject(18762, 220.87581, -1890.42175, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[15] = CreateDynamicObject(18762, 225.85605, -1890.41602, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[16] = CreateDynamicObject(18762, 230.83852, -1890.42114, 4.10700,   0.00000, 90.00000, 0.00000);
	sbstubovi[17] = CreateDynamicObject(18762, 233.67039, -1890.42407, 4.10400,   0.00000, 90.00000, 0.00000);
	sbstaklo[11] = CreateDynamicObject(1649, 225.92171, -1892.23962, 1.92710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(957, 217.96065, -1892.01025, 3.57752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 217.96060, -1894.95557, 3.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 217.96060, -1897.57678, 3.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 236.57330, -1895.04114, 3.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 236.57330, -1892.47766, 3.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 236.57330, -1897.48560, 3.57750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1705, 222.85506, -1893.48596, 0.26072,   0.00000, 0.00000, -127.26001);
	CreateDynamicObject(1705, 223.06474, -1890.94031, 0.26072,   0.00000, 0.00000, -87.84000);
	CreateDynamicObject(2165, 221.13570, -1891.48718, 0.26442,   0.00000, 0.00000, -111.29999);
	CreateDynamicObject(1714, 219.32925, -1891.17285, 0.26550,   0.00000, 0.00000, 49.31999);
	CreateDynamicObject(2164, 217.62427, -1892.27893, 0.26550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2162, 217.58629, -1894.05273, 0.26520,   0.00000, 0.00000, 90.00000);
	sbdrzac[0] = CreateDynamicObject(1840, 222.06306, -1899.58289, 0.07727,   0.00000, 0.00000, 90.00000);
	sbdrzac[1] = CreateDynamicObject(1840, 222.06306, -1899.58289, 0.54430,   0.00000, 0.00000, 90.00000);
	sbdrzac[2] = CreateDynamicObject(1840, 222.06306, -1899.58289, 0.99568,   0.00000, 0.00000, 90.00000);
	new sbtablet = CreateDynamicObject(1581, 222.04913, -1899.39368, 1.46628,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 217.81059, -1895.11035, 0.26430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1817, 235.31012, -1897.77161, 0.26370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 236.29819, -1895.17407, 0.26070,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1705, 236.31973, -1896.94727, 0.26070,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1817, 235.31010, -1896.27588, 0.26070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 233.12219, -1896.23462, 0.26070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 233.20573, -1898.01257, 0.26070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 236.64676, -1893.92896, 0.26430,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2855, 234.79961, -1895.79944, 0.39360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2852, 234.76706, -1896.53711, 0.76534,   0.00000, 0.00000, 78.00000);
	CreateDynamicObject(3406, 221.85310, -1900.96802, -1.95470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 230.62439, -1900.96838, -1.95471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 239.41240, -1900.96802, -1.95470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 248.21049, -1900.96802, -1.95470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 213.06870, -1900.96802, -1.95770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 208.67303, -1900.97485, -1.95470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 243.34529, -1905.81555, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 234.57146, -1905.81116, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 225.75140, -1905.82300, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 216.98486, -1905.84912, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 209.25938, -1905.81360, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 243.34024, -1914.60327, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 234.58673, -1914.59497, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 225.75047, -1914.60510, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 216.97945, -1914.63110, -1.95470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 209.25095, -1914.61133, -1.95470,   0.00000, 0.00000, 90.00000);
	sbplafon[0] = CreateDynamicObject(18766, 232.08459, -1897.42212, 4.34620,   90.00000, 0.00000, 0.00000);
	sbplafon[1] = CreateDynamicObject(18766, 232.08459, -1892.43225, 4.34620,   90.00000, 0.00000, 0.00000);
	sbplafon[2] = CreateDynamicObject(18766, 222.44710, -1897.42212, 4.34920,   90.00000, 0.00000, 0.00000);
	sbplafon[3] = CreateDynamicObject(18766, 222.44701, -1892.43225, 4.34920,   90.00000, 0.00000, 0.00000);
	new sbdrzacstakla = CreateDynamicObject(18762, 225.91580, -1892.46228, 4.08700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 225.97185, -1894.70349, 3.55753,   0.00000, 0.00000, 0.00000);
	sbstaklo[12] = CreateDynamicObject(1649, 225.06120, -1890.00525, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[13] = CreateDynamicObject(1649, 220.65520, -1889.99878, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[14] = CreateDynamicObject(1649, 229.47430, -1890.00757, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[15] = CreateDynamicObject(1649, 233.90800, -1890.00073, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[16] = CreateDynamicObject(1649, 220.36880, -1899.90735, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[17] = CreateDynamicObject(1649, 224.80780, -1899.90735, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[18] = CreateDynamicObject(1649, 233.84129, -1899.91089, 1.93570,   0.00000, 0.00000, 180.00000);
	sbstaklo[19] = CreateDynamicObject(1649, 237.02290, -1897.30957, 1.93570,   0.00000, 0.00000, 270.00000);
	sbstaklo[20] = CreateDynamicObject(1649, 237.02290, -1892.87329, 1.93570,   0.00000, 0.00000, 270.00000);
	sbstaklo[21] = CreateDynamicObject(1649, 217.44431, -1897.24561, 1.93570,   0.00000, 0.00000, 270.00000);
	sbstaklo[22] = CreateDynamicObject(1649, 217.44431, -1892.81067, 1.93570,   0.00000, 0.00000, 270.00000);
	sbstaklo[23] = CreateDynamicObject(1649, 225.92171, -1892.23962, 1.92710,   0.00000, 0.00000, 270.00000);
	sbokolo[1] = CreateDynamicObject(18762, 237.49001, -1892.42627, -0.23820,   0.00000, 90.00000, 90.00000);
	sbokolo[2] = CreateDynamicObject(18762, 237.49001, -1897.41687, -0.23820,   0.00000, 90.00000, 90.00000);
	sbokolo[3] = CreateDynamicObject(18762, 235.49940, -1889.50037, -0.23820,   0.00000, 90.00000, 0.00000);
	sbokolo[4] = CreateDynamicObject(18762, 228.04156, -1889.43481, -0.23820,   0.00000, 90.00000, 0.00000);
	sbokolo[5] = CreateDynamicObject(18762, 223.03407, -1889.43311, -0.23820,   0.00000, 90.00000, 0.00000);
	sbokolo[6] = CreateDynamicObject(18762, 218.94020, -1889.43188, -0.23820,   0.00000, 90.00000, 0.00000);
	sbokolo[7] = CreateDynamicObject(18762, 216.92986, -1897.44165, -0.23820,   0.00000, 90.00000, 90.00000);
	sbokolo[8] = CreateDynamicObject(18762, 216.94025, -1892.43689, -0.23820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1327, 238.60159, -1890.46545, -0.27430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 238.60980, -1898.99902, -0.27430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 238.58611, -1895.00085, -0.27430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 216.44234, -1898.99622, -0.27431,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 216.48050, -1890.29663, -0.27430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 216.45580, -1895.04614, -0.27430,   0.00000, 0.00000, 0.00000);


	for(new i = 0; i < sizeof(sbdrzac); i++)
	{
		SetDynamicObjectMaterial(sbdrzac[i], 0, 10793, "car_ship_sfse", "ws_shipmetal1", 0xFF585858);
	}

	for(new i = 0; i < sizeof(sbokolo); i++)
	{
		SetDynamicObjectMaterial(sbokolo[i], 0, 8565, "vgsebuild01", "ws_stonewall", 0xFFFFFFFF);
	}

	for(new i = 0; i < sizeof(sbstaklo); i++)
	{
		SetDynamicObjectMaterial(sbstaklo[i], 0, 19325, "lsmall_shops", "lsmall_window01", 0xFF000000);
	}

	for(new i = 0; i < sizeof(sbpod); i++)
	{
		SetDynamicObjectMaterial(sbpod[i], 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	}

	for(new i = 0; i < sizeof(sbplafon); i++)
	{
		SetDynamicObjectMaterial(sbplafon[i], 0,  10932, "station_sfse", "ws_stationfloor", 0xFFFFFFFF);
	}

	for(new i = 0; i < sizeof(sbstubovi); i++)
	{
		SetDynamicObjectMaterial(sbstubovi[i], 0, 8839, "vgsecarshow", "sw_wallbrick_06", 0xFFFFFFFF);
	}

	SetDynamicObjectMaterial(sbtablet, 0,2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(sbdrzacstakla, 0,8839, "vgsecarshow", "sw_wallbrick_06", 0xFFFFFFFF);

	new sbznak = CreateDynamicObject(19327, 233.1028, -1889.9772, 3.2088, 0.0000, 0.0000, -179.6312);
	SetObjectMaterialText(sbznak, "o", 0, 50, "Webdings", 24, 0, -1, 0, 1);
	new tackatablet = CreateDynamicObject(19327, 222.0348, -1899.3527, 1.4603, -21.0000, 0.0000, -179.5616);
	SetObjectMaterialText(tackatablet, ".", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new salonplovilatxt = CreateDynamicObject(19327, 232.0401, -1889.9959, 3.1343, 0.0000, 0.0000, 179.8686);
	SetObjectMaterialText(salonplovilatxt, "BOATS", 0, 90, "Arial", 24, 0, -1, 0, 1);


	//LAPD Improvments
	CreateDynamicObject(1886,1581.56628418,-1633.38085938,16.76438522,0.00000000,0.00000000,308.90148926); //object(shop_sec_cam) (1)
	CreateDynamicObject(983, 1544.6878662109, -1620.4252929688, 13.038116455078, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(983, 1544.7156982422, -1635.9808349609, 13.237470626831, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(1344, 1544.7709960938, -1617.0625, 13.191030502319, 0.000000, 0.000000, 180); //
	CreateDynamicObject(13644, 1582.6353759766, -1639.0125732422, 10.541254043579, 0.000000, 19.14501953125, 268.55499267578); //
//	CreateDynamicObject(968, 1544.6878662109, -1630.7757568359, 13.28281211853, 0.000000, 90, 90); //
	CreateDynamicObject(969, 1635.2663574219, -1852.6921386719, 12.548987388611, 0.000000, 0.000000, 179.99450683594); //
//	CreateDynamicObject(968, 371.0055847168, 1006.9255981445, 28.540819168091, 0.000000, 90, 194.10095214844); //
	CreateDynamicObject(1496, 1564.2520751953, -1667.3739013672, 27.395606994629, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(12814, 264.49127197266, 1882.6428222656, 16.587562561035, 0, 0, 0);
	CreateDynamicObject(991, 226.45503234863, 1872.4094238281, 13.949615478516, 0, 0, 270.27062988281);
	CreateDynamicObject(997, 1539.8282470703, -1700.0535888672, 12.981607437134, 0, 0, 0); // LAPD Fences
	CreateDynamicObject(997, 1542.4503173828, -1651.2196044922, 12.981607437134, 0, 0, 180.54052734375);
	CreateDynamicObject(994, 1539.3397216797, -1691.8165283203, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(994, 1539.3963623047, -1683.8302001953, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(994, 1539.3836669922, -1675.6118164063, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(994, 1539.4741210938, -1667.2700195313, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(994, 1539.4909667969, -1659.4807128906, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(994, 1539.5007324219, -1652.0588378906, 12.546875, 0, 0, 270.27026367188);
	CreateDynamicObject(3029, 22076.4624,-2046.4349,13.5469, 0, 0, 268.69067382813); // Drug Factory Doors
 	CreateDynamicObject(1569, 1167.8109130859, 1362.78515625, 9.8125076293945, 0.000000, 0.000000, 0.000000); // Senate Door
	CreateDynamicObject(10832, 296.68603515625, -1549.5653076172, 77.338836669922, 0.000000, 0.000000, 162.94946289063); //
	CreateDynamicObject(3029, 2223.58203125, 1598.2083740234, 998.9765625, 0, 0, 268.69067382813);

    //begin new map for LAPD garage area
    CreateDynamicObject(9825,1589.80004883,-1617.50000000,12.39999962,0.00000000,359.99993896,0.00000000); //object(carspaces3_sfw02) (1)
	CreateDynamicObject(18452,1557.19995117,-1610.59997559,15.30000019,0.00000000,0.00000000,0.00000000); //object(cw_tscanopy01) (1)
	CreateDynamicObject(1686,1557.19995117,-1613.59997559,12.60000038,0.00000000,0.00000000,90.00000000); //object(petrolpumpnew) (1)
	CreateDynamicObject(1686,1557.09997559,-1607.90002441,12.60000038,0.00000000,0.00000000,89.99499512); //object(petrolpumpnew) (2)
	CreateDynamicObject(3458,1581.69921875,-1605.09960938,13.89999962,0.00000000,0.00000000,179.99450684); //object(vgncarshade1) (1)
	CreateDynamicObject(1251,1560.69921875,-1610.89941406,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1553.59997559,-1610.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,1557.09997559,-1612.80004883,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,1557.19995117,-1608.69995117,12.50000000,0.00000000,0.00000000,269.99499512); //object(smashbar) (4)
	CreateDynamicObject(1251,1557.09997559,-1614.30004883,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,1557.30004883,-1607.09997559,12.50000000,0.00000000,0.00000000,269.99450684); //object(smashbar) (6)
	CreateDynamicObject(1237,1560.69995117,-1613.59997559,12.60000038,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (1)
	CreateDynamicObject(1237,1560.69995117,-1607.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (2)
	CreateDynamicObject(1237,1553.59997559,-1607.80004883,12.60000038,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (3)
	CreateDynamicObject(1237,1553.40002441,-1613.50000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (4)
	CreateDynamicObject(1251,1548.40002441,-1632.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,1555.30004883,-1632.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,1562.00000000,-1632.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,1568.59997559,-1632.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,1575.19921875,-1632.89941406,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,1578.50000000,-1632.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,1548.50000000,-1622.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (13)
	CreateDynamicObject(1251,1554.19995117,-1622.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (14)
	CreateDynamicObject(1251,1560.59997559,-1622.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (15)
	CreateDynamicObject(1251,1567.40002441,-1622.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (16)
	CreateDynamicObject(1251,1573.69995117,-1622.90002441,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (17)
	CreateDynamicObject(1251,1553.09997559,-1617.50000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (21)
	CreateDynamicObject(1251,1559.69995117,-1617.50000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (20)
	CreateDynamicObject(1251,1566.40002441,-1617.50000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (22)
	CreateDynamicObject(1251,1573.00000000,-1617.50000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (23)
	CreateDynamicObject(1251,1573.69995117,-1617.50000000,12.69999981,0.00000000,0.00000000,270.00000000); //object(smashbar) (24)
	CreateDynamicObject(1215,1561.90002441,-1602.80004883,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1566.09997559,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1570.50000000,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1574.90002441,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1579.19995117,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1583.59997559,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1587.80004883,-1602.90002441,12.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
	CreateDynamicObject(3263,1543.90002441,-1624.00000000,12.39999962,0.00000000,0.00000000,272.00000000); //object(privatesign2) (1)
	CreateDynamicObject(3263,1543.59997559,-1630.69995117,12.39999962,0.00000000,0.00000000,269.99951172); //object(privatesign2) (2)
	CreateDynamicObject(997,1550.19995117,-1622.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1553.40002441,-1622.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1556.59997559,-1622.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,1559.80004883,-1622.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (4)
	CreateDynamicObject(997,1564.30004883,-1622.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (5)
	CreateDynamicObject(997,1574.00000000,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (9)
	CreateDynamicObject(997,1570.80004883,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (10)
	CreateDynamicObject(997,1567.59997559,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (11)
	CreateDynamicObject(997,1564.40002441,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (12)
	CreateDynamicObject(997,1559.80004883,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (13)
	CreateDynamicObject(997,1556.59997559,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (14)
	CreateDynamicObject(997,1553.40002441,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (15)
	CreateDynamicObject(997,1550.19995117,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (16)
	CreateDynamicObject(997,1547.00000000,-1617.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (17)
	CreateDynamicObject(997,1547.00000000,-1622.69921875,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1577.00000000,-1622.80004883,12.50000000,0.00000000,0.00000000,38.00000000); //object(lhouse_barrier3) (20)
	CreateDynamicObject(997,1577.19995117,-1617.69995117,12.50000000,0.00000000,0.00000000,315.99621582); //object(lhouse_barrier3) (21)
	CreateDynamicObject(4732,1539.40002441,-1609.19995117,25.20000076,0.00000000,0.00000000,236.00000000); //object(billbrdlan2_06) (1)
	CreateDynamicObject(9697,1604.09997559,-1655.09997559,12.60000038,0.00000000,0.00000000,269.99996948); //object(carspaces3_sfw) (2)
	CreateDynamicObject(3458,1605.50000000,-1623.19995117,13.89999962,0.00000000,0.00000000,89.99450684); //object(vgncarshade1) (1)
	CreateDynamicObject(997,1546.19995117,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1549.40002441,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1552.59997559,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1555.80004883,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1559.00000000,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1562.19995117,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1565.40002441,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1568.59997559,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1571.80004883,-1633.09997559,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1604.59997559,-1633.00000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1601.40002441,-1633.00000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1598.19995117,-1633.00000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1595.00000000,-1632.90002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1591.80004883,-1632.90002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1588.59997559,-1632.90002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1588.59997559,-1633.00000000,12.50000000,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1588.59997559,-1629.90002441,12.50000000,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1588.59997559,-1626.80004883,12.50000000,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1588.69995117,-1623.50000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(997,1592.00000000,-1623.50000000,12.50000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (18)
	CreateDynamicObject(1251,1591.80004883,-1623.30004883,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,1588.40002441,-1626.69995117,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1588.40002441,-1629.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1591.80004883,-1633.19995117,12.50000000,0.00000000,0.00000000,270.00000000); //object(smashbar) (11)
	CreateDynamicObject(1231,1564.09997559,-1620.30004883,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
	CreateDynamicObject(1231,1557.40002441,-1620.30004883,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (4)
	CreateDynamicObject(1231,1550.90002441,-1620.30004883,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (5)
	CreateDynamicObject(1232,1588.59997559,-1623.00000000,15.00000000,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (1)
	CreateDynamicObject(1232,1595.09997559,-1623.00000000,15.00000000,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (2)
	CreateDynamicObject(1297,1540.50000000,-1603.30004883,15.80000019,0.00000000,0.00000000,137.99993896); //object(lamppost1) (1)
	CreateDynamicObject(1297,1540.90002441,-1616.69995117,15.80000019,0.00000000,0.00000000,213.99926758); //object(lamppost1) (2)
	CreateDynamicObject(1368,1554.40002441,-1620.40002441,13.19999981,0.00000000,0.00000000,0.00000000); //object(cj_blocker_bench) (1)
	CreateDynamicObject(8168,1571.80004883,-1620.30004883,14.30000019,0.00000000,0.00000000,15.99993896); //object(vgs_guardhouse01) (1)
	CreateDynamicObject(1251,1574.90002441,-1626.40002441,12.39999962,0.00000000,0.00000000,180.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1575.00000000,-1626.40002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,1574.90002441,-1629.30004883,12.39999962,0.00000000,0.00000000,179.99450684); //object(smashbar) (1)
	CreateDynamicObject(1251,1575.00000000,-1629.30004883,12.39999962,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(2921,1574.30004883,-1622.80004883,15.80000019,0.00000000,0.00000000,92.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(2921,1549.30004883,-1637.09997559,21.00000000,0.00000000,0.00000000,277.99954224); //object(kmb_cam) (2)
	CreateDynamicObject(2922,1572.69995117,-1622.69995117,13.80000019,0.00000000,0.00000000,178.00000000); //object(kmb_keypad) (1)
	CreateDynamicObject(2922,1575.40002441,-1618.50000000,13.69999981,0.00000000,0.00000000,269.99996948); //object(kmb_keypad) (2)
	CreateDynamicObject(1886,1555.19995117,-1608.90002441,17.60000038,0.00000000,2.00000000,60.00000000); //object(shop_sec_cam) (1)
	CreateDynamicObject(1886,1560.00000000,-1612.50000000,17.70000076,0.00000000,0.00000000,237.99998474); //object(shop_sec_cam) (2)
	CreateDynamicObject(1368,1560.90002441,-1620.40002441,13.19999981,0.00000000,0.00000000,179.99993896); //object(cj_blocker_bench) (2)
	CreateDynamicObject(983,1544.50000000,-1620.69995117,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1543.40002441,-1635.80004883,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)

    //LAPD-Chink Gates-LSSD-FDSA-All Saints
    CreateDynamicObject(18030, 2092.279296875, 2817.1181640625, -14.807208061218, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2951, 2109.0756835938, 2812.5268554688, -17.188125610352, 0.000000, 0.000000, 270.67498779297); //
    CreateDynamicObject(2951, 2087.53515625, 2803.2150878906, -17.674396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3386, 2103.3381347656, 2830.3115234375, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3387, 2103.4313964844, 2826.3564453125, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3389, 2101.015625, 2830.6564941406, -17.174396514893, 0.000000, 0.000000, 91.894958496094); //
    CreateDynamicObject(1997, 2071.7292480469, 2806.0947265625, -17.174396514893, 0.000000, 0.000000, 93.295013427734); //
    CreateDynamicObject(1997, 2071.7165527344, 2807.8830566406, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(1997, 2071.7561035156, 2809.45703125, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(3384, 2103.1545410156, 2822.3237304688, -15.731789588928, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.4477539063, 2827.2509765625, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.5051269531, 2822.8688964844, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2094.5844726563, 2825.0227050781, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1796, 2100.0754394531, 2808.0727539063, -17.174396514893, 0.000000, 0.000000, 179.28002929688); //
    CreateDynamicObject(1796, 2098.4482421875, 2808.1791992188, -17.174396514893, 0.000000, 0.000000, 178.9150390625); //
    CreateDynamicObject(1796, 2102.0798339844, 2807.9851074219, -17.174396514893, 0.000000, 0.000000, 179.05505371094); //
    CreateDynamicObject(2239, 2103.4404296875, 2804.8537597656, -17.174396514893, 0.000000, 0.000000, 218.75506591797); //
    CreateDynamicObject(2184, 2085.3012695313, 2828.1159667969, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1671, 2086.1975097656, 2829.4157714844, -16.714181900024, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2190, 2087.134765625, 2828.1010742188, -16.398658752441, 0.000000, 0.000000, 230.5249786377); //
    CreateDynamicObject(2854, 2085.673828125, 2828.6516113281, -16.398658752441, 0.000000, 0.000000, 133.07997131348); //
    CreateDynamicObject(2946, 2081.85546875, 2831.0966796875, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(10182, 1145.3453369141, -1326.4350585938, 14.297383308411, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(16656, 1421.5529785156, -2445.5986328125, -9.6055564880371, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1997, 1430.8905029297, -2437.8049316406, -12.598474502563, 0.000000, 0.000000, 269.9599609375); //
    CreateDynamicObject(3384, 1431.6123046875, -2441.9572753906, -11.155867576599, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1886, 1426.7391357422, -2451.6730957031, -7.6691589355469, 0.000000, 358.01501464844, 182.52499389648); //
    CreateDynamicObject(2951, 1420.4285888672, -2442.7119140625, -13.105556488037, 0.000000, 0.000000, 270.44995117188); //
    CreateDynamicObject(2951, 1420.4750976563, -2450.1713867188, -13.098474502563, 0.000000, 0.000000, 270.53997802734); //
    CreateDynamicObject(2946, 1425.0671386719, -2436.9409179688, -12.605556488037, 0.000000, 0.000000, 268.69006347656); //
    CreateDynamicObject(2606, 1422.2109375, -2436.7719726563, -10.66157245636, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1999, 1421.7412109375, -2437.5876464844, -12.605556488037, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2356, 1422.6676025391, -2438.5456542969, -12.605556488037, 0.000000, 0.000000, 0.000000); //
	//CreateDynamicObject(11008, 1530.6383056641, -2167.5698242188, 19.045516967773, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(8356, 1560.9700927734, -2091.2924804688, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1600.9536132813, -2091.2219238281, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1501.1728515625, -2091.2724609375, 12.568482398987, 0.000000, 0.000000, 180); //
	//CreateDynamicObject(5711, 1581.1998291016, -2159.6352539063, 16.031856536865, 0.000000, 0.000000, 180); //
	//CreateDynamicObject(16564, 1618.6606445313, -2164.0412597656, 12.494687080383, 0.000000, 0.000000, 90); //
	CreateDynamicObject(8356, 1640.9392089844, -2091.2358398438, 12.568482398987, 0.000000, 0.000000, 179.99450683594); //
	//CreateDynamicObject(12839, 1604.3753662109, -2180.419921875, 16.050001144409, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(994, 2222.9479980469, -1707.8178710938, 12.554218292236, 0.000000, 0.000000, 83.25); //
	CreateDynamicObject(994, 2222.2282714844, -1714.1044921875, 12.554218292236, 0.000000, 0.000000, 83.248901367188); //
	CreateDynamicObject(994, 2221.666015625, -1720.4332275391, 12.554218292236, 0.000000, 0.000000, 84.998901367188); //
	CreateDynamicObject(997, 2221.5944824219, -1720.4653320313, 12.554218292236, 0.000000, 0.000000, 270.39489746094); //
	CreateDynamicObject(997, 2221.6120605469, -1723.6779785156, 12.554218292236, 0.000000, 0.000000, 308.13818359375); //
	CreateDynamicObject(997, 2223.5490722656, -1726.2283935547, 12.554218292236, 0.000000, 0.000000, 343.46838378906); //
	CreateDynamicObject(994, 2232.9912109375, -1727.2038574219, 12.554218292236, 0.000000, 0.000000, 179.2939453125); //
	CreateDynamicObject(994, 2239.298828125, -1727.1459960938, 12.554218292236, 0.000000, 0.000000, 180.29138183594); //
	CreateDynamicObject(994, 2245.6069335938, -1727.1053466797, 12.554218292236, 0.000000, 0.000000, 180.29113769531); //
	CreateDynamicObject(994, 2230.0375976563, -1702.1334228516, 12.554218292236, 0.000000, 0.000000, 174.55895996094); //
	CreateDynamicObject(994, 2245.8688964844, -1720.8118896484, 12.554218292236, 0.000000, 0.000000, 267.63110351563); //
	//CreateDynamicObject(971, 1588.966796875, -1637.9287109375, 14.952730178833, 0.000000, 0.000000, 179.99450683594); //
	CreateDynamicObject(1495, 1582.6011962891, -1637.8992919922, 12.552812576294, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(8210, 1618.8397216797, -1780.4431152344, 15.639604568481, 0.000000, 0.000000, 344.89477539063); //
	CreateDynamicObject(8210, 1652.6362304688, -1789.5369873047, 15.639604568481, 0.000000, 0.000000, 344.89379882813); //


//	CreateDynamicObject(5043, 1843.36719, -1856.32031, 13.87500,   356.85840, 0.00000, 3.14159);
 	//VAGOSI DZIBA
	new vagosidziba;
	vagosidziba = CreateDynamicObject(17859, 1938.658325, -2078.947998, 14.732399, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(vagosidziba, 0, -1, "none", "none", 0xFFCCCC00);
	vagosidziba = CreateDynamicObject(18980, 1925.502685, -2096.079833, 12.541700, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(vagosidziba, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	vagosidziba = CreateDynamicObject(18980, 1925.493652, -2062.981445, 12.541700, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(vagosidziba, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	vagosidziba = CreateDynamicObject(19377, 1946.319946, -2096.516601, 16.657899, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(vagosidziba, 0, -1, "none", "none", 0xFFCCCC00);
	vagosidziba = CreateDynamicObject(19377, 1939.209838, -2096.496826, 16.657899, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(vagosidziba, 0, -1, "none", "none", 0xFFCCCC00);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vagosidziba = CreateDynamicObject(8673, 1927.179809, -2096.193115, 14.478300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(8673, 1923.441040, -2062.816162, 14.478300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(8673, 1927.177001, -2062.816162, 14.478300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(8673, 1913.009155, -2072.459960, 14.478300, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(8673, 1923.477539, -2096.189941, 14.478300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(8673, 1913.011352, -2085.751464, 14.478300, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1507, 1934.375488, -2074.480957, 12.545499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1735, 1928.810058, -2076.785888, 12.545700, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1728, 1933.711303, -2075.505371, 12.546899, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1729, 1930.494873, -2074.961669, 12.546699, 0.000000, 0.000000, 34.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(19997, 1930.517333, -2076.637451, 12.546919, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(19997, 1932.057373, -2077.397460, 12.546919, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1729, 1930.495849, -2078.301513, 12.546699, 0.000000, 0.000000, -202.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(19997, 1932.074218, -2075.776367, 12.546919, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1729, 1932.839233, -2078.844482, 12.546699, 0.000000, 0.000000, -120.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1421, 1916.544311, -2093.898193, 13.182593, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1362, 1916.291381, -2092.280029, 13.105099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(3594, 1914.325073, -2092.428710, 12.418370, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(3594, 1914.324462, -2092.238525, 13.418399, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(3594, 1914.324462, -2092.238525, 14.418399, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1362, 1933.950683, -2072.348388, 13.105099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1421, 1933.920532, -2079.723632, 13.232595, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	vagosidziba = CreateDynamicObject(1421, 1916.536499, -2090.430908, 13.182593, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);

//IDLEWOOD
	CreateDynamicObject(1569, 2033.43005, -1884.31006, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1566, 2040.81006, -1884.20996, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1566, 2043.97400, -1884.20801, 13.98000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3806, 2045.80005, -1884.12000, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3806, 2038.93994, -1884.12000, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1825, 2045.56006, -1880.44995, 12.56000,   0.00000, 0.00000, -18.00000);
	CreateDynamicObject(1825, 2039.06006, -1881.06995, 12.56000,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(2800, 2045.38000, -1880.44995, 13.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2959, 2056.64990, -1884.23596, 12.54000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16769, 2055.85010, -1891.91003, 11.89000,   0.00000, -1.00000, 180.00000);
	CreateDynamicObject(19996, 2058.53003, -1883.62000, 12.50000,   0.00000, 0.00000, -156.00000);
	CreateDynamicObject(19996, 2059.37988, -1883.08997, 12.50000,   0.00000, 0.00000, -105.00000);
	CreateDynamicObject(1566, 2065.80005, -1884.03003, 13.98000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2066.94995, -1882.04004, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2065.04004, -1882.04004, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9345, 2043.64001, -1867.67004, 12.78000,   0.00000, 0.00000, -345.00000);
	CreateDynamicObject(892, 2053.78003, -1865.45996, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(892, 2060.59009, -1869.20996, 12.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(892, 2065.31006, -1866.25000, 12.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2064.01001, -1866.39001, 13.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2049.64990, -1867.44995, 13.23000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2060.09009, -1868.73999, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(747, 2062.12012, -1866.87000, 12.92000,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(747, 2046.65002, -1867.47998, 12.84000,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(1302, 2048.46997, -1883.89001, 12.61000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1341, 2034.32996, -1875.83997, 13.44000,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(1342, 2036.64001, -1873.56995, 13.56000,   0.00000, 0.00000, -58.00000);
	CreateDynamicObject(759, 2044.23999, -1868.98999, 12.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 2043.70996, -1867.69995, 13.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(747, 2041.55005, -1868.77002, 12.84000,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(892, 2037.64001, -1866.97998, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(892, 2050.11011, -1868.26001, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(892, 2046.18005, -1864.80005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 2038.93005, -1870.15002, 12.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2054.13989, -1865.92004, 13.23000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(759, 2057.66992, -1866.18005, 12.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1332, 2070.91992, -1882.83997, 13.51000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1343, 2071.12012, -1881.43994, 13.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9345, 2059.84009, -1866.68994, 12.78000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(789, 2055.17993, -1875.65002, 25.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10433, 1568.81995, -1690.81006, 2125.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10433, 2054.75000, -1883.68994, 6.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 2052.69995, -1877.68005, 12.83000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2052.77002, -1876.27002, 12.83000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 2051.62988, -1878.35999, 12.83000,   0.00000, 0.00000, -63.00000);
	CreateDynamicObject(870, 2050.13989, -1877.90002, 12.83000,   0.00000, 0.00000, -193.00000);
	CreateDynamicObject(870, 2049.87012, -1876.23999, 12.83000,   0.00000, 0.00000, -236.00000);
	CreateDynamicObject(870, 2051.51001, -1875.35999, 12.83000,   0.00000, 0.00000, -302.00000);
	CreateDynamicObject(1367, 2076.19995, -1878.23999, 13.13500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1421, 2072.29004, -1885.85999, 13.32000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2069.89990, -1887.32996, 12.46000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19953, 2030.72998, -1886.26001, 12.43000,   0.10000, 0.00000, -21.00000);
	CreateDynamicObject(1226, 2014.29004, -1872.14001, 16.34000,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1226, 2025.91003, -1864.90002, 16.34000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19984, 2026.34998, -1913.18994, 12.54000,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(19912, 2070.53003, -1882.43005, 9.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19912, 2058.98999, -1882.43005, 9.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19912, 2047.44995, -1882.43005, 9.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19912, 2043.14001, -1882.43005, 9.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1574, 2009.14001, -1870.51001, 12.54000,   0.00000, 0.00000, 0.00000);
	//GRass
	new TempObject;
	TempObject = CreateDynamicObject(19447, 2069.89966, -1877.61829, 12.46600,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject,  0, 9495, "vict_sfw", "Grass_128HV", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19447, 2069.89966, -1868.00403, 12.46600,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject,  0, 9495, "vict_sfw", "Grass_128HV", 0xFFFFFFFF);
	//BACKYARD
	TempObject = CreateDynamicObject(18981, 2027.82996, -1881.08997, 12.05400,   0.00000, 90.00000, 45.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18766, 2029.12000, -1913.35999, 12.06000,   90.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18766, 2029.12000, -1917.33997, 12.08000,   90.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18766, 2025.78003, -1865.93994, 12.07000,   90.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(7191, 2029.92004, -1886.23999, 12.46000,   0.00000, 90.00000, 180.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(7191, 2028.60999, -1886.22998, 12.45800,   0.00000, 90.00000, 180.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18766, 2011.93994, -1875.81006, 12.06000,   90.00000, 90.00000, -45.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18766, 2019.01001, -1868.73999, 12.06000,   90.00000, 90.00000, -45.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	//CHAIR
	TempObject = CreateDynamicObject(1280, 2007.50000, -1871.95996, 12.94000,   0.00000, 0.00000, -47.00000);
	SetDynamicObjectMaterial(TempObject,  1, 5405, "laealpha", "floorboard256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(1280, 2012.15002, -1867.66003, 12.94000,   0.00000, 0.00000, -47.00000);
	SetDynamicObjectMaterial(TempObject,  1, 5405, "laealpha", "floorboard256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(1280, 2057.20996, -1870.47998, 12.94000,   0.00000, 0.00000, 75.00000);
	SetDynamicObjectMaterial(TempObject,  1, 5405, "laealpha", "floorboard256128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(1280, 2046.08997, -1870.57996, 12.94000,   0.00000, 0.00000, 105.00000);
	SetDynamicObjectMaterial(TempObject,  1, 5405, "laealpha", "floorboard256128", 0xFFFFFFFF);
	//WHITE
	TempObject = CreateDynamicObject(19717, 2071.90991, -1871.69995, 0.54000,   270.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject,  0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19717, 2071.87988, -1867.90002, 0.54000,   270.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject,  0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	//TEXT(s)
	new tmpobj;
	tmpobj = CreateDynamicObject(19327, 2072.01001, -1870.16003, 16.99000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, "Idlewood\nCenter", OBJECT_MATERIAL_SIZE_256x128, "Tahoma", 50, 1, 0xFF00FF08, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	tmpobj = CreateDynamicObject(19327, 2043.54004, -1883.77002, 16.22000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, "Idlewood", OBJECT_MATERIAL_SIZE_256x128, "Impact", 60, 1, 0xFFC70039, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	tmpobj = CreateDynamicObject(19327, 2041.19995, -1883.76001, 16.22000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, "Restaurant", OBJECT_MATERIAL_SIZE_256x128, "Impact", 56, 1, 0xFFC70039, 0x0000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	tmpobj = CreateDynamicObject(19327, 2066.38989, -1883.83997, 16.22000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, "Idlewood", OBJECT_MATERIAL_SIZE_256x128, "Impact", 65, 1, 0xFFC70039, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	tmpobj = CreateDynamicObject(19327, 2064.25000, -1883.83801, 16.22000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, "CLUB", OBJECT_MATERIAL_SIZE_256x128, "Impact", 70, 1, 0xFFC70039, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	//MARK
	TempObject = CreateDynamicObject(19442, 2067.08008, -1884.01001, 16.21000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3975, "lanbloke", "p_floor3", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19442, 2063.58008, -1884.01001, 16.21000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3975, "lanbloke", "p_floor3", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19442, 2071.88989, -1870.20996, 16.99000,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3975, "lanbloke", "p_floor3", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19444, 2044.15002, -1883.89001, 16.21000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3975, "lanbloke", "p_floor3", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19444, 2040.65002, -1883.89001, 16.21000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3975, "lanbloke", "p_floor3", 0xFFFFFFFF);
	//FLOOR
	TempObject = CreateDynamicObject(19437, 2071.14990, -1870.18994, 12.47000,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8529, "vgsmotelgrnd", "greyground256128", 0xFFFFFFFF);
	//WALLS
	TempObject = CreateDynamicObject(4091, 2050.62988, -1891.17004, 1.80000,   95.00000, 270.00000, 270.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFF393636);
	TempObject = CreateDynamicObject(18980, 2070.86011, -1884.44995, 4.45000,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18980, 2058.83813, -1884.45605, 16.44000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18980, 2044.18994, -1884.45996, 16.44000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(18980, 2059.35010, -1884.31006, 4.46000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	//WindowsX1
	TempObject = CreateDynamicObject(2691, 2045.74573, -1884.05420, 14.09000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8488, "flamingo1", "shopwindowlow2_256", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2691, 2038.84460, -1884.06177, 14.09000,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(TempObject, 0, 8488, "flamingo1", "shopwindowlow2_256", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(19325, 2067.22998, -1884.15002, 13.30000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFF2C3E50);
	TempObject = CreateDynamicObject(19325, 2062.26001, -1884.15002, 13.30000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFF2C3E50);
	TempObject = CreateDynamicObject(19325, 2062.54004, -1884.13000, 13.30000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFF2C3E50);
	TempObject = CreateDynamicObject(19325, 2067.30005, -1884.12000, 13.30000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFF2C3E50);
	//CLUB
	TempObject = CreateDynamicObject(2920, 2059.21997, -1884.10999, 15.25000,   90.00000, 0.00000, 90.50000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2070.98999, -1884.10999, 15.25000,   -90.00000, 0.00000, 89.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2070.17993, -1884.06995, 8.33000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2071.03003, -1884.07800, 12.68000,   -90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2059.06006, -1884.07996, 12.72000,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2065.68994, -1884.00000, 8.33000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2067.50000, -1883.98999, 8.33000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	TempObject = CreateDynamicObject(2920, 2059.92993, -1884.06006, 8.33000,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(TempObject, 0, 1675, "wshxrefhse", "greygreensubuild_128", 0xFFFFFFFF);
	//RED
	tmpobj = CreateDynamicObject(4085, 2049.51001, -1859.04004, 5.85000,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterialText(tmpobj, 0, ".", OBJECT_MATERIAL_SIZE_256x128, "Tahoma", 50, 1, 0xFFFFFFFF, 0xFFC70039, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	//Fence
	TempObject = CreateDynamicObject(4100, 2071.89990, -1860.83997, 13.35000,   0.00000, 0.00000, 50.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2071.75000, -1878.97998, 13.35000,   0.00000, 0.00000, 50.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2065.10010, -1863.40002, 13.35000,   0.00000, 0.00000, -40.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2051.37988, -1863.35999, 13.35000,   0.00000, 0.00000, -40.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2039.05005, -1863.34998, 13.35000,   0.00000, 0.00000, -40.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2031.83997, -1887.13000, 13.35000,   0.00000, 0.00000, 50.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2031.89001, -1869.91003, 13.35000,   0.00000, 0.00000, 50.00000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2016.18994, -1867.92004, 13.35000,   0.00000, 0.00000, 5.30000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	TempObject = CreateDynamicObject(4100, 2028.00000, -1863.30005, 13.35000,   0.00000, 0.00000, -40.30000);
	SetDynamicObjectMaterial(TempObject, 0, 3306, "cunte_house1", "pinkfence_law", 0xFFBFBEBE);
	//
 	// kladionica
	new kladionicazgrada = CreateDynamicObjectEx(4683, 1613.25781, -1185.44531, 29.87500,   0.00000, 0.00000, 0.00000, 600, 600 );
    SetDynamicObjectMaterial(kladionicazgrada, 13, 1649, "wglass", "carshowwin2", 0xFF1E90FF);
	new kladionicapod = CreateDynamicObjectEx(18981, 1603.50989, -1184.82800, 22.86577,   0.00000, 90.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicapod, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	new kladionicazida = CreateDynamicObjectEx(19461, 1596.31006, -1172.24036, 22.21210,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazida1 =CreateDynamicObjectEx(19461, 1610.96448, -1172.24036, 28.85720,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazida2 =CreateDynamicObjectEx(19461, 1610.92456, -1172.24036, 22.21210,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazida3 =CreateDynamicObjectEx(19461, 1595.99011, -1172.24036, 28.85720,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazida4 =CreateDynamicObjectEx(19377, 1603.55811, -1172.23083, 28.03900,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazida5 =CreateDynamicObjectEx(19461, 1586.69641, -1172.24036, 22.21210,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicazida, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazida1, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazida2, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazida3, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazida4, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazida5, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	new kladionicazidb =CreateDynamicObjectEx(19377, 1615.83875, -1177.01831, 23.66054,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidb1 =CreateDynamicObjectEx(19377, 1615.83875, -1186.64417, 23.66050,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidb2 =CreateDynamicObjectEx(19377, 1591.15698, -1177.08191, 23.66050,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidb3 =CreateDynamicObjectEx(19377, 1591.15698, -1186.71619, 23.68050,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidb4 =CreateDynamicObjectEx(19377, 1615.33777, -1187.83545, 23.68050,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidb5 =CreateDynamicObjectEx(19377, 1614.49048, -1182.14246, 23.68050,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidb6 =CreateDynamicObjectEx(19377, 1591.82751, -1182.14246, 23.68050,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidb7 =CreateDynamicObjectEx(19377, 1606.08228, -1183.92529, 31.77270,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidb8 =CreateDynamicObjectEx(19377, 1596.46167, -1183.92529, 31.77270,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicazidb, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb1, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb2, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb3, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb4, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb5, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb6, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb7, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidb8, 0, 3980, "cityhall_lan", "LAcityhwal1");
	new kladionicazidc = CreateDynamicObjectEx(19461, 1591.16248, -1176.63647, 27.92030,   90.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidc1 =CreateDynamicObjectEx(19461, 1597.57642, -1187.11926, 27.92030,   90.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidc2 =CreateDynamicObjectEx(19461, 1608.04248, -1187.11719, 27.92030,   90.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidc3 = CreateDynamicObjectEx(19377, 1596.55652, -1186.87769, 23.66050,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicazidc4 = CreateDynamicObjectEx(19377, 1609.67480, -1186.87097, 23.66050,   0.00000, 0.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicazidc, 0, 3310, "sw_poorhouse", "sw_wallbrick_06", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazidc1, 0, 3310, "sw_poorhouse", "sw_wallbrick_06", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazidc2, 0, 3310, "sw_poorhouse", "sw_wallbrick_06", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazidc3, 0, 3310, "sw_poorhouse", "sw_wallbrick_06", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicazidc4, 0, 3310, "sw_poorhouse", "sw_wallbrick_06", 0xFFFFFFFF);
	new kladionicazidd = CreateDynamicObjectEx(19377, 1596.06470, -1187.13208, 23.68050,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicazidd1 =CreateDynamicObjectEx(19377, 1605.69470, -1187.13208, 23.68050,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicazidd, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(kladionicazidd1, 0, 3980, "cityhall_lan", "LAcityhwal1");
	new kladionicaplafon = CreateDynamicObjectEx(18981, 1603.50989, -1184.82800, 28.53574,   0.00000, 90.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicaplafon, 0, 10926, "shops_sfse", "bathtile01_int");
	new kladionicastubovi = CreateDynamicObjectEx(18980, 1601.61267, -1171.95984, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi1 =CreateDynamicObjectEx(18980, 1605.60901, -1171.95984, 22.90255,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi2 =CreateDynamicObjectEx(18980, 1603.69446, -1177.92273, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi3 =CreateDynamicObjectEx(18980, 1608.90015, -1177.95801, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi4 =CreateDynamicObjectEx(18980, 1609.88928, -1176.96765, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi5 =CreateDynamicObjectEx(18980, 1610.88586, -1175.97070, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi6 =CreateDynamicObjectEx(18980, 1610.02222, -1182.43176, 22.90255,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicastubovi7 =CreateDynamicObjectEx(18980, 1596.24390, -1182.41479, 22.90260,   0.00000, 0.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicastubovi, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi1, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi2, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi3, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi4, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi5, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi6, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	SetDynamicObjectMaterial(kladionicastubovi7, 0, 9239, "stuff2_sfn", "ahoodfence2", 0xFFFFFFFF);
	new kladionicadrvo = CreateDynamicObjectEx(18980, 1601.52979, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo1 =CreateDynamicObjectEx(18980, 1600.52869, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo2 =CreateDynamicObjectEx(18980, 1602.51782, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo3 =CreateDynamicObjectEx(18980, 1603.50427, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo4 =CreateDynamicObjectEx(18980, 1604.50415, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo5 =CreateDynamicObjectEx(18980, 1605.50476, -1183.90881, 11.64930,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicadrvo6 =CreateDynamicObjectEx(18980, 1583.27441, -1182.55127, 23.30358,   0.00000, 90.00000, 0.00000, 600, 600 );
	new kladionicadrvo7 =CreateDynamicObjectEx(18980, 1590.76392, -1184.77881, 23.30360,   0.00000, 90.00000, 90.00000, 600, 600 );
	new kladionicadrvo8 =CreateDynamicObjectEx(19373, 1603.61169, -1172.27905, 25.14080,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicadrvo9 =CreateDynamicObjectEx(18762, 1610.06055, -1185.22778, 23.30360,   0.00000, 90.00000, 90.00000, 600, 600 );
	new kladionicadrvo10 =CreateDynamicObjectEx(18980, 1608.25720, -1187.48010, 23.30358,   0.00000, 90.00000, 0.00000, 600, 600 );
	new kladionicadrvo11 =CreateDynamicObjectEx(18762, 1596.18225, -1185.09119, 23.30360,   0.00000, 90.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicadrvo, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo1, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo2, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo3, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo4, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo5, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo6, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo7, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo8, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo9, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo10, 0, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicadrvo11, 0, 12954, "sw_furniture", "CJ_WOOD5");
	new kladionicastaklo = CreateDynamicObjectEx(19325, 1602.98059, -1183.87366, 27.18433,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicastaklo, 7, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	new kladionicastaklo1 = CreateDynamicObjectEx(19325, 1603.00061, -1183.87366, 22.08650,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicastaklo1, 7, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	new kladionicacrno = CreateDynamicObjectEx(19089, 1606.31897, -1183.88452, 28.82430,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicacrno1 =CreateDynamicObjectEx(19089, 1599.67725, -1183.88452, 28.82426,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicacrno2 =CreateDynamicObjectEx(2228, 1601.73376, -1184.04797, 23.74020,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicacrno3 =CreateDynamicObjectEx(2228, 1604.40369, -1184.00403, 23.74020,   0.00000, 0.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicacrno, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicacrno1, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicacrno2, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicacrno3, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	new kladionicamonitori =CreateDynamicObjectEx(2269, 1601.75073, -1183.58044, 24.29400,   0.00000, 0.00000, 180.00000, 600, 600 );
	new kladionicamonitori1 =CreateDynamicObjectEx(2269, 1604.41089, -1183.58044, 24.29400,   0.00000, 0.00000, 180.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicamonitori, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicamonitori, 1, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicamonitori1, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicamonitori1, 1, 2361, "shopping_freezers", "white", 0xFF000000 );
	new kladionicamonitoridisplay = CreateDynamicObjectEx(2269, 1601.72986, -1184.54053, 24.29400,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicamonitoridisplay1 = CreateDynamicObjectEx(2269, 1604.39087, -1184.54053, 24.29400,   0.00000, 0.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicamonitoridisplay, 0, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladionicamonitoridisplay, 1, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladionicamonitoridisplay1, 0, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladionicamonitoridisplay1, 1, 2361, "shopping_freezers", "white", 0xFF000000 );
	new kladinicatv = CreateDynamicObjectEx(2267, 1594.68054, -1182.00647, 26.36200,   0.00000, 0.00000, 180.00000, 600, 600 );
	new kladinicatv1 =CreateDynamicObjectEx(2267, 1592.37964, -1182.02454, 26.36200,   0.00000, 0.00000, 180.00000, 600, 600 );
	new kladinicatv2 =CreateDynamicObjectEx(2267, 1591.28271, -1179.18567, 26.36200,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladinicatv3 =CreateDynamicObjectEx(2267, 1591.28271, -1174.12000, 26.36200,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladinicatv4 =CreateDynamicObjectEx(2267, 1600.88318, -1183.66992, 27.07310,   15.00000, 0.00000, 180.00000, 600, 600 );
	new kladinicatv5 =CreateDynamicObjectEx(2267, 1602.74304, -1183.66992, 27.07310,   15.00000, 0.00000, 180.00000, 600, 600 );
	new kladinicatv6 =CreateDynamicObjectEx(2267, 1605.02539, -1183.66992, 27.07310,   15.00000, 0.00000, 180.00000, 600, 600 );
	SetDynamicObjectMaterial(kladinicatv, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv1, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv1, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv2, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv2, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv3, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv3, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv4, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv4, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv5, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv5, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	SetDynamicObjectMaterial(kladinicatv6, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(kladinicatv6, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	new kladionicasofa = CreateDynamicObjectEx(1726, 1595.56189, -1173.21997, 23.36310,   0.00000, 0.00000, -90.00000, 600, 600 );
	new kladionicasofa1 =CreateDynamicObjectEx(1726, 1591.76196, -1175.24329, 23.36310,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicasofa2 =CreateDynamicObjectEx(1726, 1591.76196, -1180.05066, 23.36310,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicasofa3 =CreateDynamicObjectEx(1726, 1595.56189, -1178.04944, 23.36310,   0.00000, 0.00000, -90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicasofa, 1, 1726, "mrk_couches2", "mrk_couches2", 0xFF5C3317);
	SetDynamicObjectMaterial(kladionicasofa1, 1, 1726, "mrk_couches2", "mrk_couches2", 0xFF5C3317);
	SetDynamicObjectMaterial(kladionicasofa2, 1, 1726, "mrk_couches2", "mrk_couches2", 0xFF5C3317);
	SetDynamicObjectMaterial(kladionicasofa3, 1, 1726, "mrk_couches2", "mrk_couches2", 0xFF5C3317);
	new kladionicasvetla = CreateDynamicObjectEx(18075, 1603.18420, -1178.09473, 28.02204,   0.00000, 0.00000, 0.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicasvetla, 0, 2361, "shopping_freezers", "white", 0xFF000000 );
	new kladionicastolovi = CreateDynamicObjectEx(2024, 1594.10144, -1174.75171, 23.33760,   0.00000, 0.00000, 90.00000, 600, 600 );
	new kladionicastolovi1 = CreateDynamicObjectEx(2024, 1594.10144, -1179.54236, 23.33760,   0.00000, 0.00000, 90.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicastolovi, 0, 2024, "hi_cutbnkcoch", "green_glass_64", 0xFF1E90FF);
	SetDynamicObjectMaterial(kladionicastolovi1, 0, 2024, "hi_cutbnkcoch", "green_glass_64", 0xFF1E90FF);
	new kladionicavrata = CreateDynamicObjectEx(1533, 1602.10535, -1172.40747, 23.39380,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicavrata1 =CreateDynamicObjectEx(1533, 1603.59973, -1172.40747, 23.39380,   0.00000, 0.00000, 0.00000, 600, 600 );
	new kladionicavrata2 =CreateDynamicObjectEx(1533, 1603.48279, -1170.75000, 22.97130,   0.00000, 0.00000, 180.00000, 600, 600 );
	new kladionicavrata3 =CreateDynamicObjectEx(1533, 1604.98010, -1170.75000, 22.97130,   0.00000, 0.00000, 180.00000, 600, 600 );
	SetDynamicObjectMaterial(kladionicavrata, 2, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicavrata, 1, 1533, "new_shop_door", "CJ_GEN_GLASS2", 0xFFD3D3D3);
	SetDynamicObjectMaterial(kladionicavrata1, 2, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicavrata1, 1, 1533, "new_shop_door", "CJ_GEN_GLASS2", 0xFFD3D3D3);
	SetDynamicObjectMaterial(kladionicavrata2, 2, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicavrata2, 1, 1533, "new_shop_door", "CJ_GEN_GLASS2", 0xFFD3D3D3);
	SetDynamicObjectMaterial(kladionicavrata3, 2, 12954, "sw_furniture", "CJ_WOOD5");
	SetDynamicObjectMaterial(kladionicavrata3, 1, 1533, "new_shop_door", "CJ_GEN_GLASS2", 0xFFD3D3D3);
	new kladionicasm;
	kladionicasm = CreateDynamicObjectEx(19325,1602.383,-1187.023,24.425,0.000,0.000,-90.000, 600, 600 );
	SetDynamicObjectMaterialText(kladionicasm, 0, "Play Hard", 140, "Ariel", 50, 1, -14774017, 0, 0 );
	kladionicasm = CreateDynamicObjectEx(19325,1601.407,-1187.041,23.925,0.000,0.000,-89.999, 600, 600 );
	SetDynamicObjectMaterialText(kladionicasm, 0, "Go Pro", 140, "Ariel", 50, 1, -14774017, 0, 0 );
	kladionicasm = CreateDynamicObjectEx(19325,1600.744,-1187.023,23.465,0.000,0.000,-90.300, 600, 600 );
	SetDynamicObjectMaterialText(kladionicasm, 0, "C", 140, "Webdings", 120, 0, -14774017, 0, 0 );
	//kladionicaostalo
	CreateDynamicObjectEx(2785, 1613.08350, -1181.69861, 24.18680,   0.00000, 0.00000, 180.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1611.41431, -1180.74683, 23.71766,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1612.21484, -1180.74683, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1613.09509, -1180.74683, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1613.97693, -1180.74683, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.81799, -1180.74683, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2785, 1615.45728, -1176.65295, 24.18680,   0.00000, 0.00000, -90.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.31067, -1178.32434, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.31067, -1177.48315, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.31067, -1176.64258, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.31067, -1175.85938, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1614.31067, -1175.01880, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2640, 1609.00818, -1177.02319, 24.08360,   0.00000, 0.00000, -90.00000, 600, 600 );
	CreateDynamicObjectEx(2640, 1609.98047, -1176.01904, 24.08360,   0.00000, 0.00000, -90.00000, 600, 600 );
	CreateDynamicObjectEx(2640, 1610.85034, -1176.91724, 24.08360,   0.00000, 0.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(2640, 1609.88965, -1177.90479, 24.08360,   0.00000, 0.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1611.92273, -1176.82996, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1611.14575, -1177.96631, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1607.64783, -1177.18713, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2723, 1608.76501, -1175.87769, 23.71770,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(3437, 1616.35083, -1182.19800, 22.43962,   0.00000, 90.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2231, 1603.92358, -1177.98218, 27.38870,   20.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2231, 1603.37305, -1177.83435, 27.38870,   20.00000, 0.00000, 180.00000, 600, 600 );
	CreateDynamicObjectEx(3437, 1615.89221, -1178.09009, 22.43960,   0.00000, 90.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(19808, 1601.71838, -1184.27588, 24.18712,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(19808, 1604.41272, -1184.21570, 24.18712,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(1671, 1601.72827, -1185.30908, 23.78600,   0.00000, 0.00000, 180.00000, 600, 600 );
	CreateDynamicObjectEx(2816, 1593.60681, -1179.19226, 23.86990,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(2208, 1601.82214, -1184.50793, 28.60330,   180.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(957, 1602.02148, -1184.59045, 27.65637,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(957, 1603.15967, -1184.59045, 27.65640,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(957, 1604.42065, -1184.59045, 27.65640,   0.00000, 0.00000, 0.00000, 600, 600 );
	CreateDynamicObjectEx(1671, 1604.46570, -1185.30908, 23.78600,   0.00000, 0.00000, 180.00000, 600, 600 );
	CreateDynamicObjectEx(19325, 1595.51294, -1172.23181, 25.34454,   0.00000, 0.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(19325, 1588.87891, -1172.23181, 25.34454,   0.00000, 0.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(19325, 1607.05762, -1172.23181, 25.34454,   0.00000, 0.00000, 90.00000, 600, 600 );
	CreateDynamicObjectEx(19325, 1613.68921, -1172.23181, 25.34454,   0.00000, 0.00000, 90.00000, 600, 600 );

	// --------------------------------< Mechanic > ------------------------------------------ //
	CreateDynamicObject(11387, 1938.19714, -1574.17957, 16.07544,   0.00000, 0.00000, -89.15997);
	CreateDynamicObject(11389, 1954.06860, -1564.53979, 15.85070,   0.00000, 0.00000, -449.10004);
	CreateDynamicObject(11391, 1945.76685, -1556.60034, 13.97530,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(5532, 1979.91541, -1576.38586, 20.66209,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(11326, 2019.61536, -1599.76355, 14.92121,   0.00000, 0.00000, -270.59991);
	CreateDynamicObject(923, 1954.61389, -1575.37744, 13.57085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(923, 1954.68970, -1578.03662, 13.57085,   0.00000, 0.00000, -48.18000);
	CreateDynamicObject(923, 1961.86426, -1574.97534, 13.57085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(922, 1970.68567, -1589.12769, 13.57559,   0.00000, 0.00000, 91.74000);
	CreateDynamicObject(925, 1970.03296, -1585.53931, 12.59574,   0.00000, 0.00000, -87.59999);
	CreateDynamicObject(17951, 1937.57910, -1560.28455, 14.43111,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17951, 1958.03430, -1574.08643, 14.42060,   0.00000, 0.00000, 90.36003);
	CreateDynamicObject(17951, 1958.03455, -1574.06641, 15.11645,   0.00000, 0.00000, 90.36003);
	CreateDynamicObject(14826, 1989.33679, -1592.96106, 13.29721,   0.00000, 0.00000, 270.11993);
	CreateDynamicObject(14826, 1959.42993, -1605.15576, 13.29721,   0.00000, 0.00000, 470.28012);
	CreateDynamicObject(19425, 1978.87634, -1590.87891, 12.57487,   0.00000, 0.00000, 1.68000);
	CreateDynamicObject(19425, 1979.89893, -1590.86145, 12.57020,   0.00000, 0.00000, 1.68000);
	CreateDynamicObject(11326, 1963.69446, -1609.21631, 14.92121,   0.00000, 0.00000, -358.67990);
	CreateDynamicObject(2922, 1973.21143, -1600.57849, 13.97022,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1939.60779, -1567.92358, 12.70980,   0.00000, 0.00000, 90.60000);
	CreateDynamicObject(2186, 1940.73486, -1572.64490, 12.71051,   0.00000, 0.00000, -179.63998);
	CreateDynamicObject(2182, 1947.77332, -1571.76135, 12.70937,   0.00000, 0.00000, 181.68002);
	CreateDynamicObject(2181, 1939.32800, -1570.39026, 12.70823,   0.00000, 0.00000, 90.84000);
	CreateDynamicObject(2164, 1945.41162, -1573.21497, 12.70905,   0.00000, 0.00000, 180.59996);
	CreateDynamicObject(2165, 1947.75256, -1567.21411, 12.71034,   0.00000, 0.00000, -89.45999);
	CreateDynamicObject(1721, 1947.07275, -1568.03613, 12.71045,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(1721, 1946.66626, -1572.08289, 12.71045,   0.00000, 0.00000, -55.43998);
	CreateDynamicObject(1721, 1940.05396, -1570.04810, 12.71045,   0.00000, 0.00000, 91.74002);
	CreateDynamicObject(1721, 1941.14050, -1567.31104, 12.71045,   0.00000, 0.00000, 91.74002);
	CreateDynamicObject(1676, 1943.46484, -1586.30334, 14.30219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, 1945.51257, -1586.30701, 14.30219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1941.43677, -1586.11792, 13.21206,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1941.44873, -1586.27734, 13.21206,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1650, 1941.08105, -1586.18433, 13.21206,   0.00000, 0.00000, -30.78000);
	CreateDynamicObject(1650, 1947.24316, -1586.20044, 13.20952,   0.00000, 0.00000, 93.66002);
	CreateDynamicObject(1650, 1947.40405, -1586.19177, 13.20952,   0.00000, 0.00000, 93.66002);
	CreateDynamicObject(1650, 1947.56519, -1586.18311, 13.20952,   0.00000, 0.00000, 93.66002);
	CreateDynamicObject(1215, 1931.62671, -1602.51697, 13.01522,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1942.22290, -1604.50208, 13.01522,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2011.01172, -1602.47937, 13.00364,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2001.11780, -1604.30420, 13.00364,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(939, 1982.65649, -1607.75000, 13.11219,   0.00000, 0.00000, -88.92001);
	CreateDynamicObject(3576, 1955.79248, -1615.50574, 13.98947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3576, 1953.09497, -1612.78406, 13.98947,   0.00000, 0.00000, 89.93998);
	CreateDynamicObject(19817, 1978.42810, -1605.43335, 11.77546,   0.00000, 0.00000, -180.35997);
	CreateDynamicObject(19899, 1974.00366, -1605.22058, 12.83894,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19907, 2002.75476, -1570.48083, 12.56207,   0.00000, 0.00000, 449.87997);
	CreateDynamicObject(19817, 2000.43469, -1572.70581, 12.64815,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19872, 1995.59875, -1572.85876, 10.84902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11388, 1954.02051, -1564.49719, 19.41262,   0.00000, 0.00000, -89.03999);
	CreateDynamicObject(11393, 2017.67419, -1580.00183, 14.42911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14826, 2006.60181, -1574.19165, 13.37573,   0.00000, 0.00000, 467.81992);
	CreateDynamicObject(17951, 2008.61206, -1568.90906, 13.41685,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11391, 1998.15320, -1565.87292, 13.96399,   0.00000, 0.00000, -90.29996);
	CreateDynamicObject(11393, 1988.91077, -1568.45825, 14.12789,   0.00000, 0.00000, 268.07999);
	CreateDynamicObject(925, 1969.87012, -1583.18237, 12.59574,   0.00000, 0.00000, -87.59999);
	CreateDynamicObject(922, 1970.38574, -1579.39392, 13.57559,   0.00000, 0.00000, 91.74000);
	CreateDynamicObject(19817, 1965.90161, -1561.09741, 12.08665,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(17951, 1937.59912, -1560.28381, 15.19127,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(930, 2014.99951, -1582.80908, 13.16166,   0.00000, 0.00000, 27.12000);
	CreateDynamicObject(19872, 2017.20850, -1586.25916, 11.08814,   -4.62000, 0.48000, 86.70000);
	CreateDynamicObject(19545, 1932.58557, -1571.02380, 12.57320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19545, 1947.60132, -1571.01697, 12.57320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19545, 1962.62415, -1571.04993, 12.58735,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19545, 1979.12390, -1582.40906, 12.66414,   0.00000, 0.00000, 88.98003);
	CreateDynamicObject(19545, 1979.14209, -1594.69434, 12.61443,   0.00000, 0.00000, 90.35996);
	CreateDynamicObject(19377, 1985.49158, -1583.84290, 23.35495,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19377, 1985.98157, -1579.05835, 23.35495,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19377, 1985.98157, -1579.05835, 12.93738,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19377, 1985.49158, -1583.84290, 12.95711,   0.00000, 0.00000, -5.70000);


	new opstinaintathlonezidg =CreateDynamicObject(19377, 630.03021, -113.12850, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid = CreateDynamicObject(19377, 666.62512, -84.33140, -73.28210,   0.00000, 0.00000, 80.00000);
	new opstinaintathlonezid1 =CreateDynamicObject(19377, 661.90118, -87.12520, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid2 =CreateDynamicObject(19377, 674.51343, -88.87746, -73.28210,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonezid3 =CreateDynamicObject(19377, 677.41028, -95.12473, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid4 =CreateDynamicObject(19377, 674.45599, -103.24913, -73.28210,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonezid5 =CreateDynamicObject(19377, 666.62512, -107.76390, -73.28210,   0.00000, 0.00000, -80.00000);
	new opstinaintathlonezid6 =CreateDynamicObject(19377, 661.90118, -104.71550, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid7 =CreateDynamicObject(19377, 661.89948, -104.47710, -83.67000,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid8 =CreateDynamicObject(19377, 661.89948, -87.37440, -83.67000,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid9 =CreateDynamicObject(19377, 665.36133, -82.62030, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid10 =CreateDynamicObject(19377, 658.46655, -82.61582, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid11 =CreateDynamicObject(19377, 648.95477, -82.61580, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid12 =CreateDynamicObject(19396, 652.40198, -82.66890, -78.29890,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid13 =CreateDynamicObject(19377, 660.61700, -77.86745, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid14 =CreateDynamicObject(19377, 655.88336, -73.11671, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid15 =CreateDynamicObject(19377, 646.28180, -73.11590, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid16 =CreateDynamicObject(19377, 644.20990, -77.89880, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid17 =CreateDynamicObject(19377, 636.65820, -73.11586, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid18 =CreateDynamicObject(19377, 628.73895, -76.77615, -75.60600,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonezid19 =CreateDynamicObject(19377, 625.60681, -85.31715, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid20 =CreateDynamicObject(19377, 625.60681, -94.92460, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid21 =CreateDynamicObject(19377, 625.60681, -104.55610, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid22 =CreateDynamicObject(19377, 626.04303, -105.89893, -80.77422,   0.00000, 0.00000, 312.04071);
	new opstinaintathlonezid23 =CreateDynamicObject(19377, 628.85492, -109.00580, -80.77420,   0.00000, 0.00000, 312.04071);
	new opstinaintathlonezid24 =CreateDynamicObject(19377, 627.27020, -109.58454, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid25 =CreateDynamicObject(19377, 632.03192, -114.32162, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid26 =CreateDynamicObject(19377, 639.55231, -113.12850, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid27 =CreateDynamicObject(19377, 644.29022, -113.91904, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid28 =CreateDynamicObject(19377, 649.18329, -109.13893, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid29 =CreateDynamicObject(19377, 658.81219, -109.13890, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid30 =CreateDynamicObject(19377, 665.36127, -109.15321, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid31 =CreateDynamicObject(19396, 652.41138, -109.11591, -78.29891,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid32 =CreateDynamicObject(19377, 660.59772, -113.88275, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid33 =CreateDynamicObject(19377, 655.69916, -118.78771, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid34 =CreateDynamicObject(19377, 646.07312, -118.78770, -75.60600,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezid, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid1, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid2, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid3, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid4, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid5, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid6, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid7, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid8, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid9, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid10, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid11, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid12, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid13, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid14, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid15, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid16, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid17, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid18, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid19, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid20, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid21, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid22, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid23, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid24, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid25, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid26, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid27, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid28, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid29, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid30, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid31, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid32, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid33, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid34, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezidg, 0, 3980, "cityhall_lan", "LAcityhwal1");
	new opstinaintathlonedrvo = CreateDynamicObject(19458, 666.77692, -85.29599, -79.12100,   -0.08000, 0.00000, 90.00000);
	new opstinaintathlonedrvo1 =CreateDynamicObject(19458, 666.68890, -83.63480, -77.44910,   0.00000, 90.00000, 90.00000);
	new opstinaintathlonedrvo2 =CreateDynamicObject(19461, 674.33673, -88.68752, -79.15932,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonedrvo3 =CreateDynamicObject(19461, 661.90607, -87.11475, -79.15930,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo4 =CreateDynamicObject(19461, 677.39032, -95.51983, -77.07301,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo5 =CreateDynamicObject(19461, 674.41040, -103.29371, -79.15930,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonedrvo6 =CreateDynamicObject(19458, 666.76172, -108.47266, -77.44910,   0.00000, 90.00000, 90.00000);
	new opstinaintathlonedrvo7 =CreateDynamicObject(19458, 666.74353, -106.80576, -79.12100,   -0.08000, 0.00000, 90.00000);
	new opstinaintathlonedrvo8 =CreateDynamicObject(19461, 661.91052, -104.72173, -79.15930,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo9 =CreateDynamicObject(19461, 661.87378, -104.72050, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo10 =CreateDynamicObject(19461, 665.29529, -109.14634, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo11 =CreateDynamicObject(19461, 665.34991, -82.66392, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo12 =CreateDynamicObject(19461, 661.87378, -87.16640, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo13 =CreateDynamicObject(19461, 660.60931, -77.90871, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo14 =CreateDynamicObject(19461, 658.58612, -73.13094, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo15 =CreateDynamicObject(19461, 649.06354, -73.14380, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo16 =CreateDynamicObject(19461, 644.21991, -77.98660, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo17 =CreateDynamicObject(19461, 644.20142, -78.01320, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo18 =CreateDynamicObject(19461, 639.38110, -73.12821, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo19 =CreateDynamicObject(19461, 629.78619, -73.12492, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo20 =CreateDynamicObject(19461, 628.74042, -76.78050, -80.79680,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonedrvo21 =CreateDynamicObject(19461, 625.61047, -78.69132, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo22 =CreateDynamicObject(19461, 625.63580, -88.31848, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo23 =CreateDynamicObject(19461, 624.61279, -89.48550, -79.09740,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo24 =CreateDynamicObject(19461, 626.26422, -89.49500, -80.75850,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo25 =CreateDynamicObject(19461, 621.54028, -84.73660, -80.75850,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo26 =CreateDynamicObject(19461, 626.26416, -99.08847, -80.75850,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo27 =CreateDynamicObject(19461, 624.61279, -99.11010, -79.09740,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo28 =CreateDynamicObject(19461, 625.63300, -108.18704, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo29 =CreateDynamicObject(19461, 621.54034, -103.85158, -80.75850,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo30 =CreateDynamicObject(19461, 627.30493, -109.56429, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo31 =CreateDynamicObject(19461, 632.03607, -114.44640, -80.79680,   -0.08000, 0.00000, 0.00000);
	new opstinaintathlonedrvo32 =CreateDynamicObject(19461, 629.74561, -113.11581, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo33 =CreateDynamicObject(19461, 639.37738, -113.11460, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo34 =CreateDynamicObject(19461, 644.28583, -115.09500, -80.79680,   -0.08000, 0.00000, 0.00000);
	new opstinaintathlonedrvo35 =CreateDynamicObject(18762, 641.87567, -109.79960, -79.55340,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo36 =CreateDynamicObject(18762, 636.87628, -109.79960, -79.55340,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo37 =CreateDynamicObject(19461, 644.29199, -113.93302, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo38 =CreateDynamicObject(19461, 648.80786, -118.78540, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo39 =CreateDynamicObject(19461, 658.43280, -118.78391, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo40 =CreateDynamicObject(19461, 660.57996, -114.00549, -80.79680,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonedrvo, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo1, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo2, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo3, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo4, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo5, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo6, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo7, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo8, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo9, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo10, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo11, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo12, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo13, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo14, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo15, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo16, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo17, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo18, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo19, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo20, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo21, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo22, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo23, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo24, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo25, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo26, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo27, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo28, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo29, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo30, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo31, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo32, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo33, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo34, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo35, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo36, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo37, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo38, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo39, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo40, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	new opstinaintathlonezidb = CreateDynamicObject(19377, 628.68365, -109.85345, -75.60600,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonezidb1 = CreateDynamicObject(19461, 625.61780, -94.48410, -79.24720,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezidb2 =CreateDynamicObject(19358, 640.21472, -83.54597, -78.33775,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezidb3 =CreateDynamicObject(19358, 628.30621, -83.54600, -78.33780,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezidb, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb1, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb2, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb3, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	new athloneopstinaintstubovi = CreateDynamicObject(18980, 662.79163, -84.45060, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi1 =CreateDynamicObject(18980, 650.32031, -95.88281, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi2 =CreateDynamicObject(18980, 643.88342, -108.62588, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi3 =CreateDynamicObject(18980, 643.30560, -104.42500, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi4 =CreateDynamicObject(18980, 643.30560, -87.51801, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi5 =CreateDynamicObject(18980, 643.81207, -83.19390, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi6 =CreateDynamicObject(18980, 634.40680, -79.84310, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi7 =CreateDynamicObject(18980, 662.73395, -107.59574, -78.19510,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(athloneopstinaintstubovi, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi1, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi2, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi3, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi4, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi5, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi6, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi7, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	new opstinaithloneintcrno = CreateDynamicObject(19089, 632.07318, -83.49660, -76.06700,   0.00000, 90.00000, 0.00000);
	new opstinaithloneintcrno1 =CreateDynamicObject(19089, 632.07690, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	new opstinaithloneintcrno2 =CreateDynamicObject(19089, 644.13342, -83.49210, -76.06700,   0.00000, 90.00000, 0.00000);
	new opstinaithloneintcrno3 =CreateDynamicObject(19089, 636.75488, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaithloneintcrno, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno2, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno3, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	new opstinaathloneintpod = CreateDynamicObject(18981, 674.34088, -96.06480, -78.90170,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod1 =CreateDynamicObject(18981, 649.38062, -96.06480, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod2 =CreateDynamicObject(18981, 624.38440, -96.06480, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod3 =CreateDynamicObject(18981, 649.41278, -71.05640, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod4 =CreateDynamicObject(18981, 624.40436, -71.11646, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod5 =CreateDynamicObject(18981, 624.38440, -121.02770, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod6 =CreateDynamicObject(18981, 649.38062, -121.02770, -80.41410,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaathloneintpod, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod1, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod2, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod3, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod4, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod5, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod6, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	new opstinaintathloneplafon = CreateDynamicObject(18981, 674.39478, -95.09790, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon1 =CreateDynamicObject(18981, 649.38062, -96.06480, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon2 =CreateDynamicObject(18981, 649.38062, -121.02770, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon3 =CreateDynamicObject(18981, 624.38440, -121.02770, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon4 =CreateDynamicObject(18981, 624.38440, -96.06480, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon5 =CreateDynamicObject(18981, 649.39362, -71.11540, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon6 =CreateDynamicObject(18981, 624.40442, -71.11650, -71.28810,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathloneplafon, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon1, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon2, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon3, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon4, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon5, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon6, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	new opstinaathlonekancelarijep = CreateDynamicObject(19377, 649.02307, -77.40660, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep1 = CreateDynamicObject(19377, 658.60931, -77.40660, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep2 = CreateDynamicObject(19377, 649.26868, -114.41124, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep3 = CreateDynamicObject(19377, 658.90045, -114.43725, -76.02560,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep1, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep2, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep3, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	new opstinaintathloneprozori = CreateDynamicObject(19466, 625.70062, -85.94160, -78.46710,   0.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori1 =CreateDynamicObject(19358, 625.62653, -90.83600, -80.11360,   45.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori2 =CreateDynamicObject(19358, 625.62653, -97.96420, -80.11360,   45.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori3 =CreateDynamicObject(19466, 625.69885, -102.38997, -78.46712,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathloneprozori, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori1, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori2, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori3, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	new opstinaintathlonestakla = CreateDynamicObject(19325, 628.75568, -83.49660, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla1 =CreateDynamicObject(19325, 640.07196, -83.49660, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla2 =CreateDynamicObject(19325, 647.57391, -82.70230, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla3 =CreateDynamicObject(19325, 657.24365, -82.70232, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla4 =CreateDynamicObject(19325, 657.31396, -109.11961, -78.12171,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla5 =CreateDynamicObject(19325, 647.57391, -109.11960, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla6 =CreateDynamicObject(19325, 629.93542, -108.01970, -73.54840,   0.00000, 0.00000, 312.00000);
	new opstinaintathlonestakla7 =CreateDynamicObject(19325, 627.08929, -104.96125, -73.54842,   0.00000, 0.00000, 312.00000);
	new opstinaintathlonestakla8 =CreateDynamicObject(19325, 643.72156, -85.57745, -78.66464,   80.00000, 0.00000, 0.00000);
	new opstinaintathlonestakla9 =CreateDynamicObject(19325, 643.69373, -106.29720, -78.66460,   -80.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonestakla, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla1, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla2, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla3, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla4, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla5, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla6, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla7, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla8, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla9, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	new opstinaintathloneplazma = CreateDynamicObject(2267, 628.30969, -83.41081, -77.97473,   0.00000, 0.00000, 180.00000);
	new opstinaintathloneplazma1 =CreateDynamicObject(2267, 640.22369, -83.43540, -77.97470,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(opstinaintathloneplazma, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(opstinaintathloneplazma, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaintathloneplazma1, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(opstinaintathloneplazma1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	new opstinaintathlonezast = CreateDynamicObject(19458, 659.00098, -99.97622, -82.33400,   -40.00000, 0.00000, 90.00000);
	new opstinaintathlonezast1 =CreateDynamicObject(19458, 659.00098, -91.86590, -82.33400,   -40.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezast, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezast1, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	new opstinaintathlonevrata = CreateDynamicObject(1491, 651.63452, -109.10800, -79.97020,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonevrata, 0, 1569, "adam_v_doort", "ws_guardhousedoor", 0xFFFFFFFF);
	new dodatakplafon = CreateDynamicObject(18981, 675.47900, -120.01958, -71.28810,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(dodatakplafon, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	//ostaloopstinaint
	CreateDynamicObject(14394, 660.80750, -95.93260, -79.21160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.27869, -85.95230, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.22418, -90.97360, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.22418, -98.08510, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.27875, -102.44759, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 629.51630, -105.59517, -80.34965,   0.00000, 0.00000, 312.04074);
	CreateDynamicObject(2209, 642.74908, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 640.54437, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 638.32220, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 636.17377, -109.54321, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19089, 636.75488, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.62518, -84.89540, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.56738, -85.95110, -77.55540,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.62451, -103.59120, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.57739, -102.36510, -77.55540,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.57739, -102.36510, -78.98882,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.63733, -101.36090, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.63275, -87.19853, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.56738, -85.95112, -78.98882,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.64496, -89.77599, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.64124, -99.41479, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.58588, -98.18000, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -95.95420, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -93.72840, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -91.52940, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -90.80700, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(957, 625.97467, -100.38590, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.87830, -88.32170, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -96.46550, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -94.32830, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -92.21470, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(970, 660.09564, -91.88626, -79.45350,   0.00000, -40.00000, 0.00000);
	CreateDynamicObject(970, 660.12927, -99.98650, -79.45350,   0.00000, -40.00000, 0.00000);
	CreateDynamicObject(2315, 650.34064, -95.89874, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2315, 650.30090, -95.89836, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.34088, -87.54068, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2315, 643.29565, -87.54087, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.28198, -104.42378, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.33002, -104.44360, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2030, 643.32550, -104.08462, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 643.35559, -87.94286, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 644.71716, -88.77499, -79.34870,   0.00000, 0.00000, 313.66730);
	CreateDynamicObject(1811, 642.44525, -89.24929, -79.34870,   0.00000, 0.00000, 254.05786);
	CreateDynamicObject(1811, 642.44653, -102.88531, -79.34870,   0.00000, 0.00000, 130.13995);
	CreateDynamicObject(1811, 644.31219, -103.08139, -79.34870,   0.00000, 0.00000, 63.86169);
	CreateDynamicObject(1811, 627.92981, -86.01850, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -90.93860, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -98.07280, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -102.46020, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 635.49139, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 637.77881, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 639.93292, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 642.19196, -107.87415, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 642.20758, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 658.63849, -74.89175, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 637.77881, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 635.49139, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 661.47388, -85.19040, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 666.01703, -84.66341, -76.98325,   0.00000, 0.00000, 86.70212);
	CreateDynamicObject(640, 661.47388, -102.50950, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 661.47388, -107.88960, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 643.31097, -103.64680, -79.24140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 643.43970, -88.44480, -79.24140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -87.58610, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -89.08930, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -99.73520, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -101.00310, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 628.73590, -81.18795, -79.95783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 639.59589, -80.68150, -79.95780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 633.93317, -77.46697, -79.95783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 639.02917, -78.06230, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 628.21399, -78.64378, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 633.54919, -74.91982, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 640.47894, -80.21136, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 634.89307, -76.97001, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 629.71106, -80.72469, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 635.11871, -80.05130, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 633.70306, -80.05126, -80.16164,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 643.42993, -73.22305, -78.47224,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 661.47388, -90.55080, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 665.81433, -107.35336, -76.98325,   0.00000, 0.00000, 95.41958);
	CreateDynamicObject(948, 650.32709, -95.17343, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 650.32709, -96.63380, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 625.94635, -104.19146, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 625.94598, -84.48155, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 639.77661, -80.11692, -79.49731,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1533, 628.09088, -108.87543, -77.27138,   0.00000, 0.00000, 131.41745);
	CreateDynamicObject(1533, 627.10388, -107.73789, -77.27138,   0.00000, 0.00000, 130.70224);
	CreateDynamicObject(1533, 677.27008, -96.03189, -78.45134,   0.00000, 0.00000, 270.31757);
	CreateDynamicObject(1533, 677.26648, -94.53089, -78.45134,   0.00000, 0.00000, 270.31757);
	CreateDynamicObject(10932, 663.30194, -84.45351, -87.21690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 635.49139, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 637.77881, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 639.93292, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 642.20758, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 643.73938, -112.89420, -79.95420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 642.43500, -112.89024, -79.94180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 640.67438, -112.90337, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 639.76129, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 638.00177, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 636.23688, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 635.50372, -109.62946, -79.02720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 650.27289, -96.42448, -77.90593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 650.35260, -95.35569, -77.90590,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11710, 627.05072, -107.76850, -74.53440,   0.00000, 0.00000, 311.42770);
	CreateDynamicObject(19787, 632.13702, -111.41712, -76.54530,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, 653.07501, -116.12050, -79.93630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 652.13806, -117.80235, -79.96360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 653.59235, -114.47710, -79.93870,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1727, 650.25983, -114.90266, -79.93870,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2164, 645.68073, -118.63110, -79.96960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 647.46039, -118.60310, -79.96960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 655.47131, -118.72634, -78.47220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 649.20062, -118.63110, -79.03260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2162, 649.22919, -118.63110, -79.94440,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 645.00787, -111.66827, -79.88450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 647.96295, -109.71831, -79.88450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14455, 660.54919, -117.95032, -78.47220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19787, 644.38165, -114.48017, -76.94630,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(1817, 646.96698, -111.21815, -79.95780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2253, 651.13812, -116.80521, -78.92980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 652.12128, -116.42018, -79.16170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 651.55731, -116.14957, -79.13648,   0.00000, 0.00000, 34.48423);
	CreateDynamicObject(2252, 646.42346, -110.77756, -79.20530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14834, 660.15924, -109.59376, -79.66059,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 650.11292, -118.20687, -78.18145,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2265, 650.80261, -118.13276, -78.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2262, 654.21777, -118.19831, -78.38730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18084, 652.33887, -117.73293, -78.05145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 659.55408, -111.44402, -78.05140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2828, 653.05249, -116.69225, -79.17720,   0.00000, 0.00000, 125.71690);
	CreateDynamicObject(2239, 644.72064, -112.29126, -79.86860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 651.62665, -82.71125, -79.97024,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 644.87842, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 649.31622, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 653.84491, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 658.16254, -73.66959, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 639.93292, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 654.34387, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 649.80573, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 645.43958, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 647.23346, -73.20974, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 651.63318, -73.20970, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 656.09192, -73.20970, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 656.09192, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 651.63318, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 647.23352, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 656.58954, -78.36084, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 652.16882, -78.36080, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 647.68329, -78.36080, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 644.01807, -117.68100, -79.94760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2241, 632.39355, -112.72945, -79.46980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 643.75452, -95.91390, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 663.96240, -95.91393, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 633.82617, 80.82190, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19158, 631.93738, -95.46360, -83.49860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19158, 652.39771, -95.46357, -83.49860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2613, 650.15491, -117.48537, -79.91563,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 661.79547, -103.99761, -76.41720,   0.00000, 40.00000, -90.00000);
	CreateDynamicObject(2257, 661.80475, -86.74609, -76.41720,   0.00000, -40.00000, -90.00000);
	CreateDynamicObject(2258, 635.58722, -73.23920, -76.56381,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, 644.01782, -77.68080, -76.56380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, 629.73047, -109.00214, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 626.11053, -80.70605, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 643.97717, -82.38253, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 662.51752, -106.49671, -78.38544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 662.41052, -85.78848, -78.38544,   0.00000, 0.00000, 0.00000);


   //INTERIJER BOLNICE BY:MUMIN
	CreateDynamicObjectEx(19325, -2282.10498, 116.04528, -6.33510,   90.00000, 0.00000, 90.18001, 600.000, 600.000 );
	CreateDynamicObjectEx(19325, -2275.52295, 116.04869, -6.33510,   90.00000, 0.00000, 90.18001, 600.000, 600.000 );
	CreateDynamicObjectEx(3961, -2285.31030, 130.30286, -4.36321,   0.00000, 0.00000, 90.66001, 600.000, 600.000 );
	CreateDynamicObjectEx(1569, -2330.58301, 112.93484, -6.40223,   0.00000, 0.00000, -90.11999, 600.000, 600.000 );
	CreateDynamicObjectEx(1569, -2330.57104, 109.95349, -6.40223,   0.00000, 0.00000, -269.82010, 600.000, 600.000 );
	CreateDynamicObjectEx(948, -2330.26855, 109.30609, -6.40290,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(948, -2330.29541, 113.56786, -6.40290,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(955, -2323.70898, 99.48238, -6.01688,   0.00000, 0.00000, -178.56001, 600.000, 600.000 );
	CreateDynamicObjectEx(18755, -2272.10547, 111.65658, -4.37645,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1671, -2320.76099, 113.19901, -5.88380,   0.00000, 0.00000, -89.76000, 600.000, 600.000 );
	CreateDynamicObjectEx(1726, -2329.07813, 122.57433, -6.40811,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1727, -2326.52881, 122.55769, -6.40772,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1726, -2329.83130, 119.36741, -6.40811,   0.00000, 0.00000, 90.18001, 600.000, 600.000 );
	CreateDynamicObjectEx(1726, -2329.71436, 100.69326, -6.40811,   0.00000, 0.00000, 90.18001, 600.000, 600.000 );
	CreateDynamicObjectEx(1726, -2326.67969, 99.79217, -6.40811,   0.00000, 0.00000, -179.94009, 600.000, 600.000 );
	CreateDynamicObjectEx(1727, -2325.07983, 99.81741, -6.40772,   0.00000, 0.00000, -179.40001, 600.000, 600.000 );
	CreateDynamicObjectEx(955, -2324.11963, 123.20577, -6.01688,   0.00000, 0.00000, 0.41997, 600.000, 600.000 );
	CreateDynamicObjectEx(1823, -2328.15112, 119.83789, -6.39688,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1823, -2328.02661, 101.31773, -6.39688,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.07227, 116.84062, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1984, -2280.94287, 123.64344, -6.33649,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.06006, 117.66077, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.04883, 118.50089, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.04321, 119.33660, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.03442, 120.17873, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1969, -2283.02588, 121.02080, -5.81654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2372, -2290.68164, 92.00401, -6.30313,   0.00000, 0.00000, -89.76001, 600.000, 600.000 );
	CreateDynamicObjectEx(2372, -2287.70044, 91.98628, -6.30313,   0.00000, 0.00000, -89.76001, 600.000, 600.000 );
	CreateDynamicObjectEx(2378, -2289.51831, 91.95734, -5.74177,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2378, -2290.16138, 91.95860, -5.74177,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2374, -2286.86230, 91.94845, -5.71057,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2374, -2287.86182, 91.91426, -5.71057,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2568, -2306.46973, 121.37341, -6.40023,   0.00000, 0.00000, -90.05998, 600.000, 600.000 );
	CreateDynamicObjectEx(2568, -2306.48364, 104.09891, -6.40023,   0.00000, 0.00000, -90.05998, 600.000, 600.000 );
	CreateDynamicObjectEx(2811, -2306.53638, 116.38536, -6.40610,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2811, -2306.59521, 105.86118, -6.40610,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2819, -2287.69775, 90.53571, -6.30606,   0.00000, 0.00000, 26.52000, 600.000, 600.000 );
	CreateDynamicObjectEx(2819, -2289.57544, 91.32547, -6.30606,   0.00000, 0.00000, -53.04000, 600.000, 600.000 );
	CreateDynamicObjectEx(2816, -2327.69849, 120.37637, -5.90266,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2862, -2283.08618, 119.35001, -5.56019,   0.00000, 0.00000, -77.16000, 600.000, 600.000 );
	CreateDynamicObjectEx(2862, -2283.11670, 118.30354, -5.56019,   0.00000, 0.00000, -77.16000, 600.000, 600.000 );
	CreateDynamicObjectEx(2894, -2322.12305, 109.90666, -5.28146,   0.00000, 0.00000, 90.30000, 600.000, 600.000 );
	CreateDynamicObjectEx(16101, -2322.29810, 114.57059, -5.50658,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(16101, -2322.22290, 107.85686, -5.50658,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(16101, -2321.90967, 115.04766, -5.50658,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(16101, -2321.87598, 107.35921, -5.50658,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1991, -2284.35107, 124.63752, -6.33295,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1996, -2283.36108, 124.61852, -6.33266,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2637, -2275.63281, 116.87468, -5.94136,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2274.90796, 117.59969, -5.72007,   0.00000, 0.00000, 89.82001, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2275.99512, 118.20351, -5.72007,   0.00000, 0.00000, 89.82001, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2277.49072, 116.67051, -5.72007,   0.00000, 0.00000, 206.04004, 600.000, 600.000 );
	CreateDynamicObjectEx(2637, -2275.54785, 121.03192, -5.94136,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2274.96777, 120.31150, -5.72007,   0.00000, 0.00000, 269.94006, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2275.96899, 120.30746, -5.72007,   0.00000, 0.00000, 269.94006, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2274.91235, 121.90043, -5.72007,   0.00000, 0.00000, 89.82001, 600.000, 600.000 );
	CreateDynamicObjectEx(2636, -2276.07739, 121.88678, -5.72007,   0.00000, 0.00000, 89.82001, 600.000, 600.000 );
	CreateDynamicObjectEx(2848, -2275.99170, 117.09966, -5.51721,   0.00000, 0.00000, 149.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2849, -2275.15088, 120.95564, -5.51900,   0.00000, 0.00000, 151.26004, 600.000, 600.000 );
	CreateDynamicObjectEx(2863, -2275.96948, 120.91871, -5.51589,   0.00000, 0.00000, 32.58000, 600.000, 600.000 );
	CreateDynamicObjectEx(2849, -2283.06201, 117.23722, -5.56056,   0.00000, 0.00000, 70.38000, 600.000, 600.000 );
	CreateDynamicObjectEx(2849, -2283.03442, 120.40697, -5.56056,   0.00000, 0.00000, 70.38000, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2286.53052, 88.00983, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2372, -2285.85010, 90.70724, -6.30313,   0.00000, 0.00000, -180.59995, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2287.19165, 88.01793, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2287.85303, 88.02603, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11730, -2288.50903, 88.03293, -6.30304,   0.00000, 0.00000, -178.92003, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2289.15479, 88.04016, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11730, -2291.25073, 88.05096, -6.30304,   0.00000, 0.00000, -178.92003, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2291.91846, 88.07747, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2292.57983, 88.09290, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11730, -2293.21265, 88.05804, -6.30304,   0.00000, 0.00000, -178.92003, 600.000, 600.000 );
	CreateDynamicObjectEx(11729, -2293.87988, 88.08451, -6.30408,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2009, -2304.83667, 123.41080, -6.34654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2009, -2294.38647, 123.56502, -6.34654,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2009, -2295.87231, 98.58851, -6.34654,   0.00000, 0.00000, -179.75998, 600.000, 600.000 );
	CreateDynamicObjectEx(2009, -2286.04419, 98.61220, -6.34654,   0.00000, 0.00000, -179.75998, 600.000, 600.000 );
	CreateDynamicObjectEx(1789, -2298.48413, 103.75146, -5.93974,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2596, -2295.99683, 97.38039, -5.06379,   0.00000, 0.00000, 178.13989, 600.000, 600.000 );
	CreateDynamicObjectEx(14532, -2298.04492, 101.34541, -5.37237,   0.00000, 0.00000, 51.90000, 600.000, 600.000 );
	CreateDynamicObjectEx(3394, -2295.97656, 102.83901, -6.34567,   0.00000, 0.00000, 0.48000, 600.000, 600.000 );
	CreateDynamicObjectEx(3394, -2298.99219, 105.74705, -6.34567,   0.00000, 0.00000, 89.58001, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2298.83960, 97.53035, -6.34797,   0.00000, 0.00000, -180.60004, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2299.81982, 97.54817, -6.34797,   0.00000, 0.00000, -180.60004, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2300.81934, 97.57800, -6.34797,   0.00000, 0.00000, -180.60004, 600.000, 600.000 );
	CreateDynamicObjectEx(2132, -2302.13257, 97.53699, -6.34514,   0.00000, 0.00000, 179.46004, 600.000, 600.000 );
	CreateDynamicObjectEx(2146, -2299.72510, 102.44625, -5.91432,   0.00000, 0.00000, 90.36001, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2305.13208, 101.65192, -6.34561,   0.00000, 0.00000, -179.51997, 600.000, 600.000 );
	CreateDynamicObjectEx(2611, -2295.47607, 98.54935, -4.56569,   0.00000, 0.00000, -89.99997, 600.000, 600.000 );
	CreateDynamicObjectEx(2133, -2304.13257, 97.55643, -6.34665,   0.00000, 0.00000, -180.89990, 600.000, 600.000 );
	CreateDynamicObjectEx(2133, -2305.15674, 97.57429, -6.34665,   0.00000, 0.00000, -180.89990, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2285.54541, 100.60732, -6.34765,   0.00000, 0.00000, -90.11999, 600.000, 600.000 );
	CreateDynamicObjectEx(11738, -2298.33862, 103.75805, -5.51516,   0.00000, 0.00000, -89.04002, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2298.59668, 103.77932, -5.52650,   0.00000, 0.00000, -84.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2295.76221, 98.53619, -5.53405,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1671, -2297.67041, 98.62017, -5.88380,   0.00000, 0.00000, 88.32000, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2285.56763, 102.60718, -6.34765,   0.00000, 0.00000, -90.11999, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2294.67578, 99.38212, -6.34561,   0.00000, 0.00000, -179.51997, 600.000, 600.000 );
	CreateDynamicObjectEx(3394, -2294.65869, 102.92637, -6.34567,   0.00000, 0.00000, 179.88004, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2292.29321, 105.65569, -6.34561,   0.00000, 0.00000, -269.81989, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2287.98584, 97.56025, -6.34797,   0.00000, 0.00000, -180.60004, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2288.97925, 97.59782, -6.34797,   0.00000, 0.00000, -180.60004, 600.000, 600.000 );
	CreateDynamicObjectEx(2132, -2289.98877, 97.50880, -6.34514,   0.00000, 0.00000, 180.24002, 600.000, 600.000 );
	CreateDynamicObjectEx(2133, -2291.97119, 97.50755, -6.34665,   0.00000, 0.00000, -180.89990, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2289.89258, 105.81284, -7.95152,   0.00000, 0.00000, 0.54001, 600.000, 600.000 );
	CreateDynamicObjectEx(2146, -2291.14282, 101.17521, -5.91432,   0.00000, 0.00000, 180.30000, 600.000, 600.000 );
	CreateDynamicObjectEx(14532, -2290.02930, 99.36216, -5.37237,   0.00000, 0.00000, 22.92000, 600.000, 600.000 );
	CreateDynamicObjectEx(1789, -2292.57251, 100.41419, -5.93974,   0.00000, 0.00000, -90.17999, 600.000, 600.000 );
	CreateDynamicObjectEx(11738, -2292.59619, 100.16084, -5.51516,   0.00000, 0.00000, -89.04002, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2292.57104, 100.46773, -5.52650,   0.00000, 0.00000, -20.64000, 600.000, 600.000 );
	CreateDynamicObjectEx(3394, -2296.08179, 122.50771, -6.34567,   0.00000, 0.00000, 0.48000, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2296.08521, 118.98179, -6.34561,   0.00000, 0.00000, -0.05999, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2302.66187, 124.70490, -6.34797,   0.00000, 0.00000, -360.12003, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2301.66089, 124.70044, -6.34797,   0.00000, 0.00000, -360.12003, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2300.68042, 124.67647, -6.34797,   0.00000, 0.00000, -360.12003, 600.000, 600.000 );
	CreateDynamicObjectEx(2132, -2299.65015, 124.81016, -6.34514,   0.00000, 0.00000, 359.76004, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2297.67065, 124.85100, -7.95152,   0.00000, 0.00000, 0.54001, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2305.27393, 121.15666, -6.34765,   0.00000, 0.00000, -270.23978, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2305.27100, 119.15028, -7.98221,   0.00000, 0.00000, -270.23978, 600.000, 600.000 );
	CreateDynamicObjectEx(3394, -2298.62988, 116.67968, -6.34567,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2133, -2300.97974, 116.56272, -6.34665,   0.00000, 0.00000, -180.89990, 600.000, 600.000 );
	CreateDynamicObjectEx(2146, -2299.55176, 120.74281, -5.91432,   0.00000, 0.00000, 90.36001, 600.000, 600.000 );
	CreateDynamicObjectEx(14532, -2297.81616, 119.24883, -5.37237,   0.00000, 0.00000, 46.62000, 600.000, 600.000 );
	CreateDynamicObjectEx(1789, -2299.36279, 122.42319, -5.93974,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11738, -2299.35767, 122.42834, -5.51516,   0.00000, 0.00000, -149.09998, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2300.97754, 116.45336, -5.29504,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2292.24756, 124.65993, -6.34765,   0.00000, 0.00000, -359.93982, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2290.22900, 124.73215, -7.95152,   0.00000, 0.00000, 0.54001, 600.000, 600.000 );
	CreateDynamicObjectEx(2132, -2288.19653, 124.61774, -6.34514,   0.00000, 0.00000, 359.76004, 600.000, 600.000 );
	CreateDynamicObjectEx(2133, -2286.21387, 124.59200, -6.34665,   0.00000, 0.00000, -359.57977, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2285.58154, 121.69205, -6.34561,   0.00000, 0.00000, -0.05999, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2290.28003, 116.79617, -6.34561,   0.00000, 0.00000, -89.94001, 600.000, 600.000 );
	CreateDynamicObjectEx(2131, -2292.77954, 116.55872, -6.34765,   0.00000, 0.00000, -180.53999, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2294.89331, 122.53651, -6.34797,   0.00000, 0.00000, -269.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2007, -2294.86108, 121.52983, -6.34797,   0.00000, 0.00000, -269.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(3396, -2294.87622, 119.07451, -6.34561,   0.00000, 0.00000, -180.42000, 600.000, 600.000 );
	CreateDynamicObjectEx(2146, -2291.23828, 119.95589, -5.91432,   0.00000, 0.00000, 90.36001, 600.000, 600.000 );
	CreateDynamicObjectEx(14532, -2292.77710, 118.64944, -5.37237,   0.00000, 0.00000, -42.84003, 600.000, 600.000 );
	CreateDynamicObjectEx(1789, -2291.67480, 121.35912, -5.93974,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11738, -2291.78979, 121.38389, -5.51516,   0.00000, 0.00000, -149.09998, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2294.59937, 118.85513, -5.29504,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11736, -2289.83228, 117.26783, -5.29504,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(11738, -2291.91016, 124.62045, -3.85432,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2611, -2286.49951, 97.13218, -4.56569,   0.00000, 0.00000, -180.78000, 600.000, 600.000 );
	CreateDynamicObjectEx(2611, -2305.56885, 123.97935, -4.56569,   0.00000, 0.00000, -268.97998, 600.000, 600.000 );
	CreateDynamicObjectEx(2611, -2295.27271, 124.15649, -4.56569,   0.00000, 0.00000, -269.87994, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2274.99292, 105.14752, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.84692, 103.33812, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2274.95752, 101.98156, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.84473, 100.09781, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2275.04858, 98.75821, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.89014, 97.31003, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2277.19336, 101.67596, -6.33085,   0.00000, 0.00000, 89.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2280.27319, 100.18656, -6.33417,   0.00000, 0.00000, -270.66019, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2277.19531, 98.54158, -6.33085,   0.00000, 0.00000, 89.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2280.13940, 97.25288, -6.33417,   0.00000, 0.00000, -270.66019, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2277.06030, 89.53638, -6.33085,   0.00000, 0.00000, 89.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2280.18994, 88.16255, -6.33417,   0.00000, 0.00000, -269.82022, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2277.02295, 94.75317, -6.33085,   0.00000, 0.00000, 89.81998, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2280.15332, 96.12663, -6.33417,   0.00000, 0.00000, -269.82022, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2274.92700, 95.97235, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.86035, 94.27914, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2275.13672, 92.34847, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.77930, 90.80006, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(1796, -2275.20410, 89.26386, -6.33085,   0.00000, 0.00000, -90.24000, 600.000, 600.000 );
	CreateDynamicObjectEx(2435, -2271.76636, 87.71861, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2300.69409, 115.42684, -5.79941,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2289.81592, 115.43839, -5.79941,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2290.12061, 106.92603, -5.79941,   0.00000, 0.00000, -180.47997, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2300.84619, 106.90402, -5.79941,   0.00000, 0.00000, -180.47997, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2278.40137, 106.78431, -5.79941,   0.00000, 0.00000, -180.47997, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2281.26270, 101.48454, -5.79941,   0.00000, 0.00000, -89.75991, 600.000, 600.000 );
	CreateDynamicObjectEx(3657, -2281.31104, 95.96449, -5.79941,   0.00000, 0.00000, -89.75991, 600.000, 600.000 );
	CreateDynamicObjectEx(19325, -2322.28345, 111.19276, -2.40092,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(19325, -2319.86108, 115.07748, -3.69217,   90.00000, 0.00000, -90.12000, 600.000, 600.000 );
	CreateDynamicObjectEx(19325, -2319.79761, 107.32031, -3.69217,   90.00000, 0.00000, -90.12000, 600.000, 600.000 );
	CreateDynamicObjectEx(1671, -2320.96362, 109.95673, -5.88380,   0.00000, 0.00000, -89.76000, 600.000, 600.000 );
	CreateDynamicObjectEx(2163, -2317.89136, 114.02280, -6.33138,   0.00000, 0.00000, -90.06000, 600.000, 600.000 );
	CreateDynamicObjectEx(2163, -2317.81616, 109.13745, -6.33138,   0.00000, 0.00000, -90.06000, 600.000, 600.000 );
	CreateDynamicObjectEx(2165, -2321.31909, 112.57909, -6.36983,   0.00000, 0.00000, 90.12000, 600.000, 600.000 );
	CreateDynamicObjectEx(2165, -2320.39746, 108.21793, -6.36983,   0.00000, 0.00000, 179.16000, 600.000, 600.000 );
	CreateDynamicObjectEx(14902, -2326.99756, 108.73672, -6.00288,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(14902, -2326.82153, 84.19997, -6.00288,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(14902, -2315.71826, 88.22794, -6.00288,   0.00000, 0.00000, 90.05999, 600.000, 600.000 );
	CreateDynamicObjectEx(14902, -2345.46802, 134.41643, -6.00288,   0.00000, 0.00000, 270.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1823, -2295.86401, 115.03737, -6.39688,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2297.04565, 115.57928, -6.33434,   0.00000, 0.00000, -179.87988, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2297.66772, 115.56859, -6.33434,   0.00000, 0.00000, -179.87988, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2293.68896, 115.62017, -6.33434,   0.00000, 0.00000, -179.87988, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2293.06396, 115.60983, -6.33434,   0.00000, 0.00000, -179.87988, 600.000, 600.000 );
	CreateDynamicObjectEx(1823, -2296.11255, 106.43763, -6.39688,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2293.10889, 106.70907, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2293.77808, 106.71681, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2297.13794, 106.69180, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2297.79858, 106.68490, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2276.03955, 106.56683, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(1721, -2275.31812, 106.55317, -6.33434,   0.00000, 0.00000, -360.77997, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.66455, 100.87299, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.70117, 97.86909, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.62988, 104.13335, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2280.27612, 97.88002, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2280.37524, 100.94157, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2280.25098, 95.52490, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2280.20142, 88.83647, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.78125, 88.35712, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.83569, 91.41689, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2069, -2271.86475, 94.98038, -6.32233,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2245, -2327.51074, 101.84623, -5.67118,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2241, -2281.15820, 106.57458, -5.85025,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2241, -2274.63794, 115.27674, -5.85025,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(948, -2317.39160, 106.61372, -6.40290,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(948, -2317.35083, 115.66202, -6.40290,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2241, -2284.43018, 91.69456, -5.85025,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	CreateDynamicObjectEx(2267, -2282.97070, 91.07401, -4.70970,   0.00000, 0.00000, -179.57997, 600.000, 600.000 );
    CreateDynamicObjectEx(19464, -2284.56519, 137.22704, -5.76351,   0.00000, 0.00000, -89.94002, 600.000, 600.000 );
    //Donator LOUNGE
	CreateDynamicObjectEx(14639, 1804.699951, -1303.300048, 1132.099975, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(14570, 1824.199951, -1287.500000, 1131.599975, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(14643, 1804.699951, -1303.300048, 1132.099975, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(3037, 1822.300048, -1286.699951, 1132.900024, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(3037, 1820.599975, -1286.599975, 1132.900024, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(3037, 1827.400024, -1294.699951, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.800048, -1295.699951, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1828.000000, -1302.199951, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.800048, -1310.000000, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.300048, -1311.000000, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.599975, -1311.000000, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.800048, -1303.000000, 1136.599975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.599975, -1303.000000, 1137.599975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1821.199951, -1311.099975, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1828.800048, -1310.900024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1814.500000, -1310.900024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1819.800048, -1310.900024, 1136.599975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1829.699951, -1310.400024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1829.699951, -1310.800048, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1813.699951, -1310.400024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1813.699951, -1310.800048, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1810.400024, -1309.900024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1806.400024, -1309.800048, 1132.900024, 0.000000, 0.000000, 260.000000);
    CreateDynamicObjectEx(3037, 1806.300048, -1309.900024, 1132.900024, 0.000000, 0.000000, 239.996948);
    CreateDynamicObjectEx(3037, 1805.500000, -1309.599975, 1132.900024, 0.000000, 0.000000, 219.996337);
    CreateDynamicObjectEx(3037, 1805.000000, -1309.800048, 1132.900024, 0.000000, 0.000000, 199.995727);
    CreateDynamicObjectEx(3037, 1804.099975, -1303.400024, 1132.900024, 0.000000, 0.000000, 179.995117);
    CreateDynamicObjectEx(3037, 1812.000000, -1309.900024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1812.000000, -1310.300048, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1831.400024, -1309.900024, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1831.400024, -1310.300048, 1132.900024, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(3037, 1816.300048, -1286.500000, 1132.900024, 0.000000, 0.000000, 98.000000);
    CreateDynamicObjectEx(3037, 1814.500000, -1286.400024, 1132.900024, 0.000000, 0.000000, 107.998046);
    CreateDynamicObjectEx(3037, 1811.099975, -1287.500000, 1132.900024, 0.000000, 0.000000, 117.995605);
    CreateDynamicObjectEx(3037, 1809.000000, -1288.599975, 1132.900024, 0.000000, 0.000000, 127.993164);
    CreateDynamicObjectEx(3037, 1808.800048, -1288.400024, 1132.900024, 0.000000, 0.000000, 137.990722);
    CreateDynamicObjectEx(3037, 1806.300048, -1291.099975, 1132.900024, 0.000000, 0.000000, 147.988281);
    CreateDynamicObjectEx(3037, 1804.599975, -1294.599975, 1132.900024, 0.000000, 0.000000, 167.985839);
    CreateDynamicObjectEx(3037, 1804.599609, -1294.599609, 1132.900024, 0.000000, 0.000000, 157.980957);
    CreateDynamicObjectEx(3037, 1804.199951, -1294.900024, 1132.900024, 0.000000, 0.000000, 177.977905);
    CreateDynamicObjectEx(3089, 1805.000000, -1297.400024, 1131.699951, 0.000000, 90.000000, 83.994506);
    CreateDynamicObjectEx(3089, 1805.400024, -1295.300048, 1131.699951, 0.000000, 90.000000, 73.990478);
    CreateDynamicObjectEx(3089, 1806.199951, -1293.199951, 1131.699951, 0.000000, 90.000000, 61.987426);
    CreateDynamicObjectEx(3089, 1807.400024, -1291.300048, 1131.699951, 0.000000, 90.000000, 50.484863);
    CreateDynamicObjectEx(3089, 1808.900024, -1289.900024, 1131.699951, 0.000000, 90.000000, 37.982299);
    CreateDynamicObjectEx(3089, 1810.400024, -1288.900024, 1131.699951, 0.000000, 90.000000, 29.979736);
    CreateDynamicObjectEx(3089, 1811.900024, -1288.300048, 1131.699951, 0.000000, 90.000000, 17.976196);
    CreateDynamicObjectEx(3089, 1814.599975, -1287.699951, 1131.699951, 0.000000, 90.000000, 5.973631);
    CreateDynamicObjectEx(3089, 1814.800048, -1287.699951, 1131.699951, 0.000000, 90.000000, 359.971069);
    CreateDynamicObjectEx(9131, 1804.699951, -1298.400024, 1131.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(9131, 1804.699951, -1298.400024, 1134.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(9131, 1815.800048, -1287.300048, 1131.800048, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(9131, 1815.800048, -1287.300048, 1134.000000, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3089, 1805.099975, -1301.199951, 1131.699951, 0.000000, 90.000000, 89.990478);
    CreateDynamicObjectEx(3089, 1805.099975, -1303.900024, 1131.699951, 0.000000, 90.000000, 89.989013);
    CreateDynamicObjectEx(3089, 1805.099975, -1304.699951, 1131.699951, 0.000000, 90.000000, 89.989013);
    CreateDynamicObjectEx(3089, 1803.800048, -1306.900024, 1131.699951, 0.000000, 90.000000, 29.989013);
    CreateDynamicObjectEx(3089, 1803.800048, -1299.900024, 1131.699951, 0.000000, 90.000000, 181.989013);
    CreateDynamicObjectEx(9131, 1804.699951, -1300.900024, 1131.400024, 90.000000, 180.000000, 180.000000);
    CreateDynamicObjectEx(9131, 1804.699951, -1303.000000, 1131.400024, 90.000000, 179.994506, 179.994506);
    CreateDynamicObjectEx(9131, 1804.699951, -1305.000000, 1131.400024, 90.000000, 179.994506, 179.994506);
    CreateDynamicObjectEx(9131, 1803.599975, -1306.300048, 1131.400024, 90.000000, 179.994506, 99.994506);
    CreateDynamicObjectEx(9131, 1814.000000, -1309.300048, 1131.400024, 90.000000, 179.994506, 89.994506);
    CreateDynamicObjectEx(9131, 1812.099975, -1309.300048, 1131.400024, 90.000000, 179.994506, 89.994506);
    CreateDynamicObjectEx(9131, 1809.699951, -1309.400024, 1131.400024, 90.000000, 179.994506, 89.994506);
    CreateDynamicObjectEx(9131, 1807.699951, -1310.300048, 1131.400024, 90.000000, 179.994506, 169.744506);
    CreateDynamicObjectEx(3032, 1813.300048, -1309.699951, 1133.400024, 88.000000, 180.000000, 0.000000);
    CreateDynamicObjectEx(3032, 1804.300048, -1304.199951, 1133.400024, 87.994995, 179.994506, 270.000000);
    CreateDynamicObjectEx(3032, 1803.599975, -1304.900024, 1133.400024, 87.994995, 179.994506, 290.000000);
    CreateDynamicObjectEx(3032, 1809.800048, -1309.699951, 1133.400024, 87.994995, 179.994506, 0.000000);
    CreateDynamicObjectEx(3032, 1807.699951, -1311.000000, 1133.400024, 87.994995, 179.994506, 60.000000);
    CreateDynamicObjectEx(9131, 1808.900024, -1309.300048, 1131.400024, 90.000000, 179.994506, 91.744262);
    CreateDynamicObjectEx(3032, 1813.900024, -1287.000000, 1131.699951, 87.994995, 179.994506, 186.250000);
    CreateDynamicObjectEx(3032, 1812.099975, -1287.300048, 1131.699951, 87.989501, 179.994506, 198.245727);
    CreateDynamicObjectEx(3032, 1810.099975, -1288.199951, 1131.699951, 87.984008, 179.994506, 208.992797);
    CreateDynamicObjectEx(3032, 1808.500000, -1289.199951, 1131.699951, 87.978515, 179.994506, 220.987426);
    CreateDynamicObjectEx(3032, 1806.800048, -1290.900024, 1131.699951, 87.978515, 179.994506, 232.984497);
    CreateDynamicObjectEx(3032, 1805.699951, -1292.300048, 1131.699951, 87.978515, 179.994506, 242.981567);
    CreateDynamicObjectEx(3032, 1804.800048, -1294.400024, 1131.699951, 87.978515, 179.994506, 252.979125);
    CreateDynamicObjectEx(3032, 1804.400024, -1296.099975, 1131.699951, 87.978515, 179.994506, 264.976684);
    CreateDynamicObjectEx(1723, 1811.900024, -1289.099975, 1130.699951, 0.000000, 0.000000, 15.500000);
    CreateDynamicObjectEx(1723, 1805.900024, -1297.400024, 1130.699951, 0.000000, 0.000000, 79.996582);
    CreateDynamicObjectEx(1723, 1807.900024, -1292.599975, 1130.699951, 0.000000, 0.000000, 49.992431);
    CreateDynamicObjectEx(1723, 1807.400024, -1307.900024, 1130.699951, 0.000000, 0.000000, 137.988250);
    CreateDynamicObjectEx(3962, 1827.300048, -1290.199951, 1133.900024, 0.000000, 0.000000, 358.250000);
    CreateDynamicObjectEx(3962, 1827.300048, -1290.199951, 1131.699951, 0.000000, 0.000000, 358.497680);
    CreateDynamicObjectEx(3962, 1827.300048, -1293.000000, 1133.900024, 0.000000, 0.000000, 358.247680);
    CreateDynamicObjectEx(3962, 1827.300048, -1293.000000, 1131.699951, 0.000000, 0.000000, 358.497680);
    CreateDynamicObjectEx(3962, 1827.300048, -1295.500000, 1131.699951, 0.000000, 0.000000, 358.247680);
    CreateDynamicObjectEx(3962, 1827.300048, -1295.500000, 1133.900024, 0.000000, 0.000000, 358.247680);
    CreateDynamicObjectEx(3037, 1827.300048, -1294.699951, 1130.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.300048, -1289.900024, 1130.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.300048, -1283.599975, 1133.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(3037, 1827.300048, -1292.900024, 1137.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2267, 1816.199951, -1309.699951, 1133.300048, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(2266, 1815.699951, -1288.300048, 1132.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2265, 1805.699951, -1298.300048, 1132.900024, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(2263, 1825.400024, -1309.800048, 1132.900024, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(2256, 1827.170043, -1307.830322, 1133.839965, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2071, 1810.300048, -1290.099975, 1132.199951, 0.000000, 0.000000, 30.000000);
    CreateDynamicObjectEx(2071, 1815.000000, -1288.300048, 1132.199951, 0.000000, 0.000000, 329.998168);
    CreateDynamicObjectEx(2071, 1805.699951, -1298.300048, 1132.199951, 0.000000, 0.000000, 119.996337);
    CreateDynamicObjectEx(2562, 1826.699951, -1289.300048, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2568, 1826.699951, -1294.300048, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(14455, 1821.199951, -1286.800048, 1132.400024, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(14455, 1826.900024, -1286.800048, 1132.400024, 0.000000, 0.000000, 179.994506);
    CreateDynamicObjectEx(3017, 1826.500000, -1291.699951, 1131.599975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2894, 1826.599975, -1294.599975, 1131.599975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2164, 1827.199951, -1293.000000, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2167, 1827.199951, -1288.699951, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2165, 1819.199951, -1294.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2166, 1820.199951, -1293.400024, 1130.699951, 0.000000, 0.000000, 90.000000);
    CreateDynamicObjectEx(2174, 1821.099975, -1294.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2308, 1822.099975, -1292.300048, 1130.699951, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(2198, 1820.199951, -1297.300048, 1130.699951, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(2193, 1822.099975, -1296.199951, 1130.699951, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(2310, 1819.900024, -1293.000000, 1131.199951, 0.000000, 0.000000, 50.000000);
    CreateDynamicObjectEx(2310, 1821.500000, -1292.199951, 1131.199951, 0.000000, 0.000000, 129.998779);
    CreateDynamicObjectEx(2310, 1821.599975, -1294.500000, 1131.199951, 0.000000, 0.000000, 269.995727);
    CreateDynamicObjectEx(2310, 1819.800048, -1294.599975, 1131.199951, 0.000000, 0.000000, 289.994506);
    CreateDynamicObjectEx(2310, 1821.599975, -1296.400024, 1131.199951, 0.000000, 0.000000, 149.989624);
    CreateDynamicObjectEx(2310, 1819.699951, -1296.699951, 1131.199951, 0.000000, 0.000000, 69.985351);
    CreateDynamicObjectEx(1714, 1825.900024, -1289.800048, 1130.800048, 0.000000, 0.000000, 70.000000);
    CreateDynamicObjectEx(1714, 1825.599975, -1296.500000, 1130.800048, 0.000000, 0.000000, 119.999389);
    CreateDynamicObjectEx(1714, 1825.900024, -1294.800048, 1130.800048, 0.000000, 0.000000, 47.998168);
    CreateDynamicObjectEx(2009, 1819.099975, -1289.699951, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2008, 1821.099975, -1288.800048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(1806, 1821.800048, -1289.699951, 1130.800048, 0.000000, 0.000000, 340.000000);
    CreateDynamicObjectEx(1806, 1819.599975, -1289.300048, 1130.800048, 0.000000, 0.000000, 49.999389);
    CreateDynamicObjectEx(1717, 1814.099975, -1291.000000, 1130.699951, 0.000000, 0.000000, 140.000000);
    CreateDynamicObjectEx(1808, 1826.900024, -1299.000000, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2002, 1826.800048, -1287.199951, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2028, 1813.400024, -1290.900024, 1130.800048, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2100, 1806.800048, -1294.099975, 1130.699951, 0.000000, 0.000000, 60.000000);
    CreateDynamicObjectEx(2700, 1826.900024, -1288.099975, 1133.800048, 0.000000, 0.000000, 182.000000);
    CreateDynamicObjectEx(2315, 1807.199951, -1305.500000, 1130.699951, 0.000000, 0.000000, 320.000000);
    CreateDynamicObjectEx(2315, 1807.500000, -1297.400024, 1130.699951, 0.000000, 0.000000, 80.000000);
    CreateDynamicObjectEx(2315, 1809.099975, -1293.699951, 1130.699951, 0.000000, 0.000000, 49.996948);
    CreateDynamicObjectEx(11665, 1814.199951, -1296.900024, 1131.400024, 0.000000, 0.000000, 316.000000);
    CreateDynamicObjectEx(2852, 1807.500000, -1297.300048, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2851, 1807.699951, -1296.400024, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2850, 1809.300048, -1293.500000, 1131.199951, 0.000000, 0.000000, 50.000000);
    CreateDynamicObjectEx(2853, 1809.900024, -1292.699951, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2855, 1807.300048, -1305.500000, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.900024, -1302.099975, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.900024, -1309.000000, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.500000, -1309.000000, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.500000, -1302.099975, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1813.900024, -1299.500000, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1806.400024, -1299.500000, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1806.400024, -1299.099975, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1813.900024, -1299.099975, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1816.500000, -1296.500000, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.900024, -1296.500000, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.900024, -1289.199951, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1816.500000, -1289.199951, 1131.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18014, 1819.400024, -1299.500000, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1827.000000, -1299.500000, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1827.000000, -1299.099975, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(18014, 1819.400024, -1299.099975, 1131.099975, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(632, 1813.000000, -1299.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1813.000000, -1299.299804, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1808.900024, -1299.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1817.599975, -1295.099975, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1817.599975, -1290.900024, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1817.599975, -1303.800048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1817.599975, -1307.099975, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1822.000000, -1299.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(632, 1826.199951, -1299.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2244, 1806.199951, -1292.699951, 1131.900024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2245, 1805.000000, -1296.099975, 1132.000000, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2251, 1807.300048, -1296.599975, 1132.099975, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2252, 1808.500000, -1289.800048, 1132.000000, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2253, 1810.900024, -1288.400024, 1132.000000, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2811, 1813.500000, -1287.699951, 1131.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(887, 1816.699951, -1299.300048, 1130.699951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(887, 1816.699218, -1299.299804, 1130.699951, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(1723, 1817.699951, -1303.199951, 1130.699951, 0.000000, 0.000000, 87.982788);
    CreateDynamicObjectEx(1723, 1818.699951, -1300.400024, 1130.699951, 0.000000, 0.000000, 357.978515);
    CreateDynamicObjectEx(11729, 1826.945922, -1306.507690, 1130.764404, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(11729, 1826.945922, -1307.166992, 1130.764404, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2315, 1819.199951, -1302.300048, 1130.699951, 0.000000, 0.000000, 359.998779);
    CreateDynamicObjectEx(11729, 1826.945922, -1307.836914, 1130.764404, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(1649, 1819.400024, -1299.300048, 1132.400024, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(1649, 1819.399414, -1299.299804, 1132.400024, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(1649, 1827.000000, -1299.300048, 1132.400024, 0.000000, 0.000000, 359.994506);
    CreateDynamicObjectEx(1649, 1827.000000, -1299.299804, 1132.400024, 0.000000, 0.000000, 179.989013);
    CreateDynamicObjectEx(1649, 1816.699951, -1296.500000, 1132.400024, 0.000000, 0.000000, 269.983520);
    CreateDynamicObjectEx(1649, 1816.699218, -1296.500000, 1132.400024, 0.000000, 0.000000, 89.978027);
    CreateDynamicObjectEx(1649, 1816.800048, -1289.199951, 1132.400024, 0.000000, 0.000000, 269.978027);
    CreateDynamicObjectEx(1649, 1816.799804, -1289.199218, 1132.400024, 0.000000, 0.000000, 89.978027);
    CreateDynamicObjectEx(1649, 1814.000000, -1299.300048, 1132.400024, 0.000000, 0.000000, 179.978027);
    CreateDynamicObjectEx(1649, 1814.000000, -1299.299804, 1132.400024, 0.000000, 0.000000, 359.972534);
    CreateDynamicObjectEx(1649, 1806.300048, -1299.300048, 1132.400024, 0.000000, 0.000000, 179.967041);
    CreateDynamicObjectEx(1649, 1806.299804, -1299.299804, 1132.400024, 0.000000, 0.000000, 359.961547);
    CreateDynamicObjectEx(1649, 1816.699951, -1302.199951, 1132.400024, 0.000000, 0.000000, 269.956054);
    CreateDynamicObjectEx(1649, 1816.699218, -1302.199218, 1132.400024, 0.000000, 0.000000, 89.950561);
    CreateDynamicObjectEx(1649, 1816.699951, -1309.000000, 1132.400024, 0.000000, 0.000000, 269.945068);
    CreateDynamicObjectEx(1649, 1816.699218, -1309.000000, 1132.400024, 0.000000, 0.000000, 89.939575);
    CreateDynamicObjectEx(1723, 1815.400024, -1301.400024, 1130.699951, 0.000000, 0.000000, 269.978515);
    CreateDynamicObjectEx(1723, 1812.500000, -1300.500000, 1130.699951, 0.000000, 0.000000, 359.978027);
    CreateDynamicObjectEx(2315, 1807.199218, -1305.500000, 1130.699951, 0.000000, 0.000000, 319.998779);
    CreateDynamicObjectEx(2315, 1813.400024, -1301.900024, 1130.699951, 0.000000, 0.000000, 281.998779);
    CreateDynamicObjectEx(8253, 1816.199951, -1298.800048, 1134.699951, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(8253, 1815.699951, -1298.699951, 1134.699951, 0.000000, 0.000000, 359.994506);
    CreateDynamicObjectEx(11729, 1826.945922, -1308.496459, 1130.764404, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(11729, 1826.945922, -1309.156494, 1130.764404, 0.000000, 0.000000, 270.000000);
    CreateDynamicObjectEx(2852, 1820.699951, -1302.300048, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2851, 1819.599975, -1302.400024, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2850, 1820.099975, -1302.400024, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2849, 1813.699951, -1303.400024, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2848, 1813.400024, -1301.800048, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2855, 1813.500000, -1302.599975, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(2850, 1808.300048, -1306.300048, 1131.199951, 0.000000, 0.000000, 0.000000);
    CreateDynamicObjectEx(18885, 1818.127441, -1309.907836, 1131.914306, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(1808, 1825.396118, -1310.106567, 1130.834472, 0.000000, 0.000000, 180.000000);
    CreateDynamicObjectEx(19377, 1824.176269, -1307.214111, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1824.176269, -1297.604003, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1824.176269, -1287.983886, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1813.716552, -1287.983886, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1803.256835, -1287.983886, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1813.745117, -1297.595214, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1813.745117, -1307.154052, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1803.405517, -1307.154052, 1130.669311, 0.000000, 90.000000, 0.000000);
    CreateDynamicObjectEx(19377, 1803.256835, -1298.504760, 1130.669311, 0.000000, 90.000000, 0.000000);

	new interijerbolnice[16];
	interijerbolnice[0] = CreateDynamicObjectEx(19375, -2305.89844, 120.75169, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[1] = CreateDynamicObjectEx(19375, -2305.90259, 101.68427, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[2] = CreateDynamicObjectEx(19375, -2310.76880, 98.97707, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[3] = CreateDynamicObjectEx(19375, -2316.55078, 98.94240, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[4] = CreateDynamicObjectEx(19375, -2326.96411, 99.01592, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[5] = CreateDynamicObjectEx(19375, -2330.67236, 101.74663, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[6] = CreateDynamicObjectEx(19375, -2330.65210, 98.52275, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[7] = CreateDynamicObjectEx(19375, -2330.69604, 111.18682, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[8] = CreateDynamicObjectEx(19375, -2330.69629, 120.62688, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[9] = CreateDynamicObjectEx(19375, -2330.67749, 124.17667, -6.39870,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice[10] = CreateDynamicObjectEx(19375, -2327.21191, 123.63595, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[11] = CreateDynamicObjectEx(19375, -2316.40356, 123.68134, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[12] = CreateDynamicObjectEx(19375, -2310.68115, 123.68867, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[13] = CreateDynamicObjectEx(19375, -2325.87256, 98.95345, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[14] = CreateDynamicObjectEx(19375, -2325.84888, 123.69380, -6.39870,   0.00000, 0.00000, 89.99998, 600.000, 600.000 );
	interijerbolnice[15] = CreateDynamicObjectEx(19375, -2305.90991, 111.18351, 2.21916,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice); i++)
	{
		SetDynamicObjectMaterial(interijerbolnice[i], 0, 14847, "mp_policesf", "mp_cop_marble");
	}
	new interijerbolnice1[2];
	interijerbolnice1[0] = CreateDynamicObjectEx(18981, -2318.37036, 111.31787, -6.89421,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice1); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice1[i], 0, 14771, "int_brothelint3", "GB_nastybar12" );
	}
	new interijerbolnice2[8];
	interijerbolnice2[0] = CreateDynamicObjectEx(19377, -2317.47705, 111.17188, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[1] = CreateDynamicObjectEx(19377, -2306.97412, 111.15853, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[2] = CreateDynamicObjectEx(19377, -2296.47681, 111.15432, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[3] = CreateDynamicObjectEx(19377, -2285.99756, 111.14565, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[4] = CreateDynamicObjectEx(19377, -2275.51636, 111.13313, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[5] = CreateDynamicObjectEx(19377, -2279.82153, 101.51434, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[6] = CreateDynamicObjectEx(19377, -2279.81787, 91.88251, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice2[7] = CreateDynamicObjectEx(19377, -2290.31421, 92.08973, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice2); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice2[i], 0, 14815, "whore_main", "Strip_Ceiling");
	}
	new interijerbolnice3[8];
	interijerbolnice3[0] = CreateDynamicObjectEx(19378, -2300.62109, 120.67104, -6.43269,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[1] = CreateDynamicObjectEx(19378, -2290.12451, 120.68269, -6.43269,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[2] = CreateDynamicObjectEx(19377, -2279.60645, 120.74976, -6.41957,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[3] = CreateDynamicObjectEx(19378, -2300.60400, 101.66847, -6.43269,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[4] = CreateDynamicObjectEx(19378, -2290.13550, 101.67496, -6.43269,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[5] = CreateDynamicObjectEx(19378, -2275.50610, 101.49702, -6.41527,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[6] = CreateDynamicObjectEx(19378, -2275.50537, 91.87841, -6.41527,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice3[7] = CreateDynamicObjectEx(19378, -2290.28442, 88.27329, -6.39011,   0.00000, 90.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice3); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice3[i], 0, 14777, "int_casinoint3", "GB_midbar05" );
	}
	new interijerbolnice4[49];
	interijerbolnice4[0] = CreateDynamicObjectEx(19387, -2304.22949, 116.03176, -4.64799,   0.00000, 0.00000, -90.12000, 600.000, 600.000 );
	interijerbolnice4[1] = CreateDynamicObjectEx(19450, -2295.41870, 120.82530, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[2] = CreateDynamicObjectEx(19450, -2297.87695, 116.03960, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[3] = CreateDynamicObjectEx(19387, -2286.42505, 116.04211, -4.64799,   0.00000, 0.00000, -90.12000, 600.000, 600.000 );
	interijerbolnice4[4] = CreateDynamicObjectEx(19450, -2292.72632, 116.04372, -4.64436,   0.00000, 0.00000, -90.05999, 600.000, 600.000 );
	interijerbolnice4[5] = CreateDynamicObjectEx(19450, -2301.09204, 125.22569, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[6] = CreateDynamicObjectEx(19450, -2291.58936, 125.22132, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[7] = CreateDynamicObjectEx(19450, -2288.96191, 125.23438, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[8] = CreateDynamicObjectEx(19450, -2284.92993, 120.82417, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[9] = CreateDynamicObjectEx(19387, -2304.26318, 106.36894, -4.64799,   0.00000, 0.00000, -90.12000, 600.000, 600.000 );
	interijerbolnice4[10] = CreateDynamicObjectEx(19450, -2297.88721, 106.38058, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[11] = CreateDynamicObjectEx(19387, -2286.54419, 106.38430, -4.64799,   0.00000, 0.00000, -90.12000, 600.000, 600.000 );
	interijerbolnice4[12] = CreateDynamicObjectEx(19450, -2292.78320, 106.37524, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[13] = CreateDynamicObjectEx(19450, -2295.32544, 101.61089, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[14] = CreateDynamicObjectEx(19450, -2285.04834, 101.64211, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[15] = CreateDynamicObjectEx(19450, -2305.80151, 101.47264, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[16] = CreateDynamicObjectEx(19450, -2305.73853, 120.81903, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[17] = CreateDynamicObjectEx(19450, -2301.13989, 96.98751, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[18] = CreateDynamicObjectEx(19450, -2291.75659, 96.99726, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[19] = CreateDynamicObjectEx(19450, -2289.79370, 96.99277, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[20] = CreateDynamicObjectEx(19358, -2283.33960, 116.06971, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[21] = CreateDynamicObjectEx(19358, -2274.27124, 116.06667, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[22] = CreateDynamicObjectEx(19450, -2274.39478, 120.86584, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[23] = CreateDynamicObjectEx(19450, -2283.08521, 125.23432, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[24] = CreateDynamicObjectEx(19450, -2276.00122, 106.22888, -4.64436,   0.00000, 0.00000, -90.05999, 600.000, 600.000 );
	interijerbolnice4[25] = CreateDynamicObjectEx(19450, -2280.73730, 98.91158, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[26] = CreateDynamicObjectEx(19387, -2280.71606, 104.52986, -4.64799,   0.00000, 0.00000, -180.11998, 600.000, 600.000 );
	interijerbolnice4[27] = CreateDynamicObjectEx(19387, -2280.73364, 92.62080, -4.64799,   0.00000, 0.00000, -180.11998, 600.000, 600.000 );
	interijerbolnice4[28] = CreateDynamicObjectEx(19450, -2280.72778, 86.18951, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[29] = CreateDynamicObjectEx(19450, -2271.28516, 101.45166, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[30] = CreateDynamicObjectEx(19450, -2271.28662, 91.92558, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[31] = CreateDynamicObjectEx(19450, -2275.88550, 96.71304, -4.64436,   0.00000, 0.00000, -90.05999, 600.000, 600.000 );
	interijerbolnice4[32] = CreateDynamicObjectEx(19450, -2275.89551, 87.11980, -4.64436,   0.00000, 0.00000, -90.05999, 600.000, 600.000 );
	interijerbolnice4[33] = CreateDynamicObjectEx(19387, -2292.94409, 93.02222, -4.64799,   0.00000, 0.00000, -270.12000, 600.000, 600.000 );
	interijerbolnice4[34] = CreateDynamicObjectEx(19450, -2285.05981, 88.32384, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[35] = CreateDynamicObjectEx(19358, -2286.64087, 93.01552, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[36] = CreateDynamicObjectEx(19358, -2289.76245, 93.02644, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[37] = CreateDynamicObjectEx(19450, -2294.46484, 92.21919, -4.64436,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[38] = CreateDynamicObjectEx(19450, -2289.83716, 87.50123, -4.64436,   0.00000, 0.00000, -89.93999, 600.000, 600.000 );
	interijerbolnice4[39] = CreateDynamicObjectEx(19358, -2273.76392, 115.45229, -4.65555,   0.00000, 0.00000, -179.99994, 600.000, 600.000 );
	interijerbolnice4[40] = CreateDynamicObjectEx(19358, -2273.78760, 107.85809, -4.65555,   0.00000, 0.00000, -179.99994, 600.000, 600.000 );
	interijerbolnice4[41] = CreateDynamicObjectEx(19358, -2317.81274, 108.00053, -4.65555,   0.00000, 0.00000, -179.99994, 600.000, 600.000 );
	interijerbolnice4[42] = CreateDynamicObjectEx(19387, -2317.80811, 111.13467, -4.64799,   0.00000, 0.00000, -180.11998, 600.000, 600.000 );
	interijerbolnice4[43] = CreateDynamicObjectEx(19358, -2317.80200, 114.34901, -4.65555,   0.00000, 0.00000, -179.99994, 600.000, 600.000 );
	interijerbolnice4[44] = CreateDynamicObjectEx(19450, -2284.94409, 87.12706, -4.64436,   0.00000, 0.00000, -90.05999, 600.000, 600.000 );
	interijerbolnice4[45] = CreateDynamicObjectEx(19358, -2282.29077, 90.95924, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[46] = CreateDynamicObjectEx(19358, -2283.44238, 90.95810, -4.65555,   0.00000, 0.00000, -90.00000, 600.000, 600.000 );
	interijerbolnice4[47] = CreateDynamicObjectEx(19358, -2330.67798, 111.44034, -5.46509,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice4[48] = CreateDynamicObjectEx(19377, -2317.82080, 111.19199, 2.32694,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice4); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice4[i], 0, 14526, "sweetsmain", "GB_Pan01");
	}
	new interijerbolnice5[8];
	interijerbolnice5[0] = CreateDynamicObjectEx(1502, -2305.01709, 106.36456, -6.33490,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice5[1] = CreateDynamicObjectEx(1502, -2304.99121, 115.97685, -6.33490,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice5[2] = CreateDynamicObjectEx(1502, -2287.17383, 115.98093, -6.33490,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice5[3] = CreateDynamicObjectEx(1502, -2287.29980, 106.38473, -6.33490,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice5[4] = CreateDynamicObjectEx(1502, -2280.77783, 105.26968, -6.33490,   0.00000, 0.00000, -89.70000, 600.000, 600.000 );
	interijerbolnice5[5] = CreateDynamicObjectEx(1502, -2280.79199, 93.38443, -6.33490,   0.00000, 0.00000, -89.70000, 600.000, 600.000 );
	interijerbolnice5[6] = CreateDynamicObjectEx(1502, -2293.72559, 92.96938, -6.33490,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice5[7] = CreateDynamicObjectEx(1502, -2317.88208, 111.88581, -6.33490,   0.00000, 0.00000, -89.70000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice5); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice5[i], 1, 18029, "genintintsmallrest", "GB_restaursmll09" );
	}
	new interijerbolnice6[17];
	interijerbolnice6[0] = CreateDynamicObjectEx(2434, -2322.14966, 107.52789, -6.33429,   0.00000, 0.00000, -90.71999, 600.000, 600.000 );
	interijerbolnice6[1] = CreateDynamicObjectEx(2435, -2321.09863, 115.06585, -6.33417,   0.00000, 0.00000, -179.93996, 600.000, 600.000 );
	interijerbolnice6[2] = CreateDynamicObjectEx(2435, -2322.18335, 113.94312, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[3] = CreateDynamicObjectEx(2435, -2322.17847, 113.02223, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[4] = CreateDynamicObjectEx(2435, -2322.17578, 112.10028, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[5] = CreateDynamicObjectEx(2435, -2322.17041, 111.20028, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[6] = CreateDynamicObjectEx(2435, -2322.16284, 110.30032, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[7] = CreateDynamicObjectEx(2435, -2322.15552, 109.38035, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[8] = CreateDynamicObjectEx(2435, -2322.14453, 108.46036, -6.33417,   0.00000, 0.00000, -89.70001, 600.000, 600.000 );
	interijerbolnice6[9] = CreateDynamicObjectEx(2434, -2322.02588, 115.05331, -6.33429,   0.00000, 0.00000, -179.22006, 600.000, 600.000 );
	interijerbolnice6[10] = CreateDynamicObjectEx(2435, -2320.19458, 115.07468, -6.33417,   0.00000, 0.00000, -179.93996, 600.000, 600.000 );
	interijerbolnice6[11] = CreateDynamicObjectEx(2435, -2319.28687, 115.08522, -6.33417,   0.00000, 0.00000, -179.93996, 600.000, 600.000 );
	interijerbolnice6[12] = CreateDynamicObjectEx(2435, -2318.36621, 115.08720, -6.33417,   0.00000, 0.00000, -179.93996, 600.000, 600.000 );
	interijerbolnice6[13] = CreateDynamicObjectEx(2435, -2321.04028, 107.34956, -6.33417,   0.00000, 0.00000, -359.76004, 600.000, 600.000 );
	interijerbolnice6[14] = CreateDynamicObjectEx(2435, -2320.11938, 107.35111, -6.33417,   0.00000, 0.00000, -359.76004, 600.000, 600.000 );
	interijerbolnice6[15] = CreateDynamicObjectEx(2435, -2319.19849, 107.35374, -6.33417,   0.00000, 0.00000, -359.76004, 600.000, 600.000 );
	interijerbolnice6[16] = CreateDynamicObjectEx(2435, -2318.29688, 107.35716, -6.33417,   0.00000, 0.00000, -359.76004, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice6); i++)
	{
	SetDynamicObjectMaterial(interijerbolnice6[i], 2, 18029, "genintintsmallrest", "GB_restaursmll09" );
	}
	new interijerbolnice7[3];
	interijerbolnice7[0] = CreateDynamicObjectEx(19529, -2368.32959, 112.52739, -1.77855,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	interijerbolnice7[1] = CreateDynamicObjectEx(19529, -2243.35278, 112.53620, -2.90423,   0.00000, 0.00000, 0.00000, 600.000, 600.000 );
	for(new i = 0; i < sizeof(interijerbolnice7); i++)
	{
		SetDynamicObjectMaterial(interijerbolnice7[i], 0, 15053, "vghotelnice", "AH_flroortile3" );
	}

	// Garage objects
    CreateObjectEx(10010, 1381.103027, -1397.747070, -34.265922, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(7891, 1343.877685, -1363.957397, -31.581329, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(7891, 1343.887451, -1363.957397, -27.031333, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(7891, 1351.108154, -1363.957397, -31.581329, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(7891, 1351.117431, -1363.957397, -27.031333, 0.000000, 0.000000, 90.000000);
    // House objects
	CreateObjectEx(14707, 911.334106, -484.425170, 847.481384, 0.000000, 0.000000, 90.000000);
	CreateObjectEx(14711, 1312.136840, -175.075073, 1088.675659, 0.000000, 0.000000, 0.000000);
	CreateObjectEx(1506, 1321.403198, -166.876174, 1087.131591, 0.000000, 0.000000, 270.000000);
	CreateObjectEx(14700, 1437.169189, -1832.845703, 1314.057250, 0.000000, 0.000000, 270.000000);
	CreateObjectEx(1506, 1433.098266, -1833.567993, 1312.596801, 0.000000, 0.000000, 90.000000);
	CreateObjectEx(14748, 1365.361694, -2141.651611, 1051.588623, 0.000000, 0.000000, 270.000000);
	CreateObjectEx(1506, 1364.546875, -2146.731689, 1049.618652, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(14718, 2005.202270, -1701.831054, 1164.692260, 0.000000, 0.000000, 90.000000);
	CreateObjectEx(1506, 2010.115234, -1698.054321, 1164.701660, 0.000000, 0.000000, -90.000000);
	CreateObjectEx(14754, 1284.700317, -1132.096679, 982.990844, 0.000000, 0.000000, 0.000000);
	CreateObjectEx(1506, 1282.763061, -1141.286621, 979.051940, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(14713, 1183.433837, -422.981140, 1235.509155, 0.000000, 0.000000, 180.000000);
	CreateObjectEx(1506, 1177.512084, -418.100250, 1233.734375, 0.000000, 0.000000, 0.000000);
	CreateObjectEx(14750, 1752.987548, -1814.000000, 1005.840515, 0.000000, 0.000000, 0.000000);
	CreateObjectEx(1506, 1750.443969, -1823.364013, 999.340454, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(14712, 2190.703125, -1127.359619, 1129.335815, 0.000000, 0.000000, 270.000000);
	CreateObjectEx(1506, 2183.202392, -1131.089599, 1127.785400, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(14701, 2654.076171, -1032.999389, 930.996948, 0.000000, 0.000000, 180.000000);
	CreateObjectEx(1506, 2653.683593, -1022.535644, 928.926269, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(14710, 836.976257, -1017.067077, 800.481994, 0.000000, 0.000000, 180.000000);
	CreateObjectEx(1506, 827.483337, -1014.606506, 798.996154, 0.000000, 0.000000, 90.000000);
	CreateObjectEx(14706, 1834.514404, -1290.143066, 834.363037, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(19359, 2262.502929, -1143.025146, 1051.293334, 0.000000, 0.000000, 90.000000);

	// Prison objects
	CreateDynamicObject(971, -1143.599365, 864.143859, 5.630311, 0.000000, 0.000000, 36.000000);
    CreateDynamicObject(971, -1137.191284, 868.799377, 5.630311, 0.000000, 0.000000, 36.000000);
    CreateDynamicObject(971, -1127.083251, 841.410888, 5.630311, 0.000000, 0.000000, -144.000000);
    CreateDynamicObject(971, -1120.464721, 846.219299, 5.630311, 0.000000, 0.000000, -144.000000);
    
    //Erm?
    CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(1496, 1125.85645, -1403.32056, 421.09418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1129.54639, -1407.89465, 422.83609,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(19448, 1129.60925, -1417.47131, 422.91611,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 422.22549,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 423.29602,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(1219, 1117.28540, -1412.91772, 421.20251,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1116.64160, -1416.39856, 421.56897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3383, 1128.84033, -1406.02893, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3383, 1128.78992, -1411.50647, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(1338, 1128.75598, -1408.72546, 421.61234,   0.00000, 0.00000, 78.90001);
	CreateDynamicObject(2886, 1125.49756, -1403.22925, 422.79700,   0.00000, 0.00000, -0.84000);
	CreateDynamicObject(2680, 1127.21497, -1403.49487, 422.15884,   0.00000, 0.00000, -5.76000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2886, 1122.56543, -1409.56323, 422.79700,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2905, 1118.01978, -1416.42932, 421.09146,   0.00000, 0.00000, -18.48000);
	CreateDynamicObject(2908, 1119.63049, -1415.97852, 421.08887,   0.00000, 0.00000, -84.65997);
	CreateDynamicObject(2907, 1118.42749, -1412.53931, 421.08911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 1117.93640, -1415.69348, 421.21701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2925, 1120.58167, -1416.50220, 421.68060,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(2960, 1120.06201, -1413.15417, 421.34991,   -51.24000, 16.98000, 1.86000);
	CreateDynamicObject(2968, 1119.09436, -1411.94287, 421.16940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 1118.66003, -1416.61243, 421.15500,   0.00000, 0.00000, -9.84000);
	CreateDynamicObject(351, 1118.31616, -1416.55505, 421.33621,   101.00000, 14.00000, -21.94000);
	CreateDynamicObject(3057, 1116.48547, -1415.26257, 421.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.64474,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.66357,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3264, 1122.57861, -1414.24768, 420.84396,   0.00000, 0.00000, 87.66000);
	CreateDynamicObject(3280, 1123.35022, -1404.02063, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1124.91125, -1404.00488, 421.11050,   0.00000, -2.00000, 0.00000);
	CreateDynamicObject(3280, 1123.31445, -1405.52380, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.34143, -1407.06384, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.35815, -1408.64038, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36316, -1410.23621, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36511, -1411.83435, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.38086, -1413.39819, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.39258, -1414.96423, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.41614, -1416.55298, 421.13049,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3282, 1124.20325, -1411.58179, 421.10184,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3282, 1127.77307, -1411.69714, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1125.98047, -1411.51770, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1126.24646, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.30066, -1411.83496, 421.16180,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.20654, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28650, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1127.26648, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3280, 1124.89453, -1405.52380, 421.11050,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1126.45251, -1405.46533, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1128.13245, -1403.90527, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1127.95801, -1405.41199, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(16405, 1119.43274, -1419.16125, 422.86374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 1117.29663, -1418.42114, 421.95963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1128.70190, -1415.58276, 421.83658,   0.00000, 0.00000, -89.34005);
	CreateDynamicObject(944, 1128.72278, -1418.59766, 421.83661,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(1483, 1124.02795, -1408.26794, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1124.01404, -1406.59753, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1127.73450, -1408.25488, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(1483, 1127.76587, -1406.62842, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(351, 1128.92908, -1414.96985, 422.46860,   -0.04000, 0.00000, -166.85989);
	CreateDynamicObject(355, 1128.81665, -1416.19995, 422.54529,   10.00000, -4.00000, -173.00000);
	CreateDynamicObject(356, 1128.74780, -1417.93555, 422.56339,   0.00000, -10.00000, 186.00000);
	CreateDynamicObject(2043, 1128.13623, -1418.25623, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.12097, -1419.69714, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.11487, -1416.64502, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.10217, -1415.18530, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 1128.81384, -1420.85266, 421.64880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1128.83508, -1419.25464, 422.47437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1129.47876, -1419.27612, 422.47437,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(348, 1128.32593, -1418.85168, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.30591, -1417.39172, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.26575, -1415.80933, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.24976, -1414.27869, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(3396, 1121.81946, -1406.33069, 421.04572,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(3392, 1116.54199, -1407.13293, 420.94513,   0.00000, 0.00000, 178.13998);
	CreateDynamicObject(3048, 1120.00659, -1415.66455, 421.08215,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1116.34155, -1414.41284, 421.24921,   9.54000, -7.32000, -263.34003);
	CreateDynamicObject(2803, 1120.35681, -1412.07910, 421.41998,   0.00000, 0.00000, 17.64000);
	CreateDynamicObject(2804, 1120.34998, -1412.08972, 421.33304,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.34351, -1419.51416, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.57251, -1421.18457, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1120.44275, -1420.42700, 423.15482,   0.00000, 0.00000, -94.26000);
	CreateDynamicObject(2804, 1120.40039, -1420.56165, 423.78818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1116.61804, -1420.43408, 423.21051,   -0.06000, 0.00000, -151.79988);
	CreateDynamicObject(1474, 1117.34021, -1421.06873, 423.39166,   0.00000, 0.00000, 10.20000);
	CreateDynamicObject(1474, -733.06116, -3705.87646, -1.75961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1119.34204, -1421.19434, 423.54849,   0.00000, -6.00000, 90.49999);
	CreateDynamicObject(19448, 1120.74597, -1422.27209, 422.86511,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19448, 1124.79346, -1422.24768, 422.88510,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(19456, 1127.76526, -1417.31763, 424.70300,   0.00000, 90.00000, 0.26000);
	CreateDynamicObject(19456, 1124.34937, -1417.34314, 424.70300,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19364, 1128.00964, -1411.94165, 424.53851,   -179.00000, 104.00000, -90.00000);
	CreateDynamicObject(19364, 1124.82629, -1411.97192, 424.47403,   0.00000, 74.00000, -90.00000);
	CreateDynamicObject(19364, 1124.09705, -1412.12561, 424.52750,   0.00000, 68.00000, -90.00000);
	CreateDynamicObject(19456, 1120.90686, -1417.34290, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.66138, -1417.42505, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(3260, 1120.46277, -1412.58740, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.46179, -1414.54834, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.44312, -1416.12549, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.46606, -1412.55188, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.44971, -1414.51489, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.42236, -1416.15295, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(19456, 1120.95508, -1416.33923, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.47388, -1416.35364, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(19444, 1115.91199, -1413.26440, 423.97916,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.91980, -1416.76477, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.26611, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.64612, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1122.42529, -1420.66565, 425.29810,   106.00000, 0.00000, 3.00000);
	CreateDynamicObject(19364, 1127.95862, -1410.66260, 424.47849,   -186.00000, 119.00000, -95.00000);
	CreateDynamicObject(19447, 1120.89746, -1406.94202, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19447, 1117.39746, -1406.99268, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19444, 1120.79077, -1411.71082, 425.29578,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19444, 1117.31580, -1411.73730, 425.31580,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19473, 1128.56702, -1404.68579, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.67700, -1405.98169, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.65002, -1407.09546, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.72327, -1410.26709, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.60242, -1411.48718, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.58362, -1412.63708, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1128.31018, -1413.74951, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1129.14417, -1413.77930, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 1119.88770, -1414.92029, 421.51566,   54.00000, 16.00000, -51.44001);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(1496, 1125.85645, -1403.32056, 421.09418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1129.54639, -1407.89465, 422.83609,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(19448, 1129.60925, -1417.47131, 422.91611,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 422.22549,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 423.29602,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(1219, 1117.28540, -1412.91772, 421.20251,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1116.64160, -1416.39856, 421.56897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3383, 1128.84033, -1406.02893, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3383, 1128.78992, -1411.50647, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(1338, 1128.75598, -1408.72546, 421.61234,   0.00000, 0.00000, 78.90001);
	CreateDynamicObject(2886, 1125.49756, -1403.22925, 422.79700,   0.00000, 0.00000, -0.84000);
	CreateDynamicObject(2680, 1127.21497, -1403.49487, 422.15884,   0.00000, 0.00000, -5.76000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2886, 1122.56543, -1409.56323, 422.79700,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2905, 1118.01978, -1416.42932, 421.09146,   0.00000, 0.00000, -18.48000);
	CreateDynamicObject(2908, 1119.63049, -1415.97852, 421.08887,   0.00000, 0.00000, -84.65997);
	CreateDynamicObject(2907, 1118.42749, -1412.53931, 421.08911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 1117.93640, -1415.69348, 421.21701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2925, 1120.58167, -1416.50220, 421.68060,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(2960, 1120.06201, -1413.15417, 421.34991,   -51.24000, 16.98000, 1.86000);
	CreateDynamicObject(2968, 1119.09436, -1411.94287, 421.16940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 1118.66003, -1416.61243, 421.15500,   0.00000, 0.00000, -9.84000);
	CreateDynamicObject(351, 1118.31616, -1416.55505, 421.33621,   101.00000, 14.00000, -21.94000);
	CreateDynamicObject(3057, 1116.48547, -1415.26257, 421.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.64474,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.66357,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3264, 1122.57861, -1414.24768, 420.84396,   0.00000, 0.00000, 87.66000);
	CreateDynamicObject(3280, 1123.35022, -1404.02063, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1124.91125, -1404.00488, 421.11050,   0.00000, -2.00000, 0.00000);
	CreateDynamicObject(3280, 1123.31445, -1405.52380, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.34143, -1407.06384, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.35815, -1408.64038, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36316, -1410.23621, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36511, -1411.83435, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.38086, -1413.39819, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.39258, -1414.96423, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.41614, -1416.55298, 421.13049,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3282, 1124.20325, -1411.58179, 421.10184,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3282, 1127.77307, -1411.69714, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1125.98047, -1411.51770, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1126.24646, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.30066, -1411.83496, 421.16180,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.20654, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28650, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1127.26648, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3280, 1124.89453, -1405.52380, 421.11050,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1126.45251, -1405.46533, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1128.13245, -1403.90527, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1127.95801, -1405.41199, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(16405, 1119.43274, -1419.16125, 422.86374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 1117.29663, -1418.42114, 421.95963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1128.70190, -1415.58276, 421.83658,   0.00000, 0.00000, -89.34005);
	CreateDynamicObject(944, 1128.72278, -1418.59766, 421.83661,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(1483, 1124.02795, -1408.26794, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1124.01404, -1406.59753, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1127.73450, -1408.25488, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(1483, 1127.76587, -1406.62842, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(351, 1128.92908, -1414.96985, 422.46860,   -0.04000, 0.00000, -166.85989);
	CreateDynamicObject(355, 1128.81665, -1416.19995, 422.54529,   10.00000, -4.00000, -173.00000);
	CreateDynamicObject(356, 1128.74780, -1417.93555, 422.56339,   0.00000, -10.00000, 186.00000);
	CreateDynamicObject(2043, 1128.13623, -1418.25623, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.12097, -1419.69714, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.11487, -1416.64502, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.10217, -1415.18530, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 1128.81384, -1420.85266, 421.64880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1128.83508, -1419.25464, 422.47437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1129.47876, -1419.27612, 422.47437,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(348, 1128.32593, -1418.85168, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.30591, -1417.39172, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.26575, -1415.80933, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.24976, -1414.27869, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(3396, 1121.81946, -1406.33069, 421.04572,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(3392, 1116.54199, -1407.13293, 420.94513,   0.00000, 0.00000, 178.13998);
	CreateDynamicObject(3048, 1120.00659, -1415.66455, 421.08215,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1116.34155, -1414.41284, 421.24921,   9.54000, -7.32000, -263.34003);
	CreateDynamicObject(2803, 1120.35681, -1412.07910, 421.41998,   0.00000, 0.00000, 17.64000);
	CreateDynamicObject(2804, 1120.34998, -1412.08972, 421.33304,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.34351, -1419.51416, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.57251, -1421.18457, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1120.44275, -1420.42700, 423.15482,   0.00000, 0.00000, -94.26000);
	CreateDynamicObject(2804, 1120.40039, -1420.56165, 423.78818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1116.61804, -1420.43408, 423.21051,   -0.06000, 0.00000, -151.79988);
	CreateDynamicObject(1474, 1117.34021, -1421.06873, 423.39166,   0.00000, 0.00000, 10.20000);
	CreateDynamicObject(1474, -733.06116, -3705.87646, -1.75961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1119.34204, -1421.19434, 423.54849,   0.00000, -6.00000, 90.49999);
	CreateDynamicObject(19448, 1120.74597, -1422.27209, 422.86511,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19448, 1124.79346, -1422.24768, 422.88510,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(19456, 1127.76526, -1417.31763, 424.70300,   0.00000, 90.00000, 0.26000);
	CreateDynamicObject(19456, 1124.34937, -1417.34314, 424.70300,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19364, 1128.00964, -1411.94165, 424.53851,   -179.00000, 104.00000, -90.00000);
	CreateDynamicObject(19364, 1124.82629, -1411.97192, 424.47403,   0.00000, 74.00000, -90.00000);
	CreateDynamicObject(19364, 1124.09705, -1412.12561, 424.52750,   0.00000, 68.00000, -90.00000);
	CreateDynamicObject(19456, 1120.90686, -1417.34290, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.66138, -1417.42505, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(3260, 1120.46277, -1412.58740, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.46179, -1414.54834, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.44312, -1416.12549, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.46606, -1412.55188, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.44971, -1414.51489, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.42236, -1416.15295, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(19456, 1120.95508, -1416.33923, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.47388, -1416.35364, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(19444, 1115.91199, -1413.26440, 423.97916,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.91980, -1416.76477, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.26611, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.64612, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1122.42529, -1420.66565, 425.29810,   106.00000, 0.00000, 3.00000);
	CreateDynamicObject(19364, 1127.95862, -1410.66260, 424.47849,   -186.00000, 119.00000, -95.00000);
	CreateDynamicObject(19447, 1120.89746, -1406.94202, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19447, 1117.39746, -1406.99268, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19444, 1120.79077, -1411.71082, 425.29578,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19444, 1117.31580, -1411.73730, 425.31580,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19473, 1128.56702, -1404.68579, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.67700, -1405.98169, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.65002, -1407.09546, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.72327, -1410.26709, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.60242, -1411.48718, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.58362, -1412.63708, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1128.31018, -1413.74951, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1129.14417, -1413.77930, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 1119.88770, -1414.92029, 421.51566,   54.00000, 16.00000, -51.44001);
	CreateDynamicObject(3524, 1127.91504, -1403.18054, 420.64246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3524, 1124.88220, -1403.34216, 420.64246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(1496, 1125.85645, -1403.32056, 421.09418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1129.54639, -1407.89465, 422.83609,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(19448, 1129.60925, -1417.47131, 422.91611,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 422.22549,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 423.29602,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(1219, 1117.28540, -1412.91772, 421.20251,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1116.64160, -1416.39856, 421.56897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3383, 1128.84033, -1406.02893, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3383, 1128.78992, -1411.50647, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(1338, 1128.75598, -1408.72546, 421.61234,   0.00000, 0.00000, 78.90001);
	CreateDynamicObject(2886, 1125.49756, -1403.22925, 422.79700,   0.00000, 0.00000, -0.84000);
	CreateDynamicObject(2680, 1127.21497, -1403.49487, 422.15884,   0.00000, 0.00000, -5.76000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2886, 1122.56543, -1409.56323, 422.79700,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2905, 1118.01978, -1416.42932, 421.09146,   0.00000, 0.00000, -18.48000);
	CreateDynamicObject(2908, 1119.63049, -1415.97852, 421.08887,   0.00000, 0.00000, -84.65997);
	CreateDynamicObject(2907, 1118.42749, -1412.53931, 421.08911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 1117.93640, -1415.69348, 421.21701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2925, 1120.58167, -1416.50220, 421.68060,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(2960, 1120.06201, -1413.15417, 421.34991,   -51.24000, 16.98000, 1.86000);
	CreateDynamicObject(2968, 1119.09436, -1411.94287, 421.16940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 1118.66003, -1416.61243, 421.15500,   0.00000, 0.00000, -9.84000);
	CreateDynamicObject(351, 1118.31616, -1416.55505, 421.33621,   101.00000, 14.00000, -21.94000);
	CreateDynamicObject(3057, 1116.48547, -1415.26257, 421.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.64474,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.66357,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3264, 1122.57861, -1414.24768, 420.84396,   0.00000, 0.00000, 87.66000);
	CreateDynamicObject(3280, 1123.35022, -1404.02063, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1124.91125, -1404.00488, 421.11050,   0.00000, -2.00000, 0.00000);
	CreateDynamicObject(3280, 1123.31445, -1405.52380, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.34143, -1407.06384, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.35815, -1408.64038, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36316, -1410.23621, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36511, -1411.83435, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.38086, -1413.39819, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.39258, -1414.96423, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.41614, -1416.55298, 421.13049,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3282, 1124.20325, -1411.58179, 421.10184,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3282, 1127.77307, -1411.69714, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1125.98047, -1411.51770, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1126.24646, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.30066, -1411.83496, 421.16180,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.20654, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28650, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1127.26648, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3280, 1124.89453, -1405.52380, 421.11050,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1126.45251, -1405.46533, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1128.13245, -1403.90527, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1127.95801, -1405.41199, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(16405, 1119.43274, -1419.16125, 422.86374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 1117.29663, -1418.42114, 421.95963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1128.70190, -1415.58276, 421.83658,   0.00000, 0.00000, -89.34005);
	CreateDynamicObject(944, 1128.72278, -1418.59766, 421.83661,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(1483, 1124.02795, -1408.26794, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1124.01404, -1406.59753, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1127.73450, -1408.25488, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(1483, 1127.76587, -1406.62842, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(351, 1128.92908, -1414.96985, 422.46860,   -0.04000, 0.00000, -166.85989);
	CreateDynamicObject(355, 1128.81665, -1416.19995, 422.54529,   10.00000, -4.00000, -173.00000);
	CreateDynamicObject(356, 1128.74780, -1417.93555, 422.56339,   0.00000, -10.00000, 186.00000);
	CreateDynamicObject(2043, 1128.13623, -1418.25623, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.12097, -1419.69714, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.11487, -1416.64502, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.10217, -1415.18530, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 1128.81384, -1420.85266, 421.64880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1128.83508, -1419.25464, 422.47437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1129.47876, -1419.27612, 422.47437,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(348, 1128.32593, -1418.85168, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.30591, -1417.39172, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.26575, -1415.80933, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.24976, -1414.27869, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(3396, 1121.81946, -1406.33069, 421.04572,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(3392, 1116.54199, -1407.13293, 420.94513,   0.00000, 0.00000, 178.13998);
	CreateDynamicObject(3048, 1120.00659, -1415.66455, 421.08215,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1116.34155, -1414.41284, 421.24921,   9.54000, -7.32000, -263.34003);
	CreateDynamicObject(2803, 1120.35681, -1412.07910, 421.41998,   0.00000, 0.00000, 17.64000);
	CreateDynamicObject(2804, 1120.34998, -1412.08972, 421.33304,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.34351, -1419.51416, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.57251, -1421.18457, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1120.44275, -1420.42700, 423.15482,   0.00000, 0.00000, -94.26000);
	CreateDynamicObject(2804, 1120.40039, -1420.56165, 423.78818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1116.61804, -1420.43408, 423.21051,   -0.06000, 0.00000, -151.79988);
	CreateDynamicObject(1474, 1117.34021, -1421.06873, 423.39166,   0.00000, 0.00000, 10.20000);
	CreateDynamicObject(1474, -733.06116, -3705.87646, -1.75961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1119.34204, -1421.19434, 423.54849,   0.00000, -6.00000, 90.49999);
	CreateDynamicObject(19448, 1120.74597, -1422.27209, 422.86511,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19448, 1124.79346, -1422.24768, 422.88510,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(19456, 1127.76526, -1417.31763, 424.70300,   0.00000, 90.00000, 0.26000);
	CreateDynamicObject(19456, 1124.34937, -1417.34314, 424.70300,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19364, 1128.00964, -1411.94165, 424.53851,   -179.00000, 104.00000, -90.00000);
	CreateDynamicObject(19364, 1124.82629, -1411.97192, 424.47403,   0.00000, 74.00000, -90.00000);
	CreateDynamicObject(19364, 1124.09705, -1412.12561, 424.52750,   0.00000, 68.00000, -90.00000);
	CreateDynamicObject(19456, 1120.90686, -1417.34290, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.66138, -1417.42505, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(3260, 1120.46277, -1412.58740, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.46179, -1414.54834, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.44312, -1416.12549, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.46606, -1412.55188, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.44971, -1414.51489, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.42236, -1416.15295, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(19456, 1120.95508, -1416.33923, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.47388, -1416.35364, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(19444, 1115.91199, -1413.26440, 423.97916,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.91980, -1416.76477, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.26611, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.64612, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1122.42529, -1420.66565, 425.29810,   106.00000, 0.00000, 3.00000);
	CreateDynamicObject(19364, 1127.95862, -1410.66260, 424.47849,   -186.00000, 119.00000, -95.00000);
	CreateDynamicObject(19447, 1120.89746, -1406.94202, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19447, 1117.39746, -1406.99268, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19444, 1120.79077, -1411.71082, 425.29578,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19444, 1117.31580, -1411.73730, 425.31580,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19473, 1128.56702, -1404.68579, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.67700, -1405.98169, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.65002, -1407.09546, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.72327, -1410.26709, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.60242, -1411.48718, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.58362, -1412.63708, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1128.31018, -1413.74951, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1129.14417, -1413.77930, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 1119.88770, -1414.92029, 421.51566,   54.00000, 16.00000, -51.44001);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(1496, 1125.85645, -1403.32056, 421.09418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1129.54639, -1407.89465, 422.83609,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(19448, 1129.60925, -1417.47131, 422.91611,   -0.42000, -1.14000, 0.36000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 422.22549,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(991, 1119.29187, -1418.63428, 423.29602,   1.00000, -1.00000, 1.00000);
	CreateDynamicObject(1219, 1117.28540, -1412.91772, 421.20251,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 1116.64160, -1416.39856, 421.56897,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3383, 1128.84033, -1406.02893, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3383, 1128.78992, -1411.50647, 421.14008,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(1338, 1128.75598, -1408.72546, 421.61234,   0.00000, 0.00000, 78.90001);
	CreateDynamicObject(2886, 1125.49756, -1403.22925, 422.79700,   0.00000, 0.00000, -0.84000);
	CreateDynamicObject(2680, 1127.21497, -1403.49487, 422.15884,   0.00000, 0.00000, -5.76000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1300, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, -736.20074, 4240.31006, -7590.26953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2886, 1122.56543, -1409.56323, 422.79700,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2905, 1118.01978, -1416.42932, 421.09146,   0.00000, 0.00000, -18.48000);
	CreateDynamicObject(2908, 1119.63049, -1415.97852, 421.08887,   0.00000, 0.00000, -84.65997);
	CreateDynamicObject(2907, 1118.42749, -1412.53931, 421.08911,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2906, 1117.93640, -1415.69348, 421.21701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2925, 1120.58167, -1416.50220, 421.68060,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(2960, 1120.06201, -1413.15417, 421.34991,   -51.24000, 16.98000, 1.86000);
	CreateDynamicObject(2968, 1119.09436, -1411.94287, 421.16940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 1118.66003, -1416.61243, 421.15500,   0.00000, 0.00000, -9.84000);
	CreateDynamicObject(351, 1118.31616, -1416.55505, 421.33621,   101.00000, 14.00000, -21.94000);
	CreateDynamicObject(3057, 1116.48547, -1415.26257, 421.34021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.00702,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.57703, -1415.97693, 422.64474,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3260, 1122.48206, -1414.07910, 422.66357,   0.00000, 0.00000, -87.96004);
	CreateDynamicObject(3264, 1122.57861, -1414.24768, 420.84396,   0.00000, 0.00000, 87.66000);
	CreateDynamicObject(3280, 1123.35022, -1404.02063, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1124.91125, -1404.00488, 421.11050,   0.00000, -2.00000, 0.00000);
	CreateDynamicObject(3280, 1123.31445, -1405.52380, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.34143, -1407.06384, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.35815, -1408.64038, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36316, -1410.23621, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.36511, -1411.83435, 421.09052,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.38086, -1413.39819, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.39258, -1414.96423, 421.11050,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(3280, 1123.41614, -1416.55298, 421.13049,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3282, 1124.20325, -1411.58179, 421.10184,   0.00000, 0.00000, 90.90002);
	CreateDynamicObject(3282, 1127.77307, -1411.69714, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1125.98047, -1411.51770, 421.12180,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(3282, 1126.24646, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28491, -1411.82703, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.30066, -1411.83496, 421.16180,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1125.20654, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1124.28650, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3282, 1127.26648, -1411.78320, 421.20181,   88.00000, 2.00000, 89.00000);
	CreateDynamicObject(3280, 1124.89453, -1405.52380, 421.11050,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1126.45251, -1405.46533, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1128.13245, -1403.90527, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(3280, 1127.95801, -1405.41199, 421.15051,   0.00000, -2.00000, 1.00000);
	CreateDynamicObject(16405, 1119.43274, -1419.16125, 422.86374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(925, 1117.29663, -1418.42114, 421.95963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1128.70190, -1415.58276, 421.83658,   0.00000, 0.00000, -89.34005);
	CreateDynamicObject(944, 1128.72278, -1418.59766, 421.83661,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(1483, 1124.02795, -1408.26794, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1124.01404, -1406.59753, 422.85724,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1127.73450, -1408.25488, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(1483, 1127.76587, -1406.62842, 422.85724,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(351, 1128.92908, -1414.96985, 422.46860,   -0.04000, 0.00000, -166.85989);
	CreateDynamicObject(355, 1128.81665, -1416.19995, 422.54529,   10.00000, -4.00000, -173.00000);
	CreateDynamicObject(356, 1128.74780, -1417.93555, 422.56339,   0.00000, -10.00000, 186.00000);
	CreateDynamicObject(2043, 1128.13623, -1418.25623, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.12097, -1419.69714, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.11487, -1416.64502, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1128.10217, -1415.18530, 422.46417,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 1128.81384, -1420.85266, 421.64880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1128.83508, -1419.25464, 422.47437,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(360, 1129.47876, -1419.27612, 422.47437,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(348, 1128.32593, -1418.85168, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.30591, -1417.39172, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.26575, -1415.80933, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(348, 1128.24976, -1414.27869, 422.40781,   80.00000, 0.00000, -176.00000);
	CreateDynamicObject(3396, 1121.81946, -1406.33069, 421.04572,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(3392, 1116.54199, -1407.13293, 420.94513,   0.00000, 0.00000, 178.13998);
	CreateDynamicObject(3048, 1120.00659, -1415.66455, 421.08215,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1116.34155, -1414.41284, 421.24921,   9.54000, -7.32000, -263.34003);
	CreateDynamicObject(2803, 1120.35681, -1412.07910, 421.41998,   0.00000, 0.00000, 17.64000);
	CreateDynamicObject(2804, 1120.34998, -1412.08972, 421.33304,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.34351, -1419.51416, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2805, 1118.57251, -1421.18457, 423.18683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1120.44275, -1420.42700, 423.15482,   0.00000, 0.00000, -94.26000);
	CreateDynamicObject(2804, 1120.40039, -1420.56165, 423.78818,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3092, 1116.61804, -1420.43408, 423.21051,   -0.06000, 0.00000, -151.79988);
	CreateDynamicObject(1474, 1117.34021, -1421.06873, 423.39166,   0.00000, 0.00000, 10.20000);
	CreateDynamicObject(1474, -733.06116, -3705.87646, -1.75961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1483, 1119.34204, -1421.19434, 423.54849,   0.00000, -6.00000, 90.49999);
	CreateDynamicObject(19448, 1120.74597, -1422.27209, 422.86511,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(19448, 1124.79346, -1422.24768, 422.88510,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(623, 1033.86316, -322.81509, 72.97985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 1124.43066, -1407.94495, 421.00000,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1117.49402, -1407.95349, 420.89999,   0.00000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1120.95691, -1407.94763, 420.96259,   -0.08000, -91.00000, 0.00000);
	CreateDynamicObject(19452, 1127.85632, -1407.93823, 421.04510,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1120.97461, -1417.54883, 420.96881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1127.97534, -1417.49438, 421.06879,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1124.47278, -1417.52075, 421.02881,   -0.08000, -90.94000, 0.76000);
	CreateDynamicObject(19452, 1117.54895, -1417.56299, 420.90881,   0.00000, -91.00000, 1.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1194.09106, -1555.74768, 11.41572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95605, -1417.58838, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1115.95447, -1407.95789, 422.72000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1124.71692, -1403.10095, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19448, 1120.66760, -1403.11206, 422.72000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19455, 1122.46021, -1405.10547, 422.69760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 1117.77148, -1411.53943, 422.69760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1499, 1122.52344, -1411.42737, 421.05560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2605, 1117.81860, -1404.97461, 421.42169,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(2596, 1122.02271, -1403.55981, 423.75122,   0.00000, 0.00000, -33.00000);
	CreateDynamicObject(2609, 1116.30066, -1403.53540, 421.68970,   2.00000, -2.00000, 0.00000);
	CreateDynamicObject(2611, 1118.54480, -1403.25159, 423.22079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 1120.25012, -1403.24329, 423.21039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1122.28748, -1405.17273, 422.88721,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(2616, 1118.85205, -1411.41394, 422.77350,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1829, 1121.61694, -1403.60071, 421.53671,   2.04000, 2.04000, -92.00000);
	CreateDynamicObject(1714, 1117.40869, -1404.05212, 420.99481,   0.00000, 0.00000, 16.00000);
	CreateDynamicObject(1670, 1117.76709, -1404.98608, 421.84470,   4.00000, 2.00000, -28.00000);
	CreateDynamicObject(19456, 1127.76526, -1417.31763, 424.70300,   0.00000, 90.00000, 0.26000);
	CreateDynamicObject(19456, 1124.34937, -1417.34314, 424.70300,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19364, 1128.00964, -1411.94165, 424.53851,   -179.00000, 104.00000, -90.00000);
	CreateDynamicObject(19364, 1124.82629, -1411.97192, 424.47403,   0.00000, 74.00000, -90.00000);
	CreateDynamicObject(19364, 1124.09705, -1412.12561, 424.52750,   0.00000, 68.00000, -90.00000);
	CreateDynamicObject(19456, 1120.90686, -1417.34290, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.66138, -1417.42505, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(3260, 1120.46277, -1412.58740, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.46179, -1414.54834, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1120.44312, -1416.12549, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.46606, -1412.55188, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.44971, -1414.51489, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(3260, 1117.42236, -1416.15295, 424.42300,   -90.00000, -4.00000, -94.62000);
	CreateDynamicObject(19456, 1120.95508, -1416.33923, 424.84299,   0.00000, 90.00000, 0.80000);
	CreateDynamicObject(19456, 1117.47388, -1416.35364, 424.84299,   0.00000, 90.00000, 0.32000);
	CreateDynamicObject(19444, 1115.91199, -1413.26440, 423.97916,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.91980, -1416.76477, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.26611, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1115.84912, -1420.64612, 423.97919,   90.42000, -2.00000, 1.02000);
	CreateDynamicObject(19444, 1122.42529, -1420.66565, 425.29810,   106.00000, 0.00000, 3.00000);
	CreateDynamicObject(19364, 1127.95862, -1410.66260, 424.47849,   -186.00000, 119.00000, -95.00000);
	CreateDynamicObject(19447, 1120.89746, -1406.94202, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19447, 1117.39746, -1406.99268, 424.42630,   0.00000, 90.00000, 1.00000);
	CreateDynamicObject(19444, 1120.79077, -1411.71082, 425.29578,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19444, 1117.31580, -1411.73730, 425.31580,   90.42000, -2.00000, 92.46000);
	CreateDynamicObject(19473, 1128.56702, -1404.68579, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.67700, -1405.98169, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.65002, -1407.09546, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.72327, -1410.26709, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.60242, -1411.48718, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19473, 1128.58362, -1412.63708, 421.17142,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1128.31018, -1413.74951, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(918, 1129.14417, -1413.77930, 421.64386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(349, 1119.88770, -1414.92029, 421.51566,   54.00000, 16.00000, -51.44001);

	// Small garage
	new objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1512.922851, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1512.932983, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1516.615600, -1638.889160, 1125.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1520.439941, -1638.885986, 1123.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1649.707275, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1125.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1123.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.888671, -1649.152709, 1123.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1124.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1517.034545, -1649.131347, 1123.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1124.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1515.315185, -1649.160888, 1124.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1124.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1124.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1124.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1127.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1513.752319, -1649.391357, 1124.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1649.170898, 1125.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1513.130737, -1647.329101, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130737, -1646.249023, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130981, -1647.329101, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130371, -1646.268554, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1513.152221, -1642.557250, 1125.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1513.028320, -1640.495727, 1124.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1513.311157, -1643.594726, 1124.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1513.027954, -1639.594482, 1125.194580, 0.000000, 0.000000, 91.062004);
    //Ermx2?
    objectid = CreateDynamicObject(19378,2271.037,-687.293,1319.422,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 5114, "beach_las2", "boardwalk_la", 0);
	objectid = CreateDynamicObject(19377,2260.537,-687.293,1322.922,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19378,2260.537,-696.894,1319.422,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 5114, "beach_las2", "boardwalk_la", 0);
	objectid = CreateDynamicObject(19378,2250.037,-696.894,1319.422,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 5114, "beach_las2", "boardwalk_la", 0);
	objectid = CreateDynamicObject(19378,2250.037,-687.293,1319.422,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 5114, "beach_las2", "boardwalk_la", 0);
	objectid = CreateDynamicObject(19457,2276.376,-687.294,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19397,2244.852,-696.151,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2271.486,-682.609,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19378,2241.861,-696.894,1315.953,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 6863, "vgsnbuild07", "vegasbank3_256", 0);
	objectid = CreateDynamicObject(19393,2266.570,-690.505,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2239.965,-697.599,1321.099,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19369,2266.570,-684.083,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2241.183,-695.974,1321.288,337.000,90.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 3483, "vegashse7", "vgnhsepsh7_128", 0);
	objectid = CreateDynamicObject(19369,2266.570,-687.293,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2241.395,-694.688,1317.699,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2241.395,-697.599,1317.699,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2266.500,-692.188,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19393,2272.928,-692.189,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19397,2236.666,-696.086,1317.788,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2279.350,-692.189,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2239.965,-694.688,1321.099,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19378,2241.860,-687.293,1315.953,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19457,2262.968,-697.062,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19378,2231.360,-696.894,1315.953,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 6863, "vgsnbuild07", "vegasbank3_256", 0);
	objectid = CreateDynamicObject(19457,2236.666,-702.502,1317.788,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2231.922,-700.439,1317.788,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2227.347,-695.677,1317.788,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(19457,2261.714,-682.387,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2249.163,-686.002,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(2335,2274.801,-683.099,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(19457,2244.847,-689.725,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(2338,2275.803,-683.099,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(19457,2244.934,-692.182,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19393,2254.007,-690.586,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(2208,2273.592,-686.993,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(2204,2267.208,-687.984,1319.508,0.000,0.000,13.996);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 2, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(2158,2271.802,-683.099,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(2157,2276.086,-684.080,1319.508,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(2336,2272.804,-683.099,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(19393,2254.007,-684.177,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19369,2254.007,-687.383,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2249.156,-682.991,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19369,2268.208,-687.135,1321.259,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(1744,2273.497,-682.523,1321.475,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1765,2270.300,-683.367,1319.508,0.000,0.000,320.000);
	SetDynamicObjectMaterial(objectid, 0, 14714, "vghss1int2", "HS4_Wall6", 0);
	objectid = CreateDynamicObject(1769,2267.239,-685.067,1319.508,0.000,0.000,82.000);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1821,2275.000,-688.419,1319.508,0.000,0.000,346.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(2093,2268.177,-686.508,1319.508,0.000,0.000,88.000);
	SetDynamicObjectMaterial(objectid, 3, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1764,2267.798,-683.306,1319.508,0.000,0.000,4.000);
	SetDynamicObjectMaterial(objectid, 0, 14563, "triad_main", "chin_carp3", 0);
	objectid = CreateDynamicObject(19457,2247.810,-687.334,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(1737,2272.650,-689.479,1319.508,0.000,0.000,354.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 1, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
	objectid = CreateDynamicObject(1735,2275.541,-689.736,1319.508,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8463, "vgseland", "triadcarpet", 0);
	objectid = CreateDynamicObject(19393,2260.082,-692.188,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2259.106,-701.458,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2253.665,-692.188,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2249.534,-701.463,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(1501,2259.672,-682.505,1319.508,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2988, "kcomp_gx", "kmwood_gate", 0);
	SetDynamicObjectMaterial(objectid, 1, 2988, "kcomp_gx", "kmwood_gate", 0);
	SetDynamicObjectMaterial(objectid, 2, 18018, "genintintbarb", "GB_midbar12", 0);
	objectid = CreateDynamicObject(19457,2252.094,-682.387,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19393,2254.007,-680.977,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2231.883,-694.429,1317.788,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10856, "bakerybit_sfse", "ws_oldwarehouse10a", 0);
	objectid = CreateDynamicObject(1764,2258.282,-696.526,1319.508,0.000,0.000,353.999);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "carp02S", 0);
	objectid = CreateDynamicObject(1765,2260.875,-696.866,1319.508,0.000,0.000,319.998);
	SetDynamicObjectMaterial(objectid, 0, 1597, "centralresac1", "hedge2_128", 0);
	objectid = CreateDynamicObject(1769,2256.697,-696.953,1319.508,0.000,0.000,17.995);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1764,2254.178,-700.072,1319.508,0.000,0.000,65.995);
	SetDynamicObjectMaterial(objectid, 0, 14476, "carlslounge", "ah_bantisto", 0);
	objectid = CreateDynamicObject(1712,2264.076,-691.315,1319.508,0.000,0.000,188.000);
	SetDynamicObjectMaterial(objectid, 1, 14703, "vghsb3int2", "HS4_Wall7", 0);
	objectid = CreateDynamicObject(2048,2256.756,-692.081,1321.753,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 18048, "gen_mun_xtars2", "star_spang", 0);
	objectid = CreateDynamicObject(2060,2230.830,-695.034,1317.145,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2901, "kmb_marijtxd", "kmb_marijuana", 0);
	SetDynamicObjectMaterial(objectid, 1, 2901, "kmb_marijtxd", "kmb_marijuana", 0);
	objectid = CreateDynamicObject(2060,2234.919,-694.799,1317.849,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2901, "kmb_marijtxd", "kmb_marijuana", 0);
	objectid = CreateDynamicObject(1742,2262.066,-692.547,1319.508,0.000,0.000,330.000);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 2, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 3, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 4, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1491,2260.822,-692.166,1319.508,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	objectid = CreateDynamicObject(1762,2265.187,-687.966,1319.508,0.000,0.000,290.000);
	SetDynamicObjectMaterial(objectid, 0, 14714, "vghss1int2", "HS4_Wall6", 0);
	SetDynamicObjectMaterial(objectid, 1, 14714, "vghss1int2", "HS4_Wall6", 0);
	objectid = CreateDynamicObject(1491,2254.028,-684.921,1319.508,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	objectid = CreateDynamicObject(19457,2258.663,-683.070,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(1491,2266.568,-691.252,1319.508,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	objectid = CreateDynamicObject(1763,2259.459,-686.218,1319.508,0.000,0.000,92.000);
	SetDynamicObjectMaterial(objectid, 0, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1491,2254.033,-691.327,1319.520,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	objectid = CreateDynamicObject(1498,2273.666,-692.145,1319.508,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 2988, "kcomp_gx", "kmwood_gate", 0);
	SetDynamicObjectMaterial(objectid, 1, 18018, "genintintbarb", "GB_midbar12", 0);
	objectid = CreateDynamicObject(19457,2250.702,-700.276,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19397,2250.702,-693.848,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19393,2245.970,-694.671,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19409,2249.181,-694.671,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(19457,2245.898,-697.664,1321.259,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(2296,2259.889,-701.119,1319.508,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 3, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 4, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(1491,2250.698,-693.073,1319.508,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	objectid = CreateDynamicObject(19377,2271.037,-687.293,1322.922,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19378,2260.537,-687.293,1319.422,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 5114, "beach_las2", "boardwalk_la", 0);
	objectid = CreateDynamicObject(19377,2260.537,-696.894,1322.922,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19377,2250.037,-696.894,1322.922,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19377,2250.037,-687.293,1322.922,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 17036, "cuntwbt", "des_woodslats1", 0);
	objectid = CreateDynamicObject(19377,2231.360,-696.894,1319.353,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3483, "vegashse7", "vgnhsepsh7_128", 0);
	objectid = CreateDynamicObject(19369,2270.624,-692.103,1321.259,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 11490, "des_ranch", "des_logwall", 0);
	objectid = CreateDynamicObject(1742,2270.158,-691.278,1319.508,0.000,0.000,237.996);
	SetDynamicObjectMaterial(objectid, 1, 3900, "station", "rustd64", 0);
	SetDynamicObjectMaterial(objectid, 2, 3900, "station", "rustd64", 0);
	objectid = CreateDynamicObject(19378,2271.037,-696.894,1319.422,0.000,90.000,0.000);
	objectid = CreateDynamicObject(19457,2276.376,-696.894,1321.259,0.000,0.000,0.000);
	objectid = CreateDynamicObject(14411,2242.812,-696.154,1316.280,0.000,0.000,270.000);
	objectid = CreateDynamicObject(19457,2271.420,-697.025,1321.259,0.000,0.000,0.000);
	objectid = CreateDynamicObject(19378,2231.360,-687.293,1315.953,0.000,90.000,0.000);
	objectid = CreateDynamicObject(19457,2236.666,-689.674,1317.788,0.000,0.000,0.000);
	objectid = CreateDynamicObject(19457,2232.033,-691.028,1317.788,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2525,2250.680,-683.533,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2526,2249.604,-685.396,1319.508,0.000,0.000,180.000);
	objectid = CreateDynamicObject(2523,2252.957,-685.390,1319.508,0.000,0.000,180.000);
	objectid = CreateDynamicObject(2299,2250.496,-689.587,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2596,2275.988,-688.400,1321.975,0.000,0.000,270.000);
	objectid = CreateDynamicObject(2297,2249.278,-691.760,1319.508,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2102,2248.851,-691.284,1321.211,0.000,0.000,124.000);
	objectid = CreateDynamicObject(1738,2248.147,-688.776,1320.162,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2149,2275.611,-683.007,1320.833,0.000,0.000,328.000);
	objectid = CreateDynamicObject(1736,2251.001,-686.388,1322.199,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2384,2248.133,-688.806,1320.915,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1208,2275.812,-685.835,1319.508,0.000,0.000,58.000);
	objectid = CreateDynamicObject(1744,2254.072,-687.560,1321.270,0.000,0.000,270.000);
	objectid = CreateDynamicObject(2194,2253.722,-687.322,1321.879,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2279,2251.646,-691.578,1321.364,0.000,0.000,180.000);
	objectid = CreateDynamicObject(2103,2274.023,-686.882,1320.373,0.000,0.000,348.000);
	objectid = CreateDynamicObject(2244,2253.719,-688.012,1321.886,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2253,2253.701,-688.796,1321.890,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1810,2274.034,-688.096,1319.508,0.000,0.000,20.000);
	objectid = CreateDynamicObject(1810,2272.739,-687.997,1319.508,0.000,0.000,37.995);
	objectid = CreateDynamicObject(2096,2271.194,-689.333,1319.508,0.000,0.000,86.000);
	objectid = CreateDynamicObject(2108,2249.041,-686.591,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2309,2272.060,-691.072,1319.508,0.000,0.000,330.000);
	objectid = CreateDynamicObject(1810,2273.330,-690.723,1319.508,0.000,0.000,159.993);
	objectid = CreateDynamicObject(2245,2274.982,-687.166,1320.682,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2251,2275.604,-691.617,1320.350,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2811,2268.803,-686.648,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(19457,2244.854,-702.569,1321.259,0.000,0.000,0.000);
	objectid = CreateDynamicObject(14852,2246.096,-682.693,1324.609,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.186,-697.533,1316.165,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.197,-697.976,1316.165,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.129,-697.718,1316.448,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.187,-698.508,1316.165,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.051,-698.297,1316.448,0.000,0.000,12.000);
	objectid = CreateDynamicObject(3052,2236.204,-699.064,1316.165,0.000,0.000,347.997);
	objectid = CreateDynamicObject(3052,2236.096,-698.853,1316.448,0.000,0.000,347.991);
	objectid = CreateDynamicObject(3052,2235.987,-698.588,1316.733,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.030,-697.914,1316.733,0.000,0.000,74.000);
	objectid = CreateDynamicObject(3052,2236.197,-699.637,1316.165,0.000,0.000,13.998);
	objectid = CreateDynamicObject(3052,2236.037,-699.439,1316.448,0.000,0.000,91.998);
	objectid = CreateDynamicObject(3052,2236.056,-699.210,1316.733,0.000,0.000,91.994);
	objectid = CreateDynamicObject(3052,2236.062,-700.133,1316.165,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3052,2236.112,-698.838,1317.016,0.000,0.000,6.000);
	objectid = CreateDynamicObject(3052,2236.019,-698.221,1317.016,0.000,0.000,50.000);
	objectid = CreateDynamicObject(3052,2236.020,-698.442,1317.301,0.000,0.000,273.998);
	objectid = CreateDynamicObject(3015,2235.210,-700.059,1316.038,0.000,0.000,352.000);
	objectid = CreateDynamicObject(3015,2236.177,-697.056,1316.038,0.000,0.000,38.000);
	objectid = CreateDynamicObject(3014,2235.392,-699.473,1316.275,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2969,2235.455,-698.710,1316.165,0.000,0.000,296.000);
	objectid = CreateDynamicObject(2969,2235.451,-699.445,1316.670,0.000,0.000,255.999);
	objectid = CreateDynamicObject(931,2228.993,-698.825,1317.100,0.000,0.000,120.000);
	objectid = CreateDynamicObject(2041,2235.668,-697.671,1316.244,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2042,2235.408,-698.075,1316.119,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2043,2234.737,-699.841,1316.142,0.000,0.000,320.000);
	objectid = CreateDynamicObject(2359,2233.788,-700.088,1316.249,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2358,2234.905,-699.080,1316.156,0.000,0.000,262.000);
	objectid = CreateDynamicObject(2358,2234.916,-699.070,1316.400,0.000,0.000,205.996);
	objectid = CreateDynamicObject(935,2234.148,-699.411,1316.602,0.000,0.000,0.000);
	objectid = CreateDynamicObject(941,2230.781,-695.466,1316.514,0.000,0.000,10.000);
	objectid = CreateDynamicObject(1421,2228.118,-695.728,1316.802,0.000,0.000,260.000);
	objectid = CreateDynamicObject(1758,2261.940,-698.382,1319.508,0.000,0.000,280.000);
	objectid = CreateDynamicObject(1767,2232.322,-699.729,1316.038,0.000,0.000,182.000);
	objectid = CreateDynamicObject(2063,2234.704,-694.929,1316.947,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2945,2229.474,-700.353,1317.368,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3044,2231.272,-695.671,1317.029,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2967,2230.652,-695.872,1316.989,0.000,0.000,22.000);
	objectid = CreateDynamicObject(2967,2256.614,-696.994,1320.160,0.000,0.000,21.994);
	objectid = CreateDynamicObject(2967,2273.631,-687.244,1320.373,0.000,0.000,21.994);
	objectid = CreateDynamicObject(2967,2273.988,-689.442,1320.303,0.000,0.000,21.994);
	objectid = CreateDynamicObject(2967,2267.333,-684.059,1320.160,0.000,0.000,21.994);
	objectid = CreateDynamicObject(2614,2259.374,-695.950,1320.199,330.000,0.000,180.000);
	objectid = CreateDynamicObject(14578,2231.252,-694.515,1319.119,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1672,2230.433,-695.458,1317.194,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2064,2265.090,-685.146,1320.137,0.000,0.000,265.000);
	objectid = CreateDynamicObject(14578,2233.167,-700.353,1319.119,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2060,2264.426,-685.992,1319.665,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2060,2264.416,-684.942,1319.665,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2060,2264.791,-684.158,1319.665,0.000,0.000,45.000);
	objectid = CreateDynamicObject(2060,2264.467,-684.533,1319.880,0.000,0.000,70.000);
	objectid = CreateDynamicObject(2060,2264.450,-685.661,1319.880,0.000,0.000,98.000);
	objectid = CreateDynamicObject(1650,2229.627,-695.283,1316.345,0.000,0.000,85.000);
	objectid = CreateDynamicObject(1650,2229.560,-694.979,1316.345,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1650,2229.393,-695.203,1316.345,0.000,0.000,44.994);
	objectid = CreateDynamicObject(2048,2257.810,-692.273,1321.935,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1644,2232.428,-695.263,1316.064,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1654,2233.945,-695.000,1316.589,0.000,0.000,14.000);
	objectid = CreateDynamicObject(2088,2255.461,-688.693,1319.508,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2035,2234.346,-695.210,1316.113,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2036,2233.999,-694.986,1316.906,0.000,0.000,6.000);
	objectid = CreateDynamicObject(2236,2255.007,-686.658,1319.508,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2057,2232.895,-695.005,1316.208,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2059,2231.482,-695.125,1316.996,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2244,2254.469,-686.481,1320.290,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2061,2235.752,-697.150,1316.331,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2252,2254.483,-685.814,1320.336,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2061,2234.992,-698.575,1316.331,0.000,0.000,18.000);
	objectid = CreateDynamicObject(631,2266.031,-691.661,1320.409,0.000,0.000,326.000);
	objectid = CreateDynamicObject(631,2266.031,-682.981,1320.409,0.000,0.000,325.997);
	objectid = CreateDynamicObject(2901,2229.147,-698.921,1317.528,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2238,2265.370,-685.750,1319.916,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2238,2265.016,-686.004,1319.916,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2295,2263.001,-683.210,1319.508,0.000,0.000,320.000);
	objectid = CreateDynamicObject(1440,2256.967,-683.486,1320.027,0.000,0.000,0.000);
	objectid = CreateDynamicObject(631,2262.424,-700.924,1320.409,0.000,0.000,325.997);
	objectid = CreateDynamicObject(631,2251.371,-700.870,1320.409,0.000,0.000,325.997);
	objectid = CreateDynamicObject(2311,2251.269,-698.778,1319.508,0.000,0.000,90.000);
	objectid = CreateDynamicObject(2245,2251.292,-698.455,1320.322,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2244,2251.247,-697.362,1320.290,0.000,0.000,0.000);
	objectid = CreateDynamicObject(19303,2249.166,-694.687,1321.953,0.000,90.000,0.000);
	objectid = CreateDynamicObject(1714,2248.468,-696.168,1319.508,0.000,0.000,104.000);
	objectid = CreateDynamicObject(2315,2258.059,-699.114,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(3017,2258.720,-698.869,1320.010,0.000,0.000,180.000);
	objectid = CreateDynamicObject(1670,2275.542,-688.060,1320.024,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2008,2248.846,-695.302,1319.508,0.000,0.000,0.000);
	objectid = CreateDynamicObject(355,2250.422,-695.729,1319.758,351.000,270.000,0.000);
	objectid = CreateDynamicObject(2723,2274.714,-685.979,1319.876,0.000,0.000,0.000);
	objectid = CreateDynamicObject(1495,2245.200,-694.671,1319.508,0.000,0.000,50.099);
	objectid = CreateDynamicObject(19377,2271.037,-696.894,1322.922,0.000,90.000,0.000);
	objectid = CreateDynamicObject(2074,2273.719,-686.075,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2262.291,-686.423,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2258.686,-697.739,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2269.905,-690.588,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2256.412,-686.762,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2250.883,-688.766,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2249.881,-684.316,1322.518,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2233.864,-697.171,1319.067,0.000,0.000,0.000);
	objectid = CreateDynamicObject(2074,2246.890,-696.291,1322.518,0.000,0.000,0.000);

    // Medium garage
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1511.712158, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1511.712280, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1515.464721, -1638.889160, 1375.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1519.789550, -1638.885986, 1373.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1375.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1373.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.668579, -1650.662597, 1373.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1374.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1516.784301, -1650.541381, 1373.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1374.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1514.635620, -1650.671386, 1374.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1374.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1374.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1374.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1377.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1512.762207, -1651.041992, 1374.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1650.722290, 1375.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1512.062988, -1643.247314, 1375.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1511.827880, -1640.815917, 1374.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1512.140991, -1644.314697, 1374.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1511.774658, -1639.957275, 1375.194580, 0.000000, 0.000000, 91.062004);
    objectid = CreateObjectEx(19377, 1507.614990, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.614990, -1654.158447, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1654.168457, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1507.531738, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1507.661621, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);

	// Large garage
	CreateObjectEx(11389, 1665.187500, -2352.026367, 1537.641723, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19377, 1668.767822, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2350.427001, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2360.037597, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2369.637939, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2350.467041, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2360.087646, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2369.697265, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1661.437255, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.437988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.527465, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.509521, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    CreateObjectEx(2885, 1674.234375, -2340.028320, 1541.174072, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(2885, 1674.234375, -2348.668212, 1541.174072, 0.000000, 0.000000, 270.000000);
    objectid = CreateObjectEx(19377, 1679.248168, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1679.248168, -2350.476562, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    CreateObjectEx(2885, 1660.494262, -2368.226806, 1541.143798, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(11390, 1665.046875, -2351.977050, 1538.903198, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11391, 1657.228515, -2360.088378, 1535.773193, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11393, 1669.819946, -2357.343994, 1536.022583, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19817, 1662.070068, -2340.035888, 1533.891967, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19872, 1659.912719, -2348.421630, 1533.882324, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19903, 1658.435546, -2345.552978, 1534.542480, 0.000000, 0.000000, -47.000000);
    CreateObjectEx(19377, 1656.129028, -2362.886718, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2352.425048, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2341.955322, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2331.505126, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1661.448364, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.927612, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.157470, -2368.107421, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.139404, -2363.225585, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.149414, -2359.344726, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.590942, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.300659, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2363.697021, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2367.177734, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1667.490478, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1669.050048, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1670.640380, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1672.190063, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1674.090454, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.367797, -2348.886474, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.367797, -2338.387207, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1660.698242, -2368.378906, 1539.123413, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1660.257812, -2368.418945, 1539.123413, 90.000000, 0.000000, 90.000000);
    objectid = CreateObjectEx(19369, 1666.348266, -2366.564208, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2363.353759, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2362.022460, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1667.818969, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1670.998901, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.869873, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.898559, -2359.502197, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2362.103515, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2365.273437, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2368.443115, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19377, 1671.468505, -2363.267089, 1537.988037, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(9131, 1666.443969, -2358.310058, 1535.482910, 0.000000, 0.000000, 270.520568);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);


	// Miner objects
	objectid = CreateDynamicObject(5857, 1259.475952, -1246.807861, 17.118604, 0.000000, 0.000000, 0.000000);
    SetDynamicObjectMaterial(objectid, 0, 900, "underwater", "rock_country128", 0);
    CreateDynamicObject(18248, 1246.071655, -1271.090698, 20.019594, 0.000000, 0.000000, 84.000000);
    CreateDynamicObject(3626, 1258.959472, -1267.884155, 13.859575, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(5836, 1236.547607, -1248.458374, 23.218635, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1358, 1251.376831, -1268.885498, 13.671277, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1345, 1264.114379, -1268.189208, 13.154987, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(3865, 1249.772094, -1260.009643, 14.072364, 0.000000, 0.000000, 86.000000);
    CreateDynamicObject(3864, 1280.458374, -1233.247192, 18.021100, 0.000000, 0.000000, 67.399993);
    CreateDynamicObject(3864, 1250.571289, -1242.027954, 19.531097, 0.000000, 0.000000, 156.399993);
    CreateDynamicObject(1413, 1272.510620, -1270.166503, 13.533586, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1413, 1279.261596, -1270.246582, 13.533586, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(944, 1267.146362, -1269.372802, 13.364293, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(3864, 1281.966308, -1254.101684, 17.691064, 0.000000, 0.000000, -9.400017);
    CreateDynamicObject(1684, 1280.920776, -1264.567871, 14.093436, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(2984, 1282.067260, -1257.960327, 13.961514, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(2984, 1281.947143, -1256.210815, 14.011515, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(11289, 1282.567993, -1243.593383, 14.934340, 0.000000, 0.000000, -88.100013);

    // PD exterior
    CreateDynamicObject(995, 1544.594238, -1618.678466, 13.262805, 90.000000, 0.000000, 270.324615);
    CreateDynamicObject(995, 1545.128662, -1633.476684, 13.292809, 90.000000, 0.000000, 270.324615);
    CreateDynamicObject(19121, 1544.701660, -1623.436523, 12.962804, 0.000000, 0.000000, 270.178314);

    gPDGates[0] = CreateDynamicObject(968, 1544.639892, -1631.008666, 13.252797, 0.000000, 90.000000, 90.000000);
    gPDGates[1] = CreateDynamicObject(980, 1588.042602, -1638.079956, 14.602818, 0.000000, 0.000000, 0.000000);

	// FBI exterior
	gFBIGates[0] = CreateDynamicObject(985, 321.255279, -1488.601318, 25.281988, 0.000000, 0.000000, -35.299957);
	gFBIGates[1] = CreateDynamicObject(985, 283.590423, -1542.835083, 25.281988, 0.000000, 0.000000, -34.899955);

 	// FMD exterior by Lance
	CreateDynamicObject(3268,1571.1287800,-2174.7282700,12.5186000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9949,1517.5681200,-2168.8305700,24.5000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10763,1474.2979700,-2156.9782700,38.0000000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(18850,1478.9538600,-2166.8579100,22.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(18850,1540.6938500,-2166.8579100,22.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1569,1509.3479000,-2179.6994600,31.0200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19799,1452.2346200,-2164.4707000,14.1000000,0.0000000,0.0000000,74.8200300); //
	CreateDynamicObject(3268,1600.9808300,-2174.7097200,12.5186000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(4838,1587.2423100,-2049.6191400,12.5278000,0.0000000,0.0000000,-155.8799700); //
	CreateDynamicObject(3578,1574.3737800,-2159.6210900,11.8025000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3578,1562.5632300,-2159.6289100,11.8025000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3578,1590.2486600,-2159.5524900,11.8025000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3578,1607.1795700,-2159.5551800,11.8025000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3578,1601.7481700,-2154.6731000,11.8025000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,1595.1035200,-2154.6853000,11.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,1579.2691700,-2154.6359900,11.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,1589.2910200,-2154.6516100,11.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,1568.9565400,-2154.5939900,11.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3578,1567.4160200,-2154.5903300,11.8200000,0.0000000,0.0000000,0.0000000); //

	// FMD interior by Lance
	CreateDynamicObject(19377,303.0083300,1734.1710200,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0080000,1724.5380900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5455600,1724.5650600,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4708300,1724.5512700,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5817000,1715.0184300,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0470000,1715.0092800,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4521500,1714.9982900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,297.3785100,1729.4550800,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,308.5267000,1728.9681400,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,303.4111000,1705.4381100,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,309.0299700,1710.0831300,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,298.6503300,1710.3720700,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,318.1890900,1718.8968500,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,319.7799400,1713.8325200,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,316.9845300,1715.6378200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,320.0360100,1724.4752200,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,312.7421900,1707.2959000,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,303.8535200,1700.6272000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,294.3555900,1700.6307400,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,308.5528300,1698.6328100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,313.6304900,1731.1495400,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19377,305.1874400,1738.8909900,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,311.5968900,1733.2728300,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,308.2782600,1741.4941400,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,302.6104100,1739.0069600,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0647900,1741.1154800,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0326500,1739.0101300,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0677800,1705.3768300,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0751600,1732.9126000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0678100,1720.1391600,2041.1999500,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19450,297.9874900,1720.1200000,2045.9899900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0652800,1713.7240000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0574600,1707.6444100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0677200,1726.5491900,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,294.5946700,1733.3363000,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,287.7799100,1726.8686500,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,294.7457600,1706.9888900,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19450,288.1676300,1713.8525400,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19377,282.1066300,1721.7541500,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,282.0834000,1712.1453900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19388,284.8420100,1720.6792000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8418300,1714.3811000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8419200,1726.8408200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14407,281.7731900,1720.7354700,2042.0200200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,279.6451400,1714.6911600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6397700,1726.6131600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,280.0779100,1719.4262700,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,280.0210600,1721.8717000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1523,284.8919100,1719.9190700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,284.8293500,1714.7106900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8281600,1723.9847400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3952000,1721.4533700,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3851600,1712.4227300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3986800,1730.7562300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8342900,1733.5362500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,281.2565600,1731.1449000,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(19450,282.0049100,1709.9862100,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(14407,275.6328100,1720.4567900,2042.0200200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,280.9892000,1710.3958700,2046.1999500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7666,280.9354900,1712.4360400,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9292900,1716.9151600,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9714100,1724.3070100,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9681100,1728.7729500,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5637800,1714.7343800,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5276200,1716.6062000,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,284.6994600,1714.3702400,2047.0437000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14657,278.1170300,1726.4295700,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2125,279.1882600,1726.5440700,2045.5206300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14657,272.9628000,1729.6212200,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6451100,1714.6911600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6086400,1724.2756300,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.9444600,1733.7408400,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1523,298.1099900,1712.9699700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,298.1211900,1725.7973600,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10009,303.2358100,1705.9794900,2041.9799800,0.0000000,0.0000000,-540.0000000); //
	CreateDynamicObject(10009,303.5607000,1732.9459200,2041.9799800,0.0000000,0.0000000,360.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,311.0549900,1710.1577100,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.8494600,1710.1633300,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,310.5050400,1729.3501000,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.7391700,1729.3544900,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,316.9876100,1725.2434100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,303.6236900,1716.8908700,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,310.9368000,1716.9149200,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,303.6769100,1723.0781300,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,310.9479100,1723.0629900,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,307.3017900,1709.1022900,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.3015400,1700.4470200,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2967200,1730.8836700,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2979700,1740.0156300,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19353,307.7066000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,306.9244100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3072500,1720.2406000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1711400,1723.0136700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,318.1921100,1716.9775400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.3361500,1723.0107400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.2648000,1716.8167700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,292.6272000,1709.0062300,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19450,292.7041300,1730.8332500,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,308.6773100,1730.8216600,2041.7044700,0.0000000,0.0000000,41.9999900); //
	CreateDynamicObject(1723,313.7042200,1728.3630400,2041.7044700,0.0000000,0.0000000,220.7999600); //
	CreateDynamicObject(2311,310.7790200,1729.1409900,2041.6988500,0.0000000,0.0000000,41.5200000); //
	CreateDynamicObject(1723,313.0018900,1712.7968800,2041.7044700,0.0000000,0.0000000,309.6599700); //
	CreateDynamicObject(2311,311.1241500,1710.7445100,2041.6988500,0.0000000,0.0000000,-49.3800000); //
	CreateDynamicObject(1723,310.4335300,1708.0306400,2041.7044700,0.0000000,0.0000000,132.7200000); //
	CreateDynamicObject(640,298.4453400,1706.9301800,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,298.4982900,1736.0760500,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,303.3941700,1738.7117900,2042.3800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(640,312.7133500,1731.4224900,2042.3800000,0.0000000,0.0000000,43.3800000); //
	CreateDynamicObject(640,312.7117900,1707.9856000,2042.3800000,0.0000000,0.0000000,132.0000200); //
	CreateDynamicObject(640,303.1869800,1701.0753200,2042.3800000,0.0000000,0.0000000,89.9399900); //
	CreateDynamicObject(644,314.9457100,1726.9716800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,315.3387800,1712.7454800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.3248300,1702.6160900,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.7919000,1737.4272500,2041.5446800,0.0000000,0.0000000,-5.2800000); //
	CreateDynamicObject(1569,316.9355500,1718.5216100,2041.6999500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1569,316.9151300,1721.5231900,2041.6999500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,303.2263500,1712.0775100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6807900,1708.2077600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,311.0804400,1699.3798800,2045.1200000,0.0000000,90.0000000,-36.2400000); //
	CreateDynamicObject(19377,308.4107100,1697.4563000,2045.1230500,0.0000000,90.0000000,-59.1000000); //
	CreateDynamicObject(19377,302.8421000,1695.6449000,2045.1209700,0.0000000,90.0000000,-79.2600000); //
	CreateDynamicObject(19377,297.8151900,1697.5302700,2045.1212200,0.0000000,90.0000000,-114.2400000); //
	CreateDynamicObject(19377,296.8037100,1698.1572300,2045.1200000,0.0000000,90.0000000,-143.3999900); //
	CreateDynamicObject(19377,292.9220900,1708.3493700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.7083100,1698.5462600,2045.1230500,0.0000000,90.0000000,-87.4800000); //
	CreateDynamicObject(19377,313.6958300,1717.8597400,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6943700,1727.4685100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6927800,1737.0770300,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2968100,1721.6835900,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3432000,1727.2338900,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,302.0692100,1728.4289600,2045.1219500,0.0000000,90.0000000,28.8600000); //
	CreateDynamicObject(19377,295.0835000,1737.5714100,2045.1200000,0.0000000,90.0000000,-13.7400100); //
	CreateDynamicObject(19377,298.4128100,1741.1560100,2045.1221900,0.0000000,90.0000000,-50.2200000); //
	CreateDynamicObject(19377,305.4567900,1743.0904500,2045.1203600,0.0000000,90.0000000,-89.7000000); //
	CreateDynamicObject(19377,309.9078100,1740.4078400,2045.1219500,0.0000000,90.0000000,-129.6601000); //
	CreateDynamicObject(19377,292.9037500,1717.9871800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8598000,1727.5999800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.6563100,1737.2166700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.8685900,1712.4522700,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.9446100,1722.0578600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4538900,1728.1084000,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4736900,1726.3780500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.1796300,1734.2570800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,313.4704300,1721.9592300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4807400,1710.5251500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4460800,1721.4744900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,308.7316000,1707.4411600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,302.7797900,1707.4355500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.8255900,1704.6713900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.9139400,1709.3995400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.7136200,1714.1364700,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,291.1931500,1714.1359900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2765200,1728.1485600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2850300,1713.7363300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1975100,1719.3842800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.9658500,1716.0202600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,318.9632000,1732.6717500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,322.5897500,1734.2519500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,305.4509900,1715.6485600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.6244200,1723.7197300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,299.9090000,1718.9587400,2046.9499500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19388,313.4637800,1716.2133800,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,313.4800100,1732.7696500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(941,318.2278100,1716.5438200,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1369,316.9319800,1718.6926300,2045.7873500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2792,313.4563000,1715.7637900,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2794,313.4670100,1732.3862300,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11709,316.3952300,1714.0858200,2045.8800000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11707,314.9844100,1713.8917200,2046.0000000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11738,318.2623300,1717.4075900,2046.0575000,0.0000000,0.0000000,-71.7600000); //
	CreateDynamicObject(11738,318.4575500,1716.3659700,2046.0575000,0.0000000,0.0000000,-88.3800000); //
	CreateDynamicObject(11738,318.1898200,1715.9495800,2046.0575000,0.0000000,0.0000000,-174.7199700); //
	CreateDynamicObject(11736,318.1078500,1716.9252900,2046.0178200,0.0000000,0.0000000,-129.8399800); //
	CreateDynamicObject(19339,318.3839100,1731.3282500,2046.3800000,0.0000000,0.0000000,89.2200000); //
	CreateDynamicObject(941,318.3655700,1731.0390600,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(941,316.1153000,1728.7944300,2045.5439500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(303,316.7699900,1728.6137700,2046.0169700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2905,316.9830300,1728.8640100,2046.0177000,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2906,316.5119600,1729.0598100,2046.0777600,0.0000000,84.0000000,-85.0000000); //
	CreateDynamicObject(2906,316.1318400,1728.6934800,2046.0777600,0.0000000,84.0000000,-48.6399900); //
	CreateDynamicObject(2907,315.5983900,1728.8242200,2046.0577400,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2908,316.3945000,1728.5428500,2046.1176800,-76.0000000,48.0000000,-30.0000000); //
	CreateDynamicObject(2905,317.2831100,1728.6457500,2046.0777600,-11.0000000,178.0000000,-46.8000000); //
	CreateDynamicObject(1523,313.5266100,1732.0133100,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,313.4849900,1715.4639900,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1491,305.4775100,1714.9050300,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2184,301.6876200,1720.8125000,2045.1866500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,302.7992600,1722.6538100,2045.1678500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1736,302.8185100,1723.3610800,2048.0793500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,300.4746400,1723.1483200,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,303.9538300,1723.0762900,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11712,302.8305700,1723.6319600,2047.4000200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19893,302.2153000,1721.3055400,2045.9595900,0.0000000,0.0000000,136.9200000); //
	CreateDynamicObject(19810,305.5448600,1716.7041000,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19810,305.5567300,1714.5617700,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19806,302.4137900,1718.9931600,2048.0346700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19172,300.0974100,1718.6551500,2047.3912400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1828,302.7713600,1718.1806600,2045.1829800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2131,301.5134300,1714.6702900,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2131,303.4942300,1714.6665000,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19431,307.9731400,1734.8695100,2046.9499500,0.0000000,0.0000000,34.6199700); //
	CreateDynamicObject(19431,306.9825400,1736.1022900,2046.9499500,0.0000000,0.0000000,43.5599700); //
	CreateDynamicObject(19431,305.7912600,1737.1112100,2046.9499500,0.0000000,0.0000000,55.6799800); //
	CreateDynamicObject(19431,304.3605300,1737.7225300,2046.9499500,0.0000000,0.0000000,79.0800000); //
	CreateDynamicObject(19431,303.0155300,1737.8642600,2046.9499500,0.0000000,0.0000000,90.0000200); //
	CreateDynamicObject(19431,302.0553900,1737.3988000,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,300.8975200,1736.3724400,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,299.9442100,1735.1096200,2046.9499500,0.0000000,0.0000000,157.5600000); //
	CreateDynamicObject(19431,299.4621300,1733.7148400,2046.9499500,0.0000000,0.0000000,163.9799300); //
	CreateDynamicObject(19431,299.2149400,1732.7229000,2046.9499500,0.0000000,0.0000000,171.5999500); //
	CreateDynamicObject(19450,298.9913900,1732.2845500,2046.9499500,0.0000000,0.0000000,117.5400200); //
	CreateDynamicObject(19431,303.9959700,1734.3811000,2046.9499500,0.0000000,0.0000000,261.0598400); //
	CreateDynamicObject(19431,305.0911300,1733.5955800,2046.9499500,0.0000000,0.0000000,207.4798700); //
	CreateDynamicObject(19431,298.9092100,1703.9245600,2046.9499500,0.0000000,0.0000000,28.9800300); //
	CreateDynamicObject(19431,299.7147800,1702.8237300,2046.9499500,0.0000000,0.0000000,41.9400300); //
	CreateDynamicObject(19431,300.8793300,1701.8411900,2046.9499500,0.0000000,0.0000000,58.3200300); //
	CreateDynamicObject(19431,302.2331800,1701.2249800,2046.9499500,0.0000000,0.0000000,73.3800300); //
	CreateDynamicObject(19431,303.7749300,1701.1378200,2046.9499500,0.0000000,0.0000000,99.3600500); //
	CreateDynamicObject(19431,305.2196000,1701.6594200,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,306.5421100,1702.4554400,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,307.6550300,1703.4969500,2046.9499500,0.0000000,0.0000000,145.3200700); //
	CreateDynamicObject(19431,308.4859900,1704.8344700,2046.9499500,0.0000000,0.0000000,150.6601100); //
	CreateDynamicObject(19431,308.4835500,1705.3800000,2046.9499500,0.0000000,0.0000000,178.1400500); //
	CreateDynamicObject(19431,308.4970400,1706.6167000,2046.9499500,0.0000000,0.0000000,181.7400700); //
	CreateDynamicObject(19353,307.5458100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.4046000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.2399000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.0947900,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.4580100,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.6187700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.7796600,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.9500700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1720.1167000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.3175000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(2008,297.5231900,1724.2286400,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2008,297.5220300,1716.8732900,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3397,297.4426000,1719.0638400,2041.7071500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1937,270.6657700,1727.5871600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2018100,1702.7998000,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8327900,1709.2722200,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3310500,1712.3391100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6891800,1711.8839100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.7886700,1721.4311500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3681900,1721.8647500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,314.2639500,1730.9770500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.9994500,1730.9475100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.1025400,1740.3638900,2048.6298800,0.0000000,90.0000000,0.0000000); //

	// Idlewood gas station objects
    CreateDynamicObject(970, 1942.256469, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095825, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096191, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096679, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095703, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1215, 1941.625610, -1780.841918, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1215, 1941.636230, -1765.047241, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1291, 1928.692382, -1767.511352, 13.032809, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1287, 1928.503662, -1768.784423, 13.076869, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1289, 1928.507202, -1769.368896, 13.092813, 0.000000, 0.000000, -90.228660);
    CreateDynamicObject(1250, 1908.817138, -1782.609863, 13.582806, 0.000000, 0.000000, 90.000000);

    // Pizza stacks objects
    CreateDynamicObject(19121, 2124.371093, -1765.267456, 13.145559, 0.000000, 0.000000, 267.547332);
    CreateDynamicObject(19121, 2124.381347, -1769.873168, 13.145559, 0.000000, 0.000000, 267.547332);
    CreateDynamicObject(19121, 2124.396484, -1774.649047, 13.145559, 0.000000, 0.000000, 267.547332);
    CreateDynamicObject(19121, 2124.419677, -1779.435668, 13.145559, 0.000000, 0.000000, 267.547332);
    CreateDynamicObject(19121, 2124.382568, -1784.029174, 13.145559, 0.000000, 0.000000, 267.547332);
    CreateDynamicObject(1346, 2122.608886, -1790.332153, 13.887385, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(1256, 2119.659667, -1790.556152, 13.200844, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1285, 2106.148193, -1790.754638, 13.098064, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(1287, 2106.840820, -1790.747070, 13.090840, 0.000000, 0.000000, 359.374725);
    CreateDynamicObject(970, 2098.605224, -1784.011840, 13.037828, 0.000000, 0.000000, 80.976753);
    CreateDynamicObject(970, 2099.258789, -1779.893310, 13.037828, 0.000000, 0.000000, 80.976753);
    CreateDynamicObject(970, 2099.906738, -1775.825195, 13.037828, 0.000000, 0.000000, 80.976753);
    CreateDynamicObject(970, 2100.548583, -1771.775146, 13.037828, 0.000000, 0.000000, 80.976753);
    CreateDynamicObject(970, 2101.199462, -1767.676147, 13.037828, 0.000000, 0.000000, 80.976753);
    CreateDynamicObject(970, 2100.351318, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(970, 2104.491455, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(970, 2108.612792, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(970, 2112.732666, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(970, 2116.863769, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(970, 2120.975830, -1786.065185, 13.037828, 0.000000, 0.000000, 180.000000);

	// Fixed trailer
 	CreateDynamicObject(11015, 4.2412109375, -0.25, 1002.3616333008, 0, 90, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(11015, -3.7464447021484, -0.46751827001572, 1002.3616333008, 0, 90, 0, .interiorid = 2);
    CreateDynamicObject(11015, -2.0341796875, -0.2255859375, 996.58734130859, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(11015, -1.7412109375, -8.029296875, 1002.3616333008, 0, 90, 89.994506835938, .interiorid = 2);
    CreateDynamicObject(11015, 2.349609375, 9.3095703125, 1002.3616333008, 0, 90, 270, .interiorid = 2);
    CreateDynamicObject(976, -8.3762712478638, 5.4238820075989, 998.02801513672, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(976, 10.326154708862, 5.4526047706604, 998.02801513672, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(976, -0.78860986232758, 4.5294494628906, 998.02801513672, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(976, -9.4923362731934, 2.8067343235016, 998.30328369141, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(968, -0.78987210988998, 3.085230588913, 996.65313720703, 0, 0, 88.375030517578, .interiorid = 2);
    CreateDynamicObject(2424, -1.1989899873734, 2.1414895057678, 998.20440673828, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(2424, -1.4444495439529, 1.2195072174072, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2420085668564, 0.15943863987923, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2046113014221, -0.27639570832253, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6594306230545, -1.5798351764679, 998.40460205078, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6048280000687, -3.7030065059662, 998.50469970703, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3431304693222, -4.7396554946899, 997.82904052734, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3272333145142, -5.6384997367859, 997.85406494141, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -0.82665449380875, -5.819974899292, 997.82904052734, 0, 0, 0.07452392578125, .interiorid = 2);
    CreateDynamicObject(2424, 0.90103495121002, -5.7934393882751, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.8007507324219, -5.7772388458252, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 2.0067005157471, -4.656822681427, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0016891956329, -5.5176014900208, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.095220312476158, -5.8064684867859, 997.85406494141, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.9964281320572, -1.4732304811478, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0242736339569, -0.59229171276093, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.105211853981, -0.25799462199211, 997.82904052734, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(2424, 0.85449481010437, -0.25893545150757, 997.82904052734, 0, 0, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, 0.94933843612671, 0.93138349056244, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.9278947114944, 1.8640511035919, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.912776350975, 2.7815411090851, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.9282813072205, 3.7311086654663, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.94268548488617, 0.38233369588852, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.8336682319641, 0.42996874451637, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(1814, -0.070350080728531, -4.9489212036133, 998.45343017578, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2108, 0.87250107526779, -1.5103777647018, 997.35357666016, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2738, -1.3212617635727, 5.0136914253235, 998.98120117188, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2558, -0.45861941576004, 3.3949182033539, 999.67913818359, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2558, -1.1560896635056, 4.4181189537048, 999.70416259766, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(1745, 2.4512000083923, 6.3230948448181, 998.07806396484, 0, 0, 90, .interiorid = 2);


	// FBI Interior (Credits: CoachCarter again)
    objectid = CreateDynamicObject(19377,-501.250,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,299.998,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-505.165,306.329,1999.339,324.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-495.646,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-490.750,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-489.238,309.261,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.014,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,314.013,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,290.366,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.746,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19380,-511.746,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-496.893,309.690,2006.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,309.691,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19377,-511.745,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-497.308,306.327,1999.340,323.992,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-505.167,314.022,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-506.836,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.011,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,314.014,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.271,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(18762,-521.362,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,309.696,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.281,2010.333,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-501.244,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-503.610,309.284,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-493.979,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-484.352,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-511.745,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.746,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19379,-516.906,290.367,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,299.998,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,300.000,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,290.368,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-501.250,331.913,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-521.362,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-496.894,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-505.205,317.205,2006.136,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,317.200,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.324,331.917,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-501.244,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-497.265,323.135,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-505.205,323.138,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,329.071,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-505.204,329.062,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-490.750,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.244,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-501.250,314.357,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.471,334.757,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2001.041,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.750,314.016,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,323.640,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,333.265,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,342.893,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-516.892,314.175,2001.836,0.000,0.000,359.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-511.745,319.259,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-512.164,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-502.536,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-492.907,318.902,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-483.278,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-497.298,314.188,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.596,314.180,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-510.503,314.175,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-520.994,314.024,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-491.967,314.178,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-481.475,314.173,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19464,-489.377,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,329.071,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,329.070,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-489.376,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19446,-496.398,333.779,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,333.778,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,338.506,1999.418,325.500,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.687,338.506,1999.418,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.397,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,341.059,1998.749,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,341.059,1998.750,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,338.877,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,338.876,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,344.040,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,344.039,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.400,347.537,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.033,347.538,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.884,335.441,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.586,335.442,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.592,337.993,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.888,337.991,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.891,340.540,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.596,340.541,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.885,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.591,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,349.196,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.036,351.035,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.401,351.034,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,350.863,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-509.028,349.196,1997.425,325.497,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.437,349.196,1997.425,325.491,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19464,-510.026,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.025,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,334.755,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.626,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.559,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.468,352.557,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,352.557,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.556,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.738,2001.041,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.748,352.529,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.436,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19359,-488.410,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.409,285.642,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.408,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.394,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.984,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.854,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.853,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.852,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.251,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.250,285.642,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(18762,-504.367,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(970,-508.135,309.213,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-512.234,309.216,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-515.630,309.231,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-494.348,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-490.190,309.212,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-487.759,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2010.332,0.000,179.994,359.978);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-480.429,309.628,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-483.450,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-485.183,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.182,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,313.734,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,309.695,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.981,301.203,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-521.981,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.980,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,283.406,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-480.429,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19377,-469.927,290.367,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-521.981,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-469.927,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-468.744,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-468.744,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-471.581,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-477.519,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-469.927,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-469.927,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(970,-516.818,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19359,-471.091,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-478.390,286.542,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-474.742,286.538,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19377,-522.054,309.628,2003.503,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19379,-521.804,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-522.054,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.903,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-517.299,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-480.611,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,301.202,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-480.610,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,283.405,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-532.554,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-532.554,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-525.072,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-525.072,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,286.496,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-532.554,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-532.554,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19359,-524.174,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-531.679,286.537,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-527.971,286.536,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19395,-506.837,309.284,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.254,309.284,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.545,314.021,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-505.176,314.189,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-510.075,318.891,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(970,-485.663,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(1502,-521.905,294.505,2003.579,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-480.641,294.502,2003.578,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.484,314.325,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-506.050,309.289,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-494.860,309.286,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19172,-513.949,314.229,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING14", -1);
	objectid = CreateDynamicObject(19172,-508.878,314.239,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING11", -1);
	objectid = CreateDynamicObject(19172,-493.697,314.230,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING28", -1);
	objectid = CreateDynamicObject(19172,-488.295,314.232,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING30", -1);
	objectid = CreateDynamicObject(19459,-506.851,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-506.777,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(1492,-508.450,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-508.526,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-510.123,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-510.199,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-511.795,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-511.869,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-513.469,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19452,-501.222,290.527,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.222,300.160,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,314.020,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,323.650,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.184,327.217,2003.501,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(1492,-495.692,313.790,2000.162,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-497.287,314.184,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-492.385,318.899,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-495.619,318.292,2001.836,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-494.018,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-493.944,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-492.346,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-492.270,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-490.671,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-490.596,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-488.997,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-488.929,314.179,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-489.222,309.282,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19395,-495.645,309.282,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(18762,-505.825,319.372,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,326.922,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.833,326.923,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,319.434,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(1502,-505.127,322.368,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19353,-491.762,331.872,2006.168,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(1502,-497.295,322.369,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 3603, "bevmans01_la", "lasbevcit7", 0);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.485,331.878,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-466.037,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2009.530,0.000,180.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-466.044,297.016,2009.530,0.000,179.994,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-480.397,301.742,2005.334,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-480.399,301.740,2006.837,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-468.960,301.743,2005.334,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-468.957,301.743,2006.837,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.697,301.890,2005.334,0.000,0.000,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-466.069,301.889,2005.334,0.000,0.000,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-475.490,301.894,2006.837,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-465.865,301.894,2006.837,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.747,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.786,301.917,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.785,301.917,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.746,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(953,-474.304,300.665,2005.326,8.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19353,-531.632,297.121,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19353,-524.247,297.117,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19360,-501.199,285.668,2001.835,0.000,0.000,-90.199);
	SetDynamicObjectMaterial(objectid, 0, 9524, "blokmodb", "lombard_build5_3", -1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CreateDynamicObject(14394,-501.250,305.927,2000.889,0.000,0.000,90.000);
	CreateDynamicObject(14394,-501.250,308.159,2002.509,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,336.647,2002.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,339.197,2001.926,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,341.742,2001.256,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,344.316,2000.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-507.170,351.622,2000.587,0.000,0.000,180.000);
	CreateDynamicObject(14387,-495.300,351.640,2000.587,0.000,0.000,359.994);
	CreateDynamicObject(2173,-496.055,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,342.660,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,334.957,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,342.657,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.496,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-502.898,349.690,2001.583,0.000,0.000,180.000);
	CreateDynamicObject(1722,-497.350,340.934,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2205,-500.601,349.696,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(2173,-498.647,349.679,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(11245,-505.993,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.833,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-500.005,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.872,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(1722,-495.657,340.899,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.691,338.308,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.663,341.013,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.094,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.647,338.295,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.572,338.325,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.158,338.226,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-506.966,338.216,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.876,338.238,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.858,335.632,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.046,335.575,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.011,335.623,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-504.949,332.985,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.118,332.958,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.503,332.859,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-509.057,332.876,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.505,335.625,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.518,332.871,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.611,332.895,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.479,335.597,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.690,335.589,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.079,340.735,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.014,340.826,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.930,340.778,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-503.514,351.144,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1714,-501.346,351.187,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-501.292,296.928,2000.094,0.000,0.000,189.997);
	CreateDynamicObject(2008,-505.821,325.097,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2207,-502.128,295.188,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1239,-501.190,295.062,2000.477,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.894,291.384,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(1726,-511.944,298.979,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.924,301.009,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-511.902,289.332,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.449,289.346,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.454,298.984,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-490.440,301.019,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-490.416,291.381,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1808,-510.232,299.927,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-510.252,290.338,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.769,290.341,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.752,299.972,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-511.598,300.029,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-511.592,290.369,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.049,290.372,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.131,300.027,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(11245,-505.480,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.476,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-499.639,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.802,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(2206,-475.517,288.815,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(1714,-474.475,287.171,2003.584,0.000,0.000,200.000);
	CreateDynamicObject(14455,-469.067,287.296,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-533.556,291.635,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(1763,-472.888,291.811,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1763,-475.950,290.536,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1763,-475.067,293.049,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2614,-468.920,289.483,2007.767,0.000,0.000,270.000);
	CreateDynamicObject(2614,-480.441,289.441,2007.767,0.000,0.000,90.000);
	CreateDynamicObject(2206,-528.786,288.816,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2828,-475.322,288.976,2004.519,0.000,0.000,209.998);
	CreateDynamicObject(2357,-527.883,291.408,2003.979,0.000,0.000,90.000);
	CreateDynamicObject(1714,-527.895,287.085,2003.584,0.000,0.000,199.995);
	CreateDynamicObject(14455,-480.341,291.641,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-522.257,287.295,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(1715,-498.954,351.036,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-526.072,289.988,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-525.940,291.398,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-526.010,292.669,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-529.577,292.638,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.580,291.351,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.591,289.975,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-527.818,294.717,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(14662,-510.126,311.131,2001.984,0.000,0.000,0.000);
	CreateDynamicObject(14662,-514.033,311.130,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14629,-509.615,302.830,2011.079,0.000,0.000,90.000);
	CreateDynamicObject(1999,-506.763,314.989,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2009,-507.825,317.864,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2183,-510.899,328.456,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-492.803,326.635,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-490.949,328.561,2003.587,0.000,0.000,180.000);
	CreateDynamicObject(2608,-505.558,317.914,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(2161,-515.356,331.790,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2162,-512.247,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2163,-510.473,331.782,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2164,-514.021,331.776,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-513.372,314.407,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2197,-514.127,315.799,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1715,-493.541,325.932,2003.587,0.000,0.000,132.000);
	CreateDynamicObject(2008,-506.838,321.281,2003.587,0.000,0.000,359.994);
	CreateDynamicObject(3857,-509.070,319.359,2006.499,0.000,0.000,45.000);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(1722,-506.522,317.743,2003.584,0.000,0.000,50.000);
	CreateDynamicObject(1722,-507.459,315.569,2003.586,0.000,0.000,159.998);
	CreateDynamicObject(2009,-510.092,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2009,-512.293,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1999,-509.031,314.998,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1999,-511.317,314.997,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-509.278,318.411,2003.584,0.000,0.000,359.998);
	CreateDynamicObject(1722,-511.592,317.627,2003.584,0.000,0.000,349.994);
	CreateDynamicObject(2608,-505.559,316.032,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(3857,-509.222,326.920,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(3857,-517.054,326.933,2008.837,0.000,0.000,44.994);
	CreateDynamicObject(3857,-517.054,326.932,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(2197,-514.815,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(2197,-515.495,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-510.372,327.773,2003.584,0.000,0.000,349.991);
	CreateDynamicObject(1722,-508.373,327.274,2003.584,0.000,0.000,19.991);
	CreateDynamicObject(1722,-508.255,330.319,2003.584,0.000,0.000,149.989);
	CreateDynamicObject(1722,-510.285,330.260,2003.584,0.000,0.000,189.985);
	CreateDynamicObject(2162,-508.696,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-506.924,331.783,2003.584,0.000,0.000,359.994);
	CreateDynamicObject(2167,-506.005,331.782,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2737,-505.368,328.770,2004.922,0.000,0.000,270.000);
	CreateDynamicObject(2008,-508.200,325.098,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2008,-510.575,325.101,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(1722,-506.582,326.195,2003.584,0.000,0.000,169.989);
	CreateDynamicObject(1722,-508.925,326.795,2003.584,0.000,0.000,179.985);
	CreateDynamicObject(1722,-510.858,325.773,2003.584,0.000,0.000,199.983);
	CreateDynamicObject(2008,-509.216,321.290,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(2008,-511.651,321.295,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(1722,-511.217,320.765,2003.584,0.000,0.000,349.978);
	CreateDynamicObject(1722,-508.540,320.782,2003.584,0.000,0.000,9.974);
	CreateDynamicObject(1722,-505.908,319.966,2003.584,0.000,0.000,9.970);
	CreateDynamicObject(1715,-491.830,325.175,2003.587,0.000,0.000,183.997);
	CreateDynamicObject(1715,-489.360,327.700,2003.587,0.000,0.000,273.990);
	CreateDynamicObject(1715,-490.335,329.455,2003.587,0.000,0.000,321.988);
	CreateDynamicObject(1715,-491.915,329.925,2003.587,0.000,0.000,1.987);
	CreateDynamicObject(1715,-493.561,329.118,2003.587,0.000,0.000,49.983);
	CreateDynamicObject(1715,-494.268,327.569,2003.587,0.000,0.000,91.982);
	CreateDynamicObject(14455,-486.839,326.770,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-497.005,331.117,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(2332,-468.703,287.350,2004.047,0.000,0.000,270.000);
	CreateDynamicObject(2518,-507.915,309.865,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(2518,-509.937,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-511.819,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(14662,-493.548,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14662,-489.589,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(2518,-493.351,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-491.321,309.867,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-489.342,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2528,-512.723,318.299,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-511.057,318.303,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-509.382,318.315,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-507.736,318.329,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-506.044,318.338,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-496.430,318.316,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-494.751,318.324,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-493.079,318.320,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-491.421,318.313,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-489.777,318.307,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(18075,-501.157,323.420,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-497.575,341.566,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-504.621,341.554,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-492.025,323.225,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-512.109,323.089,2008.584,0.000,0.000,90.000);
	CreateDynamicObject(19171,-527.179,297.050,2005.137,90.000,0.000,0.000);
	CreateDynamicObject(19170,-528.677,297.050,2005.136,90.000,0.000,0.000);
	CreateDynamicObject(19169,-527.179,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(19168,-528.677,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(3858,-473.204,296.937,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(7616,-410.319,364.022,2003.693,0.000,0.000,0.000);
	CreateDynamicObject(758,-477.954,300.295,2004.840,0.000,0.000,260.000);
	CreateDynamicObject(746,-470.444,300.428,2004.855,346.000,0.000,210.000);
	CreateDynamicObject(953,-472.639,300.774,2005.411,8.998,0.000,340.000);
	CreateDynamicObject(1600,-478.188,299.345,2006.069,0.000,0.000,270.000);
	CreateDynamicObject(1600,-470.191,298.837,2005.401,0.000,0.000,110.000);
	CreateDynamicObject(1599,-475.460,300.450,2005.854,0.000,0.000,280.000);
	CreateDynamicObject(1599,-471.358,301.214,2006.522,0.000,0.000,109.997);
	CreateDynamicObject(1601,-474.458,298.011,2005.208,0.000,0.000,270.000);
	CreateDynamicObject(1601,-477.457,299.380,2005.208,0.000,0.000,110.000);
	CreateDynamicObject(1605,-474.368,300.782,2006.095,0.000,0.000,270.000);
	CreateDynamicObject(1606,-475.851,298.334,2006.951,0.000,0.000,90.000);
	CreateDynamicObject(10444,-473.067,301.691,2005.250,90.000,90.000,271.500);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(19166,-468.877,294.637,2005.412,0.000,270.000,0.000);
	CreateDynamicObject(2894,-474.508,288.769,2004.521,0.000,0.000,209.998);
	CreateDynamicObject(14455,-533.559,296.354,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-496.961,320.560,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-494.109,314.687,2005.256,0.000,0.000,0.000);
	CreateDynamicObject(14455,-486.799,316.217,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(19166,-486.665,323.611,2005.256,0.000,270.000,0.000);
	CreateDynamicObject(1704,-487.421,314.985,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1723,-492.858,317.161,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1704,-495.410,314.950,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1723,-490.826,318.122,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1723,-492.871,320.134,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(2001,-491.850,320.303,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2001,-522.320,293.429,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-476.157,292.867,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(2001,-479.968,293.325,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-472.820,292.955,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(1726,-504.550,317.268,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-504.566,326.921,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-497.916,328.834,2003.592,0.000,0.000,270.000);
	CreateDynamicObject(1726,-497.910,319.334,2003.592,0.000,0.000,270.000);

	// Bank interior
	CreateDynamicObject(19380, 1662.48743, -971.75378, 706.51898,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65344, -971.62341, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1658.31506, -973.28998, 701.63879,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65259, -974.96600, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1666.42468, -973.18341, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1668.09167, -971.52069, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.08789, -974.84570, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.57214, -974.94922, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.16797, -974.99103, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 700.80029,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 703.67731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 706.39130,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1662.84253, -976.63281, 699.00177,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.28625, -976.63782, 699.00378,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1278, 1664.43274, -976.71887, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.65210, -976.65454, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94739, -976.62915, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1660.03259, -976.68048, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.59045, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94824, -976.64899, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.55725, -969.82300, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.22937, -969.77875, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.33521, -968.05743, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.52039, -968.11981, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.40320, -967.14172, 701.63678,   90.00000, 0.00000, 55.00000);
	CreateDynamicObject(19454, 1659.46021, -967.08081, 701.63678,   90.00000, 0.00000, -55.00000);
	CreateDynamicObject(19380, 1662.42456, -962.27173, 706.51703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1662.37244, -966.14618, 701.82550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.29138, -966.14740, 707.60278,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1662.37500, -971.72113, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1662.43970, -963.05243, 700.00140,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1665.55212, -966.13098, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.22107, -964.33282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.22095, -960.95282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1660.89551, -964.39307, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1663.72046, -961.21100, 703.62903,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1659.23047, -962.72852, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1664.28015, -971.68073, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76160, -973.19739, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1661.23926, -971.67780, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76013, -970.15582, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1663.48096, -971.70142, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.75806, -972.42108, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1662.04016, -971.69843, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.76147, -970.98419, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18075, 1662.37048, -970.06836, 706.46777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1663.03015, -971.79346, 700.09070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1663.31348, -970.20789, 699.95898,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1727, 1659.96106, -970.93146, 699.95898,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1727, 1661.50989, -969.53607, 699.95898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1662.10669, -973.59125, 700.05157,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.05359, -973.11829, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.09033, -973.12018, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1657.44141, -970.53723, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.66931, -972.24451, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.64197, -974.36877, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.65918, -973.32990, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.06738, -972.08447, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.04700, -973.17102, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.07214, -974.26880, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2230, 1661.15503, -966.06073, 705.13647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1664.17798, -966.06073, 705.12848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.27222, -964.76300, 705.05292,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 705.05090,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 706.45093,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.36194, -966.43878, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2614, 1662.38245, -966.27612, 703.86688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1667.24573, -969.26605, 700.08978,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1663.83496, -966.64502, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.88159, -966.68427, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1661.58777, -966.17401, 700.06921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.45477, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.48077, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1734, 1662.79236, -971.69281, 706.42902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.21094, -957.63080, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.45776, -953.80481, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 701.81750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1658.35767, -962.00018, 700.06921,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1659.23047, -959.72552, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.90051, -958.06427, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1662.50964, -956.62701, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.89014, -956.62653, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1666.37830, -962.08569, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 1666.34082, -958.71960, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1664.09412, -957.83966, 700.08765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1664.97131, -964.99353, 700.08759,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1666.50635, -965.32239, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1666.49377, -957.60059, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1665.15479, -960.55115, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1665.19629, -963.32709, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 1667.07581, -961.43964, 702.49182,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19375, 1671.89587, -965.46210, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90527, -964.59674, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.89502, -958.07025, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90881, -957.41803, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 704.69342,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 705.48541,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2200, 1661.01624, -959.01569, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14596, 1652.60913, -957.46368, 693.38580,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 1662.70935, -963.04932, 688.40442,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.96338, -967.07098, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.71594, -970.60370, 688.41443,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.95447, -955.35168, 690.21381,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1663.30591, -958.41248, 690.21381,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79163, -962.90070, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.68274, -971.20868, 690.17383,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79285, -967.26093, 690.17578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1663.32397, -960.97894, 688.45349,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2206, 1661.45435, -961.97198, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -962.95599, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -963.92999, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -964.90399, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -965.87799, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1664.47815, -964.20013, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.46436, -962.77960, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.43201, -961.27374, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.47046, -965.76575, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1660.37378, -961.13538, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.36292, -962.68683, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.31726, -964.14752, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.34314, -965.74756, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1662.39783, -959.87054, 688.49377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.91016, -956.80499, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1662.68140, -956.75812, 690.17572,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1667.42212, -963.23273, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40771, -963.19348, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.42908, -971.07928, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40833, -968.83728, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1661.87451, -972.81970, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1657.31396, -969.12482, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.32751, -969.12482, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1663.76355, -971.30103, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19448, 1659.08435, -975.93622, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.84216, -975.93213, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1660.47583, -971.26636, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.30225, -970.88525, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.53259, -970.78687, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.15002, -975.86359, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1660.68494, -975.89722, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1662.12476, -968.67163, 688.49323,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.24158, -967.92981, 691.94348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.28015, -962.10773, 691.98151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1657.56604, -961.96283, 688.48071,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, 1657.30774, -969.11176, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.04810, -975.93469, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.78918, -975.92078, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.42566, -975.91620, 691.89569,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.43506, -966.83893, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.44019, -957.22589, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.97778, -956.75787, 691.09570,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19380, 1663.13403, -961.99518, 691.84302,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1663.08032, -967.48743, 691.84497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19174, 1659.05225, -967.67047, 690.17877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19175, 1665.68555, -968.27643, 690.17792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19172, 1665.68494, -961.49689, 690.19287,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2491, 1663.91870, -968.71417, 687.72620,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1952, 1663.73193, -968.88348, 689.70990,   55.00000, 91.00000, -149.00000);
	CreateDynamicObject(3077, 1662.46704, -971.14868, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2227, 1662.71179, -966.43073, 688.49408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3077, 1662.48022, -958.49329, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19448, 1660.61646, -956.79962, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.19775, -956.79871, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -965.45404, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.85797, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.26202, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.66602, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.07001, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.34546, -964.39307, 691.09570,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(1536, 1658.40564, -962.00049, 694.28979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 696.00647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1653.07410, -963.40411, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1650.81616, -964.45227, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1656.31763, -956.78729, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.04724, -961.51617, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.65161, -961.14771, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1657.63232, -961.26575, 682.60437,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -969.17828, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -965.98853, 684.23877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1661.24683, -965.98999, 684.43079,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 1658.17444, -965.90759, 684.55719,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 1660.10291, -965.30756, 682.63391,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1656.93030, -965.29083, 682.63568,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1657.45129, -965.35327, 682.69244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1657.67688, -964.35883, 682.58270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1653.20264, -961.37762, 684.42200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19174, 1659.57642, -961.59302, 684.41058,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.40674, -965.99768, 684.43280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1673.69470, -966.00177, 684.43481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1660.32056, -970.69043, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.82617, -970.70868, 682.59949,   -0.00400, 90.00000, 0.06000);
	CreateDynamicObject(19454, 1679.53491, -966.00079, 684.31482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.57483, -970.78229, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1662.68152, -967.01599, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.74622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1679.07483, -970.76233, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.24622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44250, -971.36652, 681.81091,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41479, -971.46899, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44470, -971.45221, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41272, -971.63385, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1662.78552, -966.65765, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1662.87305, -966.41022, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.14392, -966.97192, 681.81293,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1657.16846, -976.89392, 684.20892,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(19450, 1677.52844, -976.71588, 684.20892,   0.00000, 0.00000, -48.00000);
	CreateDynamicObject(19450, 1660.71936, -984.86407, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1673.97595, -984.69043, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1678.49524, -970.70831, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1673.69922, -978.93152, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.19775, -978.88202, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1659.90479, -978.85461, 682.59351,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1672.02271, -987.53003, 682.60748,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1662.30005, -987.55170, 682.60553,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(14413, 1660.40491, -980.61688, 680.50598,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.99084, -989.59222, 684.20892,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1678.70947, -989.42102, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1672.42834, -996.52631, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1665.20630, -996.52954, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1679.14075, -996.31305, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1680.95544, -992.56982, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1655.19873, -996.27271, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1653.71216, -993.49536, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1655.92603, -992.17084, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1678.53967, -993.41864, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.27588, -991.98706, 682.59949,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.10400, -991.85168, 682.60352,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17358, -970.22870, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -970.23053, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.94434, -970.22852, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -970.22650, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -970.23053, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17566, -967.54669, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.92444, -967.54138, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -967.54150, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -967.58447, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -967.54248, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -970.21252, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -967.54248, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1536, 1670.57324, -964.19226, 682.51721,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1666.59705, -966.03491, 682.51721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19176, 1667.35913, -996.42566, 683.93018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.52271, -1001.17371, 683.64270,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1669.21240, -1001.15674, 683.65869,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1668.90662, -998.10468, 685.32269,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1665.97058, -998.10272, 685.33069,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1673.25439, -998.16711, 682.72272,   33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1661.49133, -998.13934, 682.72272,   -33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1669.65576, -1001.24042, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.11609, -1001.24353, 683.02368,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.57666, -1001.25226, 682.69373,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.03662, -1001.24109, 682.36371,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.45862, -1001.24512, 682.18372,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.90051, -1001.25153, 681.89868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.30273, -1001.25348, 681.62872,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.72717, -1001.24298, 681.35870,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.09607, -1001.22498, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.65222, -1001.23010, 683.06873,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.20837, -1001.23523, 682.76868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.80115, -1001.22870, 682.51367,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.37744, -1001.22302, 682.24969,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.99268, -1001.23077, 681.99768,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.61279, -1001.22302, 681.75171,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.18933, -1001.24329, 681.47968,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.59705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1671.22705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99280, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99268, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1664.60999, -975.73181, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.24316, -975.72345, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 1663.99280, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1663.99268, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.59705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1671.22705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80054, -971.60742, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80249, -971.60938, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.95862, -971.66241, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.96082, -971.66351, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88403, -971.64197, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.77905, -971.68475, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88599, -971.64398, 685.42963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.78113, -971.68683, 685.40161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99792, -966.36957, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99988, -966.36761, 685.56262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74365, -966.35168, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74573, -966.34967, 685.32458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1667.31580, -982.70880, 682.61493,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1677.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1673.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1670.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1666.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1663.32422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.82422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1657.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.32007, -989.64728, 682.61139,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31274, -987.56097, 682.61340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.44006, -976.51031, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.43689, -974.11902, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15894, -968.47070, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15552, -971.62988, 682.60339,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.14941, -974.82123, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -968.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -971.61041, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -974.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31506, -994.88812, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1216, 1664.62183, -989.77948, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.23364, -989.68671, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1665.55750, -984.24152, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1669.06519, -981.03992, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1672.91052, -965.99878, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1660.46240, -966.02490, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 1660.72278, -973.38147, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1664.19324, -970.30255, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1660.73840, -970.30151, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1664.19141, -973.38068, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1726, 1654.57568, -993.88953, 682.60760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1656.18237, -990.42102, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1658.12073, -995.30109, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2126, 1656.79932, -993.20648, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.74890, -990.55658, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.64624, -995.29932, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.18701, -991.68616, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.21997, -993.80585, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1653.83386, -992.88977, 684.66608,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1676.75720, -993.20923, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1678.39221, -995.32458, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1676.31909, -990.28052, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1680.03442, -991.83075, 682.60760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1679.71533, -995.15234, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1679.85291, -990.56287, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.32520, -991.69720, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.31262, -993.74756, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19175, 1680.88062, -992.88879, 684.73419,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1659.82190, -992.22430, 682.69482,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1674.90588, -993.20551, 682.69482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1669.43213, -990.82062, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.22046, -990.83411, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1669.40662, -994.72894, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.17786, -994.67572, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1664.38135, -971.64264, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1667.46509, -971.67499, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1670.43530, -971.72980, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99182, -968.97778, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.07544, -970.30029, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.16272, -967.69873, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.68506, -970.26831, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(9131, 1662.74438, -968.89624, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74194, -968.89771, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.74121, -967.32971, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(2200, 1669.07825, -966.22864, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1664.39514, -966.23621, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1667.77917, -968.79425, 682.66248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.26538, -970.00128, 682.68542,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(1714, 1664.33838, -970.21857, 682.68542,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(1714, 1667.39148, -970.04071, 682.68542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.32922, -967.69934, 682.68542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1664.26782, -967.65887, 682.68542,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1669.55005, -977.65448, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.26160, -977.63495, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1670.90918, -988.73779, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 685.30310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 684.84308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1677.75940, -993.34680, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1667.43481, -993.30182, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26416, -993.34833, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.09070, -983.83752, 685.97498,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1672.86572, -983.84723, 685.97900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.54370, -974.38708, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.64111, -970.71228, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.31567, -974.47052, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26782, -974.66217, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.41858, -965.23651, 686.00500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1665.27612, -968.87659, 686.02502,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1654.17944, -961.91632, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1654.88867, -958.56860, 686.58557,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(4595, 1812.95972, -1071.76428, 686.49622,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4702, 1825.28564, -990.24133, 686.35730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4650, 1662.22815, -976.74054, 710.07861,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(14576, 1677.25659, -980.76630, 678.18488,   0.00000, 0.00000, 180.00000);
	//CreateDynamicObject(2634, 1677.76440, -987.50836, 671.68329,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1726, 1668.31262, -981.95514, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1666.28406, -983.28662, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.64502, -982.69666, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1668.86804, -982.63745, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71082, -987.56238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71082, -981.06238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71277, -984.27441, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.36914, -989.22498, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71277, -977.56238, 686.06409,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03259, -987.56348, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03223, -984.16211, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03125, -980.87512, 686.05811,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03784, -977.56500, 686.05609,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.37561, -975.89868, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2434, 1677.79968, -999.17450, 669.99207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2434, 1676.67566, -999.00781, 669.99408,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2435, 1677.96814, -998.04462, 669.99261,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 1676.67773, -998.07520, 669.99261,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2434, 1677.97009, -997.13013, 669.99408,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 1676.84619, -996.95288, 669.99213,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.19604, -989.16309, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1674.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1678.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1550, 1674.38489, -1003.73480, 670.24860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1674.75854, -1003.40149, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.24988, -1003.33649, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.41284, -1002.94733, 670.12360,   69.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.23401, -1002.45795, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.05933, -1002.70532, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.09033, -999.48700, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.35583, -999.07501, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.58569, -999.58228, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.20776, -989.49445, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.75024, -989.43054, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.48401, -989.88702, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.98157, -989.83002, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.27588, -990.34778, 670.05060,   -105.00000, 0.00000, 287.00000);
	CreateDynamicObject(1550, 1675.00476, -1001.74683, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.12549, -998.38446, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.97021, -997.99341, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.61206, -998.46313, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.05933, -996.55249, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.51147, -996.45801, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.94556, -996.01849, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.39294, -995.96844, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.98633, -996.65375, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.32813, -992.60712, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.28064, -993.05798, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.88989, -992.82013, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.92578, -993.28516, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.38379, -993.54877, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(19358, 1671.52832, -964.88507, 680.12793,   0.00000, 180.00000, -0.10000);
	CreateDynamicObject(19358, 1672.83105, -966.02869, 680.12793,   0.00000, 180.00000, -90.10000);
	CreateDynamicObject(18757, 1662.66113, -986.51813, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1662.66309, -984.56311, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.19666, -982.16919, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.23230, -987.33252, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89514, -984.62836, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89709, -986.50043, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.35864, -981.99762, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.48254, -987.14429, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1655.64185, -972.38470, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1679.05115, -972.45654, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1685.72986, -987.53156, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.71204, -981.58417, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.73914, -976.21100, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.75281, -970.91187, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.69458, -971.08954, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.62061, -976.40570, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.48389, -981.24969, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.47412, -986.92102, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1684.81921, -973.82593, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.89453, -978.63745, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.82043, -983.63324, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.46765, -974.24066, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.31140, -978.95215, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.28943, -984.09473, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1808, 1663.93970, -988.78314, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1667.30676, -977.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -980.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -982.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -984.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -987.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1670.81714, -976.99768, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1663.92041, -976.95392, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1667.43665, -982.60559, 685.90179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1664.73279, -976.47131, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.72839, -975.08966, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -975.04382, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -976.44196, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.02148, -989.06970, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.00928, -990.43817, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.61499, -990.44031, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.63940, -989.05945, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1660.72534, -992.72321, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1673.82996, -992.72601, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1677.05408, -992.97064, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1656.62134, -992.63593, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1676.31287, -958.97858, 680.32001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.38159, -964.48083, 682.59680,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.21570, -964.50897, 678.32642,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1674.84692, -958.82312, 676.11920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.46021, -964.52179, 674.11139,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1675.06433, -958.81409, 671.91522,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1886, 1662.88867, -972.32507, 685.98969,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1886, 1671.76123, -972.41028, 685.98969,   0.00000, 0.00000, -33.00000);

	// SAN interior
	CreateDynamicObject(19376, 247.74, 1783.13, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.24, 1783.14, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 247.74, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.23, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 250.44, 1784.44, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 245.63, 1779.94, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.91, 1780.12, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.03, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19404, 252.33, 1778.41, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 249.65, 1777.30, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19388, 246.66, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 252.38, 1778.39, 702.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 249.13, 1776.76, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(2165, 251.81, 1777.85, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 248.54, 1774.62, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 252.63, 1777.00, 700.09,   0.00, 0.00, 230.00);
	CreateDynamicObject(2007, 253.70, 1776.70, 700.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1961, 250.82, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1962, 251.55, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1960, 252.27, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 247.05, 1784.39, 700.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 250.03, 1784.39, 700.02,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 251.10, 1783.84, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1703, 246.23, 1779.16, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 247.52, 1779.46, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 251.39, 1782.50, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 251.42, 1782.51, 701.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 247.52, 1780.31, 701.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(2852, 252.61, 1782.49, 700.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 247.42, 1779.67, 700.58,   0.00, 0.00, 39.00);
	CreateDynamicObject(2011, 246.21, 1783.97, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2011, 253.24, 1779.07, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 245.88, 1775.81, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 245.63, 1770.30, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 250.13, 1773.12, 701.65,   0.00, 0.00, 90.40);
	CreateDynamicObject(19388, 252.80, 1774.23, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(1502, 252.29, 1773.69, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(1265, 250.63, 1775.49, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 250.35, 1774.87, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1778, 253.53, 1775.81, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2712, 253.57, 1775.32, 700.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.31, 1773.68, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 250.27, 1773.94, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.56, 1775.12, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 249.18, 1774.36, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 249.18, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 246.30, 1770.17, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 247.85, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(1705, 251.83, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2315, 248.60, 1769.55, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2855, 248.78, 1769.55, 700.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 249.67, 1769.36, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 249.91, 1769.75, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 250.08, 1769.65, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2817, 248.02, 1783.18, 700.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 254.81, 1780.65, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(14393, 255.23, 1759.95, 702.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 249.19, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(14391, 256.13, 1760.86, 701.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 257.11, 1767.64, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1705, 258.68, 1767.02, 700.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(2332, 259.63, 1764.36, 700.38,   0.00, 0.00, -90.00);
	CreateDynamicObject(638, 254.72, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(638, 258.07, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 256.40, 1765.18, 701.10,   0.00, 0.00, 80.00);
	CreateDynamicObject(1714, 257.11, 1762.81, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 254.18, 1762.77, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 251.40, 1759.68, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 250.95, 1759.82, 700.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 252.48, 1759.82, 702.46,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 249.79, 1759.59, 702.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 248.19, 1759.58, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1704, 254.31, 1753.90, 700.09,   0.00, 0.00, 135.00);
	CreateDynamicObject(1704, 256.22, 1754.49, 700.09,   0.00, 0.00, -135.00);
	CreateDynamicObject(1815, 254.42, 1754.73, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2247, 254.89, 1755.32, 700.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 253.33, 1754.95, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 256.59, 1754.91, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19466, 253.95, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 256.17, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 258.40, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19376, 259.00, 1763.90, 699.99,   0.00, 90.00, 0.00);
	CreateDynamicObject(1502, 254.53, 1768.96, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 262.61, 1772.18, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19450, 263.67, 1770.76, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 257.75, 1783.82, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 257.75, 1777.43, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 259.37, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 265.76, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 268.40, 1775.63, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 256.17, 1781.31, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(2606, 256.21, 1781.15, 702.56,   13.50, 0.00, 0.00);
	CreateDynamicObject(2165, 255.78, 1780.60, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 256.45, 1779.59, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2078, 255.16, 1777.82, 700.11,   0.00, 0.00, 90.00);
	CreateDynamicObject(2462, 257.00, 1776.04, 700.26,   0.00, 0.00, 180.00);
	CreateDynamicObject(19418, 257.25, 1776.20, 701.06,   90.00, 90.00, 90.00);
	CreateDynamicObject(19418, 256.93, 1776.10, 701.06,   90.00, 90.00, 324233.00);
	CreateDynamicObject(19418, 257.04, 1776.30, 701.06,   90.00, 90.00, 342.00);
	CreateDynamicObject(334, 257.00, 1776.08, 701.41,   90.00, 0.00, 90.00);
	CreateDynamicObject(2037, 257.28, 1776.14, 701.81,   0.00, 0.00, 180.00);
	CreateDynamicObject(348, 256.86, 1776.16, 701.77,   90.00, 0.00, 45.00);
	CreateDynamicObject(19376, 268.68, 1783.12, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 268.71, 1773.53, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 262.09, 1787.45, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 269.72, 1784.41, 701.65,   0.00, 0.00, 45.00);
	CreateDynamicObject(19450, 269.61, 1780.36, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 272.15, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 262.57, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 262.68, 1786.88, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1702, 261.93, 1772.37, 700.08,   0.00, 0.00, 225.00);
	CreateDynamicObject(2315, 259.75, 1772.14, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(2315, 266.10, 1777.95, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(1702, 268.89, 1779.58, 700.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(1702, 267.63, 1776.33, 700.08,   0.00, 0.00, 180.00);
	CreateDynamicObject(2251, 260.10, 1772.71, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 266.94, 1779.01, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 260.76, 1772.73, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.26, 1777.77, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.34, 1777.86, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.20, 1777.88, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 258.59, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 264.98, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2207, 265.49, 1785.14, 700.09,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 267.29, 1785.67, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(330, 266.98, 1784.24, 700.86,   90.00, 0.00, 90.00);
	CreateDynamicObject(2894, 265.87, 1785.33, 700.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 263.00, 1785.07, 701.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1962, 267.85, 1786.13, 701.86,   0.00, 0.00, -45.00);
	CreateDynamicObject(2185, 258.67, 1785.35, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 260.03, 1786.60, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1704, 260.02, 1783.92, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2078, 262.38, 1784.88, 700.11,   0.00, 0.00, -90.00);
	CreateDynamicObject(2007, 257.95, 1786.74, 700.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 257.81, 1776.73, 700.02,   0.00, 0.00, 45.00);
	CreateDynamicObject(2886, 257.82, 1778.48, 701.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 257.82, 1778.51, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(2886, 257.71, 1778.48, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(19378, 247.74, 1783.13, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 247.74, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.23, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.68, 1783.12, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.71, 1773.53, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.24, 1783.14, 703.43,   0.00, 90.00, 0.00);

	// Church interior (Credits: Lance Lanvins)
	CreateDynamicObject(4585, 2240.62451, -1363.48401, 1400.06104,   0.00000, 0.00000, 22.85999);
	CreateDynamicObject(19460, 2253.52002, -1367.50244, 1499.90222,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 2242.11890, -1381.53967, 1499.90222,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19460, 2235.60010, -1375.02026, 1499.90222,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19460, 2249.11133, -1383.25745, 1499.90222,   0.00000, 0.00000, 112.50000);
	CreateDynamicObject(19460, 2253.52002, -1377.12195, 1499.90222,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3935, 2236.75195, -1361.27576, 1499.90222,   0.00000, 0.00000, -178.07994);
	CreateDynamicObject(1569, 2248.18481, -1383.60034, 1499.85596,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(1569, 2250.90259, -1382.47168, 1499.85596,   0.00000, 0.00000, 202.50000);
	CreateDynamicObject(5426, 2242.53516, -1363.76294, 1480.00000,   0.00000, -38.00000, 0.28000);
	CreateDynamicObject(2808, 2235.74292, -1372.80530, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(948, 2251.08618, -1382.05518, 1499.90491,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(948, 2247.75195, -1383.41882, 1499.90491,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(5426, 2244.95605, -1373.11267, 1480.00000,   0.00000, -38.00000, -67.52000);
	CreateDynamicObject(5426, 2245.03931, -1369.02258, 1480.00000,   0.00000, -38.00000, -135.25996);
	CreateDynamicObject(19460, 2228.87573, -1368.22131, 1499.90222,   0.00000, 0.00000, 44.39999);
	CreateDynamicObject(19460, 2222.13696, -1361.43860, 1499.90222,   0.00000, 0.00000, 45.42000);
	CreateDynamicObject(19460, 2253.47510, -1358.03223, 1499.90222,   0.00000, 0.00000, 0.54000);
	CreateDynamicObject(19460, 2253.43726, -1348.77722, 1499.90222,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(5426, 2237.21387, -1367.78601, 1480.00000,   0.00000, -38.00000, -247.15994);
	CreateDynamicObject(19452, 2227.26855, -1361.54492, 1501.56897,   0.00000, 90.00000, -67.32000);
	CreateDynamicObject(19452, 2236.11206, -1357.86218, 1501.56897,   0.00000, 90.00000, -67.32000);
	CreateDynamicObject(19452, 2244.96045, -1354.17004, 1501.56897,   0.00000, 90.00000, -67.32000);
	CreateDynamicObject(19452, 2253.79395, -1350.46899, 1501.56897,   0.00000, 90.00000, -67.32000);
	CreateDynamicObject(19452, 2228.11426, -1362.99976, 1499.90002,   0.00000, 0.00000, -67.32000);
	CreateDynamicObject(19452, 2236.75806, -1359.40930, 1499.90002,   0.00000, 0.00000, -67.32000);
	CreateDynamicObject(19452, 2245.59302, -1355.73303, 1499.90002,   0.00000, 0.00000, -67.32000);
	CreateDynamicObject(19452, 2254.45288, -1352.02722, 1499.90002,   0.00000, 0.00000, -67.32000);
	CreateDynamicObject(9351, 2242.21802, -1353.90649, 1500.94861,   0.00000, 90.00000, -66.78003);
	CreateDynamicObject(9351, 2236.64771, -1356.29761, 1500.94861,   180.00000, 90.00000, -66.78000);
	CreateDynamicObject(11472, 2245.89063, -1354.67908, 1498.64001,   0.00000, 0.00000, 112.32000);
	CreateDynamicObject(19452, 2250.13403, -1351.80078, 1499.90002,   0.00000, 0.00000, 21.96000);
	CreateDynamicObject(19452, 2251.59302, -1351.17688, 1499.90002,   0.00000, 0.00000, 21.96000);
	CreateDynamicObject(19452, 2257.34033, -1352.73401, 1501.56897,   0.00000, 90.00000, -67.32000);
	CreateDynamicObject(11472, 2221.39795, -1364.98010, 1498.64001,   0.00000, 0.00000, 112.32000);
	CreateDynamicObject(19452, 2227.06665, -1361.50549, 1499.90002,   0.00000, 0.00000, 21.96000);
	CreateDynamicObject(19452, 2225.61060, -1362.09961, 1499.90002,   0.00000, 0.00000, 21.96000);
	CreateDynamicObject(19452, 2222.57227, -1367.25330, 1501.56897,   0.00000, 90.00000, -68.09998);
	CreateDynamicObject(8131, 2237.31934, -1355.89258, 1492.68005,   0.00000, 0.00000, 22.08001);
	CreateDynamicObject(8131, 2241.51440, -1354.10242, 1492.68005,   0.00000, 0.00000, 22.08001);
	CreateDynamicObject(8131, 2249.90723, -1353.56299, 1492.68005,   0.00000, 0.00000, 22.08001);
	CreateDynamicObject(8131, 2229.26147, -1362.20703, 1492.68005,   0.00000, 0.00000, 22.08001);
	CreateDynamicObject(970, 2229.82983, -1362.39954, 1502.20996,   0.00000, 0.00000, 23.16000);
	CreateDynamicObject(970, 2233.68555, -1360.80554, 1502.20996,   0.00000, 0.00000, 23.16000);
	CreateDynamicObject(970, 2248.96045, -1354.37988, 1502.20996,   0.00000, 0.00000, 23.16000);
	CreateDynamicObject(970, 2245.16064, -1356.00208, 1502.20996,   0.00000, 0.00000, 23.16000);
	CreateDynamicObject(970, 2241.36377, -1357.60522, 1502.20996,   0.00000, 0.00000, 22.74000);
	CreateDynamicObject(970, 2237.52588, -1359.20679, 1502.20996,   0.00000, 0.00000, 22.74000);
	CreateDynamicObject(3935, 2245.68799, -1357.58484, 1499.90222,   0.00000, 0.00000, -128.16000);
	CreateDynamicObject(2842, 2248.95898, -1381.66467, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2248.12402, -1382.00439, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2247.43896, -1380.31458, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2248.28223, -1379.97864, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2247.60449, -1378.30359, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2246.75293, -1378.62317, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2246.92163, -1376.61414, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2246.05811, -1376.92920, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2246.23999, -1374.94177, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2245.37524, -1375.24854, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2245.57520, -1373.29968, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2244.72363, -1373.63428, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2244.88794, -1371.60791, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2244.04004, -1371.96033, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2243.36011, -1370.28503, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2842, 2244.21143, -1369.93677, 1499.88232,   0.00000, 0.00000, -67.92000);
	CreateDynamicObject(2808, 2237.56909, -1372.04126, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2239.45557, -1371.26233, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2241.80200, -1370.28113, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2252.06860, -1366.06030, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2250.12207, -1366.85339, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2248.19629, -1367.63843, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2246.37036, -1368.40479, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2252.16455, -1369.29358, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2249.59790, -1370.36292, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2247.66528, -1371.16992, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2251.00879, -1369.77905, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2242.85938, -1373.10352, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2240.43188, -1370.85461, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2240.95459, -1373.89478, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2239.03369, -1374.68872, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2237.58594, -1375.27600, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2241.97974, -1376.69189, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2243.94189, -1375.89001, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2248.75513, -1373.90222, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(2808, 2250.44604, -1373.19568, 1500.51379,   0.00000, 0.00000, 22.50000);
	CreateDynamicObject(19452, 2234.89453, -1373.62744, 1504.40002,   0.00000, 90.00000, -135.00000);
	CreateDynamicObject(3399, 2241.83862, -1379.98010, 1502.21997,   0.00000, 0.00000, -225.60004);
	CreateDynamicObject(19452, 2242.55542, -1378.90796, 1499.90002,   0.00000, 0.00000, 44.21997);
	CreateDynamicObject(19452, 2242.55542, -1378.89465, 1502.73999,   0.00000, 0.00000, 44.22000);
	CreateDynamicObject(19452, 2237.99463, -1376.76721, 1499.66003,   90.00000, 90.00000, -135.00000);
	CreateDynamicObject(19452, 2253.24731, -1365.51624, 1504.40002,   0.00000, 90.00000, 181.37996);
	CreateDynamicObject(3399, 2252.66992, -1375.15027, 1502.21997,   0.00000, 0.00000, -268.49979);
	CreateDynamicObject(19452, 2251.78418, -1375.13330, 1501.50000,   0.00000, 0.00000, 181.38000);
	CreateDynamicObject(19452, 2251.78320, -1375.13330, 1502.77002,   0.00000, 0.00000, 181.38000);
	CreateDynamicObject(19452, 2253.34131, -1370.35596, 1499.66003,   90.00000, 90.00000, 181.38000);
	CreateDynamicObject(970, 2253.48120, -1360.72473, 1505.00000,   0.00000, 0.00000, 1.08000);
	CreateDynamicObject(970, 2251.44385, -1362.86182, 1505.00000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(970, 2251.52954, -1367.00073, 1505.00000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(970, 2251.61084, -1371.12036, 1505.00000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(970, 2231.25781, -1370.47766, 1505.00000,   0.00000, 0.00000, -135.06001);
	CreateDynamicObject(970, 2234.19800, -1370.48486, 1505.00000,   0.00000, 0.00000, -44.94001);
	CreateDynamicObject(970, 2237.08936, -1373.38696, 1505.00000,   0.00000, 0.00000, -44.94001);
	CreateDynamicObject(970, 2240.00391, -1376.29932, 1505.00000,   0.00000, 0.00000, -44.94001);
	CreateDynamicObject(11489, 2239.12427, -1354.35425, 1499.89697,   0.00000, 0.00000, 23.27999);
	CreateDynamicObject(19943, 2252.55371, -1362.74561, 1497.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19943, 2233.29980, -1371.56006, 1497.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(950, 2245.36230, -1381.10144, 1500.42590,   0.00000, 0.00000, -42.84000);
	CreateDynamicObject(950, 2243.95264, -1379.80945, 1500.42590,   0.00000, 0.00000, -42.84000);
	CreateDynamicObject(950, 2242.73999, -1378.60559, 1500.42590,   0.00000, 0.00000, -42.84000);
	CreateDynamicObject(950, 2251.32275, -1374.83643, 1500.42590,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(950, 2251.29028, -1376.61890, 1500.42590,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(950, 2251.34570, -1378.65515, 1500.42590,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(4585, 2241.85571, -1367.30566, 1607.52002,   180.00000, 0.00000, 22.86000);

	// Crack lab fixes
    CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Lance's PD precinct
    CreateDynamicObject(19375, 1176.07593, 2967.45361, 1005.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1176.10046, 2977.08643, 1005.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1165.60327, 2977.08789, 1005.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1165.65308, 2967.45776, 1005.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 1181.26221, 2977.08496, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1181.26465, 2967.54541, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1177.46033, 2962.68115, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1163.31531, 2962.71460, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1160.42664, 2967.42578, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1160.41748, 2976.96411, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1165.15625, 2981.73145, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1174.67639, 2981.72485, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1184.17712, 2981.71606, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1170.48901, 2957.86401, 1005.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 1172.72400, 2957.93140, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1168.03784, 2957.91675, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1170.08887, 2953.24390, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1169.56274, 2953.29077, 1005.08002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 1165.23718, 2970.07520, 1004.70001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1165.23718, 2970.07520, 1009.70001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19367, 1171.64258, 2970.08008, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 1174.82263, 2970.07056, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 1181.13208, 2970.08228, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1161.35913, 2970.04126, 1007.34003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19466, 1163.59998, 2970.04126, 1007.34003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19466, 1165.83850, 2970.04126, 1007.34003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19466, 1168.07800, 2970.04126, 1007.34003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19466, 1170.31750, 2970.04126, 1007.34003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14782, 1180.85974, 2978.05103, 1006.09998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 1171.98706, 2981.23315, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 1171.98779, 2974.85229, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19367, 1171.98804, 2971.72559, 1006.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1172.02026, 2974.10376, 1005.08759,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2308, 1171.50635, 2971.66748, 1005.05219,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2165, 1169.56494, 2970.62231, 1005.05219,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2173, 1167.65430, 2970.61377, 1005.05219,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2165, 1165.70471, 2970.62915, 1005.05219,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2605, 1163.28162, 2970.60107, 1005.45221,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2605, 1161.33521, 2970.59888, 1005.45221,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19459, 1160.87830, 2977.27051, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19367, 1170.47473, 2977.27441, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 1167.28467, 2977.26294, 1006.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1166.49780, 2977.22241, 1005.08759,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19927, 1160.92114, 2978.28662, 1005.06909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19929, 1160.91284, 2980.65259, 1005.06909,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2047, 1174.76099, 2969.98535, 1008.12482,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1178.59448, 2963.02026, 1005.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1177.79883, 2962.97876, 1005.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1176.90430, 2962.95288, 1005.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1175.99622, 2962.96875, 1005.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1168.38647, 2962.97925, 1005.72479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1172.41187, 2962.98267, 1005.72479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1171.82385, 2953.85596, 1005.72479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1168.83313, 2953.89648, 1005.72479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1180.60376, 2969.46118, 1005.70477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1180.57983, 2963.21875, 1005.70477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1174.97852, 2963.19727, 1005.70477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 1166.18311, 2963.29126, 1005.72583,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1368, 1163.67834, 2963.29004, 1005.72583,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1368, 1161.15735, 2963.29614, 1005.72583,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 1170.48901, 2957.86401, 1008.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1164.67249, 2967.45386, 1008.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1175.16931, 2967.48071, 1008.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1185.52429, 2967.10181, 1008.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1177.09534, 2976.88574, 1008.56097,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1183.30237, 2967.30371, 1008.56097,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1167.99890, 2977.00098, 1008.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1160.65125, 2976.96875, 1008.56097,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3383, 1171.03064, 2979.52710, 1005.00751,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2111, 1164.27051, 2980.22656, 1005.42810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2310, 1163.45593, 2981.12622, 1005.52777,   0.00000, 0.00000, 95.28001);
	CreateDynamicObject(2310, 1165.69580, 2981.12256, 1005.52777,   0.00000, 0.00000, 33.60000);
	CreateDynamicObject(2310, 1165.66040, 2979.60254, 1005.52777,   0.00000, 0.00000, -30.60000);
	CreateDynamicObject(2310, 1162.94324, 2979.87158, 1005.52777,   0.00000, 0.00000, -169.73999);
	CreateDynamicObject(2858, 1164.16418, 2980.44897, 1005.84161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11722, 1164.06812, 2979.98315, 1005.96167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1170.73547, 2980.51831, 1006.06183,   90.00000, 90.00000, 25.62000);
	CreateDynamicObject(2684, 1171.07263, 2979.43823, 1006.06183,   90.00000, 90.00000, 3.24000);
	CreateDynamicObject(2684, 1170.87488, 2978.35693, 1006.06183,   90.00000, 90.00000, -49.44001);
	CreateDynamicObject(2612, 1176.34570, 2981.56006, 1006.88849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 1174.42090, 2981.58496, 1006.88849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1178.58582, 2981.57178, 1006.88849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19273, 1173.49268, 2970.00049, 1006.60028,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19273, 1176.24414, 2970.13599, 1006.60028,   0.00000, 0.00000, -180.00000);

    // Boat and plane fuel stations
    CreateDynamicObject(3406, 144.091186, -1806.778930, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3406, 135.297317, -1806.451782, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3406, 143.764129, -1815.584838, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3406, 134.970138, -1815.256103, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3406, 134.636474, -1824.240844, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3406, 143.430358, -1824.567993, 0.094870, 0.000000, 0.000000, -2.128264);
    CreateDynamicObject(3465, 133.461380, -1815.096557, 3.389328, 0.000000, 0.000000, 88.062782);
    CreateDynamicObject(3465, 138.547210, -1815.308593, 3.389328, 0.000000, 0.000000, 88.062782);
    CreateDynamicObject(3465, 144.042800, -1815.534912, 3.389328, 0.000000, 0.000000, 88.062782);
    CreateDynamicObject(8240, 1439.162475, -2440.094482, 25.861806, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(13489, 1412.151367, -2412.396728, 18.037963, 0.000000, 0.000000, 90.000000);
}
LoadPickupsAndText()
{
	for (new i = 0; i < sizeof(g_aGraffitiData); i++)
	{ //18666
		GraffitiData[i][graffitiObject] = CreateDynamicObject(18666, g_aGraffitiData[i][graffitiPosX], g_aGraffitiData[i][graffitiPosY], g_aGraffitiData[i][graffitiPosZ], g_aGraffitiData[i][graffitiRotX], g_aGraffitiData[i][graffitiRotY], g_aGraffitiData[i][graffitiRotZ], -1, 0, -1, 5000.0);
	}
	for(new i = 0; i < sizeof(g_RepairShops); i ++)
	{
		CreateDynamicPickup(1239, 1, g_RepairShops[i][0], g_RepairShops[i][1], g_RepairShops[i][2]);
		CreateDynamic3DTextLabel("{ffff00}Repair Shop\n{ffffff}Cost: $500\n/enter to repair your vehicle.", COLOR_GREY, g_RepairShops[i][0], g_RepairShops[i][1], g_RepairShops[i][2], 20.0);
	}

	CreateDynamic3DTextLabel("Press Y to use weights", COLOR_GREY, 772.4859, 5.3462, 999.9802, 10.0);
	CreateDynamic3DTextLabel("Press Y to use treadmill", COLOR_GREY, 773.5106, -2.8392, 1000.1479, 10.0);

	//Token shop
	CreateDynamicPickup(1276, 1, 2264.5752,-1721.3241,13.5441);
	CreateDynamic3DTextLabel("{F7A763}Token Shop\n{ffffff}Use /tokenshop to exchange", COLOR_GREY, 2264.5752,-1721.3241,13.5441, 20.0);
 	// Materials pickup 1
	CreateDynamic3DTextLabel("Materials pickup 1\nCost: $150\n/getmats to begin.", COLOR_YELLOW, 1421.6913, -1318.4719, 13.5547, 20.0);
	CreateDynamic3DTextLabel("[Donator Locker]\n{FFFFFF}Type /viplocker to open the locker.\nType /vweapons to get full weapon set.\nType /getboombox to get free boombox.", COLOR_YELLOW, 1826.1705,-1307.7985,1131.7552, 10.0);
	CreateDynamicPickup(1239, 1, 1826.1705,-1307.7985,1131.7552);
	CreateDynamic3DTextLabel("Materials pickup 2\nCost: $150\n/getmats to begin.", COLOR_YELLOW, 2393.4885, -2008.5726, 13.3467, 20.0);
	// boat run
	CreateDynamic3DTextLabel("Marina Materiasl Depot\nCost: $150\n/getmats to begin.", COLOR_YELLOW, 714.5344, -1565.1694, 1.76807, 40.0);
	CreateDynamicPickup(1318, 1, 714.5344, -1565.1694, 1.7680);

	// plane run
	CreateDynamic3DTextLabel("LSI Materials Depot\nCost: $150\n/getmats to begin.", COLOR_YELLOW, 2112.3240,-2432.8130,13.5469, 40.0);
	CreateDynamicPickup(1318, 1, 2112.3240, -2432.8130, 13.5469);


	// Hospital exit
	CreateDynamic3DTextLabel("(( /exit ))", COLOR_GREY2, -2330.0376,111.4688,-5.3942, 20.0);
	CreateDynamic3DTextLabel("(( /exit ))", COLOR_GREY2, 1595.2653,-1688.3323,5.8906, 20.0, .worldid = 32);

	CreateDynamic3DTextLabel("County General\nCost: $2000\n/buyinsurance to spawn here.", COLOR_DOCTOR, -2323.3250,110.9966,-5.3942, 10.0, .worldid = HOSPITAL_COUNTY);
	CreateDynamicPickup(1240, 1, -2323.3250,110.9966,-5.3942, .worldid = HOSPITAL_COUNTY);

	CreateDynamic3DTextLabel("All Saints Hospital\nCost: $2000\n/buyinsurance to spawn here.", COLOR_DOCTOR, -2323.3250,110.9966,-5.3942, 10.0, .worldid = HOSPITAL_ALLSAINTS);
	CreateDynamicPickup(1240, 1, -2323.3250,110.9966,-5.3942, .worldid = HOSPITAL_ALLSAINTS);

	CreateDynamic3DTextLabel("Loading dock\n/load and pick a load\nto begin delivery.", COLOR_YELLOW, 1766.9261,-2048.9807,13.8355, 10.0);
	CreateDynamicPickup(1239, 1, 1766.9261,-2048.9807,13.8355);

	CreateDynamic3DTextLabel("Garbage Pickup\n/garbage\nto begin delivery.", COLOR_YELLOW, 2449.1167,-2090.1445,13.5469, 10.0);
	CreateDynamicPickup(1239, 1, 2449.1167,-2090.1445,13.5469);

	CreateDynamic3DTextLabel("Mechanic components\n/buycomps to purchase.", COLOR_YELLOW, 1952.1062,-1558.4139,13.7161, 10.0);
	CreateDynamicPickup(1239, 1, 1952.1062,-1558.4139,13.7161);

	CreateDynamic3DTextLabel("Drivers test\nCost: $500\n/taketest to begin.", COLOR_YELLOW, -2033.2953, -117.4508, 1035.1719, 10.0);
	CreateDynamicPickup(1239, 1, -2033.2953, -117.4508, 1035.1719);

	CreateDynamic3DTextLabel("Support Desk\n{FFFFFF}/help", 0x7DAEFFFF, 2250.9766, -1738.6564, 13.5469 +0.60, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100);
    CreateDynamicPickup(1239, 23, 2250.9766,-1738.6564,13.5469);
//	CreateDynamic3DTextLabel("DMV\n menu.", COLOR_YELLOW, -2026.7594,-114.4708,1035.1719, 10.0);
//	CreateDynamicPickup(1239, 1, -2026.7594,-114.4708,1035.1719);


	CreateDynamic3DTextLabel("Paintball arena\n/enter to play paintball!", COLOR_YELLOW, 1286.2870,-1349.8572,13.5689, 10.0);
	CreateDynamicPickup(1254, 1, 1286.2870,-1349.8572,13.5689);

	CreateDynamic3DTextLabel("Name changes\nCost: $7500/level\n/changename to request one.", COLOR_YELLOW, 636.2432,-108.6183,-78.9141, 10.0);
	CreateDynamicPickup(1239, 1, 636.2432,-108.6183,-78.9141);

	CreateDynamic3DTextLabel("Ticket Pay\n/paytickets to pay your vehicle tickets.", COLOR_YELLOW, 1186.8889,-1795.3860,13.5703, 10.0);
	CreateDynamicPickup(1239, 1, 1186.8889,-1795.3860,13.5703);

	CreateDynamic3DTextLabel("Drug smuggling\nCost: $500\n/smuggledrugs to begin smuggling.", COLOR_YELLOW, 52.0937, -292.2513, 1.7001, 10.0);
	CreateDynamicPickup(1279, 1, 52.0937, -292.2513, 1.7001);

	CreateDynamic3DTextLabel("Meth cookoff\nRequires ephedrine\n/cookmeth to begin cooking.", COLOR_YELLOW, 1.2179, 2.8095, 999.4284, 10.0, .interiorid = 2, .worldid = 10);
	CreateDynamicPickup(1577, 1, 1.2179, 2.8095, 999.4284, .interiorid = 2, .worldid = 10);

	//CreateDynamic3DTextLabel("Banking commands\n/bankhelp for more help.", COLOR_YELLOW, 1667.4260, -972.6691, 683.6873, 10.0);
	//CreateDynamicPickup(1239, 1, 1667.4260, -972.6691, 683.6873);

    CreateDynamic3DTextLabel("Banking help\nStand here to collect your pay.\n/bankhelp for a list of commands.", COLOR_YELLOW, 1667.4180, -972.4201, 683.6855, 10.0);
	gPaycheck = CreateDynamicPickup(1274, 1, 1667.4180, -972.4201, 683.6855);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw ephedrine\nStock: 100\n/buydrug ephedrine [amount]", COLOR_YELLOW, 323.7289, 1117.4187, 1083.8828, 10.0);
	CreateDynamicPickup(1577, 1, 323.7289, 1117.1797, 1083.8828);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana seeds\nStock: 100\n/buydrug seeds [amount]", COLOR_YELLOW, 321.8347, 1117.1797, 1083.8828, 10.0);
	CreateDynamicPickup(1578, 1, 321.8347, 1117.1797, 1083.8828);

	gCocaineText = CreateDynamic3DTextLabel("Cocaine\nStock: 100\n/buydrug cocaine [amount]", COLOR_YELLOW, 2342.7766, -1187.0839, 1027.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2342.7766, -1187.0839, 1027.9766);

	gVIPHealth = CreateDynamicPickup(1240, 1, 1811.2145,-1294.9788,1131.7552, .worldid = 7, .interiorid = 3);
	gVIPArmor = CreateDynamicPickup(1242, 1, 1813.5641,-1293.3140,1131.7552, .worldid = 7, .interiorid = 3);

//	CreateDynamic3DTextLabel("/clothes\nto change your skin.", COLOR_YELLOW, 1826.3379, -1308.8324, 1131.7552, 15.0);

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior
	// Hospital garage doors
	CreateDynamicObject(10149, 1150.004394, -1345.316284, 14.201147, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(10149, 2007.520874, -1408.116088, 16.992187, 0.000000, 0.000000, 0.000000);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1147.3577, -1345.3729, 13.6328, 10.0);
    CreateDynamicPickup(1240, 1, 1147.3577, -1345.3729, 13.6328);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2007.6256, -1410.2455, 16.9922, 10.0);
    CreateDynamicPickup(1240, 1, 2007.6256, -1410.2455, 16.9922);

    CreateDynamicPickup(1240, 1, 1161.1458,-1364.4767,26.6485); // allsaints roof
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1161.1458,-1364.4767,26.6485, 10.0);
	CreateDynamicPickup(1240, 1, 2070.4307,-1422.8580,48.3315); // county roof
	CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2070.4307,-1422.8580,48.331, 10.0);
	CreateDynamicPickup(1240, 1, 1510.7773,-2151.7322,13.7483); // fmd hq
	CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1510.7773,-2151.7322,13.7483, 10.0);
	CreateDynamicPickup(1240, 1, 1480.4819,-2166.9712,35.2578); // hq roof
	CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1480.4819,-2166.9712,35.2578, 10.0);
	CreateDynamicPickup(1240, 1, 1539.1060,-2167.2058,35.2578); // hq roof 2
	CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1539.1060,-2167.2058,35.2578, 10.0);

 	// Boat and plane fuel stations
    CreateDynamicPickup(1318, 1, 1439.7886, -2445.6777, 13.8547);
    CreateDynamic3DTextLabel("/refuel\nto refuel your aircraft.", COLOR_YELLOW, 1439.7886, -2445.6777, 13.8547, 50.0);
    CreateDynamic3DTextLabel("/refuel\nto refuel your boat.", COLOR_YELLOW, 133.461380, -1815.096557, 3.389328, 15.0);
    CreateDynamic3DTextLabel("/refuel\nto refuel your boat.", COLOR_YELLOW, 138.547210, -1815.308593, 3.389328, 15.0);
    CreateDynamic3DTextLabel("/refuel\nto refuel your boat.", COLOR_YELLOW, 144.042800, -1815.534912, 3.389328, 15.0);
	CreateDynamic3DTextLabel("/refuel\nto refuel your vehicle.", COLOR_YELLOW, 1944.9109,-1583.2743,13.7161, 15.0);
	CreateDynamic3DTextLabel("/refuel\nto refuel your vehicle.", COLOR_YELLOW, 1943.8992,-1588.6217,13.7161, 15.0);

	new string[430];
	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    format(string, sizeof(string), "{afafaf}[{33CCFF}%s{afafaf}]\nPress '{ff0000}y{afafaf}' to enter.", staticEntrances[i][eName]);

	    CreateDynamicPickup(19198, 1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
	    CreateDynamic3DTextLabel(string, COLOR_GREY1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], 10.0);

	    if(staticEntrances[i][eMapIcon])
	    {
	        CreateDynamicMapIcon(staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], staticEntrances[i][eMapIcon], 0);
		}
	}
	for (new i = 0; i < sizeof(arrBoothPositions); i ++) {
	    CreateDynamic3DTextLabel("[Shooting Range]\n{FFFFFF}Press 'F' to use this booth.", COLOR_AQUA, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	}

	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("ATM machine\n/atm to operate.", COLOR_YELLOW, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}
	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("/arrest\nto arrest a suspect.", COLOR_YELLOW, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}

	for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    CreateDynamic3DTextLabel("/mine\nto begin mining.", COLOR_GREEN, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2], 25.0);
	}

}
LoadJobs()
{
	for(new i=0; i<MAX_TRUCKDEPOTS; i++)
	{
	    new string2[300];
	    format(string2,sizeof(string2),"%s\nTrucker Level: %d\nType /viewjobs to view our available jobs\n(Trailer must be attached)", TruckDepotInfo[i][pTDName], TruckDepotInfo[i][pTDLevel]);
		CreateDynamic3DTextLabel(string2, COLOR_YELLOW, TruckDepotInfo[i][pTDPosX], TruckDepotInfo[i][pTDPosY], TruckDepotInfo[i][pTDPosZ], 20.0);
        CreateDynamicPickup(1239, 1, TruckDepotInfo[i][pTDPosX], TruckDepotInfo[i][pTDPosY], TruckDepotInfo[i][pTDPosZ], -1, -1, -1, 50.0);
		CreateDynamicMapIcon(TruckDepotInfo[i][pTDPosX], TruckDepotInfo[i][pTDPosY], TruckDepotInfo[i][pTDPosZ], 51, 1, -1, -1, -1, 100.0);
	}
	AddStaticVehicleEx(435,319.5821,-250.9220,2.2294,357.2850,1,1, 900); // Avery Construction Blueberry trailer 1
	AddStaticVehicleEx(591,314.5987,-250.5513,2.1733,356.2518,1,1, 900); // Avery Construction Blueberry trailer 2
	AddStaticVehicleEx(435,310.0218,-249.6448,2.1808,356.6158,1,1, 900); // Avery Construction Blueberry trailer 3
	AddStaticVehicleEx(584,-979.1545,-661.4039,33.1817,87.9626,1,1, 900); // Easter Bay Chemicals trailer 1
	AddStaticVehicleEx(584,-979.8892,-665.6310,33.1991,90.5658,1,1, 900); // Easter Bay Chemicals trailer 2
	AddStaticVehicleEx(584,-980.3480,-671.5728,33.2068,87.8949,1,1, 900); // Easter Bay Chemicals trailer 3
	AddStaticVehicleEx(584,-979.9216,-676.9645,33.1276,89.8774,1,1, 900); // Easter Bay Chemicals trailer 4
	AddStaticVehicleEx(584,-979.6974,-682.1031,33.0932,85.8944,1,1, 900); // Easter Bay Chemicals trailer 5
	AddStaticVehicleEx(584,33.3540,-2639.0078,41.6346,94.8614,1,1, 900); // 655 I27 Gas trailer 1
	AddStaticVehicleEx(584,32.6416,-2633.2031,41.6057,92.4579,1,1, 900); // 655 I27 Gas trailer 2
	AddStaticVehicleEx(591,-49.3037,-1146.4683,1.6992,70.1766,1,1, 900); // RS Haul Depot trailer 1
	AddStaticVehicleEx(435,-47.5986,-1141.5105,1.6990,70.2905,1,1, 900); // RS Haul Depot trailer 2
	AddStaticVehicleEx(435,-45.7761,-1136.0397,1.7377,73.3871,1,1, 900); // RS Haul Depot trailer 3
	AddStaticVehicleEx(591,1068.7600,-306.3128,74.5613,183.1051,1,1, 900); // Flint County Supplies trailer 1
	AddStaticVehicleEx(435,1063.5708,-306.5692,74.6479,184.7230,1,1, 900); // Flint County Supplies trailer 2
	AddStaticVehicleEx(435,1057.7675,-306.9809,74.6523,181.0287,1,1, 900); // Flint County Supplies trailer 3
	AddStaticVehicleEx(584,603.8568,1650.6251,8.1136,65.6812,1,1, 900); // XOOMER Gas LV trailer 1
	AddStaticVehicleEx(584,606.6456,1654.4178,8.2037,65.7580,1,1, 900); // XOOMER Gas LV trailer 2
	AddStaticVehicleEx(584,610.1509,1658.4144,8.1876,67.1304,1,1, 900); // XOOMER Gas LV trailer 3
	AddStaticVehicleEx(584,612.9406,1662.4725,8.0551,64.2496,1,1, 900); // XOOMER Gas LV trailer 4
	AddStaticVehicleEx(591,987.9532,2169.2319,11.4228,179.3533,1,1, 900); // Whitewood Storage LV trailer 1
	AddStaticVehicleEx(591,982.6127,2169.1516,11.5128,180.8438,1,1, 900); // Whitewood Storage LV trailer 2
	AddStaticVehicleEx(435,977.3423,2169.2952,11.4125,177.4042,1,1, 900); // Whitewood Storage LV trailer 3
	AddStaticVehicleEx(435,972.3075,2169.8831,11.5207,179.4609,1,1, 900); // Whitewood Storage LV trailer 4
	AddStaticVehicleEx(591,1043.3939,2069.3625,11.4604,358.2221,1,1, 900); // Whitewood Supplies LV trailer 1
	AddStaticVehicleEx(435,1049.7914,2069.2366,11.5107,358.0408,1,1, 900); // Whitewood Supplies LV trailer 2
	AddStaticVehicleEx(591,1118.0592,1850.4882,11.4802,359.8158,1,1, 900); // Blackfield Storage LV trailer 1
	AddStaticVehicleEx(591,1111.7456,1849.8954,11.4535,0.7010,1,1, 900); // Blackfield Storage LV trailer 2
	AddStaticVehicleEx(435,1106.3131,1850.1196,11.4203,1.9944,1,1, 900); // Blackfield Storage LV trailer 3
	AddStaticVehicleEx(435,1100.8234,1849.7410,11.4475,2.4704,1,1, 900); // Blackfield Storage LV trailer 4
	AddStaticVehicleEx(591,2818.0356,895.8503,10.6889,0.9139,1,1, 900); // Rockshore East Storage LV trailer 1
	AddStaticVehicleEx(435,2827.1558,895.7236,10.6762,358.9190,1,1, 900); // Rockshore East Storage LV trailer 2
	AddStaticVehicleEx(435,2855.0305,895.0613,10.7268,0.7555,1,1, 900); // Rockshore East Storage LV trailer 3
	AddStaticVehicleEx(591,1627.5481,698.2057,11.3795,359.0922,1,1, 900); // Reagan Bridge Supplies LV trailer 1
	AddStaticVehicleEx(591,1633.6772,698.4901,11.5368,0.3506,1,1, 900); // Reagan Bridge Supplies LV trailer 2
	AddStaticVehicleEx(435,1638.8907,698.6553,11.5471,357.0590,1,1, 900); // Reagan Bridge Supplies LV trailer 3
	AddStaticVehicleEx(435,1645.1907,698.6447,11.4338,359.3551,1,1, 900); // Reagan Bridge Supplies LV trailer 4
	AddStaticVehicleEx(591,1424.6705,972.9348,10.7373,358.4207,1,1, 900); // Pilson Storage LV trailer 1
	AddStaticVehicleEx(435,1452.7369,974.5452,10.9380,4.0059,1,1, 900); // Pilson Storage LV trailer 2
	AddStaticVehicleEx(435,1461.6356,974.7834,10.9479,0.6887,1,1, 900); // Pilson Storage LV trailer 3
	AddStaticVehicleEx(435,2681.3940,-2391.8535,14.2959,180.7496,1,1, 900); // LA Mast Storage trailer 1
	AddStaticVehicleEx(435,2687.3984,-2391.5864,14.2931,181.2188,1,1, 900); // LA Mast Storage trailer 2
	AddStaticVehicleEx(435,2456.3594,-2530.3059,14.2556,180.5988,1,1, 900); // LA Docks Storage trailer 1
	AddStaticVehicleEx(591,2462.9133,-2529.8430,14.2298,182.9115,1,1, 900); // LA Docks Storage trailer 2
	AddStaticVehicleEx(591,2194.4583,-2524.9080,14.2074,274.6493,1,1, 900); // LA Docks Supplies trailer 1
	AddStaticVehicleEx(435,2194.5979,-2519.5278,14.2046,272.4589,1,1, 900); // LA Docks Supplies trailer 2
	AddStaticVehicleEx(435,2194.8691,-2513.9407,14.1742,269.1824,1,1, 900); // LA Docks Supplies trailer 3
	AddStaticVehicleEx(435,90.9732,-154.1035,3.2141,269.2296,1,1, 900); // BBStorageTrailer1
	AddStaticVehicleEx(591,93.6355,-172.1506,3.2139,269.0442,1,1, 900); // BBStorageTrailer2
	AddStaticVehicleEx(435,166.5291,-44.4539,2.1764,270.6968,3,3, 900); // BBSuppliesTrailer1
	AddStaticVehicleEx(591,165.5262,-22.0428,2.2316,270.3246,1,1, 900); // BBSuppliesTrailer2
	AddStaticVehicleEx(435,167.4212,-14.2593,2.2437,270.4714,1,1, 900); // BBSuppliesTrailer3
	AddStaticVehicleEx(435,-42.0974,61.1927,3.7552,339.5275,1,1, 900); // BBFarmSuppliesTrailer1
	AddStaticVehicleEx(591,-33.6662,57.5084,3.6994,341.2177,1,1, 900); // BBFarmSuppliesTrailer2
	AddStaticVehicleEx(435,-465.3719,-81.2704,60.6783,263.7261,1,1, 900); // BBLumberTrailer1
	AddStaticVehicleEx(591,-464.9078,-75.3178,60.7492,261.5413,1,1, 900); // BBLumberTrailer2
	AddStaticVehicleEx(435,-557.6436,-501.5607,25.5801,1.4391,1,1, 900); // WestBasinTrailer1
	AddStaticVehicleEx(435,-529.6783,-502.6468,25.4099,0.1614,1,1, 900); // WestBasinTrailer2
	AddStaticVehicleEx(591,-520.4857,-501.9078,25.4411,0.4591,1,1, 900); // WestBasinTrailer3
	AddStaticVehicleEx(450,-1990.3916,-2425.5461,31.2098,136.7360,1,1, 900); // APStorageTrailer1
	AddStaticVehicleEx(450,-1995.0924,-2421.6448,31.2925,139.3503,1,1, 900); // APStorageTrailer2
	AddStaticVehicleEx(435,-1999.4061,-2418.6177,31.2859,138.2934,1,1, 900); // APStorageTrailer3
	AddStaticVehicleEx(591,-2007.1364,-2409.9373,31.2855,138.6345,1,1, 900); // APStorageTrailer4
	AddStaticVehicleEx(435,-1544.2321,-2742.5864,49.1988,170.4327,1,1, 900); // APSuppliesTraler1
	AddStaticVehicleEx(591,-1539.4315,-2743.2131,49.1947,172.8186,1,1, 900); // APSuppliesTrailer2
	AddStaticVehicleEx(435,-1544.2316,-2742.5872,49.1966,170.4324,1,1, 900); // APSuppliesTrailer3
	AddStaticVehicleEx(450,350.6689,850.2215,20.7841,31.4371,1,1, 900); // BCQuarryTrailer1
	AddStaticVehicleEx(450,346.4535,847.3931,20.7208,32.3695,1,1, 900); // BCQuarryTrailer2
	AddStaticVehicleEx(450,322.8606,856.0114,21.0697,296.7265,1,1, 900); // BCQuarryTrailer3
	AddStaticVehicleEx(450,317.3420,866.2861,20.9891,298.7624,1,1, 900); // BCQuarryTrailer4
	AddStaticVehicleEx(584,270.7217,1478.2170,11.7794,185.5293,1,1, 900); // BCOilTrailer1
	AddStaticVehicleEx(584,277.3219,1479.0850,11.7800,183.1001,1,1, 900); // BCOilTrailer2
	AddStaticVehicleEx(584,283.1945,1477.4412,11.8043,179.6807,1,1, 900); // BCOilTrailer3
	AddStaticVehicleEx(435,1461.5372,2328.6953,11.4165,89.0570,1,1, 900); // PilsonSuppliesTrailer1
	AddStaticVehicleEx(435,1461.6980,2333.6047,11.4616,89.4065,1,1, 900); // PilsonSuppliesTrailer2
	AddStaticVehicleEx(591,1462.7512,2339.3059,11.5106,89.8462,1,1, 900); // PilsonSuppliesTrailer3
	AddStaticVehicleEx(591,1463.3148,2344.8459,11.4258,89.3545,1,1, 900); // PilsonSuppliesTrailer4
	AddStaticVehicleEx(591,1639.5519,2340.2749,10.8013,89.3532,1,1, 900); // RedsandsTrailer1
	AddStaticVehicleEx(435,1638.8723,2312.3152,10.8606,91.9411,1,1, 900); // RedsandsTrailer2
	AddStaticVehicleEx(591,1639.0044,2302.9875,10.8445,89.3651,1,1, 900); // RedsandsTrailer3
	AddStaticVehicleEx(591,2566.3142,2790.9033,11.4746,180.2304,1,1, 900); // KACCTrailer1
	AddStaticVehicleEx(435,2557.8557,2790.4246,11.4802,179.1809,1,1, 900); // KACCTrailer2
	AddStaticVehicleEx(435,2549.8347,2789.7908,11.4267,179.5141,1,1, 900); // KACCTrailer3
	AddStaticVehicleEx(591,2541.3291,2791.1411,11.4830,180.7104,1,1, 900); // KACCTrailer4
	AddStaticVehicleEx(591,1362.9547,1157.1427,11.4807,0.4241,1,1, 900); // LVAFTrailer1
	AddStaticVehicleEx(435,1380.1807,1156.9369,11.4343,1.6050,1,1, 900); // LVAFTrailer2
	AddStaticVehicleEx(435,1092.2933,1278.5941,11.4802,90.5015,1,1, 900); // BlackfieldSTrailer1
	AddStaticVehicleEx(435,1092.6785,1272.4990,11.4791,92.3561,1,1, 900); // BlackfieldSTrailer2
	AddStaticVehicleEx(435,1092.4906,1266.0619,11.4799,92.3815,1,1, 900); // BlackfieldSTrailer3
	AddStaticVehicleEx(591,1093.4928,1259.1262,11.4872,90.5516,1,1, 900); // BlackfieldSTrailer4
	AddStaticVehicleEx(591,1092.8287,1254.6204,11.4678,90.7795,1,1, 900); // BlackfieldSTrailer5
	AddStaticVehicleEx(591,1092.5542,1248.2151,11.4794,90.7725,1,1, 900); // BlackfieldSTrailer6
	AddStaticVehicleEx(591,2524.0969,-2116.7256,14.2474,359.3434,1,1, 900); // TruckerCoonTrailer1
	AddStaticVehicleEx(435,2535.1987,-2132.6321,14.2063,0.1808,1,1, 900); // TruckerCoonTrailer2
	AddStaticVehicleEx(584,2618.7053,-2190.2366,14.7029,179.4331,1,1, 900); // LADockFuelTrailer1
	AddStaticVehicleEx(584,2613.2178,-2190.3564,14.7022,178.0155,1,1, 900); // LADockFuelTrailer2
	AddStaticVehicleEx(584,2607.7852,-2190.4541,14.6854,182.4359,1,1, 900); // LADockFuelTrailer3
	AddStaticVehicleEx(584,2602.1062,-2190.6284,14.7461,180.6021,1,1, 900); // LADockFuelTrailer4
	AddStaticVehicleEx(584,993.3430,-912.2853,43.3470,97.4511,1,1, 900); // BroadwayTrailer1
	AddStaticVehicleEx(584,995.4743,-927.3059,43.3791,96.3870,1,1, 900); // BroadwayTrailer2
	AddStaticVehicleEx(584,1918.1345,-1790.0989,14.5632,270.3278,1,1, 900); // IdlewoodTrailer1
	new string[320];
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
//	    format(string, sizeof(string), "/join\nto become a %s.", jobLocations[i][jobName]);
		format(string, sizeof string, "{00aa00}Job Point {FFFFFF}(ID: %i){00aa00}\n\nName: {FFFFFF}%s\n{00aa00}Type {FFFFFF}/join {00aa00}to obtain the job.", i, jobLocations[i][jobName]);
 	    //CreateDynamicPickup(1239, 1, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]);
	    CreateDynamic3DTextLabel(string, COLOR_YELLOW, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0, .testlos = 1, .streamdistance = 10.0);
	    CreateDynamicMapIcon(jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 56, 0, .style = MAPICON_GLOBAL);
		CreateActor(jobLocations[i][jobActor], jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], jobLocations[i][actorangle]);
	}
    	// Job vehicles
	pizzaVehicles[0] = AddStaticVehicleEx(448, 2097.8396, -1792.2556, 12.9978, 90.0000, 3, 6, 300); // bike 1
	pizzaVehicles[1] = AddStaticVehicleEx(448, 2097.8396, -1794.0065, 12.9978, 90.0000, 3, 6, 300); // bike 2
	pizzaVehicles[2] = AddStaticVehicleEx(448, 2097.8396, -1795.7574, 12.9978, 90.0000, 3, 6, 300); // bike 3
	pizzaVehicles[3] = AddStaticVehicleEx(448, 2097.8396, -1797.5083, 12.9978, 90.0000, 3, 6, 300); // bike 4
	pizzaVehicles[4] = AddStaticVehicleEx(448, 2097.8396, -1799.2592, 12.9978, 90.0000, 3, 6, 300); // bike 5
	pizzaVehicles[5] = AddStaticVehicleEx(448, 2097.8396, -1801.0101, 12.9978, 90.0000, 3, 6, 300); // bike 6

	courierVehicles[0] = AddStaticVehicleEx(414, 1787.5144, -2024.0779, 13.4865, -178.8600, 11, 11, 300); // mule
	courierVehicles[1] = AddStaticVehicleEx(414, 1792.6925, -2024.2432, 13.4865, -178.8600, 11, 11, 300); // mule
	courierVehicles[2] = AddStaticVehicleEx(414, 1797.8663, -2024.1129, 13.4865, -178.8600, 11, 11, 300); // mule
	courierVehicles[3] = AddStaticVehicleEx(498, 1807.7712, -2033.3390, 13.5128, 89.3400, 11, 11, 300); // boxville
	courierVehicles[4] = AddStaticVehicleEx(498, 1807.5942, -2038.8160, 13.5128, 89.3400, 11, 11, 300); // boxville
	courierVehicles[5] = AddStaticVehicleEx(498, 1807.5728, -2044.4001, 13.5128, 89.3400, 11, 11, 300); // boxville
	courierVehicles[6] = AddStaticVehicleEx(498, 1807.5408, -2049.9885, 13.5128, 89.3400, 11, 11, 300); // boxville

    sweeperVehicles[0] = AddStaticVehicleEx(574, 2187.6636, -1975.8738, 13.3012, 180.0000, 26, 26, 300); // sweeper 1
	sweeperVehicles[1] = AddStaticVehicleEx(574, 2184.9255, -1975.8738, 13.3029, 180.0000, 26, 26, 300); // sweeper 2
	sweeperVehicles[2] = AddStaticVehicleEx(574, 2181.8672, -1975.8738, 13.3005, 180.0000, 26, 26, 300); // sweeper 3
	sweeperVehicles[3] = AddStaticVehicleEx(574, 2179.0005, -1975.8738, 13.2679, 180.0000, 26, 26, 300); // sweeper 4

    taxiVehicles[0] = AddStaticVehicleEx(420, 1775.6141, -1860.0100, 13.2745, 269.2006, 6, 1, 300); // taxi 1
	taxiVehicles[1] = AddStaticVehicleEx(420, 1763.0121, -1860.0037, 13.2723, 271.2998, 6, 1, 300); // taxi 2
	taxiVehicles[2] = AddStaticVehicleEx(420, 1748.9358, -1859.9502, 13.2721, 270.3943, 6, 1, 300); // taxi 3
	taxiVehicles[3] = AddStaticVehicleEx(420, 1734.6754, -1859.9305, 13.2740, 270.5646, 6, 1, 300); // taxi 4

	garbageVehicles[0] = AddStaticVehicleEx(408,2450.0818,-2117.0393,14.0948,359.3405,-1,-1,300); // Garbage 1
	garbageVehicles[1] = AddStaticVehicleEx(408,2456.0059,-2117.0317,14.0978,359.8398,-1,-1,300); // Garbage 2
	garbageVehicles[2] = AddStaticVehicleEx(408,2461.9404,-2116.9187,14.1033,1.3363,-1,-1,300); // Garbage 3
	garbageVehicles[3] = AddStaticVehicleEx(408,2467.7634,-2116.7227,14.1018,0.6403,-1,-1,300); // Garbage 4
	garbageVehicles[4] = AddStaticVehicleEx(408,2474.4385,-2116.6218,14.0943,2.2394,-1,-1,300); // Garbage 5
	garbageVehicles[5] = AddStaticVehicleEx(408,2480.3513,-2116.6707,14.0944,359.6030,-1,-1,300); // Garbage 6

	// Driving test vehicles
    testVehicles[0] = AddStaticVehicleEx(445, 1280.5974, -1795.9840, 13.2733, 180.0000, 1, 1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(445, 1276.2882, -1796.0579, 13.2776,181.8796, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(445, 1271.8486, -1796.2174, 13.2694,182.5803, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(445, 1267.1357, -1796.2031, 13.2980,181.5889, 1, 1, 10); // test car 4
	testVehicles[4] = AddStaticVehicleEx(445, 1262.5736, -1796.3016, 13.3016,180.8420, 1, 1, 10); // test car 5
 	// Farmer
	FarmerVehicles[0] = AddStaticVehicle(532,-322.2967,-1350.3434,10.5241,270.7830,0,0); // pos 1
    FarmerVehicles[1] = AddStaticVehicle(532,-322.6843,-1340.8116,10.3685,272.3377,0,0); // pos 2
    FarmerVehicles[2] = AddStaticVehicle(532,-323.0977,-1331.4840,10.4024,271.4319,0,0); // pos 3
    FarmerVehicles[3] = AddStaticVehicle(532,-323.1684,-1322.5546,10.4159,270.6801,0,0); // pos 4
    FarmerVehicles[4] = AddStaticVehicle(532,-322.1127,-1358.8835,10.8958,269.5284,0,0); // pos 5
    FarmerVehicles[5] = AddStaticVehicle(478,-368.9034,-1360.9902,21.7564,93.9769,1,1); // car1
    FarmerVehicles[6] = AddStaticVehicle(478,-369.6640,-1364.9237,21.9200,82.5297,1,1); // car2
    FarmerVehicles[7] = AddStaticVehicle(478,-370.0378,-1368.0313,22.0123,79.5341,1,1); // car3
    FarmerVehicles[8] = AddStaticVehicle(478,-370.0262,-1371.3488,22.0194,84.8406,1,1); // 4
    FarmerVehicles[9] = AddStaticVehicle(478,-368.7458,-1359.5483,21.7232,86.1116,1,1); // car5

}
LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiis[24]s[128]iiiiiiiis[128]s[128]iiii", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, gDoubleXP, RobberyInfo[rTime], adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gacooldown, gNewsVault);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}

	SetDoubleXP(gDoubleXP);
}



RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);
}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        PlayerData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SendClientMessageEx(RobberyInfo[rRobbers][0], COLOR_AQUA, "You are now the leader of this bank heist!");
	            break;
			}
		}
	}

	PlayerData[playerid][pRobCash] = 0;
	PlayerData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}


ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SendClientMessageToAllEx(COLOR_AQUA, "Breaking News: The bank robbery is now finished. %s was stolen from the bank.", FormatNumber(RobberyInfo[rStolen]));
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 8;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}


ResetEvent()
{
	if(EventInfo[eReady] || EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pJoinedEvent])
	        {
	            PlayerData[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}


PreloadPlayerAnims(playerid)
{
    static const animLibraries[][] =
	{
		!"AIRPORT",    !"ATTRACTORS",   !"BAR", 		 !"BASEBALL",
		!"BD_FIRE",    !"BEACH",      	!"BENCHPRESS",   !"BF_INJECTION",
		!"BIKED", 	   !"BIKEH", 	    !"BIKELEAP", 	 !"BIKES",
		!"BIKEV", 	   !"BIKE_DBZ",     !"BMX", 		 !"BOMBER",
		!"BOX", 	   !"BSKTBALL",     !"BUDDY", 		 !"BUS",
		!"CAMERA", 	   !"CAR",          !"CARRY", 		 !"CAR_CHAT",
		!"CASINO",	   !"CHAINSAW",     !"CHOPPA", 		 !"CLOTHES",
		!"COACH", 	   !"COLT45",       !"COP_AMBIENT",  !"COP_DVBYZ",
		!"CRACK", 	   !"CRIB",         !"DAM_JUMP", 	 !"DANCING",
		!"DEALER", 	   !"DILDO",        !"DODGE", 	 	 !"DOZER",
		!"DRIVEBYS",   !"FAT",          !"FIGHT_B", 	 !"FIGHT_C",
		!"FIGHT_D",    !"FIGHT_E",      !"FINALE", 		 !"FINALE2",
		!"FLAME",      !"FLOWERS",      !"FOOD", 	 	 !"FREEWEIGHTS",
		!"GANGS",      !"GHANDS",       !"GHETTO_DB", 	 !"GOGGLES",
		!"GRAFFITI",   !"GRAVEYARD",    !"GRENADE", 	 !"GYMNASIUM",
		!"HAIRCUTS",   !"HEIST9",       !"INT_HOUSE", 	 !"INT_OFFICE",
		!"INT_SHOP",   !"JST_BUISNESS", !"KART", 		 !"KISSING",
		!"KNIFE",      !"LAPDAN1", 		!"LAPDAN2", 	 !"LAPDAN3",
		!"LOWRIDER",   !"MD_CHASE", 	!"MD_END", 	 	 !"MEDIC",
		!"MISC",       !"MTB", 			!"MUSCULAR", 	 !"NEVADA",
		!"ON_LOOKERS", !"OTB", 			!"PARACHUTE", 	 !"PARK",
		!"PAULNMAC",   !"PED", 			!"PLAYER_DVBYS", !"PLAYIDLES",
		!"POLICE",     !"POOL", 		!"POOR", 		 !"PYTHON",
		!"QUAD",       !"QUAD_DBZ", 	!"RAPPING", 	 !"RIFLE",
		!"RIOT",       !"ROB_BANK", 	!"ROCKET",	 	 !"RUSTLER",
		!"RYDER",      !"SCRATCHING", 	!"SHAMAL", 		 !"SHOP",
		!"SHOTGUN",    !"SILENCED", 	!"SKATE", 		 !"SMOKING",
		!"SNIPER",     !"SPRAYCAN", 	!"STRIP", 		 !"SUNBATHE",
		!"SWAT",       !"SWEET", 		!"SWIM", 		 !"SWORD",
		!"TANK",       !"TATTOOS",	 	!"TEC", 		 !"TRAIN",
		!"TRUCK",      !"UZI", 			!"VAN", 		 !"VENDING",
		!"VORTEX",     !"WAYFARER", 	!"WEAPONS", 	 !"WUZI",
		!"WOP",        !"GFUNK", 		!"RUNNINGMAN",   !"BLOWJOBZ",
		!"SAMP"
	};

	for(new i = 0; i < sizeof(animLibraries); i ++)
	{
	    ApplyAnimation(playerid, animLibraries[i], "null", 0.0, 0, 0, 0, 0, 0, 1);
	}
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		PlayerData[playerid][pLoopAnim] = 1;

		if(!PlayerData[playerid][pToggleTextdraws])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
	}
}

PlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pMiningTime] > 0 || PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pLootTime] > 0)
	{
	    return 0;
	}

	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = PlayerData[playerid][pTaxiPassenger],
		bill = PlayerData[playerid][pTaxiBill],
		earned = PlayerData[playerid][pTaxiBill],
		string[20];

	if(PlayerData[playerid][pLaborUpgrade] != 0)
	{
	    earned += percent(earned, PlayerData[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(passengerid, COLOR_AQUA, "This ride costed you {FF6347}$%i{33CCFF}.", bill);
	SendClientMessageEx(playerid, COLOR_AQUA, "You earned {00AA00}$%i{33CCFF} for this ride.", earned);

	format(string, sizeof(string), "~r~-$%i", bill);
	GameTextForPlayer(passengerid, string, 5000, 1);

	format(string, sizeof(string), "~g~+$%i", earned);
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(passengerid, -bill);
	AddToPaycheck(playerid, earned);

	PlayerData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiBill] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(PlayerData[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(PlayerData[playerid][pFreezeTimer]);
	}

    PlayerData[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z);

    TogglePlayerControllable(playerid, false);
    //GameTextForPlayer(playerid, "~w~Loading objects...", 3000, 3);
    ShowFreezeTextdraw(playerid);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (PlayerData[playerid][pJob] == job || PlayerData[playerid][pSecondJob] == job);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    PlayerData[playerid][pWeapons][i] = 0;
	    PlayerData[playerid][pTempWeapons][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}

	PlayerData[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	PlayerData[playerid][pACTime] = gettime() + 2;
	PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	PlayerData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	PlayerData[playerid][pAmmo][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerData[playerid][pACTime] = gettime() + 2;
	}
}
GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}

PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (PlayerData[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}

	if((temp) && PlayerData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}
SetPlayerWeapons(playerid)
{
	if(!PlayerData[playerid][pJoinedEvent] && PlayerData[playerid][pPaintball] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerData[playerid][pJailType] && !PlayerData[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    if(PlayerData[playerid][pWeapons][i] > 0)
		    {
		        if(i == 2 && PlayerData[playerid][pTazer])
		        {
		            GivePlayerWeaponEx(playerid, 23, true);
		            continue;
   	      	}

				if(16 <= PlayerData[playerid][pWeapons][i] <= 18)
			        GivePlayerWeapon(playerid, PlayerData[playerid][pWeapons][i], 1);
			    else
					GivePlayerWeapon(playerid, PlayerData[playerid][pWeapons][i], 29999);
			}
		}

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid)
			    {
			        case 22, 23, 25, 28..34:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}


SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	PlayerData[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid, type)
{
    if(PlayerData[playerid][pPaintball] == 0)
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}
	if(type == 1)
	{
		new rand = random(sizeof(paintballFSpawns));
		SetPlayerPos(playerid, paintballFSpawns[rand][0], paintballFSpawns[rand][1], paintballFSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballFSpawns[rand][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerData[playerid][pPaintball] = 1;
	}
	else if(type == 2)
	{
		SetPlayerPos(playerid, paintballTSpawns[pbNext][0], paintballTSpawns[pbNext][1], paintballTSpawns[pbNext][2]);
		SetPlayerFacingAngle(playerid, paintballTSpawns[pbNext][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

	    SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerData[playerid][pPaintball] = 2;
		PlayerData[playerid][pPaintballTeam] = pbNext;
		if(!pbNext)
		{
		    pbNext = 1;
		}
		else
		{
		    pbNext = 0;
		}
	}
	else if(type == 3)
	{
	    new rand = random(sizeof(paintballDSpawns));
		SetPlayerPos(playerid, paintballDSpawns[rand][0], paintballDSpawns[rand][1], paintballDSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballDSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[0], 0xFFFF0096);

	    SetPlayerHealth(playerid, 25.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 24, true);

		PlayerData[playerid][pPaintball] = 3;
	}
	else if(type == 4)
	{
		new rand = random(sizeof(paintballSSpawns));
		SetPlayerPos(playerid, paintballSSpawns[rand][0], paintballSSpawns[rand][1], paintballSSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballSSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[1], 0xFFFF0096);

	    SetPlayerHealth(playerid, 38.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 34, true);

		PlayerData[playerid][pPaintball] = 4;
	}
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	PlayerData[playerid][pJoinedEvent] = 1;
	PlayerData[playerid][pBandana] = 0;
	PlayerData[playerid][pDuty] = 0;

	if(EventInfo[eType] == 2)
	{
		PlayerData[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(PlayerData[playerid][pEventTeam] == RED_TEAM) {
		    GameTextForPlayer(playerid, "~w~You are on~n~~r~Red Team", 3000, 4);
		} else if(PlayerData[playerid][pEventTeam] == BLUE_TEAM) {
		    GameTextForPlayer(playerid, "~w~You are on~n~~b~Blue Team", 3000, 6);
		}
	}
	else
	{
	    PlayerData[playerid][pEventTeam] = 0;
	}

	for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GivePlayerWeaponEx(playerid, EventInfo[eWeapons][x], true);
        }
    }

	SetPlayerPos(playerid, EventInfo[ePosX][PlayerData[playerid][pEventTeam]], EventInfo[ePosY][PlayerData[playerid][pEventTeam]], EventInfo[ePosZ][PlayerData[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][PlayerData[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][PlayerData[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][PlayerData[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		GameTextForPlayer(playerid, EventInfo[eJoinText], 6000, 3);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "** Event rules: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}Allowed{FFFFFF}") : ("{FF6347}Not allowed{FFFFFF}"), (EventInfo[eQS]) ? ("{FFD700}Allowed{FFFFFF}") : ("{FF6347}Not allowed{FFFFFF}"), (EventInfo[eHeal]) ? ("{FFD700}Allowed{FFFFFF}") : ("{FF6347}Not allowed{FFFFFF}"));
	}

	return 1;
}

SetPlayerInHospital(playerid, time = 15, type = -1)
{
    PlayerData[playerid][pHospitalType] = (type == -1) ? (random(2) + 1) : (type);
    PlayerData[playerid][pHospitalTime] = time;
    PlayerData[playerid][pHospital] = 1;

    TogglePlayerControllable(playerid, 0);
 	GameTextForPlayer(playerid, "~w~Recovering...", 1500, 3);
    new rand = random( sizeof( SpawnBolnica ) );
	SetPlayerPos( playerid, SpawnBolnica[ rand ][ 0 ], SpawnBolnica[ rand ][ 1 ], SpawnBolnica[ rand ][ 2 ] );
	SetPlayerFacingAngle( playerid, 90.000 );
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
	//ApplyAnimation( playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0 );
    SetPlayerCameraPos(playerid, -2280.1226, 105.9459, -3.6012);
	SetPlayerCameraLookAt(playerid, -2279.2388, 105.4819, -3.9212);
}

SetPlayerInJail(playerid)
{

	if(PlayerData[playerid][pJailType] == 1) // OOC jail
	{
	    switch(random(4))
        {
            case 0:
			{
				SetPlayerPos(playerid, 227.4201, 110.0224, 999.0156);
			}
			case 1:
			{
				SetPlayerPos(playerid, 223.4770, 110.1765, 999.0156);
			}
			case 2:
			{
				SetPlayerPos(playerid, 219.4810, 110.4918, 999.0156);
			}
			case 3:
			{
				SetPlayerPos(playerid, 215.6093, 110.7171, 999.0156);
			}
		}

		SetPlayerFacingAngle(playerid, 0.0000);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 99999);
		SetCameraBehindPlayer(playerid);
	}
	else if(PlayerData[playerid][pJailType] == 2) // OOC prison
	{
	    SetPlayerPos(playerid, -1132.9137, 856.5791, 3.0703);
		SetPlayerFacingAngle(playerid, 36.0000);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 99999);
		SetCameraBehindPlayer(playerid);
	}
	else if(PlayerData[playerid][pJailType] == 3) // IC prison
	{
	    new index = random(sizeof(cellSpawns));

		SetFreezePos(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2]);
		SetPlayerFacingAngle(playerid, cellSpawns[index][3]);
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid, GetStaticEntranceWorld("Police department"));
		SetCameraBehindPlayer(playerid);
	}
}

NOPCheck(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gettime() - PlayerData[playerid][pLastUpdate] < 3 && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_PIZZAMAN))
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if((courierVehicles[0] <= vehicleid <= courierVehicles[6]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if((sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) && !PlayerHasJob(playerid, JOB_SWEEPER))
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	  	else if((garbageVehicles[0] <= vehicleid <= garbageVehicles[5]) && !PlayerHasJob(playerid, JOB_GARBAGEMAN))
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
		else if((testVehicles[0] <= vehicleid <= testVehicles[4]) && !PlayerData[playerid][pDrivingTest])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerData[playerid][pNOPTime]++;
	    }

	    else if(PlayerData[playerid][pNOPTime] > 0)
	    {
            PlayerData[playerid][pNOPTime]--;
	    }

	    if(PlayerData[playerid][pNOPTime] >= 15)
	    {
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s was kicked for suspected NOP hacks.", GetRPName(playerid));
	        Log_Write("log_cheat", "%s (uid: %i) was kicked for suspected NOP hacks.", GetPlayerNameEx(playerid), PlayerData[playerid][pID]);
         	KickPlayer(playerid);
	    }
	}
}

AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(PlayerData[playerid][pAFKPos][0] == x && PlayerData[playerid][pAFKPos][1] == y && PlayerData[playerid][pAFKPos][2] == z && PlayerData[playerid][pAFKPos][3] == cx && PlayerData[playerid][pAFKPos][4] == cy && PlayerData[playerid][pAFKPos][5] == cz)
	{
		PlayerData[playerid][pAFKTime]++;

	    if(!PlayerData[playerid][pAFK] && PlayerData[playerid][pAFKTime] >= 60)
	    {
		    //SendClientMessage(playerid, COLOR_LIGHTORANGE, "* You are now marked as {00AA00}Away from keyboard{F7A763} as you haven't moved in one minute.");
		//	SendClientMessage(playerid, COLOR_LIGHTRED, ">>{ffffff} You have been marked as AFK as you haven't moved in one minute.");
		    PlayerData[playerid][pAFK] = 1;
		}
	}
	else
	{
		if(PlayerData[playerid][pAFK])
		{
		    if(PlayerData[playerid][pAFKTime] < 120) {
		    	//SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "* You are no longer marked as Away from Keyboard after %i seconds.", PlayerData[playerid][pAFKTime]);
		    //	SendClientMessageEx(playerid, COLOR_LIGHTRED, ">>{ffffff} You are no longer marked as AFK after %i seconds.", PlayerData[playerid][pAFKTime]);
			} else {
			    //SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "* You are no longer marked as Away from Keyboard after %i minutes.", PlayerData[playerid][pAFKTime] / 60);
			//    SendClientMessageEx(playerid, COLOR_LIGHTRED, ">>{ffffff} You are no longer marked as AFK after %i minutes.", PlayerData[playerid][pAFKTime] / 60);
			}

			PlayerData[playerid][pAFK] = 0;
		}

		PlayerData[playerid][pAFKTime] = 0;
	}

	PlayerData[playerid][pAFKPos][0] = x;
	PlayerData[playerid][pAFKPos][1] = y;
	PlayerData[playerid][pAFKPos][2] = z;
	PlayerData[playerid][pAFKPos][3] = cx;
	PlayerData[playerid][pAFKPos][4] = cy;
	PlayerData[playerid][pAFKPos][5] = cz;
}

TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        ShowFreezeTextdraw(playerid);
        TogglePlayerControllable(playerid, 0);
	}
	new houseid;
	if((houseid = GetInsideHouse(playerid)) >= 0)
	{
		if(HouseInfo[houseid][hLights] == 1)
        {
            TextDrawHideForPlayer(playerid, houseLights);
        }
        else
        {
            TextDrawShowForPlayer(playerid, houseLights);
		}
	}
}

ShowLandsOnMap(playerid, enable)
{
	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists])
	    {
		    if(enable) {
 				GangZoneShowForPlayer(playerid, LandInfo[i][lGangZone], (LandInfo[i][lOwnerID] > 0) ? (0xFF6347AA) : (0x33CC33AA));
			} else {
		    	GangZoneHideForPlayer(playerid, LandInfo[i][lGangZone]);
			}
		}
	}

	PlayerData[playerid][pShowLands] = enable;
}
ShowTurfsOnMap(playerid, enable)
{
 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(IsLawEnforcement(TurfInfo[i][tCapturer]))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x8D8DFF00);
					else if(PlayerData[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerData[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerData[playerid][pShowTurfs] = enable;
}
/*ShowTurfsOnMap(playerid, enable)
{
 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(PlayerData[TurfInfo[i][tCapturer]][pGang] == -1 && IsLawEnforcement(TurfInfo[i][tCapturer]))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(PlayerData[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerData[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerData[playerid][pShowTurfs] = enable;
}*/

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(PlayerData[playerid][pZonePickups][i]);
        PlayerData[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(PlayerData[playerid][pZoneID]);

	PlayerData[playerid][pZoneID] = -1;
	PlayerData[playerid][pZoneCreation] = 0;
    PlayerData[playerid][pMinX] = 0.0;
    PlayerData[playerid][pMinY] = 0.0;
    PlayerData[playerid][pMaxX] = 0.0;
    PlayerData[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    PlayerData[playerid][pCookMeth] = 0;
	PlayerData[playerid][pCookGrams] = 0;
	PlayerData[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(PlayerData[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		PlayerData[playerid][pJoinedEvent] = 0;
	}
	if(PlayerData[playerid][pPaintball] > 0)
	{
	    ResetPlayerWeapons(playerid);
		PlayerData[playerid][pPaintball] = 0;
		PlayerData[playerid][pPaintballTeam] = -1;
	}
	if(PlayerData[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);

	    PlayerData[playerid][pHospital] = 0;
	    PlayerData[playerid][pHospitalTime] = 0;
	}
	if (PlayerData[playerid][pWorkout] != WORKOUT_NONE)
	{
		StopWorkout(playerid);
	}
	if(PlayerData[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(PlayerData[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(PlayerData[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(PlayerData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    PlayerData[PlayerData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    PlayerData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(PlayerData[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(PlayerData[playerid][pBombObject]);
	    PlayerData[playerid][pBombObject] = INVALID_OBJECT_ID;
	    PlayerData[playerid][pPlantedBomb] = 0;
	}
	if(PlayerData[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		PlayerData[playerid][pFreezeTimer] = -1;
	}
	if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		PlayerData[PlayerData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		PlayerData[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	foreach(new i : Player)
	{
	    if(PlayerData[i][pDraggedBy] == playerid)
	    {
	        PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
	}
	PlayerData[playerid][pWeight] = 0;
	PlayerData[playerid][pReps] = 0;
	PlayerData[playerid][pSpeedLevel] = 0;
	PlayerData[playerid][pDistanceRan] = 0;
	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);
	PlayerData[playerid][pInTurf] = -1;
	InsideShamal[playerid]= INVALID_VEHICLE_ID;
    totalDamages[playerid] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pAcceptedHelp] = 0;
	PlayerData[playerid][pMiningTime] = 0;
	PlayerData[playerid][pMiningRock] = 0;
	PlayerData[playerid][pChatstyle] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pSweeping] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pSweepTime] = 0;
	PlayerData[playerid][pSweepEarnings] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pTazedTime] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pTied] = 0;
	PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDelivered] = 0;
	PlayerData[playerid][pContractTaken] = INVALID_PLAYER_ID;
    PlayerData[playerid][pPoisonTime] = 0;
    PlayerData[playerid][pCapturingPoint] = -1;
    PlayerData[playerid][pCaptureTime] = 0;
    PlayerData[playerid][pCocaineTrunk] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pPreviewHouse] = -1;
    PlayerData[playerid][pPreviewType] = 0;
    PlayerData[playerid][pPreviewTime] = 0;
    PlayerData[playerid][pHHCheck] = 0;
 	CancelActiveCheckpoint(playerid);
 	CancelBreakIn(playerid);
	PlayerData[playerid][pRepairShop] = -1;
	PlayerData[playerid][pRepairTime] = 0;
 	RemovePlayerAttachedObject(playerid, 9);
}

CancelBreakIn(playerid)
{
	if(PlayerData[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	{
	    new
	        damage[4];

		SetVehicleParams(PlayerData[playerid][pLockBreak], VEHICLE_ALARM, false);
		GetVehicleDamageStatus(PlayerData[playerid][pLockBreak], damage[0], damage[1], damage[2], damage[3]);
		UpdateVehicleDamageStatus(PlayerData[playerid][pLockBreak], damage[0], 0, damage[2], damage[3]);

    	DestroyDynamic3DTextLabel(PlayerData[playerid][pLockText]);
		KillTimer(PlayerData[playerid][pLockTimer]);

		PlayerData[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
		PlayerData[playerid][pLockBreak] = INVALID_VEHICLE_ID;
	}
}

forward garbagewait(playerid);
public garbagewait(playerid)
{
	ShowPlayerFooter(playerid, "Garbage Loaded....~n~Proceed to the next checkpoint.");
    TogglePlayerControllable(playerid, 1);
}

CancelActiveCheckpoint(playerid)
{
    if(PlayerData[playerid][pDrivingTest])
	{
	    SetVehicleToRespawn(PlayerData[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	PlayerData[playerid][pPizzas] = 0;
	PlayerData[playerid][pSmuggleMats] = 0;
	PlayerData[playerid][pSmuggleDrugs] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pTestCP] = 0;
    PlayerData[playerid][pMiningRock] = 0;
    PlayerData[playerid][pShipment] = -1;
    PlayerData[playerid][pGarbage] = 0;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM "#TABLE_USERS" WHERE uid = %i", PlayerData[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}

PlayLoginMusic(playerid)
{
	PlayAudioStreamForPlayer(playerid, "https://audio.jukehost.co.uk/dWgjaXX2nxE9IrKAyu6zY9fc82YyBoIh.mp3");
}

AwardAchievement(playerid, const name[])
{
	for(new i = 0; i < sizeof(achievementInfo); i ++)
	{
	    if(!strcmp(achievementInfo[i][aName], name))
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT IGNORE INTO achievements VALUES(%i, '%e')", PlayerData[playerid][pID], name);
			mysql_tquery(connectionID, queryBuffer, "OnPlayerAchievementCheck", "is", playerid, name);
			return 1;
		}
	}

	return 0;
}


SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(PlayerData[playerid][pCustomTitle]) && strcmp(PlayerData[playerid][pCustomTitle], "None", true) != 0) && PlayerData[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerData[playerid][pCustomTColor] == -1 || PlayerData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, PlayerData[playerid][pCustomTitle], GetRPName(playerid));
	} else if(PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pAdminHide] == 0) {
	    format(string, sizeof(string), "{FF6347}%s{7DAEFF} %s", GetAdminRank(playerid), GetRPName(playerid));
    } else if(PlayerData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "{FF69B5}Former Admin{7DAEFF} %s", GetRPName(playerid));
	} else if(PlayerData[playerid][pDonator] > 0) {
		format(string, sizeof(string), "{D909D9}%s{7DAEFF} %s", GetVIPRank(PlayerData[playerid][pDonator]), GetRPName(playerid));
	} else if(PlayerData[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Player %s", GetRPName(playerid));
	} else if(PlayerData[playerid][pHours] > 250) {
	    format(string, sizeof(string), "P:RP Veteran: %s", GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!PlayerData[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SendClientMessageEx(i, COLOR_NEWBIE, "* %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SendClientMessageEx(i, COLOR_NEWBIE, "* %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_NEWBIE, "* %s: %s", string, text);
			}
		}
	}

	if(PlayerData[playerid][pAdmin] < HELPER)
	{
 		PlayerData[playerid][pLastNewbie] = gettime();
	}
}

ShowCopClothingMenu(playerid)
{
	new models[sizeof(copClothing)];

	for(new i = 0; i < sizeof(copClothing); i ++) {
	    models[i] = copClothing[i][cModel];
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_COPCLOTHING, "LEO Clothing", models, sizeof(models));
}

#if defined SERVER_INTRO

ShowServerIntro(playerid)
{
    if(!PlayerData[playerid][pWatchingIntro])
	{
		TogglePlayerSpectating(playerid, 1);
		TogglePlayerControllable(playerid, 0);
		PlayAudioStreamForPlayer(playerid, "https://music.prospectrp.net/gtav.mp3");
		SetPlayerVirtualWorld(playerid, playerid);

		SetPlayerPos(playerid, 155.3337, -1776.4384, 14.8978+5.0);
		SetPlayerCameraPos(playerid, 155.3337, -1776.4384, 14.8978);
		SetPlayerCameraLookAt(playerid, 156.2734, -1776.0850, 14.2128);
		InterpolateCameraLookAt(playerid, 156.2734, -1776.0850, 14.2128, 156.2713, -1776.0797, 14.7078, 5000, CAMERA_MOVE);

	    TextDrawShowForPlayer(playerid, introTextdraws[0]);
		TextDrawShowForPlayer(playerid, introTextdraws[1]);
		TextDrawShowForPlayer(playerid, introTextdraws[2]);

		SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 0);
		SetTimerEx("ShowLoginScreenTextdraw", 2400, false, "ii", playerid, 1);

		PlayerData[playerid][pWatchingIntro] = 1;
	}
}
#endif
/*ShowTutorialTextDraws(playerid)
{
		TextDrawShowForPlayer(playerid, Tutorial[0]);
		TextDrawShowForPlayer(playerid, Tutorial[1]);
		TextDrawShowForPlayer(playerid, Tutorial[2]);
}*/
HideTutorialTextDraws(playerid)
{
		TextDrawHideForPlayer(playerid, Tutorial[0]);
		TextDrawHideForPlayer(playerid, Tutorial[1]);
		TextDrawHideForPlayer(playerid, Tutorial[2]);
}

SellWeapon(playerid, targetid, weaponid, price = 0)
{
	new cost;

	switch(weaponid)
	{
	    case 2, 5..8, 10, 14, 15: cost = 50;
	    case 22: cost = 100;
	    case 23: cost = 150;
	    case 24: cost = 2000;
	    case 25: cost = 200;
	    case 28, 32: cost = 500;
	    case 29: cost = 1000;
	    case 30: cost = 3500;
	    case 31: cost = 4500;
	    case 33: cost = 1000;
	    case 27: cost = 7500;
	    case 34: cost = 7500;
	}

	if((weaponid == 27 || weaponid == 34) && PlayerData[playerid][pDonator] == 3)
	{
	    cost = 5000;
	}

    if(PlayerData[playerid][pMaterials] >= cost)
    {
		PlayerData[playerid][pMaterials] -= cost;
    	PlayerData[playerid][pLastSell] = gettime();
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(targetid == playerid)
		{
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have crafted yourself a {FF6347}%s{33CCFF}.", GetWeaponNameEx(weaponid));
		    ShowActionBubble(playerid, "* %s puts together some materials and crafts themselves a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
		}
		else
		{
			ShowActionBubble(playerid, "* %s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SendClientMessageEx(playerid, COLOR_AQUA, "You have sold %s a {FF6347}%s{33CCFF} for {00AA00}%s{33CCFF}.", GetRPName(targetid), GetWeaponNameEx(weaponid), FormatNumber(price));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has sold you a {FF6347}%s{33CCFF} for {00AA00}%s{33CCFF}.", GetRPName(playerid), GetWeaponNameEx(weaponid), FormatNumber(price));
			GivePlayerCash(playerid, price);
			GivePlayerCash(targetid, -price);
		}

        if(weaponid >= 22)
		{
			IncreaseJobSkill(playerid, JOB_WEAPONDEALER);
		}

		GivePlayerWeaponEx(targetid, weaponid);
		return 1;
	}
	else
	{
	    SendClientMessage(targetid, COLOR_GREY, "That player has ran out of materials.");
	}

	return 0;
}

Namechange(playerid, oldname[], newname[])
{
	if(!PlayerData[playerid][pUndercover][0])
	{
	    foreach(new i : House)
	    {
	        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
	        {
	            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
	            ReloadHouse(i);
	        }
	    }

		foreach(new i : Garage)
	    {
	        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
	        {
	            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
	            ReloadGarage(i);
	        }
	    }

     	foreach(new i : Business)
	    {
	        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
	        {
	            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
	            ReloadBusiness(i);
	        }
	    }

	    foreach(new i : Land)
	    {
	        if(LandInfo[i][lExists] && !strcmp(LandInfo[i][lOwner], oldname, false))
	        {
	            strcpy(LandInfo[i][lOwner], newname, MAX_PLAYER_NAME);
	            ReloadLand(i);
	        }
	    }

	    foreach(new i: Vehicle)
	    {
	        if(VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
	        {
	            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
	        }
	    }

		// Updating queries.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET username = '%s' WHERE uid = %i", newname, PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerData[playerid][pUsername], newname, MAX_PLAYER_NAME);

	    SetPlayerName(playerid, newname);
	    SavePlayerVariables(playerid);
	}
}
/*
IsAVIPVehicle(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case
		402,411,415,424,429,434,446,451,452,453,454,460,469,471,473,
		477,480,484,487,493,494,502,503,504,506,511,512,513,519,522,
		541,553,568,593,595,603: return 1;
	}
	return 0;
}
*/
IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

IsSurfVehicle(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 406, 408, 422, 430, 432, 433, 441, 444, 446, 452..455, 460, 464, 470, 472, 473, 476, 478, 481, 484, 490, 493, 509..513, 519, 520, 528, 537, 538, 543, 553, 554, 556, 557, 569, 570, 577, 578, 590, 592..595, 600, 605, 607, 608: return 1;
	}

    return 0;
}

VehicleHasDoors(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475, 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536, 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

IsEmergencyFaction(playerid)
{
	switch(GetFactionType(playerid))
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_MEDIC, FACTION_ARMY:
	        return 1;
	}

	return 0;
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_ARMY;
}
iscop(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_ARMY;
}

IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pFindPlayer] == playerid && PlayerData[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}

IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}
IsDoorModel(modelid)
{
    switch(modelid)
    {
        case 19802, 2930, 2911, 1567, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1523, 8957, 7891, 3109, 3089, 3061, 3037, 3029, 2970, 2949, 2948,2947, 2946, 2944, 977:
        {
            return 1;
        }
    }

	return 0;
}
IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(landArray); i ++)
		{
	    	if(!strcmp(landArray[i][fCategory], "Doors & Gates") && landArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pFaction] == factionid)
	    {
			SetPlayerFaction(i, -1);
	        SendClientMessageEx(i, COLOR_LIGHTRED, "The faction you were apart of has been deleted by an administrator.");
	    }
	}

	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	{
	    FactionDivisions[factionid][i][0] = 0;
	}


	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
		{
		    DestroyDynamic3DTextLabel(LockerInfo[i][lText]);
		    DestroyDynamicPickup(LockerInfo[i][lPickup]);
		    LockerInfo[i][lExists] = 0;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE factionid = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET faction = -1, factionrank = 0, factionleader = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}
GetTotalFactionPay(factionid)
{
	new amount;

    for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
    {
        amount += FactionInfo[factionid][fPaycheck][i];
	}

	return amount;
}
GetFactionType(playerid)
{
	if(PlayerData[playerid][pFaction] >= 0)
	{
	    return FactionInfo[PlayerData[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetPlayerFaction(playerid, factionid, rank = 0, leader = 0)
{
	// This needed its own function because I got fed up of having to put "[pFaction] = -1" everywhere.

	if(factionid == -1)
	{
	    if(PlayerData[playerid][pFaction] >= 0)
	    {
	        SetScriptSkin(playerid, 230);
	        ResetPlayerWeaponsEx(playerid);
	    }

	    PlayerData[playerid][pFaction] = -1;
	    PlayerData[playerid][pFactionRank] = 0;
	    PlayerData[playerid][pFactionLeader] = 0;
	    PlayerData[playerid][pDivision] = -1;
	    PlayerData[playerid][pDuty] = 0;
	    PlayerData[playerid][pTazer] = 0;
	}
	else if((0 <= factionid < MAX_FACTIONS) && FactionInfo[factionid][fType] != FACTION_NONE)
	{
	    if(PlayerData[playerid][pFaction] >= 0 && factionid != PlayerData[playerid][pFaction])
	    {
	        PlayerData[playerid][pDivision] = -1;
	    }

	    PlayerData[playerid][pFaction] = factionid;
	    PlayerData[playerid][pFactionRank] = rank;
	    PlayerData[playerid][pFactionLeader] = leader;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET faction = %i, factionrank = %i, division = %i, factionleader = %i WHERE uid = %i", PlayerData[playerid][pFaction], PlayerData[playerid][pFactionRank], PlayerData[playerid][pDivision], PlayerData[playerid][pFactionLeader], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
    strcpy(FactionInfo[factionid][fShortName], "None", 24);
    strcpy(FactionInfo[factionid][fMOTD], "None", 128);
	strcpy(FactionInfo[factionid][fLeader], "No-one", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocation(playerid, Float:radii)
{
	for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
	    if(LocationInfo[i][locExists] && IsPlayerInRangeOfPoint(playerid, radii, LocationInfo[i][locPosX], LocationInfo[i][locPosY], LocationInfo[i][locPosZ]) && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	    {
	        return i;
		}
	}

	return -1;
}
GetNearbyAtm(playerid)
{
	for (new i = 0; i < MAX_ATMS; i ++)
	{
	    if (ATM[i][atmExists] && IsPlayerNearPoint(playerid, 2.0, ATM[i][atmSpawn][0], ATM[i][atmSpawn][1], ATM[i][atmSpawn][2], ATM[i][atmInterior], ATM[i][atmWorld]))
	    {
	        return i;
		}
	}
	return -1;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 3.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLockers(factionid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
	    {
	        ReloadLocker(i);
		}
	}
}

ReloadLocker(lockerid)
{
	if(LockerInfo[lockerid][lExists])
	{
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), "%s\nLocker access\n/locker to access locker.", FactionInfo[LockerInfo[lockerid][lFaction]][fName]);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(LockerInfo[lockerid][lIcon], 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "No-one", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gWeed] = 0;
	GangInfo[gangid][gCocaine] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugWeed] = 0;
    GangInfo[gangid][gDrugCocaine] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    GangInfo[gangid][gWeaponRanks][GANGWEAPON_9MM] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SDPISTOL] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_DEAGLE] = 2;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SHOTGUN] = 1;
//	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SPAS12] = 4;
//	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SAWNOFF] = 4;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_TEC9] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_UZI] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_MP5] = 2;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_AK47] = 3;
//	GangInfo[gangid][gWeaponRanks][GANGWEAPON_M4] = 4;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_RIFLE] = 2;
//	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SNIPER] = 5;
//	GangInfo[gangid][gWeaponRanks][GANGWEAPON_MOLOTOV] = 5;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}

	return -1;
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount /= 2;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "%s\nOwned by: %s\nAvailable in %i hours.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "%s\nOwned by: %s\nAvailable to capture!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}
AddATMMachine(Float:x, Float:y, Float:z, Float:angle, interior, world)
{
	new
	    id = GetNextATMID();

	if (id != -1)
	{
	    ATM[id][atmExists] = 1;
	    ATM[id][atmSpawn][0] = x;
	    ATM[id][atmSpawn][1] = y;
	    ATM[id][atmSpawn][2] = z;
	    ATM[id][atmSpawn][3] = angle;
	    ATM[id][atmInterior] = interior;
	    ATM[id][atmWorld] = world;
	    ATM[id][atmObject] = INVALID_OBJECT_ID;
	    ATM[id][atmText] = INVALID_3DTEXT_ID;

	    UpdateATM(id);

		format(queryBuffer, sizeof(queryBuffer), "INSERT INTO rp_atms (atmInterior) VALUES(%i)", interior);
		mysql_tquery(connectionID, queryBuffer, "OnATMAdded", "i", id);
	}
	return id;
}
IsValidATMID(id)
{
	return (id >= 0 && id < MAX_ATMS) && ATM[id][atmExists];
}
GetNextATMID()
{
    for (new i = 0; i < MAX_ATMS; i ++)
	{
	    if (!ATM[i][atmExists])
	    {
	        return i;
		}
	}
	return -1;
}

SaveATM(id)
{
	static
	    queryString[192];

	if (!ATM[id][atmExists]) return 0;

	format(queryString, sizeof(queryString), "UPDATE rp_atms SET atmX = %.4f, atmY = %.4f, atmZ = %.4f, atmA = %.4f, atmInterior = %i, atmWorld = %i WHERE atmID = %i",
	    ATM[id][atmSpawn][0],
	    ATM[id][atmSpawn][1],
	    ATM[id][atmSpawn][2],
	    ATM[id][atmSpawn][3],
	    ATM[id][atmInterior],
	    ATM[id][atmWorld],
	    ATM[id][atmID]
	);
	return mysql_tquery(connectionID, queryString);
}

UpdateATM(id)
{
	if (!ATM[id][atmExists])
	{
	    return 0;
	}
	DestroyDynamic3DTextLabel(ATM[id][atmText]);
	DestroyDynamicObject(ATM[id][atmObject]);
	ATM[id][atmObject] = CreateDynamicObject(19324, ATM[id][atmSpawn][0], ATM[id][atmSpawn][1], ATM[id][atmSpawn][2], 0.0, 0.0, ATM[id][atmSpawn][3], ATM[id][atmWorld], ATM[id][atmInterior]);
	ATM[id][atmText] = CreateDynamic3DTextLabel("ATM machine\n/atm to operate.", COLOR_YELLOW, ATM[id][atmSpawn][0], ATM[id][atmSpawn][1], ATM[id][atmSpawn][2] + 0.9, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATM[id][atmWorld], ATM[id][atmInterior]);
	return 1;
}
ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128], color;

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);

	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}
	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "{%06x}%s Locker{C8C8C8}\nLevel %i ", color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLevel]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1239, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	}
}
GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerData[i][pGang] == gangid)
	    {
	        SendClientMessageEx(i, COLOR_LIGHTRED, "The gang you were apart of has been deleted by an administrator.");
	        PlayerData[i][pGang] = -1;
	        PlayerData[i][pGangRank] = 0;
	    }
	}
	for(new i = 0; i < MAX_GANG_CREWS; i ++)
	{
		GangCrews[gangid][i][0] = 0;
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gWeed] = 0;
	GangInfo[gangid][gCocaine] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugWeed] = 0;
    GangInfo[gangid][gDrugCocaine] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
	GangInfo[gangid][gAlliance] = -1;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

 	foreach(new i : Turf)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}
/*	foreach(new i : Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        new testquery[2500];
	        mysql_format(connectionID, testquery, sizeof(testquery), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[i][vID]);
			mysql_tquery(connectionID, testquery);

			DespawnVehicle(i, false);
	    }
	}
*/
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM crews WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

	foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 30;
	    case 2: return 60;
	    case 3: return 80;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetSpawnedVehicles(playerid)
{
	new count;

    foreach(new i: Vehicle)
	{
	    if(IsVehicleOwner(playerid, i))
	    {
	        count++;
		}
	}

	return count;
}

GetVehicleGarage(vehicleid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;
}

DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	return DestroyVehicle(vehicleid);
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	foreach(new i: Vehicle)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
}

IsPlayerAtVehicleDoor(playerid, vehicleid, type)
{
 	new
	    Float:vx,
	    Float:vy,
	    Float:vz,
	    Float:va,
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, z);

	if(type == DOOR_DRIVER) {
		GetVehicleRelativePos(vehicleid, vx, vy, vz, -x * 2, y, z);
	} else {
	    GetVehicleRelativePos(vehicleid, vx, vy, vz, x * 2, y, z);
	}

    GetPlayerFacingAngle(playerid, a);
    GetVehicleZAngle(vehicleid, va);

    if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
    {
        return 1;
	}

	return 0;
}

GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(IsValidVehicle(vehicleid))
	{
		new
			Float:pos[7];

		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
		GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
		GetVehicleZAngle(vehicleid, pos[6]);

		x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
		y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 		z = pos[5];
		return 1;
	}

	x = 0.0;
	y = 0.0;
	z = 0.0;

	return 0;
}

IsPlayerInRangeOfBoot(playerid, vehicleid)
{
	new
		Float:x,
		Float:y,
		Float:z;

	GetVehicleBoot(vehicleid, x, y, z);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z);
}

IsVehicleBeingPicked(vehicleid)
{
    foreach(new i : Player)
	{
	    if(PlayerData[i][pLockBreak] == vehicleid)
	    {
	        return 1;
		}
	}

	return 0;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == PlayerData[playerid][pID]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}
    SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
	ResyncVehicle(VehicleInfo[vehicleid][vID]);
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, mileage = '%f', health = '%f' WHERE id = %i", vehicleFuel[vehicleid], VehicleInfo[vehicleid][vMileage], health, VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vOwner], "Nobody", MAX_PLAYER_NAME);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}
    strcpy(VehicleInfo[vehicleid][vPlate], "XYZSR998");
    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vCorp] = -1;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vWeed] = 0;
	VehicleInfo[vehicleid][vCocaine] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vWeapons][3] = 0;
	VehicleInfo[vehicleid][vWeapons][4] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vVIP] = 0;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;
	VehicleInfo[vehicleid][vRank] = 0;
	VehicleInfo[vehicleid][vMileage] = 0.0;

	VehicleInfo[vehicleid][vForSale] = false;
	VehicleInfo[vehicleid][vForSalePrice] = 0;

	if(VehicleInfo[vehicleid][vForSaleLabel] != Text3D:INVALID_3DTEXT_ID) DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vForSaleLabel]);
	VehicleInfo[vehicleid][vForSaleLabel] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}

	ResetVehicleObjects(vehicleid);
}

IsPointInLand(landid, Float:x, Float:y)
{
	if((LandInfo[landid][lMinX] <= x <= LandInfo[landid][lMaxX]) && (LandInfo[landid][lMinY] <= y <= LandInfo[landid][lMaxY]))
	{
	    return 1;
	}

	return 0;
}


GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

HasLandPerms(playerid, landid)
{
	return IsLandOwner(playerid, landid) || PlayerData[playerid][pLandPerms] == landid;
}

IsLandOwner(playerid, landid)
{
	return (LandInfo[landid][lOwnerID] == PlayerData[playerid][pID]);
}

SetLandOwner(landid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, LandInfo[landid][lOwner], MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = PlayerData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET ownerid = %i, owner = '%s' WHERE id = %i", LandInfo[landid][lOwnerID], LandInfo[landid][lOwner], LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadLand(landid);
}

GetLandObjectID(sql_id)
{
    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
    {
        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == sql_id)
        {
            return i;
		}
	}

	return INVALID_OBJECT_ID;
}

GetLandObjectCapacity(level)
{
	switch(level)
	{
	    case 1: return 150;
	    case 2: return 200;
	    case 3: return 300;
	    case 4: return 500;
	    case 5: return 1000;
	}

	return 0;
}

RemoveLandObject(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteLandObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }
        DestroyDynamicObject(objectid);
	}
}

RemoveAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}



stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if(GraffitiData[id][graffitiDefault] != 0)
		{
 			if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
				DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		 	GraffitiData[id][graffitiObject] = CreateDynamicObject(GraffitiData[id][graffitiDefault], GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);
		}
		else
		{
			if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
			    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

			if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
				DestroyDynamicObject(GraffitiData[id][graffitiObject]);

	        //GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
			GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);
			new font[50];
			strcpy(font, GraffitiData[id][graffitiFont]);
			SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
			SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, font, 24, 1, GraffitiData[id][graffitiColor], 0, 0);
		}
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for(new i = 0; i < sizeof(g_aGraffitiData); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, g_aGraffitiData[i][graffitiPosX], g_aGraffitiData[i][graffitiPosY], g_aGraffitiData[i][graffitiPosZ]))
		{
			return i;
		}
	}
	return -1;
}
stock GetPlayerFreeVehicleId(playerid)
{
	for(new i; i < MAX_VEHICLES; ++i)
	{
		if(VehicleInfo[i][vModel] == 0) return i;
	}
	return -1;
}

stock SendQuestionToStaff(color, text[])
{
	foreach(new x: Player)
	{
		if(PlayerData[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}
stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{

	format(queryBuffer, sizeof(queryBuffer), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiDefault` = '%d', `graffitiColor` = '%d', `graffitiFont` = '%s', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
        GraffitiData[id][graffitiDefault],
		GraffitiData[id][graffitiColor],
  		SQL_ReturnEscaped(GraffitiData[id][graffitiFont]),
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, queryBuffer);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;
			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

forward Float:player_get_speed(playerid);
public Float:player_get_speed(playerid)
{
	new
		Float: fVelocity[3];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
	return floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
}


forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);
		cache_get_field_content(i, "graffitiFont", GraffitiData[i][graffitiFont], connectionID, 50);
    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
		GraffitiData[i][graffitiDefault] = cache_get_field_content_int(i, "graffitiDefault");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");

	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}


ReloadLandObject(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, labels);
	}
}

ReloadAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
	}
}

ReloadLand(landid)
{
	if(LandInfo[landid][lExists])
	{
	    DestroyDynamicArea(LandInfo[landid][lArea]);
	    GangZoneDestroy(LandInfo[landid][lGangZone]);
	    DestroyDynamic3DTextLabel(LandInfo[landid][lTextdraw]);

	    LandInfo[landid][lArea] = CreateDynamicRectangle(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lGangZone] = GangZoneCreateEx(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lTextdraw] = CreateDynamic3DTextLabel("Land", COLOR_GREY, LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ], 10.0);
		UpdateLandText(landid);
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pShowLands])
	        {
	            GangZoneShowForPlayer(i, LandInfo[landid][lGangZone], (LandInfo[landid][lOwnerID] > 0) ? (0xFF6347AA) : (0x33CC33AA));
			}
		}
	}
}

GetNearbyLand(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		foreach(new i : Land)
		{
			if(LandInfo[i][lExists] && IsPlayerInDynamicArea(playerid, LandInfo[i][lArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    if(!(PlayerData[playerid][pGang] >= 0 && PlayerData[playerid][pGang] == TurfInfo[turfid][tCapturedGang]))
	    {
		    amount = percent(amount, 10);

		    SendClientMessageEx(playerid, COLOR_AQUA, "You have been taxed a 10 percent fee of {FF6347}$%i{33CCFF} for selling in %s's turf.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
		    GivePlayerCash(playerid, -amount);

		    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
}

GetNearbyTurf(playerid)
{
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
  		foreach(new i : Turf)
		{
			if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}
	else if(TurfInfo[turfid][tCapturedGang] == -5)
	{
		return 0x8D8DFFAA;
	}

	return 0x000000AA;
}
/*public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(new i : Player)
	{
	    if(GetInTurfZone(playerid, i))
	    {
	        PlayerData[playerid][pBackup] = 1;
	        PlayerData[i][pBackup] = 1;
			SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerData[i][pGang]][gColor] & ~0xff) + 0xFF);
            SetPlayerMarkerForPlayer(playerid, i, (GangInfo[PlayerData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
	    }
	}
}*/
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	foreach(new i : Player)
	{
	    if(GetInTurfZone(playerid, i))
	    {
	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
	        SetPlayerMarkerForPlayer(playerid, i, GetPlayerColor(i));
		}
	}
	if(gettime() - PlayerData[playerid][pLastDeath] > 10 && (areaid == area_paintball[0] || areaid == area_paintball[1]))
	{
	    if(PlayerData[playerid][pPaintball] == 3 || PlayerData[playerid][pPaintball] == 4)
	    {
	    	SendClientMessage(playerid, COLOR_RED, "You were poisoned to death for leaving the arena. (Use /exit)");
	    	SetPlayerHealth(playerid, 0.0);
		}
	}
	return 1;
}
GetInTurfZone(playerid, target)
{
	foreach(new i : Turf)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]) && IsPlayerInDynamicArea(target, TurfInfo[i][tArea]) && PlayerData[playerid][pGang] != -1 && PlayerData[target][pGang] != -1) return true;
	}
	return false;
}
ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

     	foreach(new i : Player)
	    {
	        if(PlayerData[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	foreach(new i : Entrance)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	foreach(new i : Entrance)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = PlayerData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			new color;
			if(EntranceInfo[entranceid][eColor] == -256)
			{
                color = 0xC8C8C8FF;
				color = EntranceInfo[entranceid][eColor];
			}
			else
			{
			    color = EntranceInfo[entranceid][eColor];
			}
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "{ffff00}[{%06x}%s{ffff00}]{afafaf}\nOwner: %s\nPress 'y' to go inside.", color >>> 8, EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner]);
			}
			else
			{
			    if(EntranceInfo[entranceid][eType] == 1)
			        format(string, sizeof(string), "%s\n{AFAFAF}/offerduel to duel.", EntranceInfo[entranceid][eName]);
			    else if(EntranceInfo[entranceid][eType] == 2)
			        format(string, sizeof(string), "%s\n{AFAFAF}/repaircar to repair your vehicle.", EntranceInfo[entranceid][eName]);
			    else
		        	format(string, sizeof(string), "{ffff00}[{%06x}%s{ffff00}]\n{AFAFAF}Press 'y' to go inside.", color >>> 8, EntranceInfo[entranceid][eName]);
			}

			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == PlayerData[playerid][pID]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

    foreach(new i : Business)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
    foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = PlayerData[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

stock GetBusinessDefaultPickup(business)
{
	switch (BusinessInfo[business][bType]) {
		case BUSINESS_STORE: return 1274;
		case BUSINESS_CLOTHES: return 1275;
		case BUSINESS_RESTAURANT: return 19094;
		case BUSINESS_TOOLSHOP: return 1274;
		case BUSINESS_AGENCY: return 1274;
		case BUSINESS_BARCLUB:
		{
		    new rnd = random(4);
		    if (rnd == 0) return 1486;
		    if (rnd == 1) return 1543;
		    if (rnd == 2) return 1544;
		    if (rnd == 3) return 1951;
		}
		case BUSINESS_GYM: return 1318;
		default: return 1274;
	}
	return 1318;
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[300];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
        DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

        if(BusinessInfo[businessid][bOwnerID] == 0)
        {
			if(BusinessInfo[businessid][bType] == BUSINESS_GYM || BusinessInfo[businessid][bType] == BUSINESS_BARCLUB) {
				format(string, sizeof(string), "{AAC4E5}[BUSINESS] (ID %i)\n{FFFFFF}\nType: {AAC4E5}%s\n{FFFFFF}Entry Fee: $%i\nPrice: {FFFFFF}%s\n%s", businessid, bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bEntryFee], FormatNumber(BusinessInfo[businessid][bPrice]), (BusinessInfo[businessid][bLocked]) ? ("{FFFF00}Closed") : ("{00AA00}Opened"));
			}
			else{
			format(string, sizeof(string), "{AAC4E5}[BUSINESS] (ID %i)\n{FFFFFF}\nType: {AAC4E5}%s\nPrice: {FFFFFF}%s\n%s", businessid, bizInteriors[BusinessInfo[businessid][bType]][intType], FormatNumber(BusinessInfo[businessid][bPrice]), (BusinessInfo[businessid][bLocked]) ? ("{FFFF00}Closed") : ("{00AA00}Opened"));
			}
		}
		else
		{
			if (BusinessInfo[businessid][bType] == BUSINESS_GYM || BusinessInfo[businessid][bType] == BUSINESS_BARCLUB) {
			format(string, sizeof(string), "{AAC4E5}[BUSINESS] (ID %i)\n{FFFFFF}Owner: %s\nType: {AAC4E5}%s\n{FFFFFF}Entry Fee: $%i\n%s", businessid, BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bEntryFee], (BusinessInfo[businessid][bLocked]) ? ("{FFFF00}Closed") : ("{00AA00}Opened"));
			}
			else {
		    format(string, sizeof(string), "{AAC4E5}[BUSINESS] (ID %i)\n{FFFFFF}Owner: %s\nType: {AAC4E5}%s\n%s", businessid, BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], (BusinessInfo[businessid][bLocked]) ? ("{FFFF00}Closed") : ("{00AA00}Opened"));
			}
		}

		BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, COLOR_GREY1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.4, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bOutsideInt], -1 , 10.0);
	    BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1272, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

	    //BusinessInfo[businessid][bPickup] = CreateDynamicPickup(GetBusinessDefaultPickup(businessid), 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 17, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GUNSHOP: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_CLOTHES: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_RESTAURANT: 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GYM: 			BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_AGENCY: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 58, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_BARCLUB: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 49, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_TOOLSHOP:     BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 11, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		}
	}
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == PlayerData[playerid][pID]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == PlayerData[playerid][pID]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "[{ADADAD}Garage{54878D}]\nPrice: {00AA00}%s{54878D}\nSize: %s\nCapacity: %i cars", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gType] + 1);
		}
		else
		{
		    format(string, sizeof(string), "[{ADADAD}Garage{54878D}]\nOwner: %s\nSize: %s\nCapacity: %i cars", GarageInfo[garageid][gOwner], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gType] + 1);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0x54878DFF, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = PlayerData[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}

HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || PlayerData[playerid][pFurniturePerms] == houseid;
}
IsValidFurnitureID(id)
{
	return (id >= 0 && id < MAX_FURNITURE) && Furniture[id][fExists];
}
IsValidHouseID(id)
{
	return (id >= 0 && id < MAX_HOUSES) && HouseInfo[id][hExists];
}
IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == PlayerData[playerid][pID]);
}

PreviewFurniture(playerid, index)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 2.0 * floatsin(-angle, degrees);
	y += 2.0 * floatcos(-angle, degrees);

	if (IsValidDynamicObject(gPreviewFurniture[playerid]))
	{
	    DestroyDynamicObject(gPreviewFurniture[playerid]);
	}
	gPreviewFurniture[playerid] = CreateDynamicObject(g_FurnitureList[index][e_ModelID], x, y, z, 0.0, 0.0, angle, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    PlayerData[playerid][pPreviewIndex] = index;
	EditDynamicObjectEx(playerid, EDIT_TYPE_PREVIEW, gPreviewFurniture[playerid]);
	//EditDynamicObjectEx(playerid, EDIT_TYPE_FURNITURE, Furniture[furniture][fObject], furniture);
	SendInfoMessage(playerid, "Press ESC to cancel. Click the disk icon to save changes.");
	return 1;
}


ShowFurniturePreviewer(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerData[playerid][pPreviewIndex] = -1;

	for(new i = 0; i < sizeof(g_FurnitureList); i ++)
	{
	    if (g_FurnitureList[i][e_ModelCategory] == PlayerData[playerid][pSelected])
	    {
	        if(PlayerData[playerid][pPreviewIndex] == -1)
	        {
	            PlayerData[playerid][pPreviewIndex] = i;
			}

	        models[index++] = g_FurnitureList[i][e_ModelID];
	    }
	}
	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_FURNITURE, "House Furniture", models, index);
	return 0;
}

UpdateFurniture(furniture)
{
	if (!IsValidFurnitureID(furniture))
	{
	    return 0;
	}
	DestroyDynamicObject(Furniture[furniture][fObject]);
	Furniture[furniture][fObject] = CreateDynamicObject(Furniture[furniture][fModel], Furniture[furniture][fSpawn][0], Furniture[furniture][fSpawn][1], Furniture[furniture][fSpawn][2], Furniture[furniture][fSpawn][3], Furniture[furniture][fSpawn][4], Furniture[furniture][fSpawn][5], Furniture[furniture][fWorld], Furniture[furniture][fInterior]);
	Streamer_SetExtraInt(Furniture[furniture][fObject], E_OBJECT_EXTRA_ID, Furniture[furniture][fID]);
	for(new i = 0; i != 3; i ++)
	{
		if(MaterialIDs[Furniture[furniture][fMaterial][i]][ModelID] != 0)
		{
		    SetDynamicObjectMaterial(Furniture[furniture][fObject], i, MaterialIDs[Furniture[furniture][fMaterial][i]][ModelID], MaterialIDs[Furniture[furniture][fMaterial][i]][TxdName], MaterialIDs[Furniture[furniture][fMaterial][i]][TextureName], MaterialColors[Furniture[furniture][fMatColour][i]][ColorHex]);
		}
		else if(Furniture[furniture][fMatColour][i] != 0)
		{
		    SetDynamicObjectMaterial(Furniture[furniture][fObject], i, -1, MaterialIDs[Furniture[furniture][fMaterial][i]][TxdName], MaterialIDs[Furniture[furniture][fMaterial][i]][TextureName], MaterialColors[Furniture[furniture][fMatColour][i]][ColorHex]);
		}
	}
	UpdateFurnitureText(furniture);
	return 1;
}

UpdateFurnitureText(furniture)
{
	new
		string[64];

	if (!IsValidFurnitureID(furniture))
	{
	    return 0;
	}
	DestroyDynamic3DTextLabel(Furniture[furniture][fText]);

	if (Furniture[furniture][fEdit])
	{
	    format(string, sizeof(string), "ID: {00FF00}%i{FFFFFF}\n/edit, /delete.", furniture);

		Furniture[furniture][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Furniture[furniture][fSpawn][0], Furniture[furniture][fSpawn][1], Furniture[furniture][fSpawn][2], 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Furniture[furniture][fWorld], Furniture[furniture][fInterior]);
	}
	else
	{
	    if (Furniture[furniture][fModel] == 2332)
		{
		    if (Furniture[furniture][fSafeOpen])
		    {
		        Furniture[furniture][fText] = CreateDynamic3DTextLabel("Status: {00FF00}Opened{AFAFAF}\nPress Y to use safe", COLOR_GREY, Furniture[furniture][fSpawn][0], Furniture[furniture][fSpawn][1], Furniture[furniture][fSpawn][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Furniture[furniture][fWorld], Furniture[furniture][fInterior]);
		    }
		    else
		    {
		    	Furniture[furniture][fText] = CreateDynamic3DTextLabel("Status: {FF5030}Closed{AFAFAF}\nPress Y to use safe", COLOR_GREY, Furniture[furniture][fSpawn][0], Furniture[furniture][fSpawn][1], Furniture[furniture][fSpawn][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Furniture[furniture][fWorld], Furniture[furniture][fInterior]);
			}
		}
		else
		{
		    Furniture[furniture][fText] = INVALID_3DTEXT_ID;
		}
	}

	return 1;
}

SaveFurniture(furniture)
{
	if (!IsValidFurnitureID(furniture)) return 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE rp_furniture SET fModel = %i, fX = %.4f, fY = %.4f, fZ = %.4f, fRX = %.4f, fRY = %.4f, fRZ = %.4f, fInterior = %i, fWorld = %i, fCode = %i, fMoney = %i, Mat1 = %i, Mat2 = %i, Mat3 = %i, MatColor1 = %i, MatColor2 = %i, MatColor3 = %i WHERE fID = %i",
	    Furniture[furniture][fModel],
	    Furniture[furniture][fSpawn][0],
	    Furniture[furniture][fSpawn][1],
	    Furniture[furniture][fSpawn][2],
	    Furniture[furniture][fSpawn][3],
	    Furniture[furniture][fSpawn][4],
	    Furniture[furniture][fSpawn][5],
	    Furniture[furniture][fInterior],
	    Furniture[furniture][fWorld],
	    Furniture[furniture][fCode],
	    Furniture[furniture][fMoney],
	    Furniture[furniture][fMaterial][0],
	    Furniture[furniture][fMaterial][1],
	    Furniture[furniture][fMaterial][2],
	    Furniture[furniture][fMatColour][0],
	    Furniture[furniture][fMatColour][1],
	    Furniture[furniture][fMatColour][2],
	    Furniture[furniture][fID]
	);
	return mysql_tquery(connectionID, queryBuffer);
//	return printf(queryBuffer);
}

DeleteFurniture(furniture)
{
    if (!IsValidFurnitureID(furniture))
	{
		return 0;
	}

	DestroyDynamicObject(Furniture[furniture][fObject]);
	DestroyDynamic3DTextLabel(Furniture[furniture][fText]);

	format(queryBuffer, sizeof(queryBuffer), "DELETE FROM rp_furniture WHERE fID = %i", Furniture[furniture][fID]);
	mysql_tquery(connectionID, queryBuffer);

	Furniture[furniture][fID] = 0;
	Furniture[furniture][fExists] = 0;
	Furniture[furniture][fObject] = INVALID_OBJECT_ID;
	Furniture[furniture][fText] = INVALID_3DTEXT_ID;
	return 1;
}

ShowFurnitureCategories(playerid)
{
    new string[192];

	for (new i = 0; i < sizeof(g_FurnitureTypes); i ++) {
 		strcat(string, g_FurnitureTypes[i]);
   		strcat(string, "\n");
   	}
    Dialog_Show(playerid, BuyFurniture, DIALOG_STYLE_LIST, "{FFFFFF}Select category", string, "Select", "Cancel");
}

SetFurnitureEditMode(house, enable)
{
    HouseInfo[house][hEdit] = enable;

	for (new i = 0; i < MAX_FURNITURE; i ++)
	{
 		if (Furniture[i][fExists] && Furniture[i][fHouseID] == HouseInfo[house][hID])
   		{
     		Furniture[i][fEdit] = enable;
			UpdateFurnitureText(i);
 		}
	}
}
GetNextFurnitureID()
{
	for (new i = 0; i < MAX_FURNITURE; i ++)
	{
	    if (!Furniture[i][fExists])
	    {
	        return i;
		}
	}
	return -1;
}

AddFurniture(house, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, interior, worldid)
{
	new
	    id = GetNextFurnitureID();

	if (id != -1)
	{
		Furniture[id][fExists] = 1;
		Furniture[id][fHouseID] = HouseInfo[house][hID];
		Furniture[id][fEdit] = HouseInfo[house][hEdit];
		Furniture[id][fModel] = modelid;
		Furniture[id][fSpawn][0] = x;
		Furniture[id][fSpawn][1] = y;
		Furniture[id][fSpawn][2] = z;
		Furniture[id][fSpawn][3] = rx;
		Furniture[id][fSpawn][4] = ry;
		Furniture[id][fSpawn][5] = rz;
		Furniture[id][fInterior] = interior;
		Furniture[id][fWorld] = worldid;
		Furniture[id][fCode] = 0;
		Furniture[id][fMoney] = 0;
        Furniture[id][fSafeOpen] = 0;
        Furniture[id][fDoorOpen] = 0;
		Furniture[id][fObject] = INVALID_OBJECT_ID;
		Furniture[id][fText] = INVALID_3DTEXT_ID;

		for(new i = 0; i != 3; i ++)
		{
		    Furniture[id][fMaterial][i] = 0;
		    Furniture[id][fMatColour][i] = 0;
		}

		UpdateFurniture(id);

		format(queryBuffer, sizeof(queryBuffer), "INSERT INTO rp_furniture (fHouseID) VALUES(%i)", Furniture[id][fHouseID]);
		mysql_tquery(connectionID, queryBuffer, "OnFurnitureAdded", "i", id);
	}
	return id;
}
forward OnFurnitureAdded(furniture);
public OnFurnitureAdded(furniture)
{
    Furniture[furniture][fID] = cache_insert_id(connectionID);

    SaveFurniture(furniture);
}

GetVehicleStashCapacity(vehicleid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   W
	    {25000,   5000,   25,   25,  10,  5,  3}, // level 1
	    {50000,   10000,  50,   50,  25,  10, 4}, // level 2
	    {100000,  25000,  100,  75,  50,  20, 5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}

GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 100000, 500,  500,  250,  50},
		{2000000, 200000, 1000, 1000, 500,  100},
		{3000000, 300000, 1500, 1500, 1000, 250}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P    W
	    {100000,  50000,  100,  50,  25,  20,  2}, // level 1
	    {250000,  75000,  250,  100, 50,  40,  4}, // level 2
	    {500000,  100000, 500,  250, 100, 60,  6}, // level 3
	    {750000,  250000, 750,  500, 200, 80,  8}, // level 4
	    {1000000, 500000, 1000, 750, 250, 100, 10}, // level 5
	    {1000000, 500000, 1000, 750, 250, 100, 10} // level 6
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5, 6: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 50;
	    case 1: return 100;
	    case 2: return 150;
	    case 3: return 250;
	    case 4: return 400;
	    case 5: return 500;
	    case 6: return 9999;
	}

	return 0;
}

GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 1200.0)
	        {
	            if(HouseInfo[i][hDelivery])
	            {
	        		houseIDs[index++] = i;
				}
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetFurnitureHouse(playerid)
{
	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i) && IsPlayerInRangeOfPoint(playerid, 15.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}
GetNearbyHouse(playerid)
{
	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = PlayerData[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}


ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        string[268],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
        DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(string, sizeof(string), "{AAC4E5}[HOUSE FOR SALE] ({FFFFFF}ID %i{AAC4E5})\n{FFFFFF}Class: {AAC4E5}%s\n{FFFFFF}House Level: {AAC4E5}%i\n{FFFFFF}Price: {AAC4E5}%s", houseid, type, HouseInfo[houseid][hLevel], FormatNumber(HouseInfo[houseid][hPrice]));
            HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(string, sizeof(string), "{AAC4E5}[HOUSE] ({FFFFFF}ID %i{AAC4E5})\n{FFFFFF}Owner: {AAC4E5}%s\n{FFFFFF}Class: {AAC4E5}%s\n{FFFFFF}Rent: {AAC4E5}$%i\n{FFFFFF}House Level: {AAC4E5}%i", houseid, HouseInfo[houseid][hOwner], type, HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel]);
			}
		    else
		    {
			    format(string, sizeof(string), "{AAC4E5}[HOUSE] ({FFFFFF}ID %i{AAC4E5})\n{FFFFFF}Owner: {AAC4E5}%s\n{FFFFFF}Class: {AAC4E5}%s\n{FFFFFF}House Level: {AAC4E5}%i", houseid, HouseInfo[houseid][hOwner], type, HouseInfo[houseid][hLevel]);
			}
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
		}

		HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]+0.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hOutsideInt], -1 , 10.0);
  	    //HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 100.0);
	}
}

IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

/*Float:GetVehicleSpeedMPH(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 100;
	}

	return 0.0;
}*/

Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

stock GetVehicleSpeedKMH(vehicleid)
{
	new Float:speed_x, Float:speed_y, Float:speed_z, Float:temp_speed, round_speed;
	GetVehicleVelocity(vehicleid, speed_x, speed_y, speed_z);

	temp_speed = temp_speed = floatsqroot(((speed_x*speed_x) + (speed_y*speed_y)) + (speed_z*speed_z)) * 136.666667;

	round_speed = floatround(temp_speed);
	return round_speed;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}

GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > PlayerData[playerid][pACTime] && !PlayerData[playerid][pKicked] && InsideTut[playerid] == 0)
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 350 && PlayerData[playerid][pAdmin] < MODERATOR && !IsAPlane(GetPlayerVehicleID(playerid)) && !IsAHelicopter(GetPlayerVehicleID(playerid)))
		{
			SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly speedhacking, speed: %.1f km/h.", GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
			KickPlayer(playerid);
   			Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pJetpack])
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Jetpack", GetRPName(playerid), SERVER_ANTICHEAT);
	    	BanPlayer(playerid, SERVER_ANTICHEAT, "Jetpack");
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 30.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && PlayerData[playerid][pAdmin] < MODERATOR)
                    {
                        SendClientMessageToAllEx(COLOR_YELLOW, "ADMIN: %s was kicked by %s, reason: Flying hacks", GetRPName(playerid), SERVER_ANTICHEAT);
	    				KickPlayer(playerid);
					}
				}
			}
		}

		// Armor hacks
		if(!PlayerData[playerid][pJoinedEvent] && PlayerData[playerid][pPaintball] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(floatround(armor) > floatround(PlayerData[playerid][pArmor]) && gettime() > PlayerData[playerid][pACTime] && gettime() > PlayerData[playerid][pArmorTime] && PlayerData[playerid][pAdmin] < MODERATOR)
			{
	            PlayerData[playerid][pACWarns]++;
    	        PlayerData[playerid][pArmorTime] = gettime() + 10;

			    if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			    {
			        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetRPName(playerid), playerid, PlayerData[playerid][pArmor], armor);
			        Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], PlayerData[playerid][pArmor], armor);
                    KickPlayer(playerid);
				}
				else
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Armor hacking", GetRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Armor hacking");
				}

				PlayerData[playerid][pArmor] = armor;
			}
		}
	}

	// Ammo hacks
	if(!PlayerData[playerid][pJoinedEvent] && PlayerData[playerid][pPaintball] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name, true) && PlayerData[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAiming(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}

IsPlayerInMiningArea(playerid)
{
    for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

IsPlayerAtFoodPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1174.0956, -936.1318, 42.8307) || IsPlayerInRangeOfPoint(playerid, 12.0, 1514.9395, -1031.0515, 23.7966) || IsPlayerInRangeOfPoint(playerid, 12.0, 1202.5309, -1275.9502, 13.3616) || IsPlayerInRangeOfPoint(playerid, 12.0, 1418.1516, -1721.0294, 13.5469)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 339.2676, -1771.2668, 5.1687) || IsPlayerInRangeOfPoint(playerid, 12.0, 1023.6545, -1332.1298, 13.3842) || IsPlayerInRangeOfPoint(playerid, 12.0, 1189.3583, -1706.9924, 13.5755) || IsPlayerInRangeOfPoint(playerid, 12.0, 2083.0374, -1760.8845, 13.5625)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2264.8145, -1309.9031, 23.9844))
	{
	    return 1;
	}
	return 0;
}


IsAtDealership(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422) || IsPlayerInRangeOfPoint(playerid, 3.0, 1985.7753,-2068.1091,13.3803) || IsPlayerInRangeOfPoint(playerid, 3.0, 2131.8059,-1150.8885,24.1078))
	{
	    return 1;
	}
	return 0;
}
IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 1944.9109,-1583.2743,13.7161) || IsPlayerInRangeOfPoint(playerid, 12.0, 1943.8992,-1588.6217,13.7161)) {
	    return 1;
	} else if((IsAPlane(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid))) && IsPlayerInRangeOfPoint(playerid, 20.0, 1439.7886, -2445.6777, 13.5547)) {
	    return 1;
	} else if((IsABoat(GetPlayerVehicleID(playerid))) && IsPlayerInRangeOfPoint(playerid, 10.0, 133.461380, -1815.096557, 3.989328) || IsPlayerInRangeOfPoint(playerid, 10.0, 138.547210, -1815.308593, 3.989328) || IsPlayerInRangeOfPoint(playerid, 10.0, 144.042800, -1815.534912, 3.989328)) {
	    return 1;
	}

	return 0;
}

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 403.8266, -2088.7598, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 398.7553, -2088.7490, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 396.2197, -2088.6692, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 391.1094, -2088.7976, 7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 383.4157, -2088.7849, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 374.9598, -2088.7979, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 369.8107, -2088.7927, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 367.3637, -2088.7925, 7.8359)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 362.2244, -2088.7981, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 354.5382, -2088.7979, 7.8359)) {
	    return 1;
	}

	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && PlayerData[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            PlayerData[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            PlayerData[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(PlayerData[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && PlayerData[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            PlayerData[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(PlayerData[i][pStreamType] == MUSIC_NONE || PlayerData[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            PlayerData[i][pStreamType] = type;
			        }
				}
			}

			strcpy(PlayerData[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && PlayerData[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		PlayerData[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(PlayerData[i][pStreamType] == MUSIC_NONE || PlayerData[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	PlayerData[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyWeedPlant(playerid)
{
	if(PlayerData[playerid][pWeedPlanted])
	{
	    DestroyDynamicObject(PlayerData[playerid][pWeedObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weedplanted = 0, weedtime = 0, weedgrams = 0, weed_x = 0.0, weed_y = 0.0, weed_z = 0.0, weed_a = 0.0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[playerid][pWeedPlanted] = 0;
	    PlayerData[playerid][pWeedTime] = 0;
	    PlayerData[playerid][pWeedGrams] = 0;
	    PlayerData[playerid][pWeedX] = 0.0;
	    PlayerData[playerid][pWeedY] = 0.0;
	    PlayerData[playerid][pWeedZ] = 0.0;
	    PlayerData[playerid][pWeedA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(PlayerData[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(PlayerData[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(PlayerData[playerid][pBoomboxText]);

		PlayerData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		PlayerData[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        PlayerData[playerid][pBoomboxPlaced] = 0;
        PlayerData[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, PlayerData[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}
ShowActionBubble(playerid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 2)
	{
		SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 25.0, 6000);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 25.0, 6000);

		#emit RETN
	}
	return 1;
}
SendPlayerSplitMessage(playerid, color, const text[])
{
	new
		string[192],
		parse[12],
		length
	;

	length = strlen(text);

	if (length < 100)
	{
		SendClientMessage(playerid, color, text);
	}
	else
	{
		for (new i = 0; i < 100; i ++)
		{
			if ((i + 7 < length) && (text[i] == '{' && text[i + 7] == '}'))
			{
				strmid(parse, text, i, i + 8);
			}
		}
		strmid(string, text, 0, 100);

		SendClientMessage(playerid, color, string);

		strmid(string, text, 100, length);
		strins(string, "...", 0);

		if (strlen(parse) > 0)
		{
			strins(string, parse, 0);
		}
		SendClientMessage(playerid, color, string);
	}
}
SendSplitMessage(playerid, color, const text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 3)
	{
		SendPlayerSplitMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendPlayerSplitMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}
PlayerTextDrawFormatString(playerid, PlayerText:playertextid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 3)
	{
		PlayerTextDrawSetString(playerid, playertextid, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		PlayerTextDrawSetString(playerid, playertextid, str);

		#emit RETN
	}
	return 1;
}
SendDistanceMessage(playerid, Float:distance, color, const text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 4)
	{
		foreach (new i : Player)
		{
			if (IsPlayerInRangeOfPlayer(i, playerid, distance))
			{
				SendSplitMessage(i, color, text);
			}
		}
	}
	else
	{
		while (--args >= 4)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player)
		{
			if (IsPlayerInRangeOfPlayer(i, playerid, distance))
			{
				SendSplitMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageToAllEx(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged])
	        {
			    SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged])
	        {
			    SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pFaction] == factionid)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pFaction] == factionid)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pGang] == gangid)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pGang] == gangid)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGraphicMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pGraphic] >= 1 || PlayerData[i][pAdmin] >= 5)
			{
				SendClientMessage(i, color, string2);
			}
        }
	}
}

SendFMMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pFactionMod] >= 1 || PlayerData[i][pGameAffairs] || PlayerData[i][pAdmin] >= 5)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendGMMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pGangMod] >= 1 || PlayerData[i][pGameAffairs] || PlayerData[i][pAdmin] >= 5)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}


SendAPMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pAdminPersonnel] >= 1 || PlayerData[i][pAdmin] >= MANAGEMENT)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendWDMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pWebDev] >= 1 || PlayerData[i][pAdmin] >= MANAGEMENT)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendDGAMessage(color, string2[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[i][pGameAffairs] >= 1 || PlayerData[i][pAdmin] >= MANAGEMENT)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}
stock IsPlayerNearPlayer(playerid, TargetID, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(TargetID, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(TargetID) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(TargetID)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
//----------------------------------------------------------
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
			if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && GetNearbyTurf(i) == turfid && PlayerData[i][pToggleTurfs] == 0)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && GetNearbyTurf(i) == turfid && PlayerData[i][pToggleTurfs] == 0)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && (PlayerData[i][pAdmin] > 0))
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && (PlayerData[i][pAdmin] > 0))
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}

SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerData[i][pListen])
	        {
	            SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerData[i][pListen])
	        {
	            SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SendClientMessage(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SendClientMessage(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SendClientMessage(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SendClientMessage(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SendClientMessage(i, color5, text);
        }
        else if(PlayerData[i][pListen])
        {
            SendClientMessage(i, color5, text);
        }
	}
}

// ---------------------------------------

forward TutorialTimer(playerid, stage);
public TutorialTimer(playerid, stage)
{
	//new string[2048];
	if(PlayerData[playerid][pLogged] && PlayerData[playerid][pTutorial])
	{

		switch(stage)
		{
		    /*case 1:
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);
                InterpolateCameraPos(playerid, -37.715755, -2101.054931, 121.661994, 3031.810302, -638.207458, 196.425064, 12000);
				InterpolateCameraLookAt(playerid, -33.558185, -2098.420898, 120.781112, 3028.381103, -641.794555, 195.814514, 12000);

				format(string, sizeof(string), "Welcome to Prospect Roleplay! Thanks for choosing us as your Roleplay Destination, we hope you enjoy your stay!");
				strcat(string, "~n~Here at Prospect Roleplay, we pride ourselves in being a Medium Roleplay Community. Roleplay that is actually fun!");
				strcat(string, "~n~What fun is a community where the rules are so strict, you've got to roleplay breathing? We ain't got time for that.");
                strcat(string, "~n~Anyway, please enjoy this short introduction to get to know Prospect Roleplay on a personal level.");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 16000, false, "ii", playerid, 2);
		    }
		    case 2:
		    {
		        ClearChat(playerid);

	            InterpolateCameraPos(playerid, 3022.353027, -640.721740, 193.414672, 1227.661254, -1835.082397, 25.913717, 12000);
				InterpolateCameraLookAt(playerid, 3019.046142, -644.348388, 192.459640, 1226.208251, -1830.758422, 23.866357, 12000);
				SetPlayerPos(playerid, 1223.7166,-1851.4952,8.3894);


				format(string, sizeof(string), "You're about to see our Department of Motor Vehicles. This is where you'll obtain your drivers license.");
				strcat(string, "~n~While you may drive without a license, it is recommended that you obtain one, else LSPD will be after you!");
				strcat(string, "~n~Once you've obtained your drivers license, it's time to get a job! We have many great jobs to offer.");
                strcat(string, "~n~If you're looking for a decent starting job, try out our courier job, garbage man job, or miner job!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 3);
		    }
		    case 3:
		    {
		        PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", playerid, 4);
		    }
		    case 4:
		    {
		        ClearChat(playerid);

				InterpolateCameraPos(playerid, 1244.807250, -1896.417480, 62.970653, 1320.417602, -1480.743286, 78.601524, 5000);
				InterpolateCameraLookAt(playerid, 1243.523193, -1892.262817, 60.502914, 1318.168212, -1476.724731, 76.654434, 5000);
				SetPlayerPos(playerid, 1310.9757,-1445.2444,-27.2783);


				format(string, sizeof(string), "This is the market area, the most common hangout on Prospect Roleplay");
				strcat(string, "~n~You'll be starting out as a level 1 newbie with no upgrades. You'll need to level up with XP.");
				strcat(string, "~n~For every hour you play, you'll gain 1 respect point. You earn this on your paycheck.");
                strcat(string, "~n~Paychecks will be given out once every hour when the time hits xx:00.");
                strcat(string, "~n~As a new player, your inventory is severely limited. You'll need to upgrade it with upgrade points.");
                strcat(string, "~n~You'll also start out with a 2 hour weapon restriction to avoid deathmatching.");
                strcat(string, "~n~We believe that our upgrades system gives the players an incentive to play and work hard.");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 5);
		    }
		    case 5:
		    {
		        ClearChat(playerid);

				InterpolateCameraPos(playerid, 1320.417602, -1480.743408, 78.601516, 1482.683227, -1628.944824, 44.981044, 5000);
				InterpolateCameraLookAt(playerid, 1317.750488, -1476.783447, 77.116455, 1486.893188, -1631.457153, 43.999187, 5000);

				SetPlayerPos(playerid, 1493.3798,-1668.6997,-15.7351);

				format(string, sizeof(string), "Prospect Roleplay has many great factions to offer.");
				strcat(string, "~n~You're currently looking at the Los Santos Police Department.");
				strcat(string, "~n~Factions are legal organizations, each with their own unique roles.");
                strcat(string, "~n~Factions are dedicated to helping the citizens of Los Santos,");
                strcat(string, "~n~Whether it be enforcing the law, saving lives, or reporting the news.");
                strcat(string, "~n~You can apply to become a faction member on our forum at prospectrp.net");
                strcat(string, "~n~Being in a faction is quite fun and can lead to some good cash and perks for you!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 6);
		    }
		    case 6:
		    {
		        ClearChat(playerid);

				InterpolateCameraPos(playerid, 1477.633544, -1627.411010, 50.594058, 2446.644531, -1661.652465, 29.177988, 7000);
				InterpolateCameraLookAt(playerid, 1481.815795, -1629.860473, 49.365783, 2451.346191, -1662.243896, 27.582590, 7000);

				SetPlayerPos(playerid, 2467.3708,-1666.0961,7.8903);

				format(string, sizeof(string), "Doing things the legal way isnt your type? We've got you covered.");
				strcat(string, "~n~Here on Prospect Roleplay we have an amazing gang system with many unique features!");
				strcat(string, "~n~Gangs are illegal organizations you may join by roleplaying with the higher ranks.");
                strcat(string, "~n~Gangs offer many different types of roleplay, from street gangs to mafias & cartels.");
                strcat(string, "~n~Gangs main objectives are to own the city of Los Santos by capturing points & turfs");
                strcat(string, "~n~Grab yourself a gun and roleplay your way into a gang!");
                strcat(string, "~n~You can also apply for your own gang slot at prospectrp.net!!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 7);
		    }
		    case 7:
			{
			    ClearChat(playerid);

				InterpolateCameraPos(playerid, 2426.551025, -1659.479614, 44.816139, 2097.071533, -1293.159912, 29.785530, 7000);
				InterpolateCameraLookAt(playerid, 2431.008300, -1659.783935, 42.571231, 2095.802246, -1288.467041, 28.616756, 7000);

				SetPlayerPos(playerid, 2093.6177,-1302.5441,4.6590);

				format(string, sizeof(string), "Want your own piece of real estate? We've got you covered!");
				strcat(string, "~n~Here on Prospect Roleplay we offer a wide variety of property types you may own.");
				strcat(string, "~n~Buying your own house will allow you to customize the interior and store your goodies!");
                strcat(string, "~n~Buying a garage will allow you to keep your car from being stolen, repair it, and upgrade it! ");
                strcat(string, "~n~Buying your own business is an excellent source of income! There are many different types!");
                strcat(string, "~n~Lands are quite special. You can own your own piece of the map!");
                strcat(string, "~n~Owning a land allows you to place walls and other objects, and customize your piece of land.");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 8);
		    }
		    case 8:
		    {
				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", playerid, 9);
		    }
		    case 9:
		    {
		        ClearChat(playerid);

				InterpolateCameraPos(playerid, 2100.492675, -1313.117553, 40.094261, 2214.083496, -1122.290161, 34.281135, 7000);
				InterpolateCameraLookAt(playerid, 2099.261718, -1308.616088, 38.299301, 2214.811767, -1127.109375, 33.165603, 7000);

				SetPlayerPos(playerid, 2216.8718,-1122.6305,4.1262);

				format(string, sizeof(string), "Being a roleplay server, we do have rules, but we promise they're not too bad!");
				strcat(string, "~n~1.) No deathmatching, e.g. killing without a proper reason. Don't ruin it for everyone else.");
				strcat(string, "~n~2.) No metagaming. Metagaming is mixing OOC information in character.");
                strcat(string, "~n~3.) No powergaming. Powergaming is commiting unrealistic acts and forcing actions upon others.");
                strcat(string, "~n~4.) No hacking/cheating. We have zero tolerance for people who use cheats. Permanent ban.");
                strcat(string, "~n~5.) No exploiting. If you find a bug that gives you an unfair advantage, report it on the forums.");
                strcat(string, "~n~Please visit our website - prospectrp.net for a complete list of our rules.!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 18000, false, "ii", playerid, 10);
			}
			case 10:
			{
			    ClearChat(playerid);

				InterpolateCameraPos(playerid, 2214.083251, -1122.290527, 34.281147, 797.200866, -1325.562011, 16.992176, 12000);
				InterpolateCameraLookAt(playerid, 2215.083740, -1127.120239, 33.460655, 800.632263, -1329.196899, 16.878904, 12000);
				SetPlayerPos(playerid, 798.7332,-1325.8041,-18.0216);

				format(string, sizeof(string), "Thanks for taking the time to read our tutorial, we greatly appreciate it.");
				strcat(string, "~n~We know you'll have tons of fun here, and meet many great people.");
				strcat(string, "~n~So get out there! Get a job and buy yourself some property! Make a name for yourself!");
                strcat(string, "~n~You'll be spawned in just a moment.");
 				TextDrawSetString(Tutorial[2], string);

				PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 11);
			}*/
			case 11:
			{
			    PlayerData[playerid][pTutorial] = 0;
			   	PlayerData[playerid][pSetup] = 0;
                HideTutorialTextDraws(playerid);
                SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
			    SetPlayerPos(playerid, 2247.3511,-1724.0511,13.5469);
			    SetPlayerFacingAngle(playerid, 181.4170);
			    print("Spawned player on spawn 2");
			    SetPlayerVirtualWorld(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			    StopAudioStreamForPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", PlayerData[playerid][pGender], PlayerData[playerid][pAge], PlayerData[playerid][pSkin], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendClientMessage(playerid, COLOR_WHITE, "Welcome to {00aa00}Prospect Roleplay{FFFFFF}. Make sure to visit www.prospectrp.net for news and updates.");
				SendClientMessage(playerid, COLOR_WHITE, "Use the {FFFF90}/locate{FFFFFF} command to point to locations of jobs, businesses, and common places.");
				StopAudioStreamForPlayer(playerid);
		        DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
		        fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
				SendStaffMessage(COLOR_YELLOW, "OnPlayerSpawn: %s[%d] has just spawned on Prospect Roleplay for the first time!", GetRPName(playerid), playerid);
   				SendClientMessage(playerid, COLOR_AQUA, "You need a driver's license, the DMV has been marked on your map. Navigate to the marker to begin your drivers test.");
   				PlayerData[playerid][pCP] = CHECKPOINT_MISC;
                SetPlayerCheckpoint(playerid, 1219.2590, -1812.1093, 16.5938, 3.0);
			}
		}
	}
}

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

#if defined SERVER_INTRO

forward ShowLoginScreenTextdraw(playerid, type);
public ShowLoginScreenTextdraw(playerid, type)
{
	if(PlayerData[playerid][pWatchingIntro])
	{
		if(type == 1) {
		    TextDrawShowForPlayer(playerid, introTextdraws[3]);
		} else if(type == 2) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[5]);
		} else if(type == 3) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[19]);
		} else if(type == 4) {
		    TextDrawShowForPlayer(playerid, introTextdraws[21]);
		} else if(type == 5) {
		    TextDrawShowForPlayer(playerid, introTextdraws[24]);
		} else if(type == 6) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[25]);
		}
	}
}

forward StreamNextStep(playerid, type);
public StreamNextStep(playerid, type)
{
	if(!PlayerData[playerid][pWatchingIntro])
	{
	    return 0;
	}

	switch(type)
	{
		case 0:
		{
			InterpolateCameraPos(playerid, 187.600982, -1791.727050, 119.087432, 193.731567, -1789.235473, 118.845245, 5000);
			InterpolateCameraLookAt(playerid, 189.006942, -1790.279785, 114.512641, 195.057144, -1788.512817, 114.078620, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 1);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[2]);
            TextDrawHideForPlayer(playerid, introTextdraws[3]);
            TextDrawShowForPlayer(playerid, introTextdraws[4]);
            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 2);
		}
		case 1:
		{
			InterpolateCameraPos(playerid, 300.803771, -1753.841796, 59.482250, 332.887237, -1753.466674, 60.534908, 4000);
			InterpolateCameraLookAt(playerid, 302.467315, -1749.504394, 57.633026, 334.005126, -1748.907470, 58.813385, 4000);
			SetTimerEx("StreamNextStep", 4000-600, false, "ii", playerid, 2);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[4]);
            TextDrawHideForPlayer(playerid, introTextdraws[5]);
            TextDrawShowForPlayer(playerid, introTextdraws[6]);
            TextDrawShowForPlayer(playerid, introTextdraws[7]);
		}
		case 2:
		{
			InterpolateCameraPos(playerid, 350.840972, -1794.716308, 13.146982, 346.193756, -1800.415649, 10.697548, 8000);
			InterpolateCameraLookAt(playerid, 348.053558, -1790.653564, 12.295993, 342.141357, -1797.657592, 9.712170, 8000);
			SetTimerEx("StreamNextStep", 8000-600, false, "ii", playerid, 3);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[6]);
            TextDrawHideForPlayer(playerid, introTextdraws[7]);
            TextDrawShowForPlayer(playerid, introTextdraws[8]);
            TextDrawShowForPlayer(playerid, introTextdraws[9]);
            TextDrawShowForPlayer(playerid, introTextdraws[10]);
            TextDrawShowForPlayer(playerid, introTextdraws[11]);
		}
		case 3:
		{
			InterpolateCameraPos(playerid, 169.602859, -1775.647705, 6.933395, 169.617141, -1776.156250, 12.790164, 5000);
			InterpolateCameraLookAt(playerid, 169.547332, -1770.651367, 7.117267, 169.588928, -1771.159301, 12.618641, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 4);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[8]);
            TextDrawHideForPlayer(playerid, introTextdraws[9]);
            TextDrawHideForPlayer(playerid, introTextdraws[10]);
            TextDrawHideForPlayer(playerid, introTextdraws[11]);
            TextDrawShowForPlayer(playerid, introTextdraws[12]);
            TextDrawShowForPlayer(playerid, introTextdraws[13]);
		}
		case 4:
		{
			InterpolateCameraPos(playerid, 386.273284, -2030.129516, 59.993469, 395.822113, -2044.595703, 59.993469, 5000);
			InterpolateCameraLookAt(playerid, 386.591949, -2029.832275, 55.012496, 396.252319, -2044.526245, 55.012496, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 5);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[12]);
            TextDrawHideForPlayer(playerid, introTextdraws[13]);
            TextDrawShowForPlayer(playerid, introTextdraws[14]);
            TextDrawShowForPlayer(playerid, introTextdraws[15]);
		}
		case 5:
		{
			InterpolateCameraPos(playerid, 341.018402, -2095.904052, 6.937077, 342.805603, -2096.498535, 6.648118, 5000);
			InterpolateCameraLookAt(playerid, 345.258972, -2093.501220, 5.821543, 347.304443, -2094.563964, 5.639461, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 6);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[14]);
            TextDrawHideForPlayer(playerid, introTextdraws[15]);
            TextDrawShowForPlayer(playerid, introTextdraws[16]);
            TextDrawShowForPlayer(playerid, introTextdraws[17]);
		}
		case 6:
		{
			InterpolateCameraPos(playerid, 481.641052, -1804.006835, 6.803627, 484.250549, -1802.375244, 6.660738, 5000);
			InterpolateCameraLookAt(playerid, 485.734344, -1801.318481, 5.794973, 488.679290, -1800.236572, 5.759444, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 7);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[16]);
            TextDrawHideForPlayer(playerid, introTextdraws[17]);
            TextDrawShowForPlayer(playerid, introTextdraws[18]);

            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 3);
            //TextDrawShowForPlayer(playerid, introTextdraws[19]);
		}
		case 7:
		{
			InterpolateCameraPos(playerid, 662.689147, -1868.981201, 6.513285, 665.048583, -1870.174438, 6.864079, 5000);
			InterpolateCameraLookAt(playerid, 658.142028, -1867.027709, 5.800874, 661.006286, -1867.294311, 6.260089, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 8);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[18]);
            TextDrawHideForPlayer(playerid, introTextdraws[19]);
            TextDrawShowForPlayer(playerid, introTextdraws[20]);

            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 4);
            //TextDrawShowForPlayer(playerid, introTextdraws[21]);
		}
		case 8:
		{
			InterpolateCameraPos(playerid, 542.343933, -1901.457519, 2.008791, 544.523376, -1901.883666, 2.085470, 5000);
			InterpolateCameraLookAt(playerid, 544.995666, -1897.256958, 2.577868, 546.892395, -1897.521118, 2.681705, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 9);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[20]);
            TextDrawHideForPlayer(playerid, introTextdraws[21]);
            TextDrawShowForPlayer(playerid, introTextdraws[22]);
		}
		case 9:
		{
			InterpolateCameraPos(playerid, 542.945800, -1863.699707, 4.435829, 539.996215, -1863.695556, 4.304386, 7000);
			InterpolateCameraLookAt(playerid, 537.950744, -1863.694213, 4.213245, 535.009887, -1863.990478, 4.081802, 7000);
			SetTimerEx("StreamNextStep", 6500, false, "ii", playerid, 10);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[22]);
			TextDrawShowForPlayer(playerid, introTextdraws[23]);

            SetTimerEx("ShowLoginScreenTextdraw", 1000, false, "ii", playerid, 5);
			SetTimerEx("ShowLoginScreenTextdraw", 3000, false, "ii", playerid, 6);
		}
		case 10:
		{
		    for(new i = 0; i < 26; i ++)
			{
			    TextDrawHideForPlayer(playerid, introTextdraws[i]);
			}

            SetPlayerVirtualWorld(playerid, 0);
            ShowMainMenuCamera(playerid, 0);
		    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
		}
	}

	return 1;
}

#endif

forward GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz);
public GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz)
{
	if(PlayerData[playerid][pLogged])
	{
		SetPlayerCameraLookAt(playerid, x, y, z);

		switch(step)
		{
		    case 1:
		    {
    			SetPlayerCameraPos(playerid, x, y, z + 100.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 2, x, y, z, angle, cx, cy, cz);
			}
			case 2:
			{
				SetPlayerCameraPos(playerid, x, y, z + 50.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 3, x, y, z, angle, cx, cy, cz);
			}
			case 3:
			{
				SetPlayerCameraPos(playerid, x, y, z + 25.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
		  		SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 4, x, y, z, angle, cx, cy, cz);
			}
			case 4:
			{
				InterpolateCameraPos(playerid, cx, cy, cz + 25.0, cx, cy, cz, 1000);
				InterpolateCameraLookAt(playerid, x + 4.0 * floatsin(-angle, degrees), y + 4.0 * floatcos(-angle, degrees), z, x, y, z + 0.6, 1000);
				SetTimerEx("GrandTheftAutoV", 1500, false, "iifffffff", playerid, 5, x, y, z, angle, cx, cy, cz);
			}
			case 5:
			{
			    SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);
			    PlayerData[playerid][pLoginCamera] = 0;
			}
		}
	}
}

forward DestroyLockText(playerid);
public DestroyLockText(playerid)
{
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pLockText]))
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pLockText]);
		PlayerData[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
	}
}

forward HideAchievementTextdraw(playerid);
public HideAchievementTextdraw(playerid)
{
	for(new i = 6; i < 10; i ++)
	{
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][i]);
	}
}

forward SpectateUpdate(playerid, targetid);
public SpectateUpdate(playerid, targetid)
{
	if(PlayerData[playerid][pSpectating] == targetid)
	{
		SetPlayerInterior(playerid, GetPlayerInterior(targetid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

		if(IsPlayerInAnyVehicle(targetid))
		{
		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
		}
		else
		{
		    PlayerSpectatePlayer(playerid, targetid);
		}
	}
}

forward StreamedCheck(playerid, Float:x, Float:y, Float:z, interior, world);
public StreamedCheck(playerid, Float:x, Float:y, Float:z, interior, world)
{
	foreach(new i : Entrance)
	{
    	if(EntranceInfo[i][eExists] && EntranceInfo[i][eFreeze] && IsPointInRangeOfPoint(x, y, z, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && interior == EntranceInfo[i][eInterior] && world == EntranceInfo[i][eWorld])
		{
			SetFreezePos(playerid, x, y, z);
			return 1;
		}
	}

	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    if(staticEntrances[i][eFreeze] && IsPointInRangeOfPoint(x, y, z, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && world == staticEntrances[i][eWorld])
		{
            SetFreezePos(playerid, x, y, z);
			return 1;
		}
	}

	return 0;
}

forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}
	PlayerTextDrawHide(playerid, LoadingObjects0[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects1[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects2[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects3[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects4[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects5[playerid]);
	TogglePlayerControllable(playerid, 1);
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
		PlayerData[playerid][pFreezeTimer] = -1;
		PlayerTextDrawHide(playerid, LoadingObjects0[playerid]);
		PlayerTextDrawHide(playerid, LoadingObjects1[playerid]);
		PlayerTextDrawHide(playerid, LoadingObjects2[playerid]);
		PlayerTextDrawHide(playerid, LoadingObjects3[playerid]);
		PlayerTextDrawHide(playerid, LoadingObjects4[playerid]);
		PlayerTextDrawHide(playerid, LoadingObjects5[playerid]);
	}
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}

forward SecondTimer();
public SecondTimer()
{
	new hour, minute, boomboxid, string[128];

	gettime(hour, minute);

	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
	}

	foreach(new i : Player)
	{
  		//SetPlayerTime(i, hour, minute);

		if(PlayerData[i][pLogged] && !PlayerData[i][pKicked])
		{
      		AFKCheck(i);
			NOPCheck(i);

		    if(PlayerData[i][pLoopAnim] && !PlayerData[i][pToggleTextdraws]) {
				TextDrawShowForPlayer(i, AnimationTD);
		    } else {
		        TextDrawHideForPlayer(i, AnimationTD);
		    }

		    if(GetPlayerSurfingVehicleID(i) != INVALID_PLAYER_ID && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !IsSurfVehicle(GetPlayerSurfingVehicleID(i)) && !PlayerData[i][pAdminDuty] && GetVehicleSpeed(GetPlayerSurfingVehicleID(i)) > 40)
		    {
		        new
		            Float:x,
		            Float:y,
		            Float:z;

		        SendProximityMessage(i, 20.0, COLOR_PURPLE, "* %s slipped off the top of the vehicle.", GetRPName(i));
		        GetPlayerPos(i, x, y, z);
		        SetPlayerPos(i, x + 1, y, z + 3.0);
		        ApplyAnimation(i, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
			}
			if (PlayerData[i][pSpeedTime] > 0)
			{
			    PlayerData[i][pSpeedTime]--;
			}
		    if(PlayerData[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498))
				{
			    	PlayerData[i][pShipment] = -1;
			    	SendClientMessage(i, COLOR_GREY, "Shipment cancelled. You went into another vehicle.");
				}
		    }
		    if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(i) == SPECIAL_ACTION_DRINK_WINE)
		    {
		        if(GetPlayerDrunkLevel(i) > 7000)
		        {
		            AwardAchievement(i, "Party hard");
		        }
		    }
    		if(PlayerData[i][pRepairTime] > 0)
			{
				PlayerData[i][pRepairTime]--;

				if(PlayerData[i][pRepairTime] <= 0)
				{
					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{
						new vehicleid = GetPlayerVehicleID(i);

						foreach(new e : Player)
						{
							if(IsPlayerInVehicle(e, vehicleid))
							{
								SetCameraBehindPlayer(e);
							}
						}

						SetVehiclePos(vehicleid, g_RepairShops[PlayerData[i][pRepairShop]][7], g_RepairShops[PlayerData[i][pRepairShop]][8], g_RepairShops[PlayerData[i][pRepairShop]][9]);
						SetVehicleZAngle(vehicleid, g_RepairShops[PlayerData[i][pRepairShop]][10]);
						SetCameraBehindPlayer(i);

						RepairVehicle(vehicleid);
						GameTextForPlayer(i, "~g~Vehicle Repaired", 5000, 1);
						TogglePlayerControllable(i, 1);
					}

					PlayerData[i][pRepairShop] = -1;
				}
			}

		    if(PlayerData[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 448)
				{
				    if(PlayerData[i][pPizzaTime] < 90)
					{
						PlayerData[i][pPizzaTime]++;
					}
				}
				else
				{
				    PlayerData[i][pPizzas] = 0;
				    PlayerData[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SendClientMessage(i, COLOR_GREY, "Pizza delivery cancelled. You went into another vehicle.");
				}
			}
			else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
				{
				    PlayerData[i][pGraffiti] = -1;
            	    PlayerData[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        PlayerData[i][pGraffitiTime]--;

		            if (PlayerData[i][pGraffitiTime] < 1)
					{
						if(gang_tag_chosen[i] != 0)
						{
						    new Float:x, Float:y, Float:z, Float:a;
						    GetPlayerPos(i, x, y, z);
							GetPlayerFacingAngle(i, a);
						    GraffitiData[PlayerData[i][pGraffiti]][graffitiPos][3] = a + 90.0;
						    GraffitiData[PlayerData[i][pGraffiti]][graffitiDefault] = gang_tag_chosen[i];
						    printf("%d", gang_tag_chosen[i]);
						    printf("%d", GraffitiData[PlayerData[i][pGraffiti]][graffitiDefault]);
						    gang_tag_chosen[i] = 0;
							Graffiti_Refresh(PlayerData[i][pGraffiti]);
						    Graffiti_Save(PlayerData[i][pGraffiti]);
						    ClearAnimations(i, 1);
							SendProximityMessage(i, 30.0, COLOR_PURPLE, "* %s puts their can of spray paint away.", GetRPName(i));
			   	            PlayerData[i][pGraffiti] = -1;
			   	            PlayerData[i][pGraffitiTime] = 0;
						}
						else
						{
	                        new str[500];
	                        new Float:x, Float:y, Float:z, Float:a;
						    GetPlayerPos(i, x, y, z);
							GetPlayerFacingAngle(i, a);
						    strunpack(str, PlayerData[i][pGraffitiText]);
		        	        format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

		        	        GraffitiData[PlayerData[i][pGraffiti]][graffitiPos][3] = a - 90.0;
		        	        strreplace2(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], "(n)", "\n");
                            GraffitiData[PlayerData[i][pGraffiti]][graffitiDefault] = 0;
                            gang_tag_chosen[i] = 0;
						    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = GetGangColor(PlayerData[i][pGang]);
							Graffiti_Refresh(PlayerData[i][pGraffiti]);
						    Graffiti_Save(PlayerData[i][pGraffiti]);
						    ClearAnimations(i, 1);
							SendProximityMessage(i, 30.0, COLOR_PURPLE, "* %s puts their can of spray paint away.", GetRPName(i));
			   	            PlayerData[i][pGraffiti] = -1;
			   	            PlayerData[i][pGraffitiTime] = 0;
						}
					}
				}
			}
		    if(!PlayerData[i][pToggleTextdraws])
		    {
			    if(PlayerData[i][pGPSOn])
				{
				    PlayerTextDrawSetString(i, PlayerData[i][pText][0], GetPlayerZoneName(i));
				}
			}

		    /*if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - PlayerData[i][pLastDesync] > 120)
	        {
	            GameTextForPlayer(i, "You are desynced. Please relog once you see this message.", 10000, 6);
	            PlayerData[i][pLastDesync] = gettime();
	        }*/
		    if(PlayerData[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(PlayerData[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(PlayerData[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerData[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(PlayerData[i][pSpectating]));
		    }
		    if(PlayerData[i][pTutorial])
		    {
		        TogglePlayerControllable(i, 0);
		    }
			if(PlayerData[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(PlayerData[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, PlayerData[i][pDraggedBy]);
			}
			if(PlayerData[i][pDonator] > 0 && gettime() > PlayerData[i][pVIPTime])
			{
			    PlayerData[i][pDonator] = 0;
			    PlayerData[i][pVIPTime] = 0;
			    PlayerData[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", PlayerData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessage(i, COLOR_LIGHTRED, "Your donator subscription has expired. You are no longer donator.");
			}
			if(PlayerData[i][pDonator] < 2 && PlayerData[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET secondjob = -1 WHERE uid = %i", PlayerData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    PlayerData[i][pSecondJob] = JOB_NONE;
			    SendClientMessage(i, COLOR_LIGHTRED, "Your second job has been removed as you are not a donator.");
			}
			if(PlayerData[i][pHHCheck])
			{
			    if(PlayerData[i][pHHTime] > 0)
			    {
			        new health = GetPlayerHealthEx(i);

			        if(health == PlayerData[i][pHHRounded])
			        {
			            PlayerData[i][pHHCount]++;
			        }

				    SetPlayerHealth(i, random(100) + 1);

				    PlayerData[i][pHHTime]--;
				    PlayerData[i][pHHRounded] = health;
				}
				else
				{
				    if(gettime() - PlayerData[i][pLastUpdate] >= 3)
					{
					    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] failed the health hack check as they tabbed.", GetRPName(i), i);
					}
				    else if(PlayerData[i][pHHCount] > 0)
				    {
					    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly health hacking with a %i percent chance.", GetRPName(i), i, PlayerData[i][pHHCount] * 20);
				    }
				    else
				    {
				        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] does not appear to be health hacking.", GetRPName(i), i);
				    }

				    if(NetStats_PacketLossPercent(i) > 10.0)
				    {
				        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is desynced and has a packet loss of %.1f percent.", GetRPName(i), i, NetStats_PacketLossPercent(i));
					}

				    SetPlayerHealth(i, PlayerData[i][pHealth]);
				    PlayerData[i][pHHCheck] = 0;
				}
			}
			if(PlayerData[i][pReceivingAid] && !PlayerData[i][pHHCheck])
			{
				new
				    Float:health;

				GetPlayerHealth(i, health);

				if((health + 1.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    PlayerData[i][pReceivingAid] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				}
			}
			if(PlayerData[i][pInjured] && IsPlayerInAnyVehicle(i) && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
			{
			    new
			        Float:x,
			        Float:y,
			        Float:z;
			    GetPlayerPos(i, x, y, z);
			    SetPlayerPos(i, x, y, z + 0.5);
			    ClearAnimations(i);
			}
			if(PlayerData[i][pTazedTime] > 0)
			{
			    PlayerData[i][pTazedTime]--;

			    if(!PlayerData[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);

			        if(!PlayerData[i][pCuffed])
			        {
				        TogglePlayerControllable(i, 1);
					}
			    }
			}
			if(PlayerData[i][pFishTime] > 0)
			{
			    PlayerData[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    PlayerData[i][pFishTime] = 0;
				}
			    else if(PlayerData[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);

					if(1 <= rand <= 20)
	    			{
	 	   				SendClientMessage(i, COLOR_GREY, "You reeled in your line and caught nothing...");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 50 + random(100);

		    			SendClientMessageEx(i, COLOR_AQUA, "You reeled in your line and caught a used wallet with {00AA00}$%i{33CCFF} inside.", amount);
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(2000) + 1000;

					    SendClientMessageEx(i, COLOR_AQUA, "You reeled in your line and caught a rare 18th century coin valued at {00AA00}$%i{33CCFF}!", amount);
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight, level = GetJobLevel(i, JOB_FISHERMAN);

					    if(PlayerData[i][pUsedBait]) {
							weight = random(40) + (level * 10);
					    } else {
					        weight = random(15) + (level * 10);
	    		        }

	    		        SendClientMessageEx(i, COLOR_AQUA, "You reeled in your line and caught a fish weighing %i kg!", weight);
						PlayerData[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishweight = %i WHERE uid = %i", PlayerData[i][pFishWeight], PlayerData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						IncreaseJobSkill(i, JOB_FISHERMAN);

	    		        if(PlayerData[i][pFishWeight] >= 1500)
	    		        {
	    		            SendClientMessage(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
	    		        }
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}
			if(PlayerData[i][pJailType] > 0)
			{
			    PlayerData[i][pJailTime]--;

			    if(PlayerData[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SendClientMessage(i, COLOR_GREY2, "Your jail sentence has expired.");
			        SetPlayerPos(i, 1544.4407, -1675.5522, 13.5584);
					SetPlayerFacingAngle(i, 90.0000);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);

					PlayerData[i][pJailType] = 0;
			        PlayerData[i][pJailTime] = 0;
				}
			}
			if(PlayerData[i][pEditType] > 0 && IsValidDynamicObject(PlayerData[i][pEditObject]) && !IsPlayerInRangeOfDynamicObject(i, PlayerData[i][pEditObject], 50.0))
			{
				if(PlayerData[i][pEditType] == EDIT_LAND_OBJECT)
				{
	   				ReloadLandObject(PlayerData[i][pEditObject], LandInfo[PlayerData[i][pObjectLand]][lLabels]);
	   				SendClientMessage(i, COLOR_GREY2, "You left the editing area. Editing mode has been disabled.");
				}
				else if(PlayerData[i][pEditType] == EDIT_LAND_OBJECT_PREVIEW)
				{
	   				SendClientMessage(i, COLOR_GREY2, "You left the editing area. Furniture previewing cancelled.");
	   				DestroyDynamicObject(PlayerData[i][pEditObject]);
				}

				CancelEdit(i);

				PlayerData[i][pEditType] = 0;
			   	PlayerData[i][pEditObject] = INVALID_OBJECT_ID;
			}
			if(PlayerData[i][pHospital] && PlayerData[i][pHospitalTime])
			{
				PlayerData[i][pHospitalTime]--;

				if(PlayerData[i][pHospitalTime] == 0)
				{
				    if(PlayerData[i][pInsurance] > 0)
				    {
				        AwardAchievement(i, "Obamacare");
				    }

				    SetPlayerPos(i, -2297.6084,111.1512,-5.3336);//hospitalspawn
					SetPlayerFacingAngle(i, 89.7591);
					SetPlayerInterior(i, 1);
					SetPlayerVirtualWorld(i, PlayerData[i][pHospitalType]);
					SetCameraBehindPlayer(i);
				   	ClearAnimations(i, 1);
					ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

					if(!(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC))
					{
						GivePlayerCash(i, -500);
						GameTextForPlayer(i, "~w~Discharged~n~~r~-$500", 5000, 1);
					}

					TogglePlayerControllable(i, 1);
					SetPlayerDrunkLevel(i, 0);

					if(PlayerData[i][pDelivered])
					{
					    if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC)
					        SendClientMessage(i, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
					    else
							SendClientMessage(i, COLOR_DOCTOR, "You have been billed $500 for your stay. You also keep all of your weapons!");

						PlayerData[i][pDelivered] = 0;
					}
					else
					{
                        if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC)
                            SendClientMessage(i, COLOR_DOCTOR, "You have not been billed for your stay. Your weapons have been confiscated by staff.");
						else
							SendClientMessage(i, COLOR_DOCTOR, "You have been billed $500 for your stay. Your weapons have been confiscated by staff.");

						SendClientMessage(i, COLOR_LIGHTRED, "(( You have lost 30 minutes of your memory. ))");
					   	ClearAnimations(i, 1);
						ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

					}
					new hospital[32];
					switch(PlayerData[i][pHospitalType])
					{
					    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
					    case HOSPITAL_FMDHQ: strcat(hospital, "FMD HQ");
					    case HOSPITAL_VIPLOUNGE: strcat(hospital, "Donator Lounge");
					}
					foreach(new x : Player)
					{
						if(IsLawEnforcement(x) && PlayerData[i][pWantedLevel] > 0)
						{
						    SendClientMessageEx(x, COLOR_YELLOW, "LSFMD: Wanted suspect %s[%i] was last spotted at the %s hospital!", GetRPName(i), i, hospital);
					      }
					}
					SetPlayerHealth(i, PlayerData[i][pSpawnHealth]);
					SetScriptArmour(i, PlayerData[i][pSpawnArmor]);
				   	ClearAnimations(i, 1);
					ApplyAnimation(i, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);

					PlayerData[i][pHospital] = 0;
		            PlayerData[i][pHospitalTime] = 0;
		        }
		        else
		        {
		            GameTextForPlayer(i, "~w~Recovering...", 1500, 3);
		            //SetPlayerDrunkLevel(i, 50000);
				}
			}
			if(PlayerData[i][pRefuel] != INVALID_VEHICLE_ID)
			{
			    PlayerData[i][pRefuelAmount] += 2;
			    vehicleFuel[PlayerData[i][pRefuel]]++;

			    if(vehicleFuel[PlayerData[i][pRefuel]] >= 100 || PlayerData[i][pCash] < PlayerData[i][pRefuelAmount])
			    {
			        AddPointMoney(POINT_FUEL, PlayerData[i][pRefuelAmount]);
			        GivePlayerCash(i, -PlayerData[i][pRefuelAmount]);
			        SendClientMessageEx(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for {FF6347}$%i{33CCFF}.", PlayerData[i][pRefuelAmount]);

			        PlayerData[i][pRefuel] = INVALID_VEHICLE_ID;
			        PlayerData[i][pRefuelAmount] = 0;
			    }
			}
			if(PlayerData[i][pMiningTime] > 0)
			{
			    PlayerData[i][pMiningTime]--;

			    if(PlayerData[i][pMiningTime] <= 0)
				{
					if(IsPlayerInMiningArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerData[i][pTazedTime] && !PlayerData[i][pCuffed])
				    {
				        new number = random(10) + 1;

				        PlayerData[i][pCP] = CHECKPOINT_MINING;

		                SetPlayerAttachedObject(i, 9, 3929, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 1278.0778, -1267.9661, 12.5413, 2.0);

						if(1 <= number <= 5)
						{
						    PlayerData[i][pMiningRock] = 1;
						    SendClientMessage(i, COLOR_AQUA, "You have dug up an ordinary stone. Drop it off at the marker.");
						}
						else if(number == 6 && !PlayerData[i][pRareTime])
						{
						    SendClientMessage(i, COLOR_AQUA, "Woah, this looks oddly weird to find in the middle of a city, lets show it to the boss.");
						    PlayerData[i][pMiningRock] = 3;
						}
						else
						{
						    PlayerData[i][pMiningRock] = 2;
	                    	SendClientMessage(i, COLOR_AQUA, "You have dug up a quality stone. Drop it off at the marker.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(PlayerData[i][pSweeping] && GetVehicleModel(GetPlayerVehicleID(i)) == 574 && GetVehicleSpeed(GetPlayerVehicleID(i)) > 35.0 && !PlayerData[i][pAFK])
			{
			    PlayerData[i][pSweepTime]--;

			    if(PlayerData[i][pSweepTime] <= 0)
			    {
				    new cost = 1250 + random(100);

				    if(PlayerData[i][pLaborUpgrade] > 0)
					{
						cost += percent(cost, PlayerData[i][pLaborUpgrade]);
					}

			        AddToPaycheck(i, cost);

				    format(string, sizeof(string), "~g~+$%i", cost);
				    GameTextForPlayer(i, string, 5000, 1);

			    	PlayerData[i][pSweepEarnings] += cost;
				    PlayerData[i][pSweepTime] = 20;
				}
			}
			if(PlayerData[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(PlayerData[i][pTaxiPassenger], GetPlayerVehicleID(i)) || PlayerData[i][pTaxiFare] == 0 || PlayerData[PlayerData[i][pTaxiPassenger]][pCash] < PlayerData[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        PlayerData[i][pTaxiTime]++;

			        if(PlayerData[i][pTaxiTime] >= 15)
			        {
			            PlayerData[i][pTaxiTime] = 0;
			            PlayerData[i][pTaxiBill] += PlayerData[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Taxi Meter:~w~ $%i", PlayerData[i][pTaxiBill]);
					GameTextForPlayer(i, string, 3000, 3);
			    }
			}
			if(PlayerData[i][pMuted] > 0)
			{
			    PlayerData[i][pMuted]--;

			    if(PlayerData[i][pMuted] <= 0)
			    {
			        SendClientMessage(i, COLOR_GREY, "You are no longer muted.");
				}
			}
			if(PlayerData[i][pSpamTime] > 0)
			{
			    PlayerData[i][pSpamTime]--;
			}
			if(PlayerData[i][pVehicleCount] > 0)
			{
			    PlayerData[i][pVehicleCount]--;
			}
			if(PlayerData[i][pMechanicCall] > 0)
			{
			    PlayerData[i][pMechanicCall]--;
			}
			if(PlayerData[i][pTaxiCall] > 0)
			{
			    PlayerData[i][pTaxiCall]--;
			}
			if(PlayerData[i][pEmergencyCall] > 0)
			{
			    PlayerData[i][pEmergencyCall]--;
			}
			if(PlayerData[i][pCourierCooldown] > 0)
			{
			    PlayerData[i][pCourierCooldown]--;
			}
   			if(PlayerData[i][pPizzaCooldown] > 0)
			{
       			PlayerData[i][pPizzaCooldown]--;
			}
			if(PlayerData[i][pDetectiveCooldown] > 0)
			{
       			PlayerData[i][pDetectiveCooldown]--;
			}
            if(PlayerData[i][pThiefCooldown] > 0)
			{
       			PlayerData[i][pThiefCooldown]--;
			}
			if(PlayerData[i][pCocaineCooldown] > 0)
			{
       			PlayerData[i][pCocaineCooldown]--;
			}
			if(PlayerData[i][pACFired] > 0)
			{
        		PlayerData[i][pACFired]--;
			}
			if(PlayerData[i][pRapidFire] > 0)
			{
        		PlayerData[i][pRapidFire]--;
			}
			if(PlayerData[i][pGodmode] > 0)
			{
        		PlayerData[i][pGodmode]--;
			}
			if(PlayerData[i][pTicketTime] != 0)
			{
				PlayerData[i][pTicketTime]--;
			}
			if(PlayerData[i][pPreviewHouse] >= 0)
			{
			    PlayerData[i][pPreviewTime]--;

			    if(PlayerData[i][pPreviewTime] <= 0 && GetPlayerInterior(i) == houseInteriors[PlayerData[i][pPreviewType]][intID])
			    {
                    SetPlayerPos(i, HouseInfo[PlayerData[i][pPreviewHouse]][hIntX], HouseInfo[PlayerData[i][pPreviewHouse]][hIntY], HouseInfo[PlayerData[i][pPreviewHouse]][hIntZ]);
					SetPlayerFacingAngle(i, HouseInfo[PlayerData[i][pPreviewHouse]][hIntA]);
					SetPlayerInterior(i, HouseInfo[PlayerData[i][pPreviewHouse]][hInterior]);
					SetPlayerVirtualWorld(i, HouseInfo[PlayerData[i][pPreviewHouse]][hWorld]);
					SetCameraBehindPlayer(i);

					PlayerData[i][pPreviewHouse] = -1;
				    PlayerData[i][pPreviewType] = 0;
				    PlayerData[i][pPreviewTime] = 0;

			        SendClientMessage(i, COLOR_WHITE, "You are no longer previewing the interior as the time period ran out.");
			    }
			}

			if(PlayerData[i][pCocaineTrunk] != INVALID_VEHICLE_ID)
			{
			    if(!IsPlayerInRangeOfBoot(i, PlayerData[i][pCocaineTrunk]))
			    {
			        SendClientMessage(i, COLOR_GREY, "You are no longer cracking the trunk as you left your spot.");
			        PlayerData[i][pCocaineTrunk] = INVALID_VEHICLE_ID;
			    }
			    else if(VehicleInfo[PlayerData[i][pCocaineTrunk]][vLocked])
			    {
			        SendClientMessage(i, COLOR_GREY, "You are no longer cracking the trunk as the vehicle is now locked.");
			        PlayerData[i][pCocaineTrunk] = INVALID_VEHICLE_ID;
			    }
			    else
			    {
			    	PlayerData[i][pCocaineTime]--;

					if(PlayerData[i][pCocaineTime] <= 0)
					{
					    new count;

					    for(new x = 0; x < 5; x ++)
					    {
					        if(VehicleInfo[PlayerData[i][pCocaineTrunk]][vWeapons][x] != 0)
					        {
					            count++;
					        }
					    }

						if(count == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vCocaine] == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vMeth] == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vWeed] == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vPainkillers] == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vMaterials] == 0 && VehicleInfo[PlayerData[i][pCocaineTrunk]][vCash] == 0)
						{
						    SendProximityMessage(i, 20.0, COLOR_PURPLE, "* %s cracks open the trunk of the %s and finds nothing.", GetRPName(i), GetVehicleName(PlayerData[i][pCocaineTrunk]));
						}
						else
						{
                            PlayerData[i][pCocaineFrom] = PlayerData[i][pCocaineTrunk];
                            ShowDialogToPlayer(i, DIALOG_CRACKTRUNK);
						}
						PlayerData[i][pCocaineTrunk] = INVALID_VEHICLE_ID;
					}
					else
					{
					    format(string, sizeof(string), "~w~Cracking trunk... ~r~%i", PlayerData[i][pCocaineTime]);
					    GameTextForPlayer(i, string, 2000, 3);
					}
				}
			}
			if(PlayerData[i][pLootTime] > 0)
			{
			    PlayerData[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && PlayerData[i][pLootTime] <= 0)
			    {
			        new amount = random(500) + 500;

			        ClearAnimations(i, 1);

			        PlayerData[i][pRobCash] += amount;
			        PlayerData[i][pCP] = CHECKPOINT_ROBBERY;
			        PlayerData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SendClientMessageEx(i, COLOR_AQUA, "You have looted {00AA00}$%i{33CCFF} and now have $%i. You can keep looting or deliver the cash to the {FF6347}marker{33CCFF}.", amount, PlayerData[i][pRobCash]);
					SetPlayerCheckpoint(i, 1429.9939, 1066.9581, 9.8938, 3.0);
			    }
			    else if((PlayerData[i][pRobbingBiz] >= 0 && PlayerData[i][pRobbingBiz] == GetInsideBusiness(i)) && PlayerData[i][pLootTime] <= 0)
			    {
			        new amount = random(300) + 100;

			        ClearAnimations(i, 1);

			        PlayerData[i][pRobCash] += amount;
			        PlayerData[i][pCP] = CHECKPOINT_ROBBERY;
			        PlayerData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SendClientMessageEx(i, COLOR_AQUA, "You have looted {00AA00}$%i{33CCFF} and now have $%i. You can keep looting or deliver the cash to the {FF6347}marker{33CCFF} (/stoprobbery).", amount, PlayerData[i][pRobCash]);
					SetPlayerCheckpoint(i, 1429.9939, 1066.9581, 9.8938, 3.0);
					if(PlayerData[i][pRobCash] < 10000)
					{
					    ApplyAnimation(i, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
						GameTextForPlayer(i, "~w~Looting business vault...", 5000, 3);
					    PlayerData[i][pLootTime] = 5;
					}
					else
					{
					    callcmd::stoprobbery(i, "/1");
					}
			    }
			}
			if(PlayerData[i][pHunted] > 0)
			{
			    foreach(new x : Player)
			    {
			    	if(PlayerData[x][pLogged] && GetPlayerInterior(x) == GetPlayerInterior(i) && PlayerData[i][pHunted] > 0)
        			{
    					SetPlayerMarkerForPlayer(x, i, COLOR_RETIRED);
					}
				}
			}
			if(PlayerData[i][pFindTime] > 0)
			{
			    PlayerData[i][pFindTime]--;

			    if(PlayerData[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, PlayerData[i][pFindPlayer], GetPlayerColor(PlayerData[i][pFindPlayer]));
					PlayerData[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((PlayerData[i][pToggleMusic]) || (PlayerData[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != PlayerData[i][pBoomboxListen]))
			{
				PlayerData[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(PlayerData[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    PlayerData[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!PlayerData[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoomboxListen] != boomboxid))
			{
			    PlayerData[i][pBoomboxListen] = boomboxid;

			    if(PlayerData[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, PlayerData[boomboxid][pBoomboxURL]);
			        PlayerData[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(PlayerData[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                PlayerData[i][pPickTime]--;

                if(PlayerData[i][pPickTime] <= 0)
                {
                    new planterid = PlayerData[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !PlayerData[planterid][pLogged] || !PlayerData[planterid][pWeedPlanted])
                    {
                        SendClientMessage(i, COLOR_GREY, "This plant is no longer available to pick.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, PlayerData[planterid][pWeedX], PlayerData[planterid][pWeedY], PlayerData[planterid][pWeedZ]))
					{
					    SendClientMessage(i, COLOR_GREY, "Picking failed. You left the area of the plant.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SendClientMessage(i, COLOR_GREY, "Picking failed. You must stay crouched when picking a plant.");
					}
					else
					{
					    PlayerData[i][pWeed] += PlayerData[planterid][pWeedGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[i][pWeed], PlayerData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessageEx(i, COLOR_AQUA, "You have harvested %i grams of weed from this plant.", PlayerData[planterid][pWeedGrams]);
					    DestroyWeedPlant(planterid);
					}

					PlayerData[i][pPickPlant] = INVALID_PLAYER_ID;
					PlayerData[i][pPickTime] = 0;
				}
			}
			if(PlayerData[i][pCookMeth] > 0)
			{
                PlayerData[i][pCookTime]--;

                if(PlayerData[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 5.0, 1.2179, 2.8095, 999.4284))
                    {
                        SendClientMessage(i, COLOR_GREY, "Cooking failed. You have left the cooking spot.");
                        ResetCooking(i);
                    }
                    else if(PlayerData[i][pEphedrine] <= 0)
                    {
                        SendClientMessage(i, COLOR_GREY, "Cooking failed. You have ran out of ephedrine.");
                        ResetCooking(i);
					}
					else if(PlayerData[i][pMeth] + 2 > GetPlayerCapacity(i, CAPACITY_METH))
                    {
                        SendClientMessage(i, COLOR_GREY, "Cooking failed. You have ran out of inventory space for meth.");
                        ResetCooking(i);
					}
					else
					{
						GameTextForPlayer(i, "~g~+2~w~ grams of meth", 3000, 3);

						PlayerData[i][pEphedrine] -= 1;
						PlayerData[i][pMeth] += 2;
						PlayerData[i][pCookGrams] += 2;

						if((PlayerData[i][pCookGrams] % 4) == 0)
						{
						    PlayerData[i][pMuriaticAcid]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i, meth = %i, muriaticacid = %i WHERE uid = %i", PlayerData[i][pEphedrine], PlayerData[i][pMeth], PlayerData[i][pMuriaticAcid], PlayerData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!PlayerData[i][pEphedrine])
						{
						    SendClientMessageEx(i, COLOR_LIGHTRED, "You ran out of ephedrine therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerData[i][pCookGrams], PlayerData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!PlayerData[i][pMuriaticAcid])
						{
						    SendClientMessageEx(i, COLOR_LIGHTRED, "You ran out of muriatic acid therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerData[i][pCookGrams], PlayerData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(PlayerData[i][pMeth] >= GetPlayerCapacity(i, CAPACITY_METH))
	                    {
	                        SendClientMessageEx(i, COLOR_LIGHTRED, "You ran out of inventory space for meth therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", PlayerData[i][pCookGrams], PlayerData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        PlayerData[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(PlayerData[i][pDrugsUsed] >= 4)
			{
			    PlayerData[i][pDrugsTime]--;

			    if(PlayerData[i][pDrugsTime] <= 0)
			    {
			        SendClientMessage(i, COLOR_GREY, "You are no longer stoned.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);
			        SetPlayerDrunkLevel(i, 500);

			        PlayerData[i][pDrugsUsed] = 0;
			        PlayerData[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
			        SetPlayerDrunkLevel(i, 40000);
				}
			}
            if(PlayerData[i][pCapturingPoint] >= 0)
            {
                PlayerData[i][pCaptureTime]--;

                if(PlayerData[i][pCaptureTime] <= 0)
                {
                    new Float:x, Float:y, Float:z;

                    GetPlayerPos(i, x, y, z);

                    if(PointInfo[PlayerData[i][pCapturingPoint]][pTime] == 0 && PlayerData[i][pPointX] == x && PlayerData[i][pPointY] == y && PlayerData[i][pPointZ] == z)
                    {
                    	SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s attempted to capture %s for %s. It will be theirs in 15 minutes.", GetRPName(i), PointInfo[PlayerData[i][pCapturingPoint]][pName], GangInfo[PlayerData[i][pGang]][gName]);

						PointInfo[PlayerData[i][pCapturingPoint]][pCaptureTime] = 15;
						PointInfo[PlayerData[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
					    SendClientMessage(i, COLOR_GREY, "You moved from your position and therefore failed to capture.");
					}

                    PlayerData[i][pCapturingPoint] = -1;
                    PlayerData[i][pCaptureTime] = 0;
				}

            }
			if(PlayerData[i][pPoisonTime] > 0)
			{
			    new
			        Float:health;
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    PlayerData[i][pPoisonTime]--;
			}

			AnticheatCheck(i);
           // UpdateSpeedCamerasForPlayer(i);
			//GetPlayerHealth(i, PlayerData[i][pHealth]);


			if(PlayerData[i][pGang] >= 0 && !PlayerData[i][pBandana])
			{
				new id;

				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
				    new color;
				 	if(GangInfo[PlayerData[i][pGang]][gColor] == -1 || GangInfo[PlayerData[i][pGang]][gColor] == -256)
					{
						color = 0xC8C8C8FF;
					}
					else
					{
					    color = GangInfo[PlayerData[i][pGang]][gColor];
					}
					PlayerData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
					new stringa[120];
					format(stringa, sizeof(stringa), "{%06x}%s", color >>> 8, GangInfo[PlayerData[i][pGang]][gName]);
			        fRepfamtext[i] = CreateDynamic3DTextLabel(stringa, COLOR_WHITE, 0.0, 0.0, -0.3, 20.0, .attachedplayer = i, .testlos = 1);
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{

					PlayerData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}

			if(!PlayerData[i][pBackup] && !IsPlayerBeingFound(i) && PlayerData[i][pInTurf] == 0)
			{
				// Yeah, this is indeed a mess. But it works. Cleaning this section is on my list.
				if(PlayerData[i][pPaintball] == 2) {
				    SetPlayerColor(i, (PlayerData[i][pPaintballTeam] == 1) ? (0x33CCFF00) : (0xFFFF9900));
				} else if(PlayerData[i][pJailType] == 2) {
				    SetPlayerColor(i, 0xAD7A2100);
				} else if(PlayerData[i][pFaction] >= 0 && PlayerData[i][pDuty] && FactionInfo[PlayerData[i][pFaction]][fType] != FACTION_HITMAN) {
					SetPlayerColor(i, FactionInfo[PlayerData[i][pFaction]][fColor] & ~0xff);
				} else if(PlayerHasJob(i, JOB_TAXIDRIVER) && PlayerData[i][pTaxiFare] > 0) {
				    SetPlayerColor(i, 0xF5DEB300);
				} else if(PlayerData[i][pDonator] > 0 && PlayerData[i][pVIPColor]) {
				    SetPlayerColor(i, 0xFF00FF00);
				} else if(PlayerData[i][pHunted] == 1) {
				    SetPlayerColor(i, 0xFF69B5FF);
				}
			    #if defined zombiemode
		   		if(GetPVarType(playerid, "pZombieBit"))
		    	{
			    	SetPlayerColor(playerid, 0xFFCC0000);
		  	   		return 1;
				}
				if(GetPVarType(playerid, "pIsZombie"))
				{
		  			SetPlayerColor(playerid, 0x0BC43600);
			    	return 1;
				}
		 		if(GetPVarType(playerid, "pEventZombie"))
				{
					SetPlayerColor(playerid, 0x0BC43600);
					return 1;
				}
				#endif
                else if(IsPlayerNPC(i))
                {
                    SetPlayerColor(i, 0x00AA00AA);
				}
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00); //LMAO
				}
			}
		}
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}

    format(string, sizeof(string), "Raw ephedrine\nStock: %i\nPrice: $1,000/gram\n/buydrug ephedrine [amount]", gEphedrineStock);
    UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);
	format(string, sizeof(string), "Marijuana seeds\nStock: %i\nPrice: $500/seed\n/buydrug seeds [amount]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);
	format(string, sizeof(string), "Cocaine\nStock: %i\nPrice: $750/gram\n/buydrug cocaine [amount]", gCocaineStock);
    UpdateDynamic3DTextLabelText(gCocaineText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}
forward LastAlertPayCheck(playerid);
public LastAlertPayCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	ShowPlayerFooter(playerid, "~w~Type /paycheck");
    	SendClientMessage(playerid, COLOR_WHITE, "You have one minute left before your paycheck code expires. Please type /paycheck to get your paycheck.");
        SetTimerEx("DestroyCheck", 60000, false, "i", playerid);
	}
}
forward DestroyCheck(playerid);
public DestroyCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	PayCheckCode[playerid] = 0;
    	SendClientMessage(playerid, COLOR_WHITE, "Your paycheck code expired. Please remember to use /paycheck next time.");
	}
}

CMD:taxhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "The tax is currently set to {33CCFF}%i percent", gTax);
	return 1;
}
CMD:paycheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

 	new string[128];

	format(string, sizeof(string), "Check code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
	Dialog_Show(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}
forward MinuteTimer();
public MinuteTimer()
{
	new hour;

	gettime(.hour = hour);

	RefreshTime();
	if(gacooldown)
	{
		for(new x = 0; x < MAX_GANGS; x++)
		{
		    if(GangInfo[x][gInvCooldown] > 0)
		    {
                GangInfo[x][gInvCooldown]--;
		    }
		}
	}
	if(gHour != hour)
	{
	    SendClientMessageToAllEx(COLOR_WHITE, "Prospect Roleplay: The time is now {AFAFAF}%02d:00{FFFFFF}.", hour);
        autoWeather();
		new budget;
		for(new i = 0; i < MAX_FACTIONS; i ++)
		{
			if(FactionInfo[i][fType] != FACTION_NONE)
			{
				budget += FactionInfo[i][fBudget] - GetTotalFactionPay(i);
			}
		}
	 	AddToTaxVault(-budget);

        for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
				    SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s is now available to capture.", PointInfo[i][pName]);
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

  		foreach(new i : Turf)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

				if(!TurfInfo[i][tTime] && TurfInfo[i][tType] != 8)
				{
				    SendTurfMessage(i, COLOR_YELLOW, "Turf wars: %s is now available to capture.", TurfInfo[i][tName]);
             	}

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		switch(hour)
		{
		    case 0, 4, 8, 12, 16, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if((FactionInfo[i][fType] == FACTION_POLICE || FactionInfo[i][fType] == FACTION_FEDERAL || FactionInfo[i][fType] == FACTION_ARMY) && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		    }
		}

		foreach(new i : Player)
	    {
	        if(PlayerData[i][pLogged] && !PlayerData[i][pKicked])
	        {
		        if(PlayerData[i][pAFK] && PlayerData[i][pAFKTime] > 900)
		        {
		            SendClientMessage(i, COLOR_LIGHTRED, "You didn't receive a paycheck this hour as you were AFK for more than 15 minutes.");
		        }
		        else if(PlayerData[i][pMinutes] < 25)
		        {
		            SendClientMessage(i, COLOR_LIGHTRED, "You are ineligible for a paycheck as you played less than 25 minutes this hour.");
		        }
		        else
		        {
		            new code = Random(100000, 999999);
	  				PayCheckCode[i] = code;

					SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
					SendClientMessage(i, COLOR_WHITE,"Information for tax on paychecks: {33CCFF}/taxhelp");
	  				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
	    			SendClientMessage(i, COLOR_WHITE,"Sign the check to receive your paycheck.");
		    		SendClientMessage(i, COLOR_AQUA, "Type /paycheck");
	    			SendClientMessage(i, COLOR_WHITE,"You have 5 minutes to sign the check before it becomes invalid.");
		    		SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");

					GameTextForPlayer(i, "~w~Type /paycheck", 2500, 1);
		  			SetTimerEx("LastAlertPayCheck", 240000, false, "i", i);
				}
                if(GetFactionType(i) == FACTION_GOVERNMENT)
		  	    {
		  			SendClientMessageEx(i, COLOR_YELLOW2, "%s were taken out of the tax vault for every faction's paycheck.", FormatNumber(budget));
				}
				if(PlayerData[i][pReportMuted])
				{
					PlayerData[i][pReportMuted]--;

					if(PlayerData[i][pReportMuted] <= 0)
					{
					    PlayerData[i][pReportMuted] = 0;
					    PlayerData[i][pReportWarns] = 0;

					    SendClientMessage(i, COLOR_YELLOW, "Your report mute has automatically been lifted.");
				    }
				}
			}
	    }

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}

	    SetWorldTime(hour);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(PlayerData[i][pWeedPlanted] && PlayerData[i][pWeedTime] > 0)
		    {
		        PlayerData[i][pWeedTime]--;

		        if((PlayerData[i][pWeedTime] % 2) == 0)
		        {
		            PlayerData[i][pWeedGrams]++;
		        }
		    }
		    if(PlayerData[i][pLogged] && PlayerData[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(PlayerData[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        PlayerData[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(PlayerData[PointInfo[i][pCapturer]][pGang] == -1)// || PlayerData[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(PlayerData[PointInfo[i][pCapturer]][pGang], 50);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = PlayerData[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						GangInfo[PointInfo[i][pCapturedGang]][gTurfTokens] ++;
						SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s has successfully captured %s for %s.", GetRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Your gang has earned $%i, 50 GP, and 1 Turf Token for successfully capturing this point.", PointInfo[i][pProfits]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET turftokens = %i, cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gTurfTokens], GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 20;

		                ReloadPoint(i);
					}
				}
			}
		}

		foreach(new i : Turf)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	          	if(!IsLawEnforcement(TurfInfo[i][tCapturer]) && (PlayerData[TurfInfo[i][tCapturer]][pGang] == -1))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

		            if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(IsLawEnforcement(TurfInfo[i][tCapturer]))
		                {
							SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has been successfully claimed back by %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
                            GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);
                            TurfInfo[i][tBeingCaptured] = -1;
         		            TurfInfo[i][tCapturedGang] = -5;
							SendTurfMessage(i, COLOR_YELLOW, "Turf wars: The police have succesfully shutdown %s.", TurfInfo[i][tName]);
							for(new y = 0; y < MAX_FACTIONS; y++)
							{
							    if(FactionInfo[y][fType] == FACTION_POLICE || FactionInfo[y][fType] == FACTION_FEDERAL || FactionInfo[y][fType] == FACTION_ARMY)
							    {
									SendFactionMessage(y, COLOR_YELLOW, "TURFS: Your faction has successfully shutdown a turf, You have earned $5000.");
									foreach(new x: Player)
									{
									    if(PlayerData[x][pFaction] == y)
									    {
                                             GivePlayerCash(x, 5000);
									    }
									}
								}
							}
						}
						else
						{
						    new gangid = PlayerData[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;
                            TurfInfo[i][tBeingCaptured] = -1;
						    GiveGangPoints(gangid, 25);
						    SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has been successfully claimed by %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        new amount = 10000 + (5000*GangInfo[gangid][gMatLevel]);
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 15000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %i materials in the stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							    case 2:
							    {
							        new amount = 10 + GangInfo[gangid][gGunLevel];
							        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_UZI] += amount;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned +%i of 9mm/SDPistol/Shotgun/Tec9/Uzi each in its stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_9mm = %i, weapon_sdpistol = %i, weapon_shotgun = %i, weapon_tec9 = %i, weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_UZI], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
			    				{
							        new amount = 10 + GangInfo[gangid][gGunLevel];
								    GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] += amount;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned +%i of MP5/AK47/Rifle each in its stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_mp5 = %i, weapon_ak47 = %i, weapon_rifle = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_AK47], GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 4:
								{
								    new amount = 10 + GangInfo[gangid][gGunLevel];
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += amount;
								    //GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] += amount;
								   // GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] += (amount-8);
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned +%i of AK/Deagle each in its stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_ak47 = %i, weapon_deagle = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_AK47], GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
							    {
							        GangInfo[gangid][gWeed] = GangInfo[gangid][gWeed] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gWeed] + 100;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 50;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of weed & 50 grams of meth in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weed = %i, meth = %i WHERE id = %i", GangInfo[gangid][gWeed], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
							    {
							        GangInfo[gangid][gCocaine] = GangInfo[gangid][gCocaine] + 75 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCocaine] + 75;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 75 grams of cocaine in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cocaine = %i WHERE id = %i", GangInfo[gangid][gCocaine], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 7:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Your gang will now receive 10 percents of all sales in this turf.");
							    }
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 12;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0 && ReportInfo[i][rAccepted] == 0)
		        {
		            SendClientMessage(ReportInfo[i][rReporter], COLOR_GREY, "Your report has expired. You can make an admin request on www.prospectrp.net if you still need help.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}
}

forward FuelTimer();
public FuelTimer()
{
	new driverid;

	foreach(new i: Vehicle)
	{
	    if((driverid = GetVehicleDriver(i)) != INVALID_VEHICLE_ID && !IsABike(i) && GetVehicleParams(i, VEHICLE_ENGINE))//vehfuel
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SendClientMessage(driverid, COLOR_LIGHTRED, "* This vehicle is running low on fuel. Visit the nearest gas station to fill up. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0 && driverid != INVALID_PLAYER_ID && !IsABike(i))
			{
			    GameTextForPlayer(driverid, "~r~Out of fuel", 5000, 3);
			    SetVehicleParams(i, VEHICLE_ENGINE, false);
			   // TogglePlayerControllable(driverid, 0);
			}
		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pLogged] && PlayerData[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward MileageTimer();
public MileageTimer()
{
	foreach(new i: Vehicle)
	{
	    if((GetVehicleDriver(i)) != INVALID_VEHICLE_ID)
	    {
		  	new speed = GetVehicleSpeedKMH(i);
		  	VehicleInfo[i][vMileage] += (speed * 0.00009722222);
 		}
	}
}


forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 3)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SendClientMessage(x, COLOR_PURPLE, "* An explosion can be heard. Smoke is rising from a building nearby.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            PlayerData[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SendClientMessageEx(x, COLOR_DOCTOR, "* All units, a fire has been reported in %s. Please head to the beacon on your map. *", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
	                    }

						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!PlayerData[playerid][pKicked])
	{
	    PlayerData[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    PlayerData[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

#if defined SERVER_INTRO

forward ShowMainMenuCamera(playerid, query);
public ShowMainMenuCamera(playerid, query)
{
	if(!query)
	{
	    InterpolateCameraPos(playerid, 836.923767, -1779.394165, 18.188320, 970.047790, -1792.450439, 21.380487, 15000);
		InterpolateCameraLookAt(playerid, 840.450439, -1775.850219, 18.139299, 966.497192, -1789.023559, 20.574161, 10000);

	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
	}
}

#else

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{

    PlayLoginMusic(playerid);
    ClearChat(playerid);

    ShowRandomCamera(playerid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetRPName(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

#endif


forward ShowRandomCamera(playerid);
public ShowRandomCamera(playerid)
{
    if(PlayerData[playerid][pLogged] == 0)
    {
		switch(random(2))
		{
		    case 0:
		    {
	    		InterpolateCameraPos(playerid, 1534.284423, -1312.871093, 513.042114, 1561.539794, -1314.386108, 16.426090, 25000);
	    		InterpolateCameraLookAt(playerid, 1534.702758, -1312.993041, 508.061126, 1558.089111, -1313.615966, 19.961624, 10000);
			}
			case 1:
			{
				InterpolateCameraPos(playerid, 1402.380126, -1216.866333, 350.959869, 1660.696655, -1303.045410, 74.042839, 7000);
				InterpolateCameraLookAt(playerid, 1404.336425, -1219.865234, 347.469909, 1657.485961, -1304.525756, 77.578369, 7000);
			}
		}
	}
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid) && !IsVehicleBeingPicked(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER TEN MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 300000, false, "i", vehicleid);
	}
}
/*forward HTTP_ListShoutcastStations(index, response_code, data[]);
public HTTP_ListShoutcastStations(index, response_code, data[])
{
}*/

forward HTTP_ProxyCheck(playerid, response_code, data[]);
public HTTP_ProxyCheck(playerid, response_code, data[])
{
	if(response_code == 200)
	{
		if(data[0] == 'Y')
		{
			SendAdminMessage(COLOR_YELLOW,"AdmWarning: %s[%i] has attempted to connect with a proxy/VPN.", GetRPName(playerid), playerid);
  			SendClientMessage(playerid, COLOR_RED, "_________Please disable your proxy/VPN and rejoin!_________");
   			KickPlayer(playerid);
		}
		if(data[0] == 'X')
		{
			printf("WRONG IP FORMAT");
		}
	}
	else
	{
		printf("The request failed! The response code was: %d", response_code);
	}
	return 1;
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SendClientMessage(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SendClientMessage(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SendClientMessageEx(index, COLOR_RED, "The music database is currently not available. (error %i)", response_code);
    }
}

forward Radio_PlayStation(playerid);
public Radio_PlayStation(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new name[128], url[128];

	    cache_get_field_content(0, "name", name);
	    cache_get_field_content(0, "url", url);

	    switch(PlayerData[playerid][pMusicType])
	    {
	        case MUSIC_MP3PLAYER:
	        {
			    ShowActionBubble(playerid, "* %s changes the radio station on their MP3 player.", GetRPName(playerid));
	    		SendClientMessageEx(playerid, COLOR_AQUA, "You are now tuned in to {00AA00}%s{33CCFF}.", name);
				SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
			}
			case MUSIC_BOOMBOX:
			{
			    ShowActionBubble(playerid, "* %s changes the radio station on their boombox.", GetRPName(playerid));
	    		SendClientMessageEx(playerid, COLOR_AQUA, "Your boombox is now tuned in to {00AA00}%s{33CCFF}.", name);
				SetMusicStream(MUSIC_BOOMBOX, playerid, url);
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    ShowActionBubble(playerid, "* %s changes the radio station in their vehicle.", GetRPName(playerid));
		    		SendClientMessageEx(playerid, COLOR_AQUA, "Your radio is now tuned in to {00AA00}%s{33CCFF}.", name);
					SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
				}
			}
		}
	}
}

forward Radio_ListStations(playerid);
public Radio_ListStations(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if((!rows) && PlayerData[playerid][pSearch] && PlayerData[playerid][pPage] == 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "No results found.");
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
	}
	else if(rows)
	{
	    static string[MAX_LISTED_STATIONS * 64], name[128];

	    string[0] = 0;

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "name", name);
	        format(string, sizeof(string), "%s\n%s", string, name);
		}

		if(PlayerData[playerid][pPage] > 1)
		{
		    strcat(string, "\n{FF6347}<< Go back{FFFFFF}");
		}
		if(rows == MAX_LISTED_STATIONS)
		{
		    strcat(string, "\n{00AA00}>> Next page{FFFFFF}");
		}

		Dialog_Show(playerid, DIALOG_MP3RADIORESULTS, DIALOG_STYLE_LIST, "Results", string, "Play", "Back");
	}
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "This player has no active charges on them.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Charged by\tDate\tReason";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		Dialog_Show(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Active charges:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = PlayerData[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SendClientMessageEx(i, COLOR_WHITE, "Your crimes were cleared by %s.", GetRPName(playerid));
                PlayerData[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_OLDSCHOOL, "* HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player doesn't exist and therefore has no information to view.");
	    Dialog_Show(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
	}
	else
	{
	    new string[200];

	    PlayerData[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Name: %s\nGender: %s\nAge: %i years old\nCrimes commited: %i\nTimes arrested: %i\nWanted level: %i/6\nDrivers license: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Female") : ("Male"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Yes") : ("No"));
		Dialog_Show(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Player lookup", string, "Options", "Cancel");
	}
}

public OnPlayerExitVehicle(playerid, vehicleid)
{

	if (CarRadars[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, _crTextTarget[playerid]);
		PlayerTextDrawHide(playerid, _crTextSpeed[playerid]);
		PlayerTextDrawHide(playerid, _crTickets[playerid]);
		DeletePVar(playerid, "_lastTicketWarning");
	}
	if(isharvesting[playerid] == 1)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You left your vehicle, you cannot complete the job.");
//	    callcmd::ccp(playerid);
        CancelActiveCheckpoint(playerid);
		isharvesting[playerid] = 0;
	}
	if(Renting[playerid])
	{
	    SendClientMessage(playerid, COLOR_RED, "You have 60 seconds to go back at truck otherwise you will have to re-pay for it.");
		SetTimerEx("LeftVehicle", 60000, false, "i", playerid);
	}
    if(seatbelt[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        ShowActionBubble(playerid, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
		SendClientMessage(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
	}
	return 1;
}
forward LeftVehicle(playerid);
public LeftVehicle(playerid)
{
	Renting[playerid] = 0;
	SendClientMessage(playerid, COLOR_RED, "Your renting timer is over, you are now able to rent again.");
	return 1;
}

forward OnPlayerUpgradeGarage(playerid, garageid);
public OnPlayerUpgradeGarage(playerid, garageid)
{
	new count, rows = cache_get_row_count(connectionID), vehicleid;

	for(new i = 0; i < rows; i ++)
	{
	    vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	    if((vehicleid == INVALID_VEHICLE_ID) || (vehicleid != INVALID_VEHICLE_ID && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld]))
	    {
	        count++;
		}
	}

	if(count)
	{
		SendClientMessage(playerid, COLOR_GREY, "You have despawned vehicles parked in your garage. Park them outside before upgrading.");
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(GetInsideGarage(i) == garageid)
		    {
				SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
				SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
				SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
				SetCameraBehindPlayer(i);
			}
		}

		GarageInfo[garageid][gType]++;
		GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

		GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
		SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your garage's size to %s for %s.", garageInteriors[GarageInfo[garageid][gType]][intName], FormatNumber(garageInteriors[GarageInfo[garageid][gType]][intPrice]));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_property", "%s (uid: %i) upgraded their garage (id: %i) to %s size for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	}
}

forward OnPlayerCheckMoney(playerid, achievement[]);
public OnPlayerCheckMoney(playerid, achievement[])
{
	if(cache_get_row_count(connectionID))
	{
	    AwardAchievement(playerid, achievement);
	}
}

forward OnPlayerAwardedAchievement(playerid, name[]);
public OnPlayerAwardedAchievement(playerid, name[])
{
	new count = cache_get_row_int(0, 0), string[64];

	format(string, sizeof(string), "~g~~h~~h~%s~n~~w~(%i/%i unlocked)", name, count, sizeof(achievementInfo));
    PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][9], string);

 	for(new i = 6; i < 10; i ++)
 	{
 	    PlayerTextDrawShow(playerid, PlayerData[playerid][pText][i]);
    }

    if(count == sizeof(achievementInfo))
    {
        SendClientMessageToAllEx(COLOR_GREEN, "Congratulations to %s for completeting the achievement challenge, they've received 50 tokens.", GetRPName(playerid));
        SendClientMessage(playerid, COLOR_AQUA, "Well done! You have completed all achievements and received 50 tokens.");
        PlayerData[playerid][pCookies] += 50;
   	}

    SetTimerEx("HideAchievementTextdraw", 10000, false, "i", playerid);
}

forward OnPlayerAchievementCheck(playerid, name[]);
public OnPlayerAchievementCheck(playerid, name[])
{
	if(cache_affected_rows(connectionID) > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM achievements WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAwardedAchievement", "is", playerid, name);
	}
}

forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	if(vehicleid != INVALID_VEHICLE_ID)
	{

		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SendClientMessage(playerid, COLOR_GREY, "This vehicle is occupied.");
        }

        else if(IsVehicleBeingPicked(vehicleid))
        {
            SendClientMessage(playerid, COLOR_GREY, "This vehicle is being broken into!");
        }
        else
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SendClientMessage(playerid, COLOR_GREY, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SendClientMessageEx(playerid, COLOR_AQUA, "Your {FF6347}%s{33CCFF} which is located in %s has been despawned.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}

forward OnPlayerAttemptResetUpgrades(playerid);
public OnPlayerAttemptResetUpgrades(playerid)
{
	if(PlayerData[playerid][pDonator] == 0 && cache_get_row_int(0, 0) > 3)
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i vehicle at the moment. Please sell one of them before using this command.", cache_get_row_int(0, 0), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}
	else
	{
	    PlayerData[playerid][pUpgradePoints] = (PlayerData[playerid][pLevel] - 1) * 2;
	    PlayerData[playerid][pInventoryUpgrade] = 0;
	    PlayerData[playerid][pAddictUpgrade] = 0;
	    PlayerData[playerid][pTraderUpgrade] = 0;
	    PlayerData[playerid][pAssetUpgrade] = 0;
	    PlayerData[playerid][pLaborUpgrade] = 0;
	    PlayerData[playerid][pSpawnHealth] = 50.0;
	    PlayerData[playerid][pSpawnArmor] = 0.0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET upgradepoints = %i, inventoryupgrade = 0, addictupgrade = 0, traderupgrade = 0, assetupgrade = 0, laborupgrade = 0, spawnhealth = '50.0', spawnarmor = '0.0' WHERE uid = %i", PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "You have reset your upgrade points. You now have %i upgrade points available.", PlayerData[playerid][pUpgradePoints]);
	}
}

forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(PlayerData[playerid][pGang]))
    {
        SendClientMessageEx(playerid, COLOR_GREY, "Your gang can't have more than %i members at its level.", GetGangMemberLimit(PlayerData[playerid][pGang]));
    }
    else
    {
    	PlayerData[targetid][pGangOffer] = playerid;
		PlayerData[targetid][pGangOffered] = PlayerData[playerid][pGang];

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has invited you to join {00AA00}%s{33CCFF} (/accept gang).", GetRPName(playerid), GangInfo[PlayerData[playerid][pGang]][gName]);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have invited %s to join your gang.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicleEx(playerid, offeredby, vehicleid, price);
public OnPlayerAttemptBuyVehicleEx(playerid, offeredby, vehicleid, price)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
   	 	GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = PlayerData[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(VehicleInfo[vehicleid][vForSale])
		{
			VehicleInfo[vehicleid][vForSale] = false;
			VehicleInfo[vehicleid][vForSalePrice] = 0;
			DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vForSaleLabel]);
			VehicleInfo[vehicleid][vForSaleLabel] = Text3D:INVALID_3DTEXT_ID;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET forsale = 0, forsaleprice = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	   		mysql_tquery(connectionID, queryBuffer);
		}

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's vehicle offer and paid %s for their %s.", GetRPName(offeredby), FormatNumber(price), GetVehicleName(vehicleid));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your vehicle offer and paid %s for your %s.", GetRPName(playerid), FormatNumber(price), GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{

	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];
        if(PlayerData[playerid][pCash] < DealershipCars[index][dcPrice])
        {
            SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this vehicle.");
        }
        else if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
			AwardAchievement(playerid, "First wheels");
			format(string, 32, "%c%c%c %i", Random('A', 'Z'), Random('A', 'Z'), Random('A', 'Z'), Random(100, 999));
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, plate, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '%s', '%f', '%f', '%f', '%f')", PlayerData[playerid][pID], GetPlayerNameEx(playerid), DealershipCars[index][dcModel], DealershipCars[index][dcPrice], mysql_escaped(string), BusinessInfo[PlayerData[playerid][pDealershipMenu]][cVehicle][0], BusinessInfo[PlayerData[playerid][pDealershipMenu]][cVehicle][1], BusinessInfo[PlayerData[playerid][pDealershipMenu]][cVehicle][2], BusinessInfo[PlayerData[playerid][pDealershipMenu]][cVehicle][3]);
   			mysql_tquery(connectionID, queryBuffer);
   			printf(queryBuffer);
	        AddPointMoney(POINT_AUTOEXPORT, percent(DealershipCars[index][dcPrice], 3));
    	    GivePlayerCash(playerid, -DealershipCars[index][dcPrice]);
	        format(string, sizeof(string), "~r~-$%i", DealershipCars[index][dcPrice]);
    	    GameTextForPlayer(playerid, string, 5000, 1);
	        SendClientMessageEx(playerid, COLOR_GREEN, "%s purchased for $%i. /carstorage to spawn this vehicle.", GetVehicleModelName(DealershipCars[index][dcModel]), DealershipCars[index][dcPrice]);
    	    Log_Write("log_property", "%s (uid: %i) purchased a %s for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleModelName(DealershipCars[index][dcModel]), DealershipCars[index][dcPrice]);
		}
	}
}
forward OnPlayerChangeNumber(playerid, number);
public OnPlayerChangeNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That phone number is already taken.");
	    Dialog_Show(playerid, DIALOG_COOKIENUMBER, DIALOG_STYLE_INPUT, "Number change", "Enter your phone number of choice:", "Submit", "Cancel");
	}
	else
	{
	    PlayerData[playerid][pCookies] -= 25;
	    PlayerData[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cookies = %i, phone = %i WHERE uid = %i", PlayerData[playerid][pCookies], PlayerData[playerid][pPhone], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have redeemed 25 tokens for a {00AA00}number change{33CCFF} to %i.", number);
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That name is already taken, please choose another.");
	}
	else
	{
	    strcpy(PlayerData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		PlayerData[playerid][pFreeNamechange] = 2;
		PlayerData[playerid][pChosenLevel] = level;
	    PlayerData[playerid][pChosenSkin] = skinid;

		SendClientMessageEx(playerid, COLOR_AQUA, "You have requested a namechange to {00AA00}%s{33CCFF} for free, please wait for admin approval.", name);
		SendClientMessageEx(playerid, COLOR_AQUA, "Once the namechange has been approved, you will receive your chosen name, level and skin.");

		SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That name is already taken, please choose another.");

	    if(PlayerData[playerid][pFreeNamechange])
	    {
	        Dialog_Show(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
	}
	else
	{
	    strcpy(PlayerData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(PlayerData[playerid][pFreeNamechange]) {
			SendClientMessageEx(playerid, COLOR_AQUA, "You have requested a namechange to {00AA00}%s{33CCFF} for free, please wait for admin approval.", name);
		} else {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have requested a namechange to {00AA00}%s{33CCFF} for %s, please wait for admin approval.", name, FormatNumber(PlayerData[playerid][pLevel] * 7500));
		}

		SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerRamLandDoor(playerid, objectid, id);
public OnPlayerRamLandDoor(playerid, objectid, id)
{
	if(cache_get_field_content_int(0, "door_opened"))
	{
		SendClientMessage(playerid, COLOR_GREY, "The door is already opened.");
	}
	else
	{
	    new
	        Float:rx,
			Float:ry,
			Float:rz;

		ShowActionBubble(playerid, "* %s rams the door down.", GetRPName(playerid));

        GetDynamicObjectRot(objectid, rx, ry, rz);
        rz -= 90.0;
		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_locked = 0, door_opened = 1 WHERE id = %i", rz, id);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerLockLandDoor(playerid, id);
public OnPlayerLockLandDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    ShowActionBubble(playerid, "* %s locks the door.", GetRPName(playerid));
	} else {
	    ShowActionBubble(playerid, "* %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseLandGate(playerid, objectid, id);
public OnPlayerUseLandGate(playerid, objectid, id)
{
	if(!Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
	{
	    new
         	Float:x = cache_get_field_content_float(0, "move_x"),
 			Float:y = cache_get_field_content_float(0, "move_y"),
 			Float:z = cache_get_field_content_float(0, "move_z");

	    if(x == 0.0 && y == 0.0 && z == 0.0)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "This gate has no destination set.");
	    }
	    else
	    {
			MoveDynamicObject(objectid, x, y, z, 3.0, cache_get_field_content_float(0, "move_rx"), cache_get_field_content_float(0, "move_ry"), cache_get_field_content_float(0, "move_rz"));
			ShowActionBubble(playerid, "* %s uses their remote to open the gate.", GetRPName(playerid));
			Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 1);
		}
	}
	else
	{
		MoveDynamicObject(objectid, cache_get_field_content_float(0, "pos_x"), cache_get_field_content_float(0, "pos_y"), cache_get_field_content_float(0, "pos_z"), 3.0, cache_get_field_content_float(0, "rot_x"), cache_get_field_content_float(0, "rot_y"), cache_get_field_content_float(0, "rot_z"));
		ShowActionBubble(playerid, "* %s uses their remote to close the gate.", GetRPName(playerid));
		Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 0);
	}
}

forward OnPlayerUseLandDoor(playerid, objectid, id);
public OnPlayerUseLandDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SendClientMessage(playerid, COLOR_GREY, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    ShowActionBubble(playerid, "* %s opens the door.", GetRPName(playerid));
		else
		    ShowActionBubble(playerid, "* %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That number is already in the phonebook.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "You have added %s with number %i to the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) added %s with number %i to the phonebook.", GetRPName(playerid), PlayerData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That number is not in the phonebook.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "You have removed %s with number %i from the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) removed %s with number %i from the phonebook.", GetRPName(playerid), PlayerData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player doesn't have any injuries.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_SERVERDEF, "______ %s's Injuries ______", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot with a %s", gettime() - cache_get_row_int(i, 1), GetRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != PlayerData[playerid][pFaction])
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
	}
	/*else if(cache_get_row_int(0, 2) > PlayerData[playerid][pFactionRank])
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
	}*/
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET faction = -1, factionrank = 0, factionleader = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have offline kicked %s from your faction.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != PlayerData[playerid][pGang])
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
	}
	else if(cache_get_row_int(0, 2) > PlayerData[playerid][pGangRank])
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_gang", "%s (uid: %i)  offlinekicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);
        //("log_gang", PlayerData[playerid][pGang], "%s (uid: %i)  offlinekicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = -1, gangrank = 0, gangname = 'none' WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have offline kicked %s from your gang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, gangstring[3000], allyname[32];

	if(GangInfo[gangid-48][gColor] == -1 || GangInfo[gangid-48][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid-48][gColor];
	}

	new alliance = GangInfo[gangid-48][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    format(gangstring, sizeof(gangstring), "{%06x}%s{FFFFFF}\n\nID: %i\nLeader: %s\nMembers: %i/%i\nStrikes: %i/3\nAlly: {%06x}%s{C8C8C8}", color >>> 8, GangInfo[gangid-48][gName], gangid-48, GangInfo[gangid-48][gLeader], members, GetGangMemberLimit(gangid-48), GangInfo[gangid-48][gStrikes], color2 >>> 8, allyname);
	   
	   // SendClientMessage(playerid, 0xC8C8C8AA, gangstring);
	}
	else if(alliance >= 0)
	{
	    format(gangstring, sizeof(gangstring), "{%06x}%s{FFFFFF}\n\nID: %i\nLeader: %s\nMembers: %i/%i\nStrikes: %i/3\nAlly: {%06x}%s", color >>> 8, GangInfo[gangid-48-48][gName], gangid-48, GangInfo[gangid-48][gLeader], members, GetGangMemberLimit(gangid-48), GangInfo[gangid-48][gStrikes], color2 >>> 8, allyname);
	  //  SendClientMessage(playerid, COLOR_GREY2, gangstring);
	}
	else
	{
		format(gangstring, sizeof(gangstring), "{%06x}%s{FFFFFF}\n\nID: %i\nLeader: %s\nMembers: %i/%i\nStrikes: %i/3", color >>> 8, GangInfo[gangid-48][gName], gangid-48, GangInfo[gangid-48][gLeader], members, GetGangMemberLimit(gangid-48), GangInfo[gangid-48][gStrikes]);
	//	SendClientMessageEx(playerid, COLOR_GREY2, "(Id %i) {%06x}%s{C8C8C8} | Leader: %s | Members: %i/%i | Strikes: %i/3", gangid, color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}

	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{F7A763}Gangs", gangstring, "Close", "");
}

forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new string[100];
	new color, members = cache_get_row_int(0, 0);

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}

	if(FactionInfo[factionid][fType] == FACTION_HITMAN && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
    	format(string, sizeof(string), "{%06x}%s\n\n{FFFFFF}ID: %i\nMembers: Hidden\nLeader: Hidden", color >>> 8, FactionInfo[factionid][fName], factionid);
	}
   	else
   	{
		format(string, sizeof(string), "{%06x}%s\n\n{FFFFFF}ID: %i\nMembers: %i\nLeader: %s", color >>> 8, FactionInfo[factionid][fName], factionid, members, FactionInfo[factionid][fLeader]);
	}
	//Dialog_Show(playerid, DIALOG_FACTIONS, DIALOG_STYLE_LIST, "{d3d3d3}Factions", factionlist, "Select", "Close");

	//DisplayFactions(factionlist)

 //SendClientMessage(playerid, COLOR_GREY, factionlist);
 	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{F7A763}Factions", string, "Close", "");
	//
}

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The specified phone number is already taken.");
	}
	else
	{
	    PlayerData[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phone = %i WHERE uid = %i", number, PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -10000);
	    GameTextForPlayer(playerid, "~r~-$10,000", 5000, 1);

	    SendClientMessageEx(playerid, COLOR_AQUA, "You paid $10,000 to change your phone number to %i.", number);
	    Log_Write("log_vip", "%s %s (uid: %i) has purchased phone number: %i for $10000.", GetVIPRank(PlayerData[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerData[playerid][pID], number);
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{

	    if(GetVehicleLinkedID(cache_get_field_content_int(0, "id")) != INVALID_VEHICLE_ID)
     	{
      		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is spawned already. /findcar to track it.");
	    }

	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES && PlayerData[playerid][pDonator] < 3)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;


		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);
		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vAlarm] = cache_get_field_content_int(0, "alarm");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vWeed] = cache_get_field_content_int(0, "weed");
	        VehicleInfo[vehicleid][vCocaine] = cache_get_field_content_int(0, "cocaine");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
	        VehicleInfo[vehicleid][vWeapons][3] = cache_get_field_content_int(0, "weapon_4");
	        VehicleInfo[vehicleid][vWeapons][4] = cache_get_field_content_int(0, "weapon_5");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;
		    VehicleInfo[vehicleid][vRank] = 0;
		    VehicleInfo[vehicleid][carImpounded] = cache_get_field_content_int(0, "carImpounded");
		    VehicleInfo[vehicleid][carImpoundPrice] = cache_get_field_content_int(0, "carImpoundPrice");
			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			VehicleInfo[vehicleid][vForSale] = bool:cache_get_field_content_int(0, "forsale");
			VehicleInfo[vehicleid][vForSalePrice] = cache_get_field_content_int(0, "forsaleprice");

			VehicleInfo[vehicleid][vMileage] = cache_get_field_content_float(0, "mileage");

			if(VehicleInfo[vehicleid][vForSale])
			{
				new forsale[264];
				format(forsale, sizeof(forsale), "FOR SALE\n%s - %s\nPh: %i.", GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vForSalePrice]), PlayerData[playerid][pPhone]);
                VehicleInfo[vehicleid][vForSaleLabel] = CreateDynamic3DTextLabel(forsale, COLOR_GREY2, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 1, -1, 0, -1, 30.0);
 			}
            SetVehicleToRespawn(vehicleid);
			ReloadVehicle(vehicleid);


		    if(!parked)
			{
			    SendClientMessageEx(playerid, COLOR_AQUA, "You have spawned your {00AA00}%s{33CCFF} which is located in %s. /findcar to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
	    }
	}

	return 1;
}

forward OnPlayerAttachCopClothing(playerid, name[], clothingid);
public OnPlayerAttachCopClothing(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

 	SendClientMessageEx(playerid, COLOR_AQUA, "%s added to clothing inventory. /clothing to attach your new item.", name);
}

forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

    if(PlayerData[playerid][pTraderUpgrade] > 0)
    {
		price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
		SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
    }

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
 	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SendClientMessageEx(playerid, COLOR_AQUA, "%s purchased for {00AA00}$%i{33CCFF}. /clothing to find your new item.", name, price);
	SetPVarInt(playerid, "ColorToy", clothingid);
//	Dialog_Show(playerid, Clothing_MatColor1, DIALOG_STYLE_LIST, "Choose a layer.", "First\nSecond", "Select", "Close");
    format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The number you're trying to reach does not belong to any particular person.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", PlayerData[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        ShowActionBubble(playerid, "* %s takes out a cellphone and sends a message.", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_YELLOW, "* SMS to %s (%i): %s *", username, number, msg);
	    SendClientMessage(playerid, COLOR_WHITE, "The player who owns the number is offline, but will receive your text when they log in.");

        GivePlayerCash(playerid, -1);
        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	}
}
//case DIALOG_HOUSERENT:
//{
//	if(response)
//	{

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "This house has reached its limit of %i tenants.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	 //   Dialog_Show(HouseInfo[houseid][hOwner], DIALOG_HOUSERENT, DIALOG_STYLE_MSGBOX, "House Rent", "%s is trying to rent a room in your house, do you accept it?", "Accept", "Decline");
	//	SendClientMessage(playerid, COLOR_GREY, "Your renting deal has been sent to the owner, please wait.");
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerData[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SendClientMessageEx(playerid, COLOR_GREEN, "You are now renting at %s's house. You will pay %s every paycheck.", HouseInfo[houseid][hOwner], FormatNumber(HouseInfo[houseid][hRentPrice]));
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't exist, or is not renting at your home.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && PlayerData[i][pLogged])
	        {
	            PlayerData[i][pRentingHouse] = 0;
	            SendClientMessage(i, COLOR_RED, "You have been evicted from your home by the owner.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SendClientMessageEx(playerid, COLOR_WHITE, "You have evicted %s from your property.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "This player has no flags listed under their account.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_________ %s's Flags _________", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnVerifyRemoveFlag(playerid, targetid);
public OnVerifyRemoveFlag(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new
			desc[128];

	    cache_get_field_content(0, "description", desc);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has removed %s's flag for '%s'.", GetAdmCmdRank(playerid), GetRPName(playerid), GetRPName(targetid), desc);
	}
}

forward OnVerifyRemoveVehicle(playerid, targetid);
public OnVerifyRemoveVehicle(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id")), modelid = cache_get_field_content_int(0, "modelid");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    if(vehicleid != INVALID_VEHICLE_ID)
	    {
	        DespawnVehicle(vehicleid, false);
		}

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has removed %s's %s.", GetAdmCmdRank(playerid), GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}%s{33CCFF} from your vehicle list.", GetRPName(playerid), vehicleNames[modelid - 400]);
	}
}
forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", PlayerData[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}
forward OnAdminSetPhoneNumber(playerid, targetid, number);
public OnAdminSetPhoneNumber(playerid, targetid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The number specified is already taken.");
	}
	else
	{
	    PlayerData[targetid][pPhone] = number;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phone number to %i.", GetRPName(targetid), number);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phone = %i WHERE uid = %i", number, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) phone number to %i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], number);
	}
}

forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has changed %s's account password.",GetAdmCmdRank(playerid), GetRPName(playerid), username);
	}
}



forward OnAdminListVehiclesForRemoval(playerid, targetid);
public OnAdminListVehiclesForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
    {
        SendClientMessage(playerid, COLOR_GREY, "This player owns no vehicles.");
	}
	else
	{
		static string[1024];

		string = "#\tModel\tLocation";

		for(new i = 0; i < rows; i ++)
    	{
			new
				vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				format(string, sizeof(string), "%s\nn/a\t%s\t%s", string, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
			}
			else
			{
				format(string, sizeof(string), "%s\nID %i\t%s\t%s", string, vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
		}

		PlayerData[playerid][pRemoveFrom] = targetid;
		Dialog_Show(playerid, DIALOG_REMOVEPVEH, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to remove.", string, "Select", "Cancel");
	}
}

forward OnAdminListVehicles(playerid, targetid);
public OnAdminListVehicles(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s's Vehicles _____", GetRPName(targetid));

    for(new i = 0; i < rows; i ++)
    {
		new
			vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

		if(vehicleid == INVALID_VEHICLE_ID)
		{
			SendClientMessageEx(playerid, COLOR_GREY2, "ID: n/a | Model: %s | Location: %s", vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Model: %s | Location: %s", vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
		}
	}
}

forward OnAdminOfflineDM(playerid, username[]);
public OnAdminOfflineDM(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
		if(cache_get_field_content_int(0, "adminlevel") > PlayerData[playerid][pAdmin])
		{
		    SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be punished.");
		}
		else
		{
		    new ip[16], id = cache_get_field_content_int(0, "uid"), warns = cache_get_field_content_int(0, "warns");

			warns++;

			if(warns < 3)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = 2, jailtime = %i, dmwarnings = %i, weaponrestricted = %i, prisonedby = '%s', prisonreason = 'DM' WHERE uid = %i", warns * 3600, warns, warns * 4, GetPlayerNameEx(playerid), id);
			    mysql_tquery(connectionID, queryBuffer);

				Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, id, warns * 60);
				SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was offline DM Warned & Prisoned for %i minutes by %s %s, reason: DM (%i/3)", username, warns * 60, GetAdmCmdRank(playerid), GetRPName(playerid), warns);
			}
			else
			{
			    cache_get_field_content(0, "ip", ip);
			    AddBan(username, ip, GetPlayerNameEx(playerid), "DM (3/3 warnings)");

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET dmwarnings = 0 WHERE uid = %i", id);
			    mysql_tquery(connectionID, queryBuffer);

		        Log_Write("log_punishments", "%s (uid: %i) offline banned %s (uid: %i), reason: DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, id);
		        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was offline banned by %s %s, reason: DM (3/3 warnings)", username, GetAdmCmdRank(playerid), GetRPName(playerid));
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
}

forward OnAdminCheckNameHistory(playerid, targetid);
public OnAdminCheckNameHistory(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "This player has no namechange history recorded.");
	}
	else
	{
	    new oldname[MAX_PLAYER_NAME], newname[MAX_PLAYER_NAME], changedby[MAX_PLAYER_NAME], date[24];

		SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Namechange History _____");

		for(new i = 0; i < rows; i ++)
		{
		    cache_get_field_content(i, "oldname", oldname);
		    cache_get_field_content(i, "newname", newname);
		    cache_get_field_content(i, "changedby", changedby);
		    cache_get_field_content(i, "date", date);

		    SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s has changed %s's name to %s.", date, changedby, oldname, newname);
		}
	}
}

forward OnAdminListFlagsForRemoval(playerid, targetid);
public OnAdminListFlagsForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "This player has no flags listed under their account.");
	}
	else
	{
	    static string[4096], flaggedby[24], date[24], desc[128];

	    string = "#\tFlagged by\tDate\tDescription";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        format(string, sizeof(string), "%s\n%i\t%s\t%s\t%s", string, i + 1, flaggedby, date, desc);
	    }

	    PlayerData[playerid][pRemoveFrom] = targetid;
	    Dialog_Show(playerid, DIALOG_REMOVEFLAG, DIALOG_STYLE_TABLIST_HEADERS, "Choose a flag to remove.", string, "Select", "Cancel");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1239;
	LockerInfo[lockerid][lLabel] = 1;

    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSpas12] = { 1, 3500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SendClientMessageEx(playerid, COLOR_GREEN, "* Locker %i created for %s.", lockerid, FactionInfo[factionid][fName]);
}

forward OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z);
public OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z)
{
	LocationInfo[location][locID] = cache_insert_id(connectionID);
	LocationInfo[location][locExists] = true;
	strcpy(LocationInfo[location][locName], name, 32);
    LocationInfo[location][locPosX] = x;
    LocationInfo[location][locPosY] = y;
    LocationInfo[location][locPosZ] = z;

    SendClientMessageEx(playerid, COLOR_GREEN, "* Location [%i] %s created at %.1f, %.1f, %.1f.", location, name, x, y, z);
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /stats for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    PlayerData[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
		PlayerData[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        PlayerData[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        PlayerData[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        PlayerData[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        PlayerData[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        PlayerData[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        PlayerData[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        PlayerData[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        PlayerData[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        PlayerData[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        PlayerData[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        PlayerData[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        PlayerData[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        PlayerData[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        PlayerData[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        PlayerData[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        PlayerData[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");//pVehicleCMD
        PlayerData[MAX_PLAYERS][pAdminStrike] = cache_get_field_content_int(0, "adminstrike");

        PlayerData[MAX_PLAYERS][pGunLicense] = cache_get_field_content_int(0, "gunlicense");
        PlayerData[MAX_PLAYERS][pvLock] = cache_get_field_content_int(0, "vehlock");
        PlayerData[MAX_PLAYERS][pGraphic] = cache_get_field_content_int(0, "graphic");
        PlayerData[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        PlayerData[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        PlayerData[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
        PlayerData[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        PlayerData[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        PlayerData[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
		PlayerData[MAX_PLAYERS][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
		PlayerData[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		PlayerData[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		PlayerData[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		PlayerData[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        PlayerData[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        PlayerData[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        PlayerData[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        PlayerData[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        PlayerData[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        PlayerData[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
        PlayerData[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        PlayerData[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        PlayerData[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        PlayerData[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        PlayerData[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        PlayerData[MAX_PLAYERS][pCookies] = cache_get_field_content_int(0, "cookies");
		PlayerData[MAX_PLAYERS][pMaskID] = cache_get_field_content_int(0, "mask_id");
		PlayerData[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		PlayerData[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		PlayerData[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		PlayerData[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		PlayerData[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		PlayerData[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		PlayerData[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		PlayerData[MAX_PLAYERS][pWeed] = cache_get_field_content_int(0, "weed");
		PlayerData[MAX_PLAYERS][pCocaine] = cache_get_field_content_int(0, "cocaine");
		PlayerData[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		PlayerData[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		PlayerData[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		PlayerData[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		PlayerData[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		PlayerData[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		PlayerData[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		PlayerData[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		PlayerData[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		PlayerData[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		PlayerData[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		PlayerData[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		PlayerData[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		PlayerData[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		PlayerData[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		PlayerData[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		PlayerData[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		PlayerData[MAX_PLAYERS][pComponents] = cache_get_field_content_int(0, "components");
		PlayerData[MAX_PLAYERS][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
		PlayerData[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		PlayerData[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		PlayerData[MAX_PLAYERS][pMechanicSkill] = cache_get_field_content_int(0, "mechanicskill");
		PlayerData[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		PlayerData[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
    	PlayerData[MAX_PLAYERS][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
    	PlayerData[MAX_PLAYERS][pThiefSkill] = cache_get_field_content_int(0, "thiefskill");
		PlayerData[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		PlayerData[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		PlayerData[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		PlayerData[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		PlayerData[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		PlayerData[MAX_PLAYERS][pTogglePoints] = cache_get_field_content_int(0, "togglepoints");
		PlayerData[MAX_PLAYERS][pToggleTurfs] = cache_get_field_content_int(0, "toggleturfs");
		PlayerData[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		PlayerData[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		PlayerData[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		PlayerData[MAX_PLAYERS][pTogglePM] = cache_get_field_content_int(0, "togglepm");
		PlayerData[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		PlayerData[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		PlayerData[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		PlayerData[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		PlayerData[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		PlayerData[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		PlayerData[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		PlayerData[MAX_PLAYERS][pToggleReports] = cache_get_field_content_int(0, "togglereports");
		PlayerData[MAX_PLAYERS][pToggleWhisper] = cache_get_field_content_int(0, "togglewhisper");
		PlayerData[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		PlayerData[MAX_PLAYERS][pDonator] = cache_get_field_content_int(0, "vippackage");
		PlayerData[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		PlayerData[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		PlayerData[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		PlayerData[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		PlayerData[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		PlayerData[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		PlayerData[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		PlayerData[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		PlayerData[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		PlayerData[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		PlayerData[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		PlayerData[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		PlayerData[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		PlayerData[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		PlayerData[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		PlayerData[MAX_PLAYERS][pAmmo][0] = cache_get_field_content_int(0, "ammo_0");
		PlayerData[MAX_PLAYERS][pAmmo][1] = cache_get_field_content_int(0, "ammo_1");
		PlayerData[MAX_PLAYERS][pAmmo][2] = cache_get_field_content_int(0, "ammo_2");
		PlayerData[MAX_PLAYERS][pAmmo][3] = cache_get_field_content_int(0, "ammo_3");
		PlayerData[MAX_PLAYERS][pAmmo][4] = cache_get_field_content_int(0, "ammo_4");
		PlayerData[MAX_PLAYERS][pAmmo][5] = cache_get_field_content_int(0, "ammo_5");
		PlayerData[MAX_PLAYERS][pAmmo][6] = cache_get_field_content_int(0, "ammo_6");
		PlayerData[MAX_PLAYERS][pAmmo][7] = cache_get_field_content_int(0, "ammo_7");
		PlayerData[MAX_PLAYERS][pAmmo][8] = cache_get_field_content_int(0, "ammo_8");
		PlayerData[MAX_PLAYERS][pAmmo][9] = cache_get_field_content_int(0, "ammo_9");
		PlayerData[MAX_PLAYERS][pAmmo][10] = cache_get_field_content_int(0, "ammo_10");
		PlayerData[MAX_PLAYERS][pAmmo][11] = cache_get_field_content_int(0, "ammo_11");
		PlayerData[MAX_PLAYERS][pAmmo][12] = cache_get_field_content_int(0, "ammo_12");
		PlayerData[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		PlayerData[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		PlayerData[MAX_PLAYERS][pFactionLeader] = cache_get_field_content_int(0, "factionleader");
		PlayerData[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		PlayerData[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		PlayerData[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		PlayerData[MAX_PLAYERS][pCrew] = cache_get_field_content_int(0, "crew");
		PlayerData[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		PlayerData[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		PlayerData[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		PlayerData[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		PlayerData[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		PlayerData[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		PlayerData[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		PlayerData[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
		PlayerData[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		PlayerData[MAX_PLAYERS][pWebDev] = cache_get_field_content_int(0, "webdev");
		PlayerData[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		PlayerData[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
		PlayerData[MAX_PLAYERS][pFormerAdmin] = cache_get_field_content_int(0, "FormerAdmin");
		PlayerData[MAX_PLAYERS][pDeveloper] = cache_get_field_content_int(0, "scripter");
		PlayerData[MAX_PLAYERS][pWeedPlanted] = cache_get_field_content_int(0, "weedplanted");
		PlayerData[MAX_PLAYERS][pWeedTime] = cache_get_field_content_int(0, "weedtime");
		PlayerData[MAX_PLAYERS][pWeedGrams] = cache_get_field_content_int(0, "weedgrams");
		PlayerData[MAX_PLAYERS][pWeedX] = cache_get_field_content_float(0, "weed_x");
		PlayerData[MAX_PLAYERS][pWeedY] = cache_get_field_content_float(0, "weed_y");
		PlayerData[MAX_PLAYERS][pWeedZ] = cache_get_field_content_float(0, "weed_z");
		PlayerData[MAX_PLAYERS][pWeedA] = cache_get_field_content_float(0, "weed_a");
		PlayerData[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		PlayerData[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        PlayerData[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        PlayerData[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
        PlayerData[MAX_PLAYERS][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
		PlayerData[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		PlayerData[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		PlayerData[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		PlayerData[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		PlayerData[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		PlayerData[MAX_PLAYERS][pClothes] = cache_get_field_content_int(0, "clothes");
		PlayerData[MAX_PLAYERS][pShowLands] = cache_get_field_content_int(0, "showlands");
		PlayerData[MAX_PLAYERS][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
		PlayerData[MAX_PLAYERS][pWatchOn] = cache_get_field_content_int(0, "watchon");
		PlayerData[MAX_PLAYERS][pGPSOn] = cache_get_field_content_int(0, "gpson");
		PlayerData[MAX_PLAYERS][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
        PlayerData[MAX_PLAYERS][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
        PlayerData[MAX_PLAYERS][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
        PlayerData[MAX_PLAYERS][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
        PlayerData[MAX_PLAYERS][pThiefCooldown] = cache_get_field_content_int(0, "thiefcooldown");
        PlayerData[MAX_PLAYERS][pCocaineCooldown] = cache_get_field_content_int(0, "crackcooldown");
    	PlayerData[MAX_PLAYERS][pGasCan] = cache_get_field_content_int(0, "gascan");
    	PlayerData[MAX_PLAYERS][pDuty] = cache_get_field_content_int(0, "duty");
    	PlayerData[MAX_PLAYERS][pBandana] = cache_get_field_content_int(0, "bandana");
        PlayerData[MAX_PLAYERS][pPassport] = cache_get_field_content_int(0, "passport");
        PlayerData[MAX_PLAYERS][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
        PlayerData[MAX_PLAYERS][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
        PlayerData[MAX_PLAYERS][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
        PlayerData[MAX_PLAYERS][pNewbieMuteTime] = cache_get_field_content_int(0, "newbiemutetime");
		PlayerData[MAX_PLAYERS][pReportMuteTime] = cache_get_field_content_int(0, "reportmutetime");
		PlayerData[MAX_PLAYERS][pGlobalMuteTime] = cache_get_field_content_int(0, "globalmutetime");
		PlayerData[MAX_PLAYERS][pAdminHide] = cache_get_field_content_int(0, "adminhide");
		PlayerData[MAX_PLAYERS][pInsurance] = cache_get_field_content_int(0, "insurance");
		PlayerData[MAX_PLAYERS][pRope] = cache_get_field_content_int(0, "rope");
		PlayerData[MAX_PLAYERS][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
		PlayerData[MAX_PLAYERS][pTotalFires] = cache_get_field_content_int(0, "totalfires");

		strcpy(PlayerData[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s offline flagged %s's account for '%s'.",GetAdmCmdRank(playerid), GetRPName(playerid), username, desc);
	}
}

forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SendClientMessage(playerid, COLOR_GREY, "This player has no ban history recorded.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SendClientMessageEx(playerid, COLOR_GREEN, "%s last logged in on the %s (server time).", username, date);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > PlayerData[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    if(level == 0)
	    {
   			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, helpermanager = 0, webdev = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE username = '%e'", username);
			mysql_tquery(connectionID, queryBuffer);
	    }

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has offline set %s's admin level to %i.",GetAdmCmdRank(playerid), GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, level);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "No-one", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tBeingCaptured] = -1;
	TurfInfo[turfid][tTime] = 12;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
    Iter_Add(Turf, turfid);

	ReloadTurf(turfid);
	SendClientMessageEx(playerid, COLOR_GREEN, "* Turf %i created successfully.", turfid);
}

forward OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:heightx, Float:heighty, Float:heightz);
public OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:heightx, Float:heighty, Float:heightz)
{
	GetPlayerPos(playerid, heightx, heighty, heightz);
	strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);
	LandInfo[landid][lExists] = 1;
	LandInfo[landid][lID] = cache_insert_id(connectionID);
	LandInfo[landid][lOwnerID] = 0;
	LandInfo[landid][lLevel] = 1;
	LandInfo[landid][lPrice] = price;
	LandInfo[landid][lMinX] = minx;
	LandInfo[landid][lMinY] = miny;
	LandInfo[landid][lMaxX] = maxx;
	LandInfo[landid][lMaxY] = maxy;
	LandInfo[landid][lHeightX] = heightx;
	LandInfo[landid][lHeightY] = heighty;
	LandInfo[landid][lHeightZ] = heightz;
	LandInfo[landid][lGangZone] = -1;
    LandInfo[landid][lArea] = -1;
    Iter_Add(Land, landid);

    ReloadLand(landid);
    SendClientMessageEx(playerid, COLOR_GREEN, "* Land %i created successfully.", landid);
}

forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 19198;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eGang] = -1;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eType] = 0;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIconID] = -1;
	EntranceInfo[entranceid][eColor] = -256;
    Iter_Add(Entrance, entranceid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SendClientMessageEx(playerid, COLOR_GREEN, "* Entrance %i created successfully.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);

	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 0;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bMaterials] = 0;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	Iter_Add(Business, businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has created a business id %i, type %i.",GetAdmCmdRank(playerid), GetRPName(playerid), businessid, BusinessInfo[businessid][bType]);
	SendClientMessageEx(playerid, COLOR_GREEN, "* Business %i created successfully.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;
	Iter_Add(Garage, garageid);
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SendClientMessageEx(playerid, COLOR_GREEN, "* Garage %i created successfully.", garageid);
}

forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeed] = 0;
	HouseInfo[houseid][hCocaine] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hDelivery] = 1;
	HouseInfo[houseid][hLights] = 1;
	Iter_Add(House, houseid);

	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has created house id %i, type %i.",GetAdmCmdRank(playerid), GetRPName(playerid), houseid, HouseInfo[houseid][hType]);
	SendClientMessageEx(playerid, COLOR_GREEN, "* House %i created successfully.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > PlayerData[playerid][pAdmin])
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. You cannot delete them.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM "#TABLE_USERS" WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has deleted %s's account.", GetAdmCmdRank(playerid), GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player hasn't killed, or has been killed, by anyone since they registered.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SendClientMessage(playerid, COLOR_SERVERDEF, "________ Kills & Deaths ________");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == PlayerData[targetid][pID])
	        {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == PlayerData[targetid][pID])
	        {
	            SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s was killed by %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player hasn't been damaged by anyone since they connected.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SERVERDEF, "___________ Damage Received ___________");

	    for(new i = 0; i < rows; i ++)
	    {
	        SendClientMessageEx(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot by %s with a %s", gettime() - cache_get_row_int(i, 2), GetRPName(targetid), GetRPName(cache_get_row_int(i, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SendClientMessageEx(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player hasn't registered any shots since they connected.");
	}
	else
	{
	    new weaponid, hittype, timestamp, hit[48];

	    SendClientMessageEx(playerid, COLOR_SERVERDEF, "___________ %i Last Shots ___________", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", hit);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(hit, sizeof(hit), "Vehicle (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    hit = "Missed";
			}

			SendClientMessageEx(playerid, COLOR_YELLOW, "[%i seconds ago] %s shot a %s and hit: %s", gettime() - timestamp, GetRPName(targetid), GetWeaponNameEx(weaponid), hit);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "This IP address is already banned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SendClientMessageEx(i, COLOR_YELLOW, "Your IP address has been banned by %s, reason: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has banned IP '%s', reason: %s", GetAdmCmdRank(playerid), GetRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "There are no bans that match your criteria.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was rangebanned by %s, reason: %s", date, ip, bannedby, reason);
	        } else {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was banned by %s, reason: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was rangebanned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was permanently banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This player is permanently banned. Permabans may only be lifted by management.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has unbanned %s.",GetAdmCmdRank(playerid), GetRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "There is no banned player known by that name.");
	}

	return 1;
}

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0))
	{
	    SendClientMessage(playerid, COLOR_GREY, "This player's account is already locked. /unlockaccount to unlock it.");
	}
	else if(cache_get_row_int(0, 1) > PlayerData[playerid][pAdmin])
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has locked %s's account.",GetAdmCmdRank(playerid), GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) locked %s's account.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has unlocked %s's account.",GetAdmCmdRank(playerid), GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) unlocked %s's account.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The name specified is taken already.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_namehistory VALUES(null, %i, '%s', '%s', '%s', NOW())", PlayerData[targetid][pID], GetPlayerNameEx(targetid), name, GetPlayerNameEx(playerid));
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has changed %s's name to %s.", GetAdmCmdRank(playerid),GetRPName(playerid), GetRPName(targetid), name);
		SendClientMessageEx(targetid, COLOR_WHITE, "%s changed your name from %s to %s.", GetRPName(playerid), GetRPName(targetid), name);

		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerData[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was offline banned by %s %s, reason: %s", username, GetAdmCmdRank(playerid), GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerData[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was offline prisoned for %i minutes by %s %s, reason: %s", username, minutes, GetAdmCmdRank(playerid), GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerData[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be fined.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was offline fined for %s by %s %s, reason: %s", username, FormatNumber(amount), GetAdmCmdRank(playerid),GetRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], username, amount, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "That player is not registered.");
	}

	return 1;
}


public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\nError: %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		fwrite(file, string);
		printf(string);
		fclose(file);
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: A MySQL error occurred (error %i). Details written to mysql_error.txt.", errorid);

	return 1;
}


forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new bannedby[24], date[24], reason[128];

	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

	            GameTextForPlayer(extraid, "~r~You are banned!", 999999, 3);
				if(cache_get_field_content_int(0, "permanent"))
				    SendClientMessageEx(extraid, COLOR_YELLOW, "You are permanently banned from this server.");
				else
					SendClientMessageEx(extraid, COLOR_YELLOW, "You are banned from this server. You can appeal your ban at www.prospectrp.net.");

				SendClientMessageEx(extraid, COLOR_LIGHTRED, "Admin: %s", bannedby);
	            SendClientMessageEx(extraid, COLOR_LIGHTRED, "Date: %s", date);
	            SendClientMessageEx(extraid, COLOR_LIGHTRED, "Reason: %s", reason);

				KickPlayer(extraid);
	        }
	        else
	        {
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
	        if(rows)
	        {
				ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
			    if(strfind(GetPlayerNameEx(extraid), "_") == -1)
			    {
			        Dialog_Show(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
			    }
			    else
			    {
				    ShowDialogToPlayer(extraid, DIALOG_REGISTER);
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

			//if(id)
	        //{
	        	/*mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM "#TABLE_USERS" WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);*/

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM "#TABLE_USERS" WHERE uid = %i", id);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
			//ShowDialogToPlayer(extraid, DIALOG_RULES);
	        //}
	    }
	    case THREAD_PROCESS_LOGIN:
	    {
	        if(!rows)
	        {
	            PlayerData[extraid][pLoginTries]++;

				if(PlayerData[extraid][pLoginTries] < 3)
				{
				    ShowDialogToPlayer(extraid, DIALOG_LOGIN);
		            SendClientMessageEx(extraid, COLOR_ORANGE, "[WARNING]{ffffff} Submited password is incorrect, you have %i attempts left.", 3 - PlayerData[extraid][pLoginTries]);
				}
				else
				{
				    Dialog_Show(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{00aa00}P:RP{FFFFFF} | Unable to Login", "{FFFFFF}It seems like you've forgotten your password.\n\nYou can reset you can reset your password using your pin code at the User Control Panel.", "Cancel", "");
				    KickPlayer(extraid);
				}
		    }
	        else if(cache_get_field_content_int(0, "locked"))
         	{
          		SendClientMessage(extraid, COLOR_LIGHTRED, "* This account is currently locked. Post an administrative request to have it lifted.");
          		Dialog_Show(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{00aa00}P:RP{FFFFFF} | Unable to Login", "{FFFFFF}This account is currently locked.\n\nYou can post an administrative request on {00aa00}www.prospectrp.net{FFFFFF} to have it lifted.", "Cancel", "");
            	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s tried to login with a locked account.", GetRPName(extraid));
             	KickPlayer(extraid);
            }
			else
			{
   			    if(PlayerData[extraid][pAdminDuty])
   			    {
   					ResetPlayerWeaponsEx(extraid);
   				}
	            new date[64], string[128];
	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", PlayerData[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", PlayerData[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", PlayerData[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", PlayerData[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", PlayerData[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", PlayerData[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "customtitle", PlayerData[extraid][pCustomTitle], connectionID, 64);
				PlayerData[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");
	            PlayerData[extraid][pID] = cache_get_field_content_int(0, "uid");
				PlayerData[extraid][pSetup] = cache_get_field_content_int(0, "setup");
                PlayerData[extraid][pGender] = cache_get_field_content_int(0, "gender");
                PlayerData[extraid][pAge] = cache_get_field_content_int(0, "age");
                PlayerData[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                PlayerData[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                PlayerData[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                PlayerData[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                PlayerData[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                PlayerData[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                PlayerData[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                PlayerData[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                PlayerData[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                PlayerData[extraid][pWorld] = cache_get_field_content_int(0, "world");
                PlayerData[extraid][pCash] = cache_get_field_content_int(0, "cash");
                PlayerData[extraid][pBank] = cache_get_field_content_int(0, "bank");
                PlayerData[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                PlayerData[extraid][pLevel] = cache_get_field_content_int(0, "level");
                PlayerData[extraid][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
                PlayerData[extraid][pTruckingXP] = cache_get_field_content_int(0, "truckingxp");
                PlayerData[extraid][pTruckingLevel] = cache_get_field_content_int(0, "truckinglevel");
                PlayerData[extraid][pVehicleCMD] = cache_get_field_content_int(0, "vehiclecmd");//pVehicleCMD
                PlayerData[extraid][pCrowbar] = cache_get_field_content_int(0, "crowbar");
                PlayerData[extraid][pAdminStrike] = cache_get_field_content_int(0, "adminstrike");
				PlayerData[extraid][pDJ] = cache_get_field_content_int(0, "dj");
				PlayerData[extraid][pHouseAlarm] = cache_get_field_content_int(0, "housealarm");
                PlayerData[extraid][pvLock] = cache_get_field_content_int(0, "vehlock");
                PlayerData[extraid][pGraphic] = cache_get_field_content_int(0, "graphic");
                PlayerData[extraid][pGunLicense] = cache_get_field_content_int(0, "gunlicense");
                PlayerData[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                PlayerData[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                PlayerData[extraid][pHours] = cache_get_field_content_int(0, "hours");
				PlayerData[extraid][pHelmet] = cache_get_field_content_int(0, "helmet");
                PlayerData[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                PlayerData[extraid][pHealth] = cache_get_field_content_float(0, "health");
                PlayerData[extraid][pArmor] = cache_get_field_content_float(0, "armor");
				PlayerData[extraid][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
				PlayerData[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				PlayerData[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				PlayerData[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				PlayerData[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                PlayerData[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                PlayerData[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                PlayerData[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
                PlayerData[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                PlayerData[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                PlayerData[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                PlayerData[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                PlayerData[extraid][pToggleVehCam] = cache_get_field_content_int(0, "togglevehicle");
                PlayerData[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                PlayerData[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                PlayerData[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                PlayerData[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                PlayerData[extraid][pCookies] = cache_get_field_content_int(0, "cookies");
				PlayerData[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				PlayerData[extraid][pJob] = cache_get_field_content_int(0, "job");
				PlayerData[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				PlayerData[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				PlayerData[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				PlayerData[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				PlayerData[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
				PlayerData[extraid][pWeed] = cache_get_field_content_int(0, "weed");
				PlayerData[extraid][pCocaine] = cache_get_field_content_int(0, "cocaine");
				PlayerData[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				PlayerData[extraid][pMaskID] = cache_get_field_content_int(0, "mask_id");
				PlayerData[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				PlayerData[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				PlayerData[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				PlayerData[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				PlayerData[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				PlayerData[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				PlayerData[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				PlayerData[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				PlayerData[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				PlayerData[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				PlayerData[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				PlayerData[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				PlayerData[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				PlayerData[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				PlayerData[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				PlayerData[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				PlayerData[extraid][pComponents] = cache_get_field_content_int(0, "components");
				PlayerData[extraid][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
				PlayerData[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				PlayerData[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				PlayerData[extraid][pMechanicSkill] = cache_get_field_content_int(0, "mechanicskill");
				PlayerData[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				PlayerData[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
            	PlayerData[extraid][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
            	PlayerData[extraid][pThiefSkill] = cache_get_field_content_int(0, "thiefskill");
				PlayerData[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				PlayerData[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				PlayerData[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				PlayerData[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				PlayerData[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				PlayerData[extraid][pTogglePoints] = cache_get_field_content_int(0, "togglepoints");
				PlayerData[extraid][pToggleTurfs] = cache_get_field_content_int(0, "toggleturfs");
				PlayerData[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				PlayerData[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				PlayerData[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				PlayerData[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				PlayerData[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				PlayerData[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				PlayerData[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				PlayerData[extraid][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
				PlayerData[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				PlayerData[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				PlayerData[extraid][pToggleReports] = cache_get_field_content_int(0, "togglereports");
				PlayerData[extraid][pToggleWhisper] = cache_get_field_content_int(0, "togglewhisper");
				PlayerData[extraid][pToggleBug] = cache_get_field_content_int(0, "togglebug");
				PlayerData[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
				PlayerData[extraid][pDonator] = cache_get_field_content_int(0, "vippackage");
				PlayerData[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				PlayerData[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
                PlayerData[extraid][pSpawnSelect] = cache_get_field_content_int(0, "spawntype");
				PlayerData[extraid][pSpawnHouse] = cache_get_field_content_int(0, "spawnhouse");


				for(new i, wepid[64]; i < 13; i++)
				{
				    format(wepid, sizeof(wepid), "weapon_%d", i);
					PlayerData[extraid][pWeapons][i] = cache_get_field_content_int(0, wepid);
				}
				for(new i, ammoid[64]; i < 13; i++)
				{
				    format(ammoid, sizeof(ammoid), "ammo_%d", i);
					PlayerData[extraid][pAmmo][i] = cache_get_field_content_int(0, ammoid);
				}


				PlayerData[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				PlayerData[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				PlayerData[extraid][pFactionLeader] = cache_get_field_content_int(0, "factionleader");
				PlayerData[extraid][pGang] = cache_get_field_content_int(0, "gang");
				PlayerData[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				PlayerData[extraid][pDivision] = cache_get_field_content_int(0, "division");
				PlayerData[extraid][pCrew] = cache_get_field_content_int(0, "crew");
				PlayerData[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				PlayerData[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				PlayerData[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				PlayerData[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				PlayerData[extraid][pReports] = cache_get_field_content_int(0, "reports");
				PlayerData[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				PlayerData[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				PlayerData[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				PlayerData[extraid][pWebDev] = cache_get_field_content_int(0, "webdev");
				PlayerData[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				PlayerData[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				PlayerData[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				PlayerData[extraid][pFormerAdmin] = cache_get_field_content_int(0, "FormerAdmin");
				PlayerData[extraid][pDeveloper] = cache_get_field_content_int(0, "scripter");
				PlayerData[extraid][pHelperManager] = cache_get_field_content_int(0, "helpermanager");
				PlayerData[extraid][pDynamicAdmin] = cache_get_field_content_int(0, "dynamicadmin");
				PlayerData[extraid][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
				PlayerData[extraid][pHumanResources] = cache_get_field_content_int(0, "humanresources");
				PlayerData[extraid][pComplaintMod] = cache_get_field_content_int(0, "complaintmod");
				PlayerData[extraid][pWeedPlanted] = cache_get_field_content_int(0, "weedplanted");
				PlayerData[extraid][pWeedTime] = cache_get_field_content_int(0, "weedtime");
				PlayerData[extraid][pWeedGrams] = cache_get_field_content_int(0, "weedgrams");
				PlayerData[extraid][pWeedX] = cache_get_field_content_float(0, "weed_x");
				PlayerData[extraid][pWeedY] = cache_get_field_content_float(0, "weed_y");
				PlayerData[extraid][pWeedZ] = cache_get_field_content_float(0, "weed_z");
				PlayerData[extraid][pWeedA] = cache_get_field_content_float(0, "weed_a");
				PlayerData[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				PlayerData[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                PlayerData[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                PlayerData[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
                PlayerData[extraid][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
				PlayerData[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				PlayerData[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				PlayerData[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				PlayerData[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				PlayerData[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				PlayerData[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				PlayerData[extraid][pShowLands] = cache_get_field_content_int(0, "showlands");
				PlayerData[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				PlayerData[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				PlayerData[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				PlayerData[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
                PlayerData[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                PlayerData[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                PlayerData[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
                PlayerData[extraid][pThiefCooldown] = cache_get_field_content_int(0, "thiefcooldown");
                PlayerData[extraid][pCocaineCooldown] = cache_get_field_content_int(0, "crackcooldown");
            	PlayerData[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	PlayerData[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	PlayerData[extraid][pBandana] = cache_get_field_content_int(0, "bandana");
                PlayerData[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                PlayerData[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                PlayerData[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                PlayerData[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                PlayerData[extraid][pNewbieMuteTime] = cache_get_field_content_int(0, "newbiemutetime");
				PlayerData[extraid][pReportMuteTime] = cache_get_field_content_int(0, "reportmutetime");
				PlayerData[extraid][pGlobalMuteTime] = cache_get_field_content_int(0, "globalmutetime");
				PlayerData[extraid][pAdminHide] = cache_get_field_content_int(0, "adminhide");
				PlayerData[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
				PlayerData[extraid][pRope] = cache_get_field_content_int(0, "rope");
				PlayerData[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				PlayerData[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				PlayerData[extraid][pPasswordChanged] = cache_get_field_content_int(0, "passwordchanged");
				PlayerData[extraid][pFirstAid] = cache_get_field_content_int(0, "firstaid");
				PlayerData[extraid][pPoliceScanner] = cache_get_field_content_int(0, "policescanner");
				PlayerData[extraid][pBodykits] = cache_get_field_content_int(0, "bodykits");
				PlayerData[extraid][pRimkits] = cache_get_field_content_int(0, "rimkits");
				PlayerData[extraid][pScannerOn] = cache_get_field_content_int(0, "scanneron");
				PlayerData[extraid][pBlindfold] = cache_get_field_content_int(0, "blindfold");

				new tempkey = cache_get_field_content_int(0, "landkeys");
				for(new i = 0; i < MAX_LANDS; i++)
				{
				    if(LandInfo[i][lExists])
				    {
				        if(LandInfo[i][lID] == tempkey)
				        {
				            PlayerData[extraid][pLandPerms] = i;
				            break;
				        }
				    }
				}
				PlayerData[extraid][pBugged] = cache_get_field_content_int(0, "bugged");
				PlayerData[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
				PlayerData[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
				PlayerData[extraid][pSkates] = cache_get_field_content_int(0, "rollerskates");
				PlayerData[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");

				if(PlayerData[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM "#TABLE_USERS" WHERE uid = %i", PlayerData[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(PlayerData[extraid][pMarriedName], "None", MAX_PLAYER_NAME);
				}
                PlayerData[extraid][pLogged] = 1;
                PlayerData[extraid][pACTime] = gettime() + 5;

                if(!PlayerData[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }
 				if(!PlayerData[extraid][pToggleTextdraws])
				{
					RefreshPlayerTextdraws(extraid);
				}

				if(cache_get_field_content_int(extraid, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SendClientMessageEx(extraid, COLOR_GREEN, "%i players who you've referred reached level 3. Therefore you received %i tokens!", count, count * 10);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET refercount = 0 WHERE uid = %i", PlayerData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!PlayerData[extraid][pSetup])
                {
                    if(!PlayerData[extraid][pAdminDuty] && !PlayerData[extraid][pToggleCam])
                    {
                        PlayerData[extraid][pLoginCamera] = 1;
					}
					else
					{
					    PlayerData[extraid][pLoginCamera] = 0;
					}

                    if(PlayerData[extraid][pWeedPlanted] && PlayerData[extraid][pWeedObject] == INVALID_OBJECT_ID)
                    {
                        PlayerData[extraid][pWeedObject] = CreateDynamicObject(3409, PlayerData[extraid][pWeedX], PlayerData[extraid][pWeedY], PlayerData[extraid][pWeedZ] - 1.8, 0.0, 0.0, PlayerData[extraid][pWeedA]);
					}
					if(PlayerData[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					if(PlayerData[extraid][pShowLands])
					{
					    ShowLandsOnMap(extraid, true);
					}

					if(!PlayerData[extraid][pAdminDuty])
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET lastlogin = NOW(), ip = '%s' WHERE uid = %i", GetPlayerIP(extraid), PlayerData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", PlayerData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

				     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", PlayerData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

					    if(!PlayerData[extraid][pTogglePhone])
					    {
						    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", PlayerData[extraid][pPhone]);
						    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
						}
					}

					foreach(new i: Vehicle)
					{
					    if(IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}


				    if(PlayerData[extraid][pAdminDuty])
				    {
						PlayerData[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, PlayerData[extraid][pUsername]);
				        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s is no longer on admin duty.", GetAdmCmdRank(extraid),GetRPName(extraid));
				        SendClientMessage(extraid, COLOR_WHITE, "You are no longer on admin duty. Your account's statistics have been preserved.");
				    }
				    else
				    {
				    	SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: Welcome %s", GetPlayerNameEx(extraid));

						if(!isnull(adminMOTD) && PlayerData[extraid][pAdmin] > 0)
						{
							SendClientMessageEx(extraid, 0xE65A5AAA, "Admin MOTD: %s", adminMOTD);
						}

						if(!isnull(helperMOTD) && PlayerData[extraid][pAdmin] > 0)
						{
							SendClientMessageEx(extraid, COLOR_AQUA, "Helper MOTD: %s", helperMOTD);
						}

						if(PlayerData[extraid][pFaction] >= 0 && strcmp(FactionInfo[PlayerData[extraid][pFaction]][fMOTD], "None", true) != 0)
						{
							SendClientMessageEx(extraid, COLOR_YELLOW, "Faction MOTD: %s", FactionInfo[PlayerData[extraid][pFaction]][fMOTD]);
						}

						if(PlayerData[extraid][pGang] >= 0 && strcmp(GangInfo[PlayerData[extraid][pGang]][gMOTD], "None", true) != 0)
						{
							SendClientMessageEx(extraid, COLOR_YELLOW, "Gang MOTD: %s", GangInfo[PlayerData[extraid][pGang]][gMOTD]);
						}

					    format(string, sizeof(string), "~w~Welcome ~n~~y~   %s", GetPlayerNameEx(extraid));
        	        	GameTextForPlayer(extraid, string, 5000, 1);

					    /*if(PlayerData[extraid][pAdmin] && !PlayerData[extraid][pAdminHide])
					    {
					        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has logged in.", GetAdmCmdRank(extraid), GetRPName(extraid));
					    }
					    if(PlayerData[extraid][pGang] >= 0)
					    {
							SendGangMessage(PlayerData[extraid][pGang], COLOR_AQUA, "(( %s %s has logged in. ))", GangRanks[PlayerData[extraid][pGang]][PlayerData[extraid][pGangRank]], GetRPName(extraid));
						}
						if(PlayerData[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(PlayerData[extraid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has logged in. ))", FactionRanks[PlayerData[extraid][pFaction]][PlayerData[extraid][pFactionRank]], GetRPName(extraid));
						}

        	        	if(PlayerData[extraid][pAdmin] > 0) {
							SendClientMessageEx(extraid, COLOR_WHITE, "Prospect Roleplay: You have logged in as a {FF6347}level %i %s{FFFFFF}.", PlayerData[extraid][pAdmin], GetAdminRank(extraid));
						} else if(PlayerData[extraid][pHelper] > 0) {
						    SendClientMessageEx(extraid, COLOR_WHITE, "Prospect Roleplay: You have logged in as a {33CCFF}%s{FFFFFF}.", GetAdminRank(extraid));
						} else if(PlayerData[extraid][pDonator] > 0) {
						    SendClientMessageEx(extraid, COLOR_WHITE, "Prospect Roleplay: You have logged in as a {D909D9}%s VIP{FFFFFF}.", GetVIPRank(PlayerData[extraid][pDonator]));
        	        	} else if(PlayerData[extraid][pLevel] >= 2) {
        	        	    SendClientMessageEx(extraid, COLOR_WHITE, "Prospect Roleplay: You have logged in as a {AFAFAF}level %i player{FFFFFF}.", PlayerData[extraid][pLevel]);
						} else {
						    SendClientMessage(extraid, COLOR_WHITE, "Prospect Roleplay: You have logged in as a {AFAFAF}level 1 newbie{FFFFFF}.");
						}

					    SendClientMessageEx(extraid, COLOR_SERVERDEF, "Your last login was on the %s (server time).", GetDate());
					   	*/

					    StopAudioStreamForPlayer(extraid);
					}

					if(PlayerData[extraid][pFaction] >= 0 && FactionInfo[PlayerData[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	SetPlayerFaction(extraid, -1);
				        SendClientMessageEx(extraid, COLOR_LIGHTRED, "You were either kicked from the faction while offline or it was deleted.");
					}
					if(PlayerData[extraid][pGang] >= 0 && !GangInfo[PlayerData[extraid][pGang]][gSetup])
					{
					    SendClientMessage(extraid, COLOR_LIGHTRED, "You have either been kicked from the gang while offline or it was deleted.");
					    PlayerData[extraid][pGang] = -1;
					    PlayerData[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = -1, gangrank = 0, gangname = 'none' WHERE uid = %i", PlayerData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(PlayerData[extraid][pPasswordChanged] == 0)
					{
					    Dialog_Show(extraid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "{D3D3D3} Change password", "Please change your password for security purposes\nEnter your new password below:", "Submit", "Cancel");
					}

				}
				SetPlayerToSpawn(extraid);
	        }
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has %i pending flags. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SendClientMessageEx(extraid, COLOR_SERVERDEF, "___________ %i Results Found ___________", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);

		            SendClientMessageEx(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
		        }
		    }
		    else
		    {
		        SendClientMessage(extraid, COLOR_GREY, "This IP address is not associated with any accounts.");
			}
		}
		case THREAD_LOGIN_UPDATE:
  		{
/*			new string[1028];
		    if(extraid == 1) // Changes
		    {
		        new text[128];

				if(!rows)
			    {
			        strcat(string, "~n~- n/a");
				}
				else
				{
					for(new i = 0; i < rows; i ++)
					{
					    cache_get_field_content(i, "text", text);
					    format(string, sizeof(string), "%s- %s~n~", string, text);
					}
				}

				TextDrawSetString(LoginScreen[6], string);
			}
			else if(extraid == 2) // Top ten players
			{
			    new username[MAX_PLAYER_NAME];

			    if(!rows)
			    {
			        strcat(string, "~n~- n/a");
				}
				else
				{
				    for(new i = 0; i < rows; i ++)
				    {
				        cache_get_field_content(i, "username", username);
				        format(string, sizeof(string), "%s - %s (%i hrs)~n~", string, username, cache_get_field_content_int(i, "hours"));
			    	}
			    }

			    TextDrawSetString(LoginScreen[7], string);
			}*/
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SendClientMessage(extraid, COLOR_SERVERDEF, "________ Changes List ________");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SendClientMessageEx(extraid, COLOR_GREY1, "Slot %i -> %s", cache_get_field_content_int(i, "slot"), text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SendClientMessage(extraid, COLOR_SERVERDEF, "_______ Helper Roster _______");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SendClientMessageEx(extraid, COLOR_GREY2, "Junior Helper %s - Last Seen: %s", username, lastlogin);
					case 2: SendClientMessageEx(extraid, COLOR_GREY2, "Senior Helper %s - Last Seen: %s", username, lastlogin);
					case 3: SendClientMessageEx(extraid, COLOR_GREY2, "Ast. Head Helper %s - Last Seen: %s", username, lastlogin);
					case 4: SendClientMessageEx(extraid, COLOR_GREY2, "Head Helper %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
                HouseInfo[i][hWeed] = cache_get_field_content_int(i, "weed");
                HouseInfo[i][hCocaine] = cache_get_field_content_int(i, "cocaine");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hDelivery] = cache_get_field_content_int(i, "delivery");
                HouseInfo[i][hLights] = cache_get_field_content_int(i, "lights");
                HouseInfo[i][hAlarm] = cache_get_field_content_int(i, "alarm");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
                Iter_Add(House, i);
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "There is nobody currently renting at your home.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SendClientMessage(extraid, COLOR_SERVERDEF, "_______ List of Tenants _______");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SendClientMessageEx(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{

		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;
		        Iter_Add(Garage, i);

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);
		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
			    BusinessInfo[i][cVehicle][0] = cache_get_field_content_float(i, "cVehicleX");
			    BusinessInfo[i][cVehicle][1] = cache_get_field_content_float(i, "cVehicleY");
			    BusinessInfo[i][cVehicle][2] = cache_get_field_content_float(i, "cVehicleZ");
			    BusinessInfo[i][cVehicle][3] = cache_get_field_content_float(i, "cVehicleA");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bMaterials] = cache_get_field_content_int(i, "materials");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
                Iter_Add(Business, i);

                ReloadBusiness(i);
		    }

		    printf("[Script] %i businesses loaded.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eGang] = cache_get_field_content_int(i, "gang");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eType] = cache_get_field_content_int(i, "type");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eColor] = cache_get_field_content_int(i, "color");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eMapIconID] = -1;
                EntranceInfo[i][eExists] = 1;
                Iter_Add(Entrance, i);

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "motd", FactionInfo[factionid][fMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        FactionInfo[factionid][fBudget] = cache_get_field_content_int(i, "budget");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_LANDS:
		{
		    for(new i = 0; i < rows && i < MAX_LANDS; i ++)
		    {
		        cache_get_field_content(i, "owner", LandInfo[i][lOwner], connectionID, MAX_PLAYER_NAME);

		        LandInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LandInfo[i][lOwnerID] = cache_get_field_content_int(i, "ownerid");
		        LandInfo[i][lLevel] = cache_get_field_content_int(i, "level");
		        LandInfo[i][lPrice] = cache_get_field_content_int(i, "price");
		        LandInfo[i][lMinX] = cache_get_field_content_float(i, "min_x");
		        LandInfo[i][lMinY] = cache_get_field_content_float(i, "min_y");
		        LandInfo[i][lMaxX] = cache_get_field_content_float(i, "max_x");
		        LandInfo[i][lMaxY] = cache_get_field_content_float(i, "max_y");
		        LandInfo[i][lHeightX] = cache_get_field_content_float(i, "heightx");
		        LandInfo[i][lHeightY] = cache_get_field_content_float(i, "heighty");
		        LandInfo[i][lHeightZ] = cache_get_field_content_float(i, "heightz");
		        LandInfo[i][lGangZone] = -1;
		        LandInfo[i][lArea] = -1;
		        LandInfo[i][lLabels] = 0;
		        //LandInfo[i][lTextdraw];
		        LandInfo[i][lExists] = 1;
		        Iter_Add(Land, i);

		        ReloadLand(i);
			}

			printf("[Script] %i lands loaded.", rows);
		}
		case THREAD_LOAD_LANDOBJECTS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_LAND);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "landid"));
				Streamer_SetExtraFloat(objectid, E_OBJECT_X, cache_get_field_content_float(i, "pos_x"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Y, cache_get_field_content_float(i, "pos_y"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Z, cache_get_field_content_float(i, "pos_z"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0));
				}
			}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gWeed] = cache_get_field_content_int(i, "weed");
		        GangInfo[gangid][gCocaine] = cache_get_field_content_int(i, "cocaine");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
		        GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");
				GangInfo[gangid][gMatLevel] = cache_get_field_content_int (i, "matlevel");
				GangInfo[gangid][gGunLevel] = cache_get_field_content_int (i, "gunlevel");

				// Gang stash weapons
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		      //  GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "weapon_spas12");
		    //    GangInfo[gangid][gWeapons][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "weapon_sawnoff");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		     //   GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		     //   GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");
		      //  GangInfo[gangid][gWeapons][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "weapon_molotov");

		        // Gang stash weapon ranks (01/07/2017)
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_9MM] = cache_get_field_content_int(i, "rank_9mm");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "rank_sdpistol");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "rank_deagle");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "rank_shotgun");
		      //  GangInfo[gangid][gWeaponRanks][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "rank_spas12");
		       // GangInfo[gangid][gWeaponRanks][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "rank_sawnoff");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "rank_tec9");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_UZI] = cache_get_field_content_int(i, "rank_uzi");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_MP5] = cache_get_field_content_int(i, "rank_mp5");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_AK47] = cache_get_field_content_int(i, "rank_ak47");
		    //    GangInfo[gangid][gWeaponRanks][GANGWEAPON_M4] = cache_get_field_content_int(i, "rank_m4");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "rank_rifle");
		   // //    GangInfo[gangid][gWeaponRanks][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "rank_sniper");
		   //     GangInfo[gangid][gWeaponRanks][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "rank_molotov");
				GangInfo[gangid][gVestRank] = cache_get_field_content_int(i, "rank_vest");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugWeed] = cache_get_field_content_int(i, "drugweed");
                GangInfo[gangid][gDrugCocaine] = cache_get_field_content_int(i, "drugcocaine");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "weed_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "cocaine_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;


				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tCount] = cache_get_field_content_int(i, "count");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;
		        Iter_Add(Turf, turfid);

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSpas12][0] = cache_get_field_content_int(i, "weapon_spas12");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSpas12][1] = cache_get_field_content_int(i, "price_spas12");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cMatColor1] = cache_get_field_content_int(i, "matcolor1");
		        ClothingInfo[extraid][i][cMatColor2] = cache_get_field_content_int(i, "matcolor2");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    PlayerData[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SendClientMessageEx(extraid, COLOR_SERVERDEF, "_______ House ID %i _______", houseid);
			SendClientMessageEx(extraid, COLOR_GREY2, "Value: %s - Rent Price: %s - Level: %i/5 - Active: %s - Locked: %s", FormatNumber(HouseInfo[houseid][hPrice]), FormatNumber(HouseInfo[houseid][hRentPrice]), HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SendClientMessageEx(extraid, COLOR_GREY2, "Class: %s - Location: %s - Furniture: %i/%i - Tenants: %i/%i", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{

		}
		case THREAD_SELL_FURNITURE:
		{

		}
		case THREAD_CLEAR_FURNITURE:
		{

		}

		case THREAD_DUPLICATE_FURNITURE:
		{

		}
		case THREAD_DUPLICATED_FURNITURE:
		{

		}
		case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SendClientMessageEx(extraid, COLOR_YELLOW, "* You have %i unread text messages. (/texts)", rows);
			}
		}
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "You have no more unread text messages to read.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Texts sent to you while offline (recent first):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] SMS from %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    Dialog_Show(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "Next", "OK");
				}
				else
				{
				    Dialog_Show(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        static string[1024];

		        string = "#\tModel\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				Dialog_Show(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tStatus\tLocation\tTickets";

		        for(new i = 0; i < rows; i ++)
		        {
					if(VehicleInfo[i][carImpounded] == 1) {
						format(string, sizeof(string), "%s\n%i\t%s\t{FF6347}Impounded{FFFFFF}\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))), cache_get_field_content_int(i, "tickets"));
					}
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}Spawned{FFFFFF}\t%s\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid), cache_get_field_content_int(i, "tickets"));
					else
						format(string, sizeof(string), "%s\n%i\t%s\t{FF6347}Despawned{FFFFFF}\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))), cache_get_field_content_int(i, "tickets"));
				}
				Dialog_Show(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}

		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SendClientMessage(extraid, COLOR_SERVERDEF, "_____ Faction Roster _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SendClientMessageEx(extraid, COLOR_GREY2, "%s %s - Last Seen: %s", FactionRanks[PlayerData[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SendClientMessage(extraid, COLOR_SERVERDEF, "_____ Gang Roster _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SendClientMessageEx(extraid, COLOR_GREY2, "[%i] %s %s - Last Seen: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[PlayerData[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && PlayerData[extraid][pPage] == 1)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "The phonebook directory is currently empty.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((PlayerData[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(PlayerData[extraid][pPage] > 1)
				{
				    strcat(string, "\n{FF6347}<< Go back{FFFFFF}");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n{00AA00}>> Next page{FFFFFF}");
				}

				Dialog_Show(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Phonebook directory", string, "Select", "Close");
		    }
		}
		case THREAD_COUNT_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(extraid);

		    if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[landid][lLevel]))
		    {
		        SendClientMessageEx(extraid, COLOR_GREY, "You are only only allowed up to %i objects for your land.", GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_LANDBUILDTYPE);
				//ShowDialogToPlayer(extraid, DIALOG_LANDBUILD1);
			}
		}
		case THREAD_SELL_LANDOBJECT:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SendClientMessageEx(extraid, COLOR_AQUA, "You have sold {FF6347}%s{33CCFF} and received a 75 percent refund of {00AA00}$%i{33CCFF}.", name, price);
		        RemoveLandObject(PlayerData[extraid][pSelected]);
			}
		}
		case THREAD_DUPLICATE_LANDOBJECT:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], landid = GetNearbyLand(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(PlayerData[extraid][pCash] < price)
			    {
			        SendClientMessage(extraid, COLOR_GREY, "You can't afford to duplicate this object.");
			    }
			    else
			    {
			        PlayerData[extraid][pObjectLand] = landid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SendClientMessageEx(extraid, COLOR_GREEN, "%s duplicated for $%i. You will now edit this object.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    GameTextForPlayer(extraid, string, 5000, 1);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '0.0', '0.0', '0.0', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], modelid, name, price, x, y, z, rx, ry, rz);
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM landobjects LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_OBJECT, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_OBJECT:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            PlayerData[extraid][pEditType] = EDIT_LAND_OBJECT;
		    	    	PlayerData[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	GameTextForPlayer(extraid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);

			            //PlayerData[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_CLEAR_LANDOBJECTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "Your land contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, landid = GetNearbyLand(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllLandObjects(landid);

				GivePlayerCash(extraid, price);
				SendClientMessageEx(extraid, COLOR_AQUA, "You have sold a total of %i items and received {00AA00}$%i{33CCFF} back.", rows, price);
			}
		}
		case THREAD_LIST_LANDOBJECTS:
		{
		    if((!rows) && PlayerData[extraid][pPage] == 1)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "Your land contains no objects which can be listed.");
		    }
		    else
		    {
		        static string[MAX_LISTED_OBJECTS * 48], name[32];

		        string = "#\tName\tCost\tDistance";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}$%i{FFFFFF}\t%.1fm", string, GetLandObjectID(cache_get_field_content_int(i, "id")), name, cache_get_field_content_int(i, "price"), GetPlayerDistanceFromPoint(extraid, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
				}

				if(PlayerData[extraid][pPage] > 1)
				{
				    strcat(string, "\n{FF6347}<< Go back{FFFFFF}");
				}
    			if(rows == MAX_LISTED_OBJECTS)
    			{
    			    strcat(string, "\n{00AA00}>> Next page{FFFFFF}");
				}

				Dialog_Show(extraid, DIALOG_LANDOBJECTS, DIALOG_STYLE_TABLIST_HEADERS, "List of objects", string, "Select", "Back");
		    }
		}
		case THREAD_LAND_MAINMENU:
		{
		    new
		        landid = GetNearbyLand(extraid),
		        string[64];

			format(string, sizeof(string), "Land menu {FFD700}(Level: %i/5) (%i/%i objects)", LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    Dialog_Show(extraid, DIALOG_LANDMENU, DIALOG_STYLE_LIST, string, "Build object\nEdit object\nToggle labels\nList all objects\nSell all objects\nUpgrade land\nPermissions", "Select", "Cancel");
		}
		case THREAD_LAND_INFORMATION:
		{
		    new landid = GetNearbyLand(extraid);

		    //SendClientMessage(extraid, COLOR_SERVERDEF, "_______ My Land _______");
			//SendClientMessageEx(extraid, COLOR_GREY2, "(ID: %i) - (Value: $%i) - (Objects: %i/%i) - (Location: %s)", landid, LandInfo[landid][lPrice], cache_get_row_int(0, 0), GetLandObjectCapacity(landid), GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]));
			SendClientMessageEx(extraid, COLOR_WHITE, "* Your level %i/3 land in %s is worth {00AA00}%s{FFFFFF} and contains %i/%i objects.", LandInfo[landid][lLevel], GetZoneName(LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ]), FormatNumber(LandInfo[landid][lPrice]), cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, siren, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
				siren           = cache_get_field_content_int(i, "siren");

		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay, siren);


				if(vehicleid != INVALID_VEHICLE_ID)
				{
				    ResetVehicle(vehicleid); // Forgot this!
                    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);
					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vRank] = cache_get_field_content_int(i, "rank");
					VehicleInfo[vehicleid][vVIP] = cache_get_field_content_int(i, "vippackage");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");
				    VehicleInfo[vehicleid][carImpounded] = cache_get_field_content_int(i, "carImpounded");
				    VehicleInfo[vehicleid][carImpoundPrice] = cache_get_field_content_int(i, "carImpoundPrice");
				    VehicleInfo[vehicleid][vMileage] = cache_get_field_content_float(i, "mileage");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}
					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;

					vehicleFuel[vehicleid] = 100;
                    SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

       			foreach(new i : Turf)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == PlayerData[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}

			    SendClientMessageEx(extraid, COLOR_SERVERDEF, "______ %s ______", GangInfo[PlayerData[extraid][pGang]][gName]);
			    SendClientMessageEx(extraid, COLOR_GREY2, "Leader: %s - Level: %i/3 - Strikes: %i/3 - Members: %i/%i - Vehicles: %i/%i", GangInfo[PlayerData[extraid][pGang]][gLeader], GangInfo[PlayerData[extraid][pGang]][gLevel], GangInfo[PlayerData[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(PlayerData[extraid][pGang]), GetGangVehicles(PlayerData[extraid][pGang]), GetGangVehicleLimit(PlayerData[extraid][pGang]));
			    SendClientMessageEx(extraid, COLOR_GREY2, "Gang Points: %s GP - Turf Tokens: %s - Cash: $%s/$%s - Materials: %s/%s", FormatNumber(GangInfo[PlayerData[extraid][pGang]][gPoints], 0), FormatNumber(GangInfo[PlayerData[extraid][pGang]][gTurfTokens], 0), FormatNumber(GangInfo[PlayerData[extraid][pGang]][gCash], 0), FormatNumber(GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_CASH), 0),
					FormatNumber(GangInfo[PlayerData[extraid][pGang]][gMaterials], 0), FormatNumber(GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_MATERIALS), 0));
			    SendClientMessageEx(extraid, COLOR_GREY2, "Turfs: %i/%i - Weed: %i/%ig - Cocaine: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[PlayerData[extraid][pGang]][gWeed], GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerData[extraid][pGang]][gCocaine], GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerData[extraid][pGang]][gMeth], GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_METH),
				GangInfo[PlayerData[extraid][pGang]][gPainkillers], GetGangStashCapacity(PlayerData[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "The username specified is not registered.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];


		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

				if((cache_get_field_content_int(0, "adminlevel") > 2) && (PlayerData[extraid][pAdmin]))
				{
				    SendClientMessage(extraid, COLOR_GREY, "You cannot check the IP of another admin");
				}
				else
				{
		        	SendClientMessageEx(extraid, COLOR_WHITE, "* %s's IP: %s *", username, ip);
				}

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "The player specified doesn't exist.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SendClientMessage(extraid, COLOR_GREY, "This account is listed under your own IP address. You can't refer yourself.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), PlayerData[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

			    	PlayerData[extraid][pTutorial] = 0;
				   	PlayerData[extraid][pSetup] = 0;
        	        HideTutorialTextDraws(extraid);
    	            SetPlayerSkin(extraid, PlayerData[extraid][pSkin]);
				    SetPlayerPos(extraid, 2247.3511,-1724.0511,13.5469);
				    SetPlayerFacingAngle(extraid, 181.4170);
				    print("Spawned player on spawn 1");
				    SetPlayerVirtualWorld(extraid, 0);
				    SetCameraBehindPlayer(extraid);
				    StopAudioStreamForPlayer(extraid);
			    	TogglePlayerControllable(extraid, 1);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", PlayerData[extraid][pGender], PlayerData[extraid][pAge], PlayerData[extraid][pSkin], PlayerData[extraid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					SendClientMessage(extraid, COLOR_WHITE, "Welcome to {00aa00}Prospect Roleplay{FFFFFF}. Make sure to visit www.prospectrp.net for news and updates.");
					SendClientMessage(extraid, COLOR_WHITE, "Use the {FFFF90}/locate{FFFFFF} command to point to locations of jobs, businesses, and common places.");

					SendStaffMessage(COLOR_YELLOW, "OnPlayerSpawn: %s[%d] has just spawned on Prospect Roleplay for the first time!", GetRPName(extraid), extraid);
					displayWelcomeMessage(extraid);
					StopAudioStreamForPlayer(extraid);
	                PlayerData[extraid][pReferralUID] = cache_get_field_content_int(0, "uid");
                    DestroyDynamic3DTextLabel(fRepfamtext[extraid]);
        			fRepfamtext[extraid] = Text3D:INVALID_3DTEXT_ID;
	                SendClientMessageEx(extraid, COLOR_YELLOW, "You have chosen %s as your referral. This player will be rewarded once you reach level 3.", username);
		            //SendClientMessage(extraid, COLOR_YELLOW, "That's all the information we need right now. The tutorial will start in just a moment.");
	   				SendClientMessage(extraid, COLOR_AQUA, "You need a driver's license, the DMV has been marked on your map. Navigate to the marker to begin your drivers test.");
	   				PlayerData[extraid][pCP] = CHECKPOINT_MISC;
	                SetPlayerCheckpoint(extraid, 1219.2590, -1812.1093, 16.5938, 3.0);
				}
		    }

		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Add a log entry for this referral.
				Log_Write("log_referrals", "%s (uid: %i) (IP: %s) has received 10 tokens for referring %s (uid: %i) (IP: %s).", username, PlayerData[extraid][pReferralUID], ip, GetPlayerNameEx(extraid), PlayerData[extraid][pID], GetPlayerIP(extraid));

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && PlayerData[i][pLogged] && PlayerData[i][pID] == PlayerData[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        PlayerData[referralid][pCookies] += 10;

			        SendClientMessage(referralid, COLOR_GREEN, "A player who you've referred reached level 3. Therefore you received 10 tokens!");
			        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) earned 10 tokens for referring %s (IP: %s).", GetRPName(referralid), GetPlayerIP(referralid), GetRPName(extraid), GetPlayerIP(extraid));

			  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cookies = cookies + 10 WHERE uid = %i AND ip != '%s'", PlayerData[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
				    // Referrer is offline. Let's give them their tokens and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cookies = cookies + 10, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", PlayerData[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET referral_uid = 0 WHERE uid = %i", PlayerData[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SendClientMessage(extraid, COLOR_SERVERDEF, "_____ Flagged Players _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SendClientMessageEx(extraid, COLOR_GREY3, "* %s[%i] has %i active flags.", GetRPName(i), i, flags[i]);
				}
			}
		}
		case THREAD_LIST_ACHIEVEMENTS:
		{
		    static string[2048];

			new achieved[sizeof(achievementInfo)], achievement[32], title[64], count;

		    string = "Name\tDescription\tStatus";

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "achievement", achievement);

				for(new x = 0; x < sizeof(achievementInfo); x ++)
		    	{
		    	    if(!strcmp(achievementInfo[x][aName], achievement, true))
		    	    {
		    	        achieved[x] = true;
		    	        count++;
		            }
		        }
		    }

		    for(new i = 0; i < sizeof(achievementInfo); i ++)
		    {
		        if(achieved[i])
		            format(string, sizeof(string), "%s\n%s\t%s\t{00AA00}Unlocked{FFFFFF}", string, achievementInfo[i][aName], achievementInfo[i][aDescription]);
		        else
		            format(string, sizeof(string), "%s\n%s\t%s\t{ED6464}Locked{FFFFFF}", string, achievementInfo[i][aName], achievementInfo[i][aDescription]);
		    }

		    format(title, sizeof(title), "{F7A763}Achievements{afafaf} (%i/%i unlocked)", count, sizeof(achievementInfo));
		    Dialog_Show(extraid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "OK", "");
		}

		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		   // SendClientMessage(extraid, COLOR_GREEN, "---- Admin Team ----");
			static strings[1024];
			strings = "Name\t\tLast Login\tStrikes\tRank";


		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);
		       // cache_get_field_content_int(i, "adminstrikes", AdminStrikes);
		       // cache_get_field_content(i, "adminname", PlayerData[i][pAdminName], connectionID, MAX_PLAYER_NAME);
		        new adminstring[64];
		        switch(cache_get_field_content_int(i, "adminlevel"))
		        {
				    case 1: adminstring = "Helper";
				    case 2: adminstring = "{00FF00}Moderator";
				    case 3: adminstring = "{00AA00}Administrator";
				    case 4: adminstring = "{00AA00}Senior Administrator";
					case 5: adminstring = "{FFA500}Lead Administrator";
					case 6: adminstring = "{FF0000}Staff Manager";
					case 7: adminstring = "{298EFF}Community Manager";
				}
				format(strings, sizeof(strings), "%s\n%s\t%s\t%d\t%s {ffffff}(%d)\n", strings, username, lastlogin, PlayerData[i][pAdminStrike], adminstring, cache_get_field_content_int(i, "adminlevel"));

			    if(strlen(strings) > 0)
				{
					Dialog_Show(extraid, DIALOG_NONE, DIALOG_STYLE_TABLIST_HEADERS, "Admin Team", strings, "Okay", "");
					//else Dialog_Show(extraid, DIALOG_ADMINLIST, DIALOG_STYLE_TABLIST_HEADERS, "Admin Team", strings, "Okay", "");
				}
			//	SendClientMessageEx(extraid, COLOR_GREY2, "Level %i Admin %s - Last Seen: %s", cache_get_field_content_int(i, "adminlevel"), username, lastlogin);
		    }
 		}
		case THREAD_DUPLICATE_LANDOBJ:
		{
			if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[PlayerData[extraid][pObjectLand]][lLevel]))
			{
 				SendClientMessageEx(extraid, COLOR_GREY, "You are only only allowed up to %i objects for your land.", GetLandObjectCapacity(LandInfo[PlayerData[extraid][pObjectLand]][lLevel]));
   			}
			else
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM landobjects WHERE id = %i", Streamer_GetExtraInt(PlayerData[extraid][pSelected], E_OBJECT_INDEX_ID));
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJECT, extraid);
			}
		}
		case THREAD_CHECKDUPE_FURNITURE:
		{

		}
		case THREAD_LOAD_LOCATIONS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCATIONS; i ++)
		    {
      			cache_get_field_content(i, "name", LocationInfo[i][locName], connectionID, 64);

		        LocationInfo[i][locID] = cache_get_field_content_int(i, "id");
		        LocationInfo[i][locPosX] = cache_get_field_content_float(i, "pos_x");
		        LocationInfo[i][locPosY] = cache_get_field_content_float(i, "pos_y");
			   	LocationInfo[i][locPosZ] = cache_get_field_content_float(i, "pos_z");
				LocationInfo[i][locExists] = true;
			}
			printf("[Script] %i locations loaded", (rows < MAX_LOCATIONS) ? (rows) : (MAX_LOCATIONS));
		}
		case THREAD_UPDATE_LANDLABELS:
		{
		    new landid = extraid;
			new string[128];
			if(IsValidDynamic3DTextLabel(LandInfo[landid][lTextdraw]))
			{
				if(LandInfo[landid][lOwnerID] > 0)
				{
					format(string, sizeof(string), "This land is owned by %s\n{FFD700}Level: %i/5\n{FFFFFF}%i/%i Objects", LandInfo[landid][lOwner], LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
            		UpdateDynamic3DTextLabelText(LandInfo[landid][lTextdraw], COLOR_GREY, string);
				}
				else
				{
				    format(string, sizeof(string), "This land is for sale by the state\n{00AA00}Price: %s{FFFFFF}\n{FFD700}Level: %i/5\n{FFFFFF}%i/%i Objects", FormatNumber(LandInfo[landid][lPrice]), LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
				    UpdateDynamic3DTextLabelText(LandInfo[landid][lTextdraw], COLOR_GREY, string);
				}
			}
		}
		case THREAD_LOAD_CREWS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < MAX_GANG_CREWS; r ++)
		        {
		            GangCrews[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangCrews[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "crewid")], connectionID, 32);
      		}
            printf("[Script] %i crews loaded", rows);
		}
		case THREAD_LIST_VIPS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24], viplevel, viptime;

		    SendClientMessage(extraid, COLOR_VIP, "---- VIP List ----");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);
		        viplevel = cache_get_field_content_int(i, "vippackage");
		        viptime = cache_get_field_content_int(i, "viptime");
				SendClientMessageEx(extraid, COLOR_GREY2, "[%i] {D909D9}%s{C8C8C8} %s - Last Seen: %s - Expires: %s", viplevel, GetVIPRank(viplevel), username, lastlogin, GetDateFromTimestamp(viptime, 4));
		    }
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
			    ATM[i][atmExists] = 1;
			    ATM[i][atmID] = cache_get_field_content_int(i, "atmID");
			    ATM[i][atmSpawn][0] = cache_get_field_content_float(i, "atmX");
			    ATM[i][atmSpawn][1] = cache_get_field_content_float(i, "atmY");
			    ATM[i][atmSpawn][2] = cache_get_field_content_float(i, "atmZ");
			    ATM[i][atmSpawn][3] = cache_get_field_content_float(i, "atmA");
			    ATM[i][atmInterior] = cache_get_field_content_int(i, "atmInterior");
			    ATM[i][atmWorld] = cache_get_field_content_int(i, "atmWorld");
			    ATM[i][atmObject] = INVALID_OBJECT_ID;
		        ATM[i][atmText] = INVALID_3DTEXT_ID;
		        UpdateATM(i);
			}
			printf("[Script] %i atms loaded", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
		case THREAD_REMOVE_VIP:
		{
		    printf("[Script] %i donators removed.", rows);
		}


		case LOADCRATE_THREAD:
		{
		}
		case THREAD_LOAD_GATES:
		{

		}

		case THREAD_RELEASECAR:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_GREY, "You own no vehicles.");
		    }
		    else
		    {
		        new string[1024], vehicleid;
		        string = "ID\tName\tRelease Price";
		        for(new i = 0; i < rows; i ++)
		        {
			        if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
			        {
						format(string, sizeof(string), "%s\n%d\t%s\t%s\n", string, i + 1, GetVehicleName(vehicleid), FormatNumber(cache_get_field_content_int(i, "impoundprice")));
			        	ListedVehicles[extraid][i++] = vehicleid;
					}
					else
					{
						format(string, sizeof(string), "%s\n%d\t%s\t%s\n", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], FormatNumber(cache_get_field_content_int(i, "carImpoundPrice")));
			        	ListedVehicles[extraid][i++] = vehicleid;
					}
				}
				Dialog_Show(extraid, DIALOG_RELEASECAR, DIALOG_STYLE_TABLIST_HEADERS, "Release Vehicle", string, "Select", "Cancel");
			}
		}
		case SENDDATA_THREAD:
		{
			if(cache_affected_rows(connectionID) > 0)
			{
				printf("saved");
			}
			else
			{
	  			printf("fucks");
			}
		}
		case THREAD_GANGLOGS:
		{
		    new ganglogs[250], date[24], strings[1040];
		    strings = "Date\tDescription";
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "description", ganglogs);
		        cache_get_field_content(i, "date", date);
		        format(strings, sizeof(strings), "%s\n%s\t%s\n",strings, date, ganglogs);
			    if(strlen(strings) > 0)
				{
					Dialog_Show(extraid, DIALOG_NONE, DIALOG_STYLE_TABLIST_HEADERS, "Testing Gang LOgs", strings, "Okay", "");
					//else Dialog_Show(extraid, DIALOG_ADMINLIST, DIALOG_STYLE_TABLIST_HEADERS, "Admin Team", strings, "Okay", "");
				}
			}
		}
	}
}

forward OnLoadPayphones();
public OnLoadPayphones()
{
	new
	    rows = cache_get_row_count(connectionID);

	for (new i = 0; i < rows; i ++)
	{
	    Payphones[i][phExists] = 1;
	    Payphones[i][phID] = cache_get_field_content_int(i, "phID");
	    Payphones[i][phNumber] = cache_get_field_content_int(i, "phNumber");
	    Payphones[i][phX] = cache_get_field_content_float(i, "phX");
	    Payphones[i][phY] = cache_get_field_content_float(i, "phY");
	    Payphones[i][phZ] = cache_get_field_content_float(i, "phZ");
	    Payphones[i][phA] = cache_get_field_content_float(i, "phA");
	    Payphones[i][phInterior] = cache_get_field_content_int(i, "phInterior");
	    Payphones[i][phWorld] = cache_get_field_content_int(i, "phWorld");
	    Payphones[i][phCaller] = INVALID_PLAYER_ID;
	    Payphones[i][phObject] = INVALID_OBJECT_ID;
	    Payphones[i][phText] = INVALID_3DTEXT_ID;

	    UpdatePayphone(i);
	}
}
forward OnLoadFurniture();
public OnLoadFurniture()
{
    new
	    rows = cache_get_row_count(connectionID);

	for (new i = 0; i < rows; i ++)
	{
	    Furniture[i][fExists] = 1;
	    Furniture[i][fID] = cache_get_field_content_int(i, "fID");

	    Furniture[i][fHouseID] = cache_get_field_content_int(i, "fHouseID");
	    Furniture[i][fModel] = cache_get_field_content_int(i, "fModel");
	    Furniture[i][fSpawn][0] = cache_get_field_content_float(i, "fX");
	    Furniture[i][fSpawn][1] = cache_get_field_content_float(i, "fY");
	    Furniture[i][fSpawn][2] = cache_get_field_content_float(i, "fZ");
	    Furniture[i][fSpawn][3] = cache_get_field_content_float(i, "fRX");
	    Furniture[i][fSpawn][4] = cache_get_field_content_float(i, "fRY");
	    Furniture[i][fSpawn][5] = cache_get_field_content_float(i, "fRZ");
        Furniture[i][fInterior] = cache_get_field_content_int(i, "fInterior");
        Furniture[i][fWorld] = cache_get_field_content_int(i, "fWorld");
        Furniture[i][fCode] = cache_get_field_content_int(i, "fCode");
        Furniture[i][fMoney] = cache_get_field_content_int(i, "fMoney");

        Furniture[i][fMaterial][0] = cache_get_field_content_int(i, "Mat1");
        Furniture[i][fMaterial][1] = cache_get_field_content_int(i, "Mat2");
        Furniture[i][fMaterial][2] = cache_get_field_content_int(i, "Mat3");
        Furniture[i][fMatColour][0] = cache_get_field_content_int(i, "MatColor1");
        Furniture[i][fMatColour][1] = cache_get_field_content_int(i, "MatColor2");
        Furniture[i][fMatColour][2] = cache_get_field_content_int(i, "MatColor3");

        Furniture[i][fObject] = INVALID_OBJECT_ID;
        Furniture[i][fText] = INVALID_3DTEXT_ID;
        UpdateFurniture(i);
	}
	printf("(SQL) %i furniture loaded.", rows);
}
// ---------------------------------------
// ---- PRIVATE LS ELEVATOR FORWARDS -----
forward Elevator_Initialize();
forward Elevator_Destroy();

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);


func showmotd(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraw2);
    //TextDrawShowForPlayer(playerid, Textdraw3);
    return 1;
}
func hidemotd(playerid)
{
	TextDrawHideForPlayer(playerid, Textdraw2);
  //  TextDrawHideForPlayer(playerid, Textdraw3);
    return 1;
}
public OnGameModeInit()
{

 // Default values, don't touch them - Renisal
    SetGameModeText("Loading...");
	SendRconCommand("weburl www.prospectrp.net");
	print("Prospect Roleplay is loading...");
    connectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);

	if(mysql_errno(connectionID))
	{
	    print("[ERROR] - Unable to establish a connection with the MySQL server...");
	    SendRconCommand("exit");
	    return 0;
	}
	else
	{
		//spawn vehicles
		CreateVehicle(421, 1559.9244, -2338.5549, 13.3744, 89.7600, -1, -1, 100);
		CreateVehicle(421, 1559.9818, -2331.9814, 13.3744, 89.7600, -1, -1, 100);
		CreateVehicle(436, 1559.8101, -2335.2644, 13.2537, 89.5200, -1, -1, 100);
		CreateVehicle(576, 1560.0779, -2328.6450, 13.1204, 89.7600, -1, -1, 100);
		CreateVehicle(576, 1559.9822, -2325.3567, 13.1204, 90.1800, -1, -1, 100);
		CreateVehicle(576, 1560.1245, -2321.9968, 13.1204, 90.1800, -1, -1, 100);
		CreateVehicle(576, 1560.3719, -2318.7837, 13.1204, 90.1800, -1, -1, 100);
		CreateVehicle(576, 1560.3429, -2315.4192, 13.1204, 90.1800, -1, -1, 100);
		CreateVehicle(576, 1560.3474, -2312.2234, 13.1204, 90.1800, -1, -1, 100);

		for(new i = 0; i < MAX_VEHICLES; i ++)
		{
		    ResetVehicle(i);
		}

		mysql_tquery(connectionID, "TRUNCATE TABLE shots");
		mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
		mysql_tquery(connectionID, "SELECT * FROM rp_furniture", "OnLoadFurniture");
		mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
		mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
		mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
		mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
		mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
		mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
	    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM lands", "OnQueryFinished", "ii", THREAD_LOAD_LANDS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM landobjects", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
	    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
		mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
		mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
		mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
		mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM locations", "OnQueryFinished", "ii", THREAD_LOAD_LOCATIONS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM crews", "OnQueryFinished", "ii", THREAD_LOAD_CREWS, 0);
	    mysql_tquery(connectionID, "SELECT * FROM rp_atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
		mysql_tquery(connectionID, "SELECT * FROM `crates`", "OnQueryFinished", "ii", LOADCRATE_THREAD, 0);
		mysql_tquery(connectionID, "SELECT * FROM `gates`", "OnQueryFinished", "ii", THREAD_LOAD_GATES, 0);
		mysql_tquery(connectionID, "SELECT * FROM `graffiti`", "Graffiti_Load", "");
	 	mysql_tquery(connectionID, "SELECT * FROM `impoundlots`", "Impound_Load", "");
		mysql_tquery(connectionID, "SELECT * FROM `gunracks`", "Rack_Load", "");
		mysql_tquery(connectionID, "SELECT * FROM rp_dealercars", "OnLoadDealershipCars");
		mysql_tquery(connectionID, "SELECT * FROM rp_payphones", "OnLoadPayphones");
		mysql_tquery(connectionID, "SELECT * FROM rp_gundamages", "OnLoadGunDamages");
	    mysql_tquery(connectionID, "UPDATE "#TABLE_USERS" SET vippackage = 0, viptime = 0 WHERE viptime < UNIX_TIMESTAMP()", "OnQueryFinished", "ii", THREAD_REMOVE_VIP, 0);
		print("Saving server information on mysql...");
		SaveMysqlInformation();

		switch(random(4))
		{
		    case 0: gWeather = 13;
		    case 1: gWeather = 10;
		    case 2: gWeather = 7;
		    case 3: gWeather = 12;
		}
		SetWeather(gWeather);

		gettime(.hour = gHour);
	 	gettime(.hour = gWorldTime);
		SetWorldTime(gWorldTime);

		// Timers
		SetTimer("MinuteTimer", 60000, true);
		SetTimer("SecondTimer", 1000, true);
		SetTimer("FuelTimer", 30000, true);
		SetTimer("InjuredTimer", 5000, true);
		SetTimerEx("RandomFire", 5400000, true, "i", 1);
		SetTimer("OnPlayerUpdateEx", 1000, true);
		SetTimer("UpdateCarRadars", 300, true);
		SetTimer("AntiNameTag", 500, true);
    	SetTimer("SendMSG", 120000, true);

		EnableStuntBonusForAll(0);
		DisableInteriorEnterExits();
		Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 50000);
		Streamer_TickRate(5000);
	    SetNameTagDrawDistance(30.0);
	    AntiDeAMX();
	    ManualVehicleEngineAndLights();


	    LoadServerInfo();
	    LoadGeneralTextdraws();
		LoadServerMOTD();
	    RefreshTime();
	    ResetRobbery();
		LoadPickupsAndText();
		LoadObjects();
		LoadJobs();
		mdc_LoadTextdraws();
		CreateLSPDMap();
		ResetElevatorQueue();
		Elevator_Initialize();

		print("______________________________________________");
		print("| An edit of Limitless Roleplay		        |");
		print("| Prospect Roleplay by Renisal		        |");
		print("| Gamemode loaded successfully.              |");
		print("______________________________________________");
		for(new o; o < CountDynamicObjects(); o++)
		{
			if(IsValidDynamicObject(o))
			{
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, o, E_STREAMER_DRAW_DISTANCE, 900.0);
			}
		}
		new count;
		for(new i = 0; i < MAX_OBJECTS; i ++)
		{
		    if(IsValidObject(i)) count++;
		}
		printf("%i objects loaded.", count);
		SetGameModeText(SERVER_REVISION);
	}
	return 1;
}



public OnGameModeExit()
{

	SaveMysqlInformation();

	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}
	Elevator_Destroy();
	mysql_close(connectionID);
	if(gDoubleXP)
	{
	    SetDoubleXP(false);
	}
	return 1;
}

PlayNearbySound(playerid, soundid)
{
	new
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player)
	{
		if (i == playerid || IsPlayerStreamedIn(playerid, i))
		{
			PlayerPlaySound(i, soundid, x, y, z);
		}
	}
}
forward HandlePhoneRing(playerid);
public HandlePhoneRing(playerid)
{
	if (PlayerData[playerid][pCalling] != 1)
	{
		return 0;
	}

	PlayNearbySound(playerid, 20600);
	SetTimerEx("HandlePhoneRing", 4000, false, "i", playerid);

	return 1;
}

forward HandlePhoneDial(playerid);
public HandlePhoneDial(playerid)
{
	if (PlayerData[playerid][pCalling] != 1)
	{
		return 0;
	}

	PlayerPlaySound(playerid, 16001, 0.0, 0.0, 0.0);
	SetTimerEx("HandlePhoneDial", 4000, false, "i", playerid);

	return 1;
}

forward OnPhoneResponse(playerid, number);
public OnPhoneResponse(playerid, number)
{
	if ((PlayerData[playerid][pPayphone] != -1 && GetClosestPayphone(playerid) != PlayerData[playerid][pPayphone]) || PlayerData[playerid][pTogglePhone] || !PlayerData[playerid][pCalling])
	{
		return 0;
	}

	switch (number)
	{
		case 911:
		{
			PlayerData[playerid][pCalling] = 911;
			ShowActionBubble(playerid, "* %s dials a number on their keypad and begins a call.", GetRPName(playerid));
			SendClientMessage(playerid, COLOR_YELLOW, "Dispatch: 911, what is your emergency? Enter 'police' or 'medic'.");
		}
		case 8294:
		{
			SendClientMessage(playerid, COLOR_YELLOW, "(Phone) Taxi: Would you like to request a taxi? Say 'yes' or 'no'.");
			PlayerData[playerid][pCalling] = 8294;
		}
		case 6324:
		{

			SendClientMessage(playerid, COLOR_LIGHTORANGE, "Dispatch: This is the mechanic hotline. Please explain your situation to us.");
			PlayerData[playerid][pCalling] = 6324;

		}
		default:
		{
			new targetid = GetPhonePlayerID(number);

			if (targetid == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, COLOR_GREY, "* This cellphone number is currently not in service. *");
				HangupCall(playerid);
			}
			else if (IsPhoneBusy(number))
			{
				SendClientMessage(playerid, COLOR_GREY, "* You would hear a busy tone. *");
				HangupCall(playerid);
			}
		}
	}
	return 1;
}
public OnPlayerConnect(playerid)
{
	// check whether or not the player is using a proxy
	if(gDisabledVPN)
	{
		new formato[59];
		format(formato, sizeof formato, "www.shroomery.org/ythan/proxycheck.php?ip=%s", GetPlayerIP(playerid));
		HTTP(playerid, HTTP_GET, formato, "", "HTTP_ProxyCheck");
	}
	if(IsPlayerNPC(playerid))
{
    new ip[16];
    GetPlayerIp(playerid,ip,sizeof(ip));
    if(strcmp(ip,"46.101.108.221") != 0) return Ban(playerid);
}
	for(new i = 0; i < MAX_DAMAGES; i++)
	{
		DamageData[playerid][i][damageTaken] = 0;
		DamageData[playerid][i][damageWeapon] = 0;
		DamageData[playerid][i][damageBy] = 0;
	}
	PlayerData[playerid][pBars][0] = CreatePlayerProgressBar(playerid, 556.000000, 130.000000, 57.000000, 4.699999, COLOR_SAMP, 100.0000, 0);
    PlayerData[playerid][pShowFooter] = 0;
    PlayerData[playerid][pChatstyle] = 0;
	mdc_LoadPlayerTextdraws(playerid);
	PlayerData[playerid][pInTurf] = 0;
    PlayerData[playerid][pCalling] = 0;
	InsideShamal[playerid]= INVALID_VEHICLE_ID;
	PlayerData[playerid][pBugFix] = 0;
	PlayerTextDrawHide(playerid, LoadingObjects0[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects1[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects2[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects3[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects4[playerid]);
	PlayerTextDrawHide(playerid, LoadingObjects5[playerid]);
    totalDamages[playerid] = 0;
	PlayerData[playerid][pSpeakerPhone] = 0;
	PlayerData[playerid][pRepairShop] = -1;
	PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pEditRack] = -1;
    CarRadars[playerid] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;

	//Server Logo
	TextDrawShowForPlayer(playerid, Text_Global[0]);
	TextDrawShowForPlayer(playerid, Text_Global[1]);

	LoginTDControl(playerid, true);

	TextDrawShowForPlayer(playerid, Textdraw2);
	//TextDrawShowForPlayer(playerid, Textdraw3);

	//Drek's house
	RemoveBuildingForPlayer(playerid, 1261, 1715.7109, -780.3281, 68.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1715.7109, -780.3281, 68.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1724.1172, -746.0234, 50.4922, 0.25);

	//Unknown
	RemoveBuildingForPlayer(playerid, 13298, 207.804, -249.148, 7.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 222.796, -253.296, 1.851, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 222.796, -258.570, 1.851, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 223.445, -246.828, 0.617, 0.250);
	RemoveBuildingForPlayer(playerid, 13295, 207.804, -249.148, 7.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 222.781, -248.023, 1.851, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 192.914, -238.976, 1.820, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 222.804, -238.945, 1.851, 0.250);
	RemoveBuildingForPlayer(playerid, 13437, 210.937, -245.140, 10.023, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 215.000, -224.000, 2.023, 0.250);

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	new tmpobjid;
	tmpobjid = CreateDynamicObject(19905,214.538,-239.900,0.357,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4828, "airport3_las", "sanpedock7", 0);
	tmpobjid = CreateDynamicObject(19890,207.691,-247.660,-0.620,180.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,222.746,-262.596,-1.135,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,222.746,-267.047,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,217.844,-271.774,-1.137,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,208.214,-271.774,-1.137,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,198.579,-271.775,-1.137,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,197.603,-271.777,-1.139,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.876,-266.872,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.874,-257.240,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.875,-247.607,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.874,-237.973,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.873,-228.340,-1.137,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,192.872,-226.622,-1.139,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,197.777,-221.894,-1.137,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19461,202.023,-221.893,-1.139,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5114, "beach_las2", "sw_sand", 0);
	tmpobjid = CreateDynamicObject(19786,215.480,-222.251,3.565,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 14530, "estate2", "Auto_feltzer", 0);
	tmpobjid = CreateDynamicObject(19786,211.244,-257.303,3.187,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0);
	SetDynamicObjectMaterial(tmpobjid, 1, 14530, "estate2", "ab_SFmap", 0);
	tmpobjid = CreateDynamicObject(19327,218.788,-257.293,3.287,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14530, "estate2", "Auto_windsor", 0);
	tmpobjid = CreateDynamicObject(19327,207.373,-251.118,4.060,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14530, "estate2", "Auto_windsor", 0);
	tmpobjid = CreateDynamicObject(19327,207.359,-239.713,4.060,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14530, "estate2", "Auto_Slamvan2", 0);
	tmpobjid = CreateDynamicObject(19327,207.348,-226.798,4.060,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14530, "estate2", "Auto_monstera", 0);
	tmpobjid = CreateDynamicObject(19451,214.849,-221.770,3.318,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 5774, "garag3_lawn", "sprysig1", 0);
	tmpobjid = CreateDynamicObject(19327,218.855,-257.256,3.326,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14530, "estate2", "Auto_hustler", 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(1412,222.777,-260.406,1.851,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,192.847,-239.012,1.828,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,192.837,-233.738,1.828,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,192.831,-228.455,1.828,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,192.883,-224.493,1.828,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,195.550,-221.886,1.828,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,200.772,-221.897,1.828,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1412,205.974,-221.908,1.828,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(3035,221.129,-258.865,1.097,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(3035,218.739,-258.899,1.097,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(2890,218.998,-269.343,0.373,0.000,0.000,-89.580,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1450,206.248,-256.678,0.953,0.000,0.000,-89.279,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1441,204.985,-222.614,1.034,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1358,196.483,-224.370,1.540,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(12957,202.967,-226.627,1.035,0.000,0.000,59.399,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(12957,204.390,-233.195,1.035,0.000,0.000,175.319,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(851,195.363,-227.441,0.633,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1327,206.759,-237.692,1.195,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1327,206.862,-240.683,1.195,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(13591,200.703,-243.080,0.708,0.000,0.000,39.659,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(3593,198.060,-233.286,0.825,0.000,0.000,-17.219,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(2676,199.824,-257.925,0.528,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(11709,207.665,-223.889,1.218,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19872,213.980,-226.311,-1.204,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19872,214.426,-253.168,-1.204,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19903,211.099,-241.755,0.558,0.000,0.000,-21.299,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19903,211.379,-232.342,0.558,0.000,0.000,-21.299,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19903,212.263,-250.581,0.558,0.000,0.000,-21.299,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19899,207.787,-254.711,0.558,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19899,207.808,-244.257,0.558,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19899,207.822,-235.457,0.558,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19906,223.626,-226.308,3.795,90.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19906,223.818,-235.302,3.795,90.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19906,223.913,-244.302,3.795,90.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19906,223.939,-253.301,3.795,90.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(18075,214.885,-230.824,6.005,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(18075,214.209,-248.473,6.048,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19815,207.325,-230.574,2.095,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19815,207.348,-239.826,2.075,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19815,207.330,-247.680,2.075,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19817,216.356,-244.485,0.483,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19817,216.672,-235.267,0.483,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(1753,207.886,-227.705,0.559,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19899,212.244,-222.740,0.558,0.000,0.000,-90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19899,218.925,-222.748,0.558,0.000,0.000,-90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(2714,222.881,-230.201,2.808,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19816,217.300,-222.602,0.828,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19898,-5112.312,-7805.451,-3836.999,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19898,214.617,-235.489,0.662,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19898,213.617,-244.220,0.662,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19898,215.568,-226.194,0.662,0.000,0.000,61.740,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19898,213.028,-252.822,0.662,0.000,0.000,72.600,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(11711,214.668,-257.260,2.935,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(11711,207.230,-251.090,2.935,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19273,222.688,-222.596,2.147,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19273,222.661,-231.658,2.147,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19273,222.673,-240.603,2.147,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	tmpobjid = CreateDynamicObject(19273,222.686,-249.756,2.147,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
	//Special Abandonded Airport Base
	RemoveBuildingForPlayer(playerid, 3345, 400.117, 2543.570, 15.484, 0.250);
	RemoveBuildingForPlayer(playerid, 3369, 349.875, 2438.250, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 3367, 284.265, 2641.484, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 3367, 284.265, 2587.742, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 3367, 296.140, 2438.250, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 16596, 412.828, 2542.867, 15.539, 0.250);
	RemoveBuildingForPlayer(playerid, 16598, 231.281, 2545.796, 20.023, 0.250);
	RemoveBuildingForPlayer(playerid, 3296, 255.984, 2549.328, 20.203, 0.250);
	RemoveBuildingForPlayer(playerid, 3295, 392.710, 2596.453, 17.632, 0.250);
	RemoveBuildingForPlayer(playerid, 3296, 376.296, 2606.343, 20.171, 0.250);
	RemoveBuildingForPlayer(playerid, 3295, 390.820, 2604.070, 20.023, 0.250);
	RemoveBuildingForPlayer(playerid, 3295, 389.132, 2611.062, 20.171, 0.250);
	RemoveBuildingForPlayer(playerid, 3295, 382.187, 2609.476, 19.820, 0.250);
	RemoveBuildingForPlayer(playerid, 16600, 435.625, 2532.085, 20.179, 0.250);
	RemoveBuildingForPlayer(playerid, 16602, 307.953, 2543.453, 20.398, 0.250);
	RemoveBuildingForPlayer(playerid, 16772, 404.796, 2454.718, 22.054, 0.250);
	RemoveBuildingForPlayer(playerid, 3287, 255.984, 2549.328, 20.203, 0.250);
	RemoveBuildingForPlayer(playerid, 16599, 231.281, 2545.796, 20.023, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 278.148, 2555.187, 15.796, 0.250);
	RemoveBuildingForPlayer(playerid, 16098, 307.953, 2543.453, 20.398, 0.250);
	RemoveBuildingForPlayer(playerid, 3271, 296.140, 2438.250, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 3271, 284.265, 2587.742, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 3271, 284.265, 2641.484, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 16101, 321.671, 2463.492, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 16368, 321.671, 2463.492, 25.664, 0.250);
	RemoveBuildingForPlayer(playerid, 3269, 349.875, 2438.250, 15.476, 0.250);
	RemoveBuildingForPlayer(playerid, 864, 352.773, 2444.406, 15.882, 0.250);
	RemoveBuildingForPlayer(playerid, 864, 346.414, 2445.296, 15.992, 0.250);
	RemoveBuildingForPlayer(playerid, 864, 364.226, 2450.757, 15.546, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 316.367, 2531.609, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 316.164, 2534.648, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 316.265, 2533.078, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 316.398, 2570.367, 15.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 316.351, 2545.140, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 315.562, 2551.625, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 315.664, 2550.062, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 361.375, 2571.812, 15.406, 0.250);
	RemoveBuildingForPlayer(playerid, 3287, 376.296, 2606.343, 20.171, 0.250);
	RemoveBuildingForPlayer(playerid, 3286, 382.187, 2609.476, 19.820, 0.250);
	RemoveBuildingForPlayer(playerid, 16771, 404.796, 2454.718, 22.054, 0.250);
	RemoveBuildingForPlayer(playerid, 16773, 397.476, 2476.632, 19.515, 0.250);
	RemoveBuildingForPlayer(playerid, 16775, 412.117, 2476.632, 19.515, 0.250);
	RemoveBuildingForPlayer(playerid, 16375, 387.601, 2525.546, 15.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 410.828, 2528.570, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 409.804, 2529.632, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 408.718, 2530.765, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 407.156, 2530.468, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 3172, 400.117, 2543.570, 15.484, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 407.882, 2532.007, 16.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 405.359, 2563.085, 15.625, 0.250);
	RemoveBuildingForPlayer(playerid, 3286, 390.820, 2604.070, 20.023, 0.250);
	RemoveBuildingForPlayer(playerid, 3286, 392.710, 2596.453, 17.632, 0.250);
	RemoveBuildingForPlayer(playerid, 3286, 389.132, 2611.062, 20.171, 0.250);
	RemoveBuildingForPlayer(playerid, 16327, 412.828, 2542.867, 15.539, 0.250);
	RemoveBuildingForPlayer(playerid, 16374, 425.468, 2531.000, 22.554, 0.250);
	RemoveBuildingForPlayer(playerid, 16790, 425.468, 2531.000, 22.554, 0.250);
	RemoveBuildingForPlayer(playerid, 16601, 435.625, 2532.085, 20.179, 0.250);

	//Objects////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(8249, 290.233703, 2542.110351, 19.718200, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "sanpedock5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 16640, "a51", "a51_panel2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(8249, 264.771392, 2542.105712, 19.718200, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "sanpedock5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 5, 16640, "a51", "a51_panel2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(9166, 324.589691, 2549.532714, 19.865900, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_panel2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4830, "airport2", "sanpedock5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 341.683135, 2549.541748, 15.692399, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19452, 315.721038, 2543.576904, 20.324071, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19452, 327.287353, 2543.595458, 20.254064, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19443, 307.223175, 2543.581054, 17.133619, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "airportwind03", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19443, 308.830261, 2543.582519, 17.133619, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "airportwind03", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19452, 338.638488, 2543.575683, 20.184055, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gallery01_law", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 370.972015, 2530.143554, 16.884450, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 12, 16640, "a51", "concretemanky", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 380.594879, 2530.145996, 16.884450, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(17951, 370.735260, 2529.999755, 17.019559, 0.000000, 0.000000, 89.393981, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "gz_vicdoor1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(17951, 380.038146, 2529.981445, 17.019559, 0.000000, 0.000000, 89.393981, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "gz_vicdoor1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 270.727325, 2581.004882, 15.967920, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 272.392059, 2581.008544, 16.481039, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 274.057708, 2581.005859, 15.463910, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 275.732757, 2581.007080, 16.481039, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 277.396545, 2581.005371, 15.463910, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 279.056030, 2581.009033, 16.481039, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 280.717224, 2581.008056, 15.463910, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 282.384643, 2581.008544, 16.481039, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 284.048858, 2581.005615, 15.463910, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 285.712127, 2581.006591, 16.481039, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 287.376312, 2581.004394, 15.967900, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16644, "a51_detailstuff", "steel256128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 282.569610, 2580.346923, 11.312199, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 275.585937, 2580.347412, 11.312199, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 273.712402, 2600.701171, 14.855469, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 5154, "dkcargoshp_las2", "green_64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 274.012390, 2600.721191, 15.158479, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18050, "ammu_2flrprops", "gun_target1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 281.425476, 2603.632812, 14.339159, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 5154, "dkcargoshp_las2", "green_64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 281.665130, 2603.645507, 14.745200, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targetb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 284.775177, 2596.970947, 14.255709, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targetb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 288.525146, 2596.505859, 15.068819, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targeta", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 272.112731, 2625.916992, 15.468779, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18050, "ammu_2flrprops", "gun_target1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 279.754669, 2639.594970, 15.468779, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targetb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 265.924102, 2674.279541, 24.224899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18050, "ammu_2flrprops", "gun_target1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 288.608306, 2649.430419, 15.468779, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 1736, "cj_ammo", "CJ_mantarget", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 269.403350, 2670.585205, 21.527540, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targeta", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19980, 279.310028, 2680.177734, 17.710430, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targetb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 285.090484, 2675.159667, 18.126529, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 5154, "dkcargoshp_las2", "green_64", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19967, 285.431732, 2675.211425, 18.427530, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 18064, "ab_sfammuunits", "gun_targeta", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19949, 288.980072, 2680.113769, 19.526620, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 1736, "cj_ammo", "CJ_mantarget", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19949, 269.188934, 2677.818603, 24.900909, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 1736, "cj_ammo", "CJ_mantarget", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19443, 309.653594, 2544.282470, 17.133600, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA96", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19443, 306.335388, 2544.287597, 17.133600, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA96", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19443, 307.995452, 2544.112304, 18.951700, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "LASLACMA96", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 422.663116, 2617.067626, 38.356658, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11301, "carshow_sfse", "concreteslab_small", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.181976, 2615.322021, 33.146301, 0.000000, 0.000000, -60.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 415.914733, 2625.107177, 38.356700, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 11301, "carshow_sfse", "concreteslab_small", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.877532, 2626.537597, 42.714389, 0.000000, 0.000000, -40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 410.878295, 2623.883789, 28.699399, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 417.067596, 2616.508544, 28.699399, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19452, 417.199127, 2616.345947, 39.368251, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 422.663116, 2617.067626, 33.058399, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 430.078002, 2622.846191, 32.037158, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "la_flair1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19452, 411.027099, 2623.698486, 39.368251, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 422.264892, 2610.316162, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 409.680145, 2625.318847, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 415.941650, 2617.772216, 36.103775, 90.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17588, "lae2coast_alpha", "plainglass", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.589782, 2618.651123, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 415.914733, 2625.107177, 33.058399, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 423.340362, 2630.873291, 32.037158, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "la_flair1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 418.929595, 2629.023925, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 433.278167, 2619.407958, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 420.205688, 2635.115234, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 432.964416, 2634.379150, 32.037158, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14387, "dr_gsnew", "la_flair1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.630859, 2624.724121, 27.607009, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 425.850738, 2635.192871, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 435.217041, 2631.388427, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 432.517028, 2634.613281, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.123138, 2632.778076, 42.087001, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 425.830993, 2623.342529, 26.501070, 55.000000, 0.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "mp_burn_ceiling", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.725982, 2618.764892, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 423.235565, 2626.481201, 26.501070, 55.000000, 0.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "mp_burn_ceiling", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 419.066650, 2629.138427, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 424.152313, 2622.881103, 38.211280, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19325, 425.399291, 2621.406738, 35.207370, 90.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF000000);
	tmpobjid = CreateDynamicObjectEx(19325, 421.235015, 2626.370605, 35.207370, 90.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF000000);
	tmpobjid = CreateDynamicObjectEx(1897, 424.152313, 2622.881103, 34.181869, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 424.152313, 2622.881103, 36.304790, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 424.818756, 2622.122558, 35.194000, 90.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 423.805541, 2623.310546, 42.277080, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 430.043304, 2623.256835, 37.650600, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18880, "speedcamera1", "metallamppost4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 422.508514, 2624.871337, 36.327129, 0.000000, 0.000000, 220.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 422.508514, 2624.871337, 34.181900, 0.000000, 0.000000, 220.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 421.854125, 2625.653320, 35.194000, 90.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 423.296417, 2631.298583, 37.650650, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18880, "speedcamera1", "metallamppost4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 432.925567, 2634.804199, 37.650600, 0.000000, 90.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18880, "speedcamera1", "metallamppost4", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.712463, 2626.530273, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.168823, 2615.207275, 33.146301, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2184, 417.354125, 2620.528320, 33.144599, 0.000000, 0.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2184, 419.434906, 2618.526611, 33.146598, 0.000000, 0.000000, -7.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2184, 417.250488, 2623.400878, 33.142601, 0.000000, 0.000000, 265.895111, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14652, "ab_trukstpa", "CJ_WOOD6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1761, 419.122436, 2627.770263, 33.145401, 0.000000, 0.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "sl_vicwall01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2591, "ab_partition1", "ab_fabricCheck2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1761, 425.123504, 2620.565917, 33.145401, 0.000000, 0.000000, -50.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "sl_vicwall01", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2591, "ab_partition1", "ab_fabricCheck2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(631, 427.055206, 2618.283447, 34.015598, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF99FF00);
	tmpobjid = CreateDynamicObjectEx(631, 418.359497, 2628.901855, 34.015598, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF99FF00);
	tmpobjid = CreateDynamicObjectEx(19786, 423.109375, 2614.795898, 35.744400, 0.000000, 0.000000, -6270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19786, 414.146209, 2625.528808, 35.744400, 0.000000, 0.000000, -4270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 421.037841, 2626.338378, 35.759799, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 419.701721, 2627.208740, 34.902099, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic8", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 425.152801, 2621.375244, 35.356788, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic6", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2261, 426.531768, 2618.959228, 35.823829, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(18075, 429.435882, 2623.863281, 37.539299, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14652, "ab_trukstpa", "CJ_WOOD1(EDGE)", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.874603, 2626.540527, 33.146301, 0.000000, 0.000000, -40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 12855, "cunte_cop", "sw_brick05", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.877502, 2626.537597, 28.694940, 0.000000, 0.000000, -40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.714660, 2626.526855, 42.714401, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 418.928161, 2629.020263, 42.714401, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 423.808563, 2623.313232, 42.277080, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.586334, 2618.649169, 42.714401, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.166351, 2615.210449, 42.714401, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.179565, 2615.325195, 42.714401, 0.000000, 0.000000, -60.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 422.265441, 2610.320068, 42.714401, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 409.683898, 2625.320068, 42.714401, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 414.713836, 2626.526611, 28.694900, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 418.926757, 2629.020996, 28.694900, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.585998, 2618.649902, 28.694900, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.165039, 2615.208740, 28.694900, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 424.180358, 2615.325683, 28.694900, 0.000000, 0.000000, -60.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 422.264556, 2610.320068, 28.694900, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 409.684082, 2625.319335, 28.694900, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 432.924194, 2619.718994, 32.039299, 0.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 420.734222, 2634.151611, 32.039299, 0.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(638, 421.606964, 2627.102050, 32.826698, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(638, 426.064208, 2621.570312, 32.826698, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 6282, "beafron2_law2", "boardwalk2_la", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(18075, 433.790496, 2633.055908, 37.539299, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.126220, 2632.780761, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 435.213287, 2631.386962, 42.087001, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.631347, 2624.722656, 42.087001, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 433.275390, 2619.410888, 42.087001, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.725097, 2618.768798, 42.087001, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 419.070098, 2629.140625, 42.087001, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 420.208496, 2635.112304, 42.087001, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 425.849853, 2635.188964, 42.087001, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 432.516479, 2634.609375, 42.087001, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.634826, 2624.724609, 33.146301, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17146, "cuntwroad", "Tar_blenddrtwhiteline", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 435.213073, 2631.387695, 27.607000, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 434.122283, 2632.780029, 27.607000, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 432.516082, 2634.609375, 27.607000, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 425.849792, 2635.188964, 27.607000, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 420.208465, 2635.112304, 27.607000, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 419.070648, 2629.139160, 27.607000, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 427.727478, 2618.768554, 27.607000, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 433.276062, 2619.411376, 27.607000, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 425.780273, 2621.260498, 34.339408, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic5", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 429.260223, 2617.156250, 34.849510, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_landscap1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, 421.301879, 2626.647460, 34.339408, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic8", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19172, 419.483245, 2628.803222, 35.230091, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19173, "samppictures", "samppicture2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19172, 427.454895, 2619.214355, 35.230091, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19173, "samppictures", "samppicture2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 429.123229, 2618.020263, 33.668190, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14420, "dr_gsbits", "mp_apt1_pic1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, 420.721771, 2628.105224, 33.568199, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14489, "carlspics", "AH_picture2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 283.416625, 2241.323242, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 293.915283, 2241.319824, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 304.411041, 2241.316406, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 309.549102, 2241.299316, -59.723400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 304.677062, 2236.475097, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 304.330200, 2250.997070, -64.905097, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 308.629669, 2235.636230, -69.234527, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 295.290893, 2242.536621, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 307.054229, 2235.737060, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14383, "burg_1", "kit_windo_12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 295.043640, 2236.476074, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 285.413848, 2236.472900, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 275.792907, 2236.474365, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 282.129150, 2242.429931, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 277.631011, 2242.407958, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 308.629669, 2235.636230, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 304.253173, 2235.495361, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 299.719635, 2242.451416, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 286.416259, 2242.373779, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 290.914398, 2242.395751, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 276.351531, 2241.110839, -64.068702, 10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 272.518310, 2246.106933, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 282.139312, 2246.107666, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 291.767578, 2246.109130, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 274.495788, 2241.388183, -59.725498, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 304.253204, 2235.495361, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 304.253173, 2235.495361, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 299.719604, 2242.451416, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 295.290893, 2242.536621, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 290.914398, 2242.395751, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 286.416290, 2242.373779, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 282.129211, 2242.429931, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 277.631011, 2242.407958, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 277.666412, 2235.429931, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 277.666412, 2235.429931, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 282.164550, 2235.451904, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 282.164611, 2235.451904, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 286.451690, 2235.465820, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 286.451660, 2235.465820, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 290.949798, 2235.457763, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 290.949798, 2235.457763, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 295.326293, 2235.558593, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 295.326293, 2235.558593, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 299.755004, 2235.473388, -69.234497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, 299.755035, 2235.473388, -70.214401, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 18800, "mroadhelix1", "concreteoldpainted1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 299.410705, 2246.110351, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 302.693664, 2235.730712, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 298.253509, 2235.727783, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 293.833526, 2235.737548, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 289.292541, 2235.731933, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 284.932525, 2235.758544, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 280.450927, 2235.718505, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 276.187438, 2235.723876, -66.321968, 0.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 272.914581, 2241.321289, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 286.852691, 2241.109619, -64.068702, 10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 297.350158, 2241.108398, -64.068702, 10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 307.847625, 2241.100585, -64.068702, 10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 276.387084, 2241.461425, -64.068702, -10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 286.878875, 2241.461181, -64.068702, -10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 297.370971, 2241.462646, -64.068702, -10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 304.140411, 2250.843017, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 304.816894, 2249.504882, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 309.559173, 2252.443115, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1499, 309.561676, 2246.114746, -70.213897, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "vaultFloor", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 307.870880, 2241.462402, -64.068702, -10.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 13059, "ce_fact03", "sw_newcorrug", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 304.408996, 2250.943603, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14577, "casinovault01", "cof_wood1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 274.495819, 2241.388183, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 309.557098, 2241.299316, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 309.555206, 2246.860839, -65.966201, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1569, 305.409729, 2249.457031, -70.229103, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "corporate1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1569, 308.407287, 2249.461669, -70.229103, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4552, "ammu_lan2", "corporate1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.101928, 2249.929687, -75.498207, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14407, "carter_block", "ab_stripped_floor2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 314.344787, 2248.486328, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 309.549102, 2241.299316, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 309.547180, 2252.443115, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19433, 309.551208, 2246.860839, -65.966201, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "corugwall_sandy", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 314.380187, 2245.256591, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.102081, 2259.560546, -75.498207, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14407, "carter_block", "ab_stripped_floor2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.098327, 2269.191894, -75.498207, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14407, "carter_block", "ab_stripped_floor2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 319.074218, 2253.215820, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 324.004669, 2245.256835, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 319.073608, 2262.847900, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 319.074493, 2272.479736, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 328.838134, 2250.153320, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 328.838531, 2259.775878, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 328.838958, 2269.395263, -70.216400, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 323.971923, 2273.645019, -70.216400, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 314.780883, 2246.773681, -65.925292, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.400177, 2269.241455, -70.104393, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.400726, 2259.608154, -70.104393, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 324.398712, 2249.977050, -70.104393, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 315.253509, 2250.256347, -67.360496, 35.000000, 90.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16639, "a51_labs", "dam_terazzo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2913, 376.826385, 2610.118896, 16.451200, 0.000000, 90.000000, 8.220000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2916, 380.088256, 2604.092773, 15.595600, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2913, 373.061798, 2609.456054, 16.451200, 0.000000, 90.000000, 8.220000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2916, 379.655059, 2604.253417, 15.595600, 0.000000, 0.000000, 41.220001, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2916, 379.770507, 2604.589355, 15.595600, 0.000000, 0.000000, 171.479949, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2916, 379.938690, 2604.886474, 15.595600, 0.000000, 0.000000, 133.439956, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2913, 380.666107, 2602.948486, 15.752599, 0.000000, 90.000000, 20.820009, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2913, 381.065521, 2599.582519, 15.752599, 0.000000, 90.000000, 90.359992, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_metalpanel1", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1294, 382.026794, 2603.646972, 15.478099, 0.000000, 180.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1294, 380.327789, 2612.022705, 15.478099, 0.000000, 180.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1294, 373.617218, 2610.723876, 15.478099, 0.000000, 180.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1294, 375.261077, 2602.286376, 15.478099, 0.000000, 180.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3095, "a51jdrx", "sam_camo", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 279.768371, 2234.698974, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 290.266326, 2234.699462, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 300.766113, 2234.699462, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 311.266998, 2234.698974, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 298.960906, 2247.792480, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 288.462921, 2247.793701, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, 277.968536, 2247.797119, -70.270401, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14383, "burg_1", "carpet4kb", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 273.763092, 2238.830810, -66.321998, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2370, 273.806365, 2243.070068, -66.321998, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9220, "sfn_apart02sfn", "newindow12", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 283.723022, 2467.377929, 15.400500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 273.224273, 2467.376953, 15.400500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 264.382904, 2467.382324, 15.398500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 283.721527, 2457.743408, 15.400500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 273.224853, 2457.741943, 15.400500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, 264.368286, 2457.742919, 15.398500, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10778, "airportcpark_sfse", "ws_carpark3", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, -132.394348, 2385.802246, -81.623016, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3653, "beachapts_lax", "eastwall4_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, -127.536743, 2385.796875, -85.520606, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, -132.435333, 2382.168701, -85.520599, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, -137.233779, 2386.109863, -85.520606, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19329, 360.401672, 2531.392578, 17.703779, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19962, "samproadsigns", "greenbackgroundsign", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19962, "samproadsigns", "greenbackgroundsign", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19376, -132.363861, 2388.151123, -85.520599, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19377, -132.414337, 2385.802978, -85.607032, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "tilesswimmingpool2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19853, "mihouse1", "tilesswimmingpool2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(631, -128.161193, 2382.810058, -84.620498, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF99FF00);
	tmpobjid = CreateDynamicObjectEx(2138, -136.723251, 2384.332763, -85.522201, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2140, -136.729019, 2383.198730, -85.519996, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 3, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2163, -137.312805, 2385.425292, -83.918701, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2200, -130.787643, 2382.258789, -85.519897, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3653, "beachapts_lax", "eastwall4_LAe2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1800, -133.490402, 2387.043212, -85.519897, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1701, "cj_med_beds", "CJ_DUVET1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1744, -133.764419, 2382.098876, -83.591888, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1744, -133.764419, 2382.098876, -84.605987, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1744, -133.764419, 2382.098876, -84.095886, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, -129.306274, 2382.329589, -83.319770, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 11738, "mediccase1", "medicalbox1b", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2267, -135.816360, 2388.042236, -83.305831, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14600, "paperchase_bits2", "ab_medbag", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, -132.404464, 2387.567626, -84.164016, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14599, "paperchasebits", "sign_firstaid", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2138, -130.886810, 2387.624511, -85.522201, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 2, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 3, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, -131.231826, 2382.751708, -83.208999, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14600, "paperchase_bits2", "ab_medbag", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19381, -127.571662, 2385.581542, -76.703712, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19381, -137.188140, 2387.076171, -76.703712, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19381, -132.406188, 2382.211914, -76.703697, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19381, -132.353302, 2388.100341, -76.703697, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19329, 360.401367, 2531.172363, 17.703779, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14668, "711c", "cj_white_wall2", 0x00000000);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff} FIRST AID", 80, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObjectEx(19376, 309.569061, 2241.299316, -70.216423, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "BLOCK", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1744, -139.185684, 2380.356933, -83.674705, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "cof_wood2", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1563, -136.762573, 2387.499511, -84.702079, 94.600013, 0.000000, -88.899925, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1563, -136.760986, 2387.109130, -84.701278, 94.600013, 0.000000, -89.699966, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1563, -136.759506, 2386.808837, -84.701278, 94.600013, 0.000000, -89.699966, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 4828, "airport3_las", "gnhotelwall02_128", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(2266, -135.881683, 2382.751708, -83.899002, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 14599, "paperchasebits", "sign_firstaid", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(19089, -127.619926, 2388.060058, -81.919548, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19089, -127.619926, 2382.256347, -81.919548, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19089, -137.150024, 2382.256347, -81.919548, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19089, -137.150024, 2388.059570, -81.919548, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0xFF99FF33);
	tmpobjid = CreateDynamicObjectEx(19329, 430.989654, 2617.617431, 33.665225, 0.000000, 0.000000, 38.900001, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{6666ff} by  Kova", 120, "Ariel", 40, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObjectEx(1897, 421.854125, 2625.653320, 36.583980, 90.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObjectEx(1897, 424.817443, 2622.122070, 36.583980, 90.000000, 90.000000, 130.000000, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(3279, 410.520385, 2545.200439, 15.571399, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19911, 344.365814, 2549.514648, 18.885799, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3279, 234.850494, 2543.075683, 15.481399, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(9241, 348.955993, 2458.712890, 17.030710, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(9241, 310.585998, 2458.782226, 17.030710, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3268, 375.405029, 2540.015869, 15.338700, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3763, 301.197235, 2567.075439, 48.177600, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1682, 264.837188, 2543.816894, 29.728099, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3763, 441.175048, 2470.479980, 29.637170, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3366, 375.462463, 2540.316894, 15.633299, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1569, 390.324462, 2532.527832, 15.449700, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(16771, 402.542541, 2454.724609, 22.062700, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 360.918884, 2470.991455, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 336.514862, 2470.933105, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 336.542541, 2446.544921, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 322.939880, 2446.643554, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 361.306518, 2446.610595, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 322.505249, 2470.975341, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 298.157440, 2471.011718, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19124, 298.191284, 2446.733398, 17.994899, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1617, 341.606231, 2555.451171, 20.191509, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1617, 329.105529, 2555.411621, 20.191509, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1617, 315.624267, 2555.427246, 20.191509, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2359, 270.015686, 2580.566894, 15.631299, 0.000000, 0.000000, 34.929100, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2359, 269.341674, 2580.996093, 15.631299, 0.000000, 0.000000, 324.929107, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2359, 284.158386, 2579.794677, 15.631299, 0.000000, 0.000000, 34.929100, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2042, 280.062500, 2577.701660, 15.569499, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2042, 282.744812, 2582.272216, 15.563500, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2042, 281.554687, 2581.621826, 15.563500, 0.000000, 0.000000, 230.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2042, 281.958740, 2582.289550, 15.563500, 0.000000, 0.000000, 2320.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3031, 427.120605, 2474.174316, 25.422899, 0.000000, 0.000000, 148.893020, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14411, 425.069488, 2625.212890, 29.951599, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2083, 421.040863, 2624.726074, 33.145198, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2083, 424.639678, 2622.005859, 33.145198, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2266, 419.954864, 2626.897705, 36.436038, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2261, 418.910339, 2628.125976, 35.823829, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2266, 425.053192, 2620.699462, 36.235038, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2261, 425.900543, 2619.738769, 34.895259, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1724, 432.671752, 2624.193603, 32.123699, 0.000000, 0.000000, 275.065673, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1723, 432.145843, 2621.968017, 32.123199, 0.000000, 0.000000, 1300.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2311, 430.660614, 2623.203613, 32.123298, 0.000000, 0.000000, 1300.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1724, 429.545196, 2620.348632, 32.123699, 0.000000, 0.000000, -2705.065673, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1723, 421.403045, 2632.162109, 32.123199, 0.000000, 0.000000, 131800.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1724, 420.857421, 2629.809570, 32.123699, 0.000000, 0.000000, 85.654510, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2311, 423.855010, 2631.996337, 32.123298, 0.000000, 0.000000, 1300.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1724, 424.378936, 2633.702636, 32.123699, 0.000000, 0.000000, 330.227844, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14455, 433.658508, 2620.133544, 33.636871, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14455, 424.241363, 2638.122802, 33.636901, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1569, 434.825134, 2631.831054, 32.122798, 0.000000, 0.000000, 490.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1569, 432.892578, 2634.124755, 32.122798, 0.000000, 0.000000, 4270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19377, 429.268005, 2623.520996, 26.881399, -0.008000, 0.000000, -50.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19377, 424.263702, 2630.190917, 26.881399, -0.008000, 0.000000, -50.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 418.150482, 2633.221191, 32.125400, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 417.130889, 2632.363525, 33.473400, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 419.171752, 2634.079833, 32.125400, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 417.130889, 2632.363525, 32.125400, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 430.365997, 2617.121826, 32.125400, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 431.386199, 2617.978027, 32.125400, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 432.407958, 2618.832763, 32.125400, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2161, 431.886657, 2618.390625, 33.473400, 0.000000, 0.000000, 4180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2167, 428.092193, 2618.448974, 32.125701, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2163, 427.499084, 2619.155029, 32.125900, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2200, 419.427917, 2628.996093, 32.125701, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 419.589965, 2620.987060, 38.214401, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 421.285339, 2633.566162, 37.539299, 0.000000, 0.000000, 40.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2267, 417.713867, 2630.958251, 34.843418, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2266, 425.869476, 2621.871337, 35.411899, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2266, 418.216979, 2631.102050, 35.714241, 0.000000, 0.000000, 130.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 412.935974, 2623.099853, 46.993888, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 407.845031, 2628.498046, 46.993888, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 408.485992, 2625.911132, 46.993888, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(880, 420.293518, 2611.360351, 46.668128, 0.000000, 0.000000, 84.606849, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(880, 425.997741, 2606.366455, 46.668128, 0.000000, 0.000000, 84.606849, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 423.143707, 2613.149902, 46.272541, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 422.416748, 2610.818359, 44.828769, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 425.860504, 2607.841552, 44.012561, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(880, 423.579467, 2608.679687, 46.668128, 0.000000, 0.000000, 84.606849, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 423.749389, 2609.571044, 43.709548, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 425.277435, 2609.328613, 46.738269, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(758, 422.451873, 2612.068847, 46.738269, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(822, 421.152557, 2611.515380, 43.721050, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(822, 426.737396, 2608.039794, 43.721050, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 420.135345, 2611.289062, 44.116489, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 422.796356, 2608.892822, 47.020919, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 425.348632, 2606.579589, 44.116489, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 423.213500, 2614.658203, 47.323928, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 423.053314, 2614.915039, 47.323928, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(865, 422.841918, 2615.236572, 47.323928, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19377, 293.957244, 2250.985595, -70.300247, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 276.051940, 2236.840820, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 309.169128, 2240.428222, -70.213699, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 309.167724, 2241.096923, -70.213699, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 309.166748, 2241.761474, -70.213699, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 275.378204, 2236.839599, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 279.723876, 2236.833740, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 280.397613, 2236.834960, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 288.541137, 2236.830322, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 289.214874, 2236.831542, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 284.872528, 2236.819091, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 284.198791, 2236.817871, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 306.294311, 2236.810546, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 306.968048, 2236.811767, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 302.623870, 2236.835937, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 301.950134, 2236.834716, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 298.147857, 2236.839599, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 297.474121, 2236.838378, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 293.803924, 2236.839355, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 293.130187, 2236.838134, -70.213699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 284.668029, 2245.737548, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 283.992645, 2245.737304, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 297.204742, 2245.758789, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 297.884704, 2245.758789, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 276.187652, 2245.725830, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 275.512268, 2245.725585, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 280.351867, 2245.749511, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 279.671905, 2245.749511, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 289.089111, 2245.748535, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 288.409149, 2245.748535, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 293.493957, 2245.754882, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 292.813995, 2245.754882, -70.213699, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14411, 313.365203, 2246.990478, -73.408996, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2068, 376.343505, 2607.165039, 19.178230, 0.000000, 0.000000, 11.407839, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1327, 375.628845, 2599.100341, 15.475700, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19631, 376.604400, 2598.589599, 15.900099, 50.000000, 90.000000, 58.560001, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19631, 376.626922, 2599.473144, 15.900099, 50.000000, 50.000000, 106.920013, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2915, 373.754577, 2603.820068, 15.599200, 0.000000, 0.000000, 94.620002, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2915, 373.521545, 2605.809814, 15.599200, 0.000000, 0.000000, 94.620002, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2629, 377.334472, 2609.672119, 15.478619, 0.000000, 0.000000, 8.159999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2629, 373.585388, 2609.016113, 15.478619, 0.000000, 0.000000, 8.159999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14791, 388.850189, 2611.296386, 17.507499, 0.000000, 0.000000, 13.079999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 380.274108, 2604.583740, 15.595600, 0.000000, 0.000000, 133.439956, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 380.318756, 2604.908447, 15.595600, 0.000000, 0.000000, 9.419919, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2628, 375.993774, 2595.393798, 15.477080, 0.000000, 0.000000, 100.020027, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2628, 376.570159, 2591.373779, 15.477080, 0.000000, 0.000000, 100.020027, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2628, 379.693572, 2607.117187, 15.477100, 0.000000, 0.000000, 281.059936, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 381.056976, 2612.923828, 15.476750, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 381.878753, 2612.994873, 15.476750, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 382.572692, 2613.179443, 15.476750, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1985, 392.218414, 2597.107666, 18.485300, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(12957, 398.026580, 2589.968994, 15.985150, 0.000000, 0.000000, 325.070861, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 390.419708, 2591.619384, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1985, 390.623992, 2603.384521, 18.485300, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1985, 391.416290, 2600.252929, 18.485300, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 396.522033, 2592.873779, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 391.653839, 2591.871826, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 392.842224, 2592.139892, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 394.074676, 2592.398437, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 395.322235, 2592.661376, 15.618399, 0.000000, 0.000000, 11.040010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 395.959838, 2592.960449, 15.866399, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 391.146606, 2591.759277, 15.866399, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 392.349914, 2592.059570, 15.866399, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 393.553222, 2592.359863, 15.866399, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 394.756530, 2592.660156, 15.866399, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 396.522003, 2592.873779, 15.990400, 0.000000, 22.000000, 11.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 395.322204, 2592.661376, 16.114400, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 394.074707, 2592.398437, 16.114400, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 392.842193, 2592.139892, 16.114400, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 391.653808, 2591.871826, 16.114400, 0.000000, 0.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2060, 390.419708, 2591.619384, 15.990400, 0.000000, -22.000000, 11.039999, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(864, 382.774169, 2587.933593, 14.866049, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(864, 375.713500, 2586.897216, 14.665049, 0.000000, 0.000000, 55.919990, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(864, 396.950897, 2590.625732, 14.866049, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(864, 398.978118, 2587.748779, 15.169059, 0.000000, 0.000000, 316.258178, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(819, 398.373718, 2594.147460, 14.217510, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2670, 381.304687, 2587.183837, 15.651200, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19922, 381.950805, 2590.330078, 15.452599, 0.000000, 0.000000, 11.940010, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1479, 392.711486, 2600.554199, 16.935699, 6.000000, 0.000000, 104.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1362, 384.695312, 2589.363769, 16.123300, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19942, 382.889465, 2590.709960, 16.345500, 0.000000, 0.000000, -164.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19942, 383.093536, 2590.185791, 16.345500, 0.000000, 0.000000, -207.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19942, 382.727508, 2590.359130, 16.345500, 0.000000, 0.000000, -164.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19942, 382.455291, 2590.338623, 16.345500, 0.000000, 0.000000, -207.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2672, 383.030364, 2592.526855, 15.746199, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2676, 394.847229, 2594.607421, 15.595100, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2671, 379.831848, 2609.824951, 15.502300, 0.000000, 0.000000, 82.894027, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2671, 386.944305, 2606.509521, 15.502300, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18901, 382.376403, 2591.069335, 16.298500, 90.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18901, 381.877929, 2590.326416, 16.298500, 90.000000, 0.000000, 163.080017, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18901, 382.207397, 2590.034667, 16.298500, 90.000000, 0.000000, 177.323928, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18924, 381.885711, 2590.780273, 16.263700, 0.000000, -90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 384.862792, 2590.707031, 15.480799, 0.000000, 0.000000, 207.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 379.534362, 2589.846435, 15.480799, 0.000000, 0.000000, 146.640014, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 387.313385, 2605.876220, 15.480799, 0.000000, 0.000000, 189.480026, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 388.524169, 2606.337158, 15.480799, 0.000000, 0.000000, 181.440063, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 384.120727, 2611.953857, 15.480799, 0.000000, 0.000000, 94.260047, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19996, 384.587432, 2610.464599, 15.480799, 0.000000, 0.000000, 119.820060, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19110, 381.554199, 2590.611572, 16.333900, -16.000000, -88.000000, 2.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.627593, 2600.454833, 16.112300, -26.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19938, 385.783660, 2600.800781, 16.212200, -90.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19937, 384.876312, 2600.558837, 14.973730, 0.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19938, 383.969207, 2600.315429, 16.212200, -90.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.053405, 2600.299316, 16.112300, -4.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.135406, 2600.321533, 16.112300, -6.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.217498, 2600.343750, 16.112300, -8.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.299499, 2600.365966, 16.112300, -14.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.381500, 2600.388183, 16.112300, -16.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.463592, 2600.410400, 16.112300, -22.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1945, 384.545593, 2600.432617, 16.112300, -24.000000, 0.000000, 105.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 384.815460, 2600.551757, 16.116600, 0.000000, 0.000000, -75.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 385.604400, 2600.777832, 16.116600, 0.000000, 0.000000, -75.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 385.336212, 2600.696777, 16.116600, 0.000000, 0.000000, -75.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2916, 385.085479, 2600.626953, 16.116600, 0.000000, 0.000000, -75.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 328.057891, 2268.466552, -75.412033, 0.000000, 0.000000, 354.506805, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1421, 328.099761, 2269.562255, -74.604698, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 323.926177, 2260.709960, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2969, 319.974212, 2256.295166, -74.591499, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(944, 326.431427, 2268.933593, -74.546897, 0.000000, 0.000000, 91.483619, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3761, 320.024627, 2270.250488, -73.525093, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1685, 322.397521, 2271.849365, -74.806213, 0.000000, 0.000000, 356.580322, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1348, 327.686004, 2265.739990, -74.723899, 0.000000, 0.000000, 2.697350, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1687, 326.802612, 2272.435302, -74.634246, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3761, 320.030975, 2264.020019, -73.525093, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3761, 320.029754, 2257.800292, -73.525093, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1421, 324.092651, 2272.167724, -74.604698, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 328.291168, 2267.943603, -75.412033, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 328.320983, 2267.436523, -75.412033, 0.000000, 0.000000, 7.809000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 327.813415, 2268.035644, -75.412033, 0.000000, 0.000000, 2.952559, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 327.765533, 2267.482177, -75.412033, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3015, 328.010650, 2266.951660, -75.412033, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3761, 327.934417, 2255.734863, -73.525093, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 324.722503, 2261.583984, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 324.829040, 2262.452880, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 324.810974, 2260.695556, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 323.974273, 2262.563720, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 323.966949, 2261.682617, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 323.863098, 2261.366210, -74.379798, 0.000000, 0.000000, 8.717439, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 323.170989, 2261.479736, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 324.778533, 2261.310058, -74.379798, 0.000000, 0.000000, 348.238952, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2969, 320.110382, 2257.165039, -74.591499, 0.000000, 0.000000, 358.731719, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2969, 320.123168, 2256.746826, -74.591499, 0.000000, 0.000000, 1.452260, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2969, 320.040618, 2257.655761, -74.591499, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.636108, 2255.672119, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.076263, 2255.688720, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.062805, 2256.569824, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.624206, 2256.753417, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.430694, 2257.717041, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.796173, 2257.848144, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.451019, 2258.615722, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.551300, 2258.633544, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.991546, 2258.644531, -73.798301, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.051025, 2263.655273, -73.798301, 0.000000, 0.000000, 88.038528, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.525909, 2263.241210, -73.798301, 0.000000, 0.000000, 95.100219, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.200012, 2262.752441, -73.798301, 0.000000, 0.000000, 83.553680, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.634094, 2262.259277, -73.798301, 0.000000, 0.000000, 92.952560, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 319.761901, 2270.437744, -73.798301, 0.000000, 0.000000, 89.306777, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.176239, 2271.398925, -73.798301, 0.000000, 0.000000, 88.038528, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2358, 320.278350, 2270.522705, -73.798301, 0.000000, 0.000000, 89.419456, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2197, 327.745544, 2251.935791, -75.412498, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2197, 327.744506, 2251.255126, -75.412498, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.464813, 2249.737548, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.467437, 2249.070556, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.461914, 2248.402099, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.456390, 2247.733886, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.456756, 2247.061279, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.448455, 2246.380615, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 328.449035, 2245.696044, -75.411697, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 325.280212, 2245.618896, -75.411697, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 324.605957, 2245.623535, -75.411697, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 323.933380, 2245.622070, -75.411697, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11729, 323.267364, 2245.621582, -75.411697, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(944, 319.943084, 2251.452880, -74.546897, 0.000000, 0.000000, 91.483619, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1685, 322.082244, 2253.463378, -74.806213, 0.000000, 0.000000, 353.755981, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1431, 321.817596, 2251.472412, -74.911262, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 326.424652, 2246.001220, -75.054901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1271, 327.307830, 2245.860595, -75.054901, 0.000000, 0.000000, 21.402050, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1224, 321.637634, 2249.821533, -74.909103, 0.000000, 0.000000, 4.595270, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1224, 327.091308, 2250.669677, -74.909103, 0.000000, 0.000000, 4.595270, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1224, 322.190582, 2256.314941, -74.909103, 0.000000, 0.000000, 4.595270, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1224, 322.228302, 2271.764160, -73.462799, 0.000000, 0.000000, 12.077899, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 321.455749, 2248.024414, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 325.707763, 2247.983642, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 321.447601, 2252.985351, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 321.354949, 2259.025634, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 321.164520, 2265.546142, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 320.989105, 2270.924072, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 325.569427, 2253.031250, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 325.537445, 2259.051025, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 325.609466, 2265.497558, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1893, 325.709564, 2270.853271, -70.002113, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.661437, 2253.496582, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 328.101806, 2253.504394, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 328.143920, 2254.409912, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.543701, 2254.422119, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.510162, 2255.342529, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.831939, 2255.124755, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 328.269958, 2255.369140, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 328.041534, 2256.407714, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.722747, 2256.245117, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 328.440795, 2256.491455, -73.813102, 0.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3383, 327.941711, 2261.819091, -75.411102, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(16641, 332.910003, 2269.758300, -74.800773, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.934387, 2262.452636, -73.878097, 90.000000, 45.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1636, 327.824401, 2262.759521, -73.878097, 90.000000, 45.000000, 30.673700, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2976, 328.029968, 2260.879150, -74.358657, 0.000000, 0.000000, 5.962629, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 304.139282, 2247.792968, -71.928001, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 299.411743, 2242.886230, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 289.779205, 2242.888916, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 280.152770, 2242.889648, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 270.520538, 2242.887207, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 279.269836, 2239.581298, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 288.901824, 2239.581054, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 298.532440, 2239.580322, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19461, 308.166137, 2239.579345, -71.928001, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 282.417388, 2246.119873, -65.032897, 0.000000, 10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 294.726654, 2246.155517, -65.032897, 0.000000, 10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 282.377685, 2236.473388, -65.032897, 0.000000, -10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 295.225921, 2236.394042, -65.032897, 0.000000, -10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 308.068145, 2236.422607, -65.032897, 0.000000, -10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 307.939300, 2240.821289, -64.043899, 0.000000, 10.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18075, 309.568969, 2251.293212, -65.034698, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3268, 274.096801, 2462.292968, 15.461600, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18980, 276.455413, 2452.810791, 14.987600, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(18980, 271.610992, 2452.795166, 14.985600, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19903, 277.141998, 2459.155273, 15.478400, 0.000000, 0.000000, 86.113098, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(936, 288.290313, 2467.540039, 15.888310, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(937, 288.216186, 2465.635742, 15.992250, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(941, 288.211669, 2459.931152, 15.992799, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(937, 288.215667, 2463.729736, 15.992250, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(937, 288.215270, 2461.833984, 15.992250, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19899, 281.213775, 2456.127441, 15.484299, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19900, 279.447906, 2456.142822, 15.484140, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19815, 288.982513, 2466.330566, 17.482799, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19815, 288.971649, 2461.569580, 17.482799, 0.000000, 0.000000, 270.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19817, 279.119873, 2464.573242, 14.983699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19817, 268.304992, 2464.826171, 14.983699, 0.000000, 0.000000, 180.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19903, 266.509246, 2459.009765, 15.478400, 0.000000, 0.000000, 86.113098, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19900, 278.510345, 2456.373291, 15.484140, 0.000000, 0.000000, 8.904620, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19899, 259.807189, 2459.335693, 15.484299, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(936, 259.840057, 2462.053955, 15.888299, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(936, 259.837982, 2463.949462, 15.888299, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 287.129455, 2461.249267, 15.500100, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 267.659423, 2463.914550, 15.500100, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 277.942504, 2460.895507, 15.500100, 0.000000, 0.000000, 23.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 268.733093, 2461.095947, 15.500100, 0.000000, 0.000000, 320.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 279.145019, 2464.506347, 15.500100, 0.000000, 0.000000, 230.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3633, 288.117065, 2471.224121, 15.941399, 0.000000, 0.000000, 6.776889, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3633, 274.422210, 2459.739501, 15.941399, 0.000000, 0.000000, 6.776889, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3632, 260.141296, 2471.377929, 15.869199, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2670, 275.967407, 2466.474121, 15.586199, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2670, 287.219512, 2458.383056, 15.586199, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2671, 260.578063, 2465.025878, 15.501099, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2671, 286.976409, 2464.570068, 15.501099, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19900, 260.087646, 2466.143066, 15.484140, 0.000000, 0.000000, 350.327728, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(3632, 260.965606, 2471.230468, 15.869199, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19377, -142.895004, 2385.800048, -85.607032, 0.000000, 90.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1569, 360.401214, 2532.673095, 15.701700, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(1569, -127.637878, 2385.300048, -85.520202, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -134.876998, 2382.434570, -83.746803, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.132812, 2382.489990, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -133.714706, 2382.466552, -83.221000, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2227, -137.345764, 2386.383300, -85.520103, 0.000000, 0.000000, 91.989601, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -133.814620, 2382.463867, -84.233497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.078445, 2382.406005, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.165130, 2382.311767, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.324768, 2382.322998, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.179595, 2382.393066, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.233963, 2382.477294, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11747, -134.014450, 2382.461669, -84.246986, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -134.616363, 2382.424072, -84.262802, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -134.415802, 2382.411376, -83.746803, 0.000000, 0.000000, 2.571630, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11736, -133.956085, 2382.428222, -83.746803, 0.000000, 0.000000, 357.175659, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -133.494003, 2382.459716, -84.233497, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11748, -134.921752, 2382.327636, -84.247901, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11748, -135.006378, 2382.476318, -84.247901, 0.000000, 0.000000, 9.477450, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2266, -133.308456, 2387.576660, -83.150962, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2136, -136.704803, 2384.304443, -85.519897, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2163, -129.899093, 2388.148925, -85.537200, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(14793, -131.551895, 2388.155761, -81.816047, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(2685, -137.074096, 2384.781005, -84.234703, 0.000000, 0.000000, 90.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -133.494003, 2382.459716, -83.717399, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -134.036361, 2382.443359, -83.221000, 0.000000, 0.000000, 358.156951, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -134.396362, 2382.446533, -83.221000, 0.000000, 0.000000, 359.278625, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(11738, -134.716369, 2382.449462, -83.221000, 0.000000, 0.000000, 1.046219, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19898, 280.948730, 2468.218505, 15.500100, 0.000000, 0.000000, 0.000000, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19920, 417.762115, 2623.321777, 33.934307, 0.000000, 0.000000, 116.400001, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19827, 360.392547, 2532.123535, 17.573396, 0.000000, 0.000000, 90.799972, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19827, 360.392547, 2532.123535, 17.773399, 0.000000, 0.000000, 90.799972, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19827, 360.393646, 2532.213867, 17.663234, 0.000000, -89.900001, 89.300003, 300.00, 300.00);
	tmpobjid = CreateDynamicObjectEx(19827, 360.391448, 2532.033691, 17.663543, 0.000000, -89.900001, 89.300003, 300.00, 300.00);

		//Ryuuzu's mapping
	RemoveBuildingForPlayer(playerid, 785, -2823.9219, -1564.2734, 139.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2795.5625, -1438.6953, 135.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2856.3906, -1542.4922, 134.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2867.5234, -1515.8359, 134.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2836.5625, -1597.4063, 138.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2833.6250, -1444.8672, 134.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2796.0625, -1582.7656, 139.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -2847.3359, -1483.7344, 134.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 784, -2800.7188, -1488.3906, 141.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 784, -2851.2656, -1458.8438, 139.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2867.5234, -1515.8359, 134.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2856.3906, -1542.4922, 134.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2836.5625, -1597.4063, 138.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2847.3359, -1483.7344, 134.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2823.9219, -1564.2734, 139.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 18267, -2816.1797, -1524.2813, 139.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 18230, -2811.0313, -1523.9141, 140.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2796.0625, -1582.7656, 139.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 694, -2800.7188, -1488.3906, 141.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 694, -2851.2656, -1458.8438, 139.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2833.6250, -1444.8672, 134.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -2795.5625, -1438.6953, 135.0547, 0.25);
	CreateDynamicObject(18267, -2831.72534, -1594.69531, 141.64043,   356.85840, 0.00000, 57.94254);
	CreateDynamicObject(8315, -2825.14063, -1607.60730, 143.50929,   0.00000, 0.00000, 250.01849);
	CreateDynamicObject(8210, -2856.96509, -1462.30359, 137.91360,   3.00000, -1.00000, 249.00000);
	CreateDynamicObject(8210, -2856.50732, -1569.44055, 142.20720,   0.00000, -2.00000, 280.00000);
	CreateDynamicObject(8210, -2864.06860, -1515.41113, 139.74561,   -1.00000, -3.00000, 275.00000);
	CreateDynamicObject(8315, -2818.37061, -1430.44800, 137.67430,   1.00000, 2.00000, 103.85513);
	CreateDynamicObject(8209, -2779.32324, -1482.15930, 139.05385,   0.00000, -1.00000, 278.72226);
	CreateDynamicObject(3749, -2775.49854, -1540.42004, 144.47690,   0.00000, 2.00000, 72.00000);
	CreateDynamicObject(8210, -2788.11548, -1430.03809, 115.93256,   0.00000, -90.00000, 292.49152);
	CreateDynamicObject(9241, -2830.10645, -1449.97241, 136.35385,   0.00000, 0.00000, 9.27595);
	CreateDynamicObject(18267, -2831.72534, -1594.69531, 141.64043,   356.85840, 0.00000, 57.94254);
	CreateDynamicObject(8315, -2825.14063, -1607.60730, 143.50929,   0.00000, 0.00000, 250.01849);
	CreateDynamicObject(8315, -2789.67627, -1590.99109, 142.98546,   0.00000, 0.00000, 345.29471);
	CreateDynamicObject(8210, -2856.96509, -1462.30359, 137.91360,   3.00000, -1.00000, 249.00000);
	CreateDynamicObject(8210, -2856.50732, -1569.44055, 142.20720,   0.00000, -2.00000, 280.00000);
	CreateDynamicObject(8210, -2864.06860, -1515.41113, 139.74561,   -1.00000, -3.00000, 275.00000);
	CreateDynamicObject(8315, -2818.37061, -1430.44800, 137.67430,   1.00000, 2.00000, 103.85513);
	CreateDynamicObject(8209, -2779.32324, -1482.15930, 139.05385,   0.00000, -1.00000, 278.72226);
	CreateDynamicObject(3749, -2775.49854, -1540.42004, 144.47690,   0.00000, 2.00000, 72.00000);
	CreateDynamicObject(8210, -2788.11548, -1430.03809, 115.93256,   0.00000, -90.00000, 292.49152);
	CreateDynamicObject(9241, -2830.10645, -1449.97241, 136.35385,   0.00000, 0.00000, 9.27595);
	CreateDynamicObject(987, -2785.37915, -1571.27563, 139.80508,   0.00000, 0.00000, 62.55127);
	CreateDynamicObject(791, -2803.50781, -1641.82813, 139.47656,   356.85840, 0.00000, -3.05433);
	CreateDynamicObject(987, -2779.39331, -1561.02686, 139.48119,   0.00000, 0.00000, 85.01752);

		//LSDragStrip
	CreateDynamicObject(1894, 2001.099854, -2605.197754, 10.332479, 0.000000, 0.000000, 270.000019			);
	CreateDynamicObject(1894, 1598.761108, -2605.165527, 10.334423, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(8185, 1925.675537, -2608.315918, 11.521570, 0.000000, 0.000000, -90.000078         );
	CreateDynamicObject(8185, 1925.675537, -2593.721436, 11.521570, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1802.900024, -2608.323242, 11.515319, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1802.952759, -2593.720215, 11.516569, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1676.952759, -2593.725098, 11.524071, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1677.202026, -2608.318359, 11.522820, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1529.095337, -2608.326904, 11.520320, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(8185, 1529.011963, -2593.720215, 11.519070, 0.000000, 0.000000, -90.000021         );
	CreateDynamicObject(3406, 2007.691040, -2591.760742, 12.483825, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(8674, 2008.962158, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 2017.529541, -2591.744873, 12.483330, 0.000000, 0.000000, 0.000115           );
	CreateDynamicObject(3406, 1998.891846, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 2008.744751, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3819, 2008.197266, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 2008.173462, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3361, 2013.615479, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3406, 2007.691040, -2589.760010, 12.483825, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3406, 2007.691040, -2587.757324, 12.483825, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3406, 2008.744751, -2583.736816, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 2008.744751, -2581.729492, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1998.892090, -2589.759766, 12.483825, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3406, 1998.888184, -2587.757324, 12.483825, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3406, 1999.944092, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1999.942139, -2583.736816, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1999.945923, -2581.729492, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3819, 1999.474731, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1999.522583, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3361, 1990.680176, -2591.744873, 12.483330, 0.000000, 0.000000, 180.000095         );
	CreateDynamicObject(3361, 1994.021362, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(8674, 1985.214355, -2592.816650, 13.948789, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1979.779053, -2591.744873, 12.483330, 0.000000, 0.000000, 0.000075           );
	CreateDynamicObject(8674, 1998.648926, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8674, 1971.859009, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1970.550903, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1961.753174, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1970.550903, -2589.755127, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1970.550903, -2587.766846, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1961.756958, -2587.766846, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1961.756958, -2589.759277, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1971.617065, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1962.867065, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1962.867065, -2583.750732, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1971.617310, -2583.750732, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1971.617310, -2581.766602, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1962.869995, -2581.766602, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1976.483521, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3361, 1956.940796, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3361, 1953.354126, -2591.744873, 12.483330, 0.000000, 0.000000, -179.999830        );
	CreateDynamicObject(3819, 1971.020874, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1962.345459, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1971.000488, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1962.450684, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(8674, 1947.963867, -2592.816650, 13.948789, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1942.428223, -2591.744873, 12.483330, 0.000000, 0.000000, -359.999678        );
	CreateDynamicObject(3406, 1933.127319, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(8674, 1934.484253, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1924.327515, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(8674, 1924.117065, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1916.101929, -2591.744873, 12.483330, 0.000000, 0.000000, -539.999526        );
	CreateDynamicObject(3406, 1933.127319, -2589.759521, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1933.127319, -2587.758545, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1924.328979, -2589.759521, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1924.332153, -2587.758545, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1934.184692, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1934.184692, -2583.741943, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1934.184692, -2581.742676, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1925.390625, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1925.398193, -2583.741943, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1925.393921, -2581.742676, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1939.050659, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3361, 1919.457153, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3819, 1933.621216, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1924.820923, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1933.676147, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1924.875610, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(7617, 1802.496460, -2582.841553, 23.674599, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(8674, 1910.539429, -2592.816650, 13.948789, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1905.076904, -2591.744873, 12.483330, 0.000000, 0.000000, -719.999661        );
	CreateDynamicObject(8674, 1897.140869, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1895.803223, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1887.052734, -2591.755859, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1895.803223, -2589.753174, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1895.803223, -2587.753662, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1887.060791, -2589.753174, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1887.060791, -2587.751221, 12.483825, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(3406, 1896.850586, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1888.053711, -2585.741699, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1896.850586, -2583.664795, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1888.059448, -2583.664795, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1896.850586, -2581.687500, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 1888.050171, -2581.687500, 14.480072, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8674, 1886.765991, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3361, 1878.727295, -2591.744873, 12.483330, 0.000000, 0.000000, -539.999526        );
	CreateDynamicObject(3819, 1896.345459, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1887.570923, -2589.051514, 15.553377, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1896.324585, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3819, 1887.524292, -2582.984863, 17.542109, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3361, 1901.680908, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(3361, 1882.131226, -2581.822998, 14.482059, 0.000000, 0.000000, 90.000113          );
	CreateDynamicObject(1262, 1995.082764, -2601.557617, 15.825233, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 1995.082764, -2601.067627, 15.825233, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(16325, 2029.358032, -2584.311035, 13.264105, 0.000000, 0.000000, 89.999942         );
	CreateDynamicObject(16101, 1994.966064, -2601.240234, 16.595364, 180.000037, 0.000000, 0.000000        );
	CreateDynamicObject(16092, 2025.703369, -2600.999268, 11.153191, 0.000000, 0.000000, 0.000000          );
	CreateDynamicObject(16092, 1440.172241, -2601.053711, 11.528156, 0.000000, 0.000000, 0.000000          );
	CreateDynamicObject(1327, 2016.292725, -2608.315674, 13.089839, 0.000000, 269.759205, 258.749992       );
	CreateDynamicObject(1327, 2018.166870, -2608.315674, 13.089839, 0.000000, 269.759205, 258.749992       );
	CreateDynamicObject(1327, 2020.117310, -2608.315674, 13.089839, 0.000000, 269.759205, 258.749992       );
	CreateDynamicObject(1327, 2022.066284, -2608.315674, 13.089839, 0.000000, 269.759205, 292.500014       );
	CreateDynamicObject(1327, 2024.000488, -2608.315674, 13.089839, 0.000000, 269.759205, 258.749992       );
	CreateDynamicObject(1327, 2016.292725, -2593.673096, 13.089839, 0.000000, 269.759205, 67.500004        );
	CreateDynamicObject(1327, 2018.242432, -2593.673096, 13.089839, 0.000000, 269.759205, 101.250025       );
	CreateDynamicObject(1327, 2020.191650, -2593.673096, 13.089839, 0.000000, 269.759205, 22.499995        );
	CreateDynamicObject(1327, 2022.168579, -2593.673096, 13.089839, 0.000000, 269.759205, 56.250017        );
	CreateDynamicObject(1327, 2024.118286, -2593.673096, 13.089839, 0.000000, 269.759205, 22.499995        );
	CreateDynamicObject(1327, 2016.292725, -2608.489990, 13.533575, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2018.217163, -2608.489990, 13.533575, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2020.092041, -2608.489990, 13.533575, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2022.066040, -2608.489990, 13.533575, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2024.040527, -2608.489990, 13.533575, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2024.063721, -2593.560791, 13.533575, 0.000000, 269.759205, 0.000018         );
	CreateDynamicObject(1327, 2022.164063, -2593.560791, 13.533575, 0.000000, 269.759205, 0.000018         );
	CreateDynamicObject(1327, 2020.139282, -2593.560791, 13.533575, 0.000000, 269.759205, 0.000018         );
	CreateDynamicObject(1327, 2018.214355, -2593.735107, 13.533575, 0.000000, 269.759205, 0.000018         );
	CreateDynamicObject(1327, 2016.263916, -2593.560791, 13.533575, 0.000000, 269.759205, 0.000018         );
	CreateDynamicObject(1327, 2017.218384, -2608.489990, 14.033567, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2019.169067, -2608.489990, 14.033567, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2021.243652, -2608.489990, 14.033567, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2023.317993, -2608.489990, 14.033567, 0.000000, 269.759205, 236.250054       );
	CreateDynamicObject(1327, 2023.167847, -2593.463135, 14.033567, 0.000000, 269.759205, 45.000008        );
	CreateDynamicObject(1327, 2021.093262, -2593.463135, 14.033567, 0.000000, 269.759205, 45.000008        );
	CreateDynamicObject(1327, 2019.043945, -2593.463135, 14.033567, 0.000000, 269.759205, 45.000008        );
	CreateDynamicObject(1327, 2016.944092, -2593.712158, 14.033567, 0.000000, 269.759205, 56.250035        );
	CreateDynamicObject(1262, 2026.653564, -2605.002930, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2604.517090, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2604.030273, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2603.552246, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2599.027344, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2598.552002, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2598.066406, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1262, 2026.653564, -2597.581299, 18.621267, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1238, 2018.195679, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 2020.420654, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 2022.595337, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 2024.645142, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1894, 2012.322144, -2602.473633, 11.157493, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1980.395874, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1978.020752, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1975.946899, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1973.697144, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1971.346313, -2601.255859, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8185, 1893.249146, -2601.222656, 10.455350, 0.000000, 0.000000, -449.999602        );
	CreateDynamicObject(11392, 2011.318604, -2602.155762, 12.552509, 0.000000, 0.000000, 270.000001        );
	CreateDynamicObject(978, 2008.433716, -2600.904785, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(978, 1999.046875, -2600.904785, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(978, 1989.664673, -2600.904785, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(979, 1989.675293, -2601.571045, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(979, 1999.060913, -2601.571045, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(979, 2008.448242, -2601.571045, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(978, 2008.433716, -2608.170654, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(978, 1999.082642, -2608.170654, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(978, 1989.732056, -2608.170654, 12.307105, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(979, 2008.448242, -2593.860596, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(979, 1999.123901, -2593.860596, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(979, 1989.745850, -2593.860596, 12.299604, 0.000000, 0.000000, -179.999945         );
	CreateDynamicObject(2047, 2026.453369, -2607.002930, 18.764875, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2048, 2026.453369, -2601.168701, 18.717943, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2580, 2026.595825, -2607.790039, 13.737360, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2587, 2026.552002, -2608.104736, 15.665886, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2588, 2026.570801, -2594.465820, 15.602488, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2729, 2026.478394, -2607.730957, 17.166010, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(2730, 2026.495728, -2594.231201, 17.027723, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(2731, 2026.453369, -2596.397949, 18.609753, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(2732, 2026.520752, -2594.189209, 13.753366, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(2733, 2025.734863, -2606.895020, 13.631289, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(2734, 2025.667236, -2595.031982, 15.503843, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2735, 2024.928345, -2594.211670, 14.805168, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(7304, 1954.067993, -2612.586914, 15.435106, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(7304, 1954.067993, -2612.586914, 15.435106, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(8406, 2045.168945, -2612.463379, 18.072216, 0.000000, 0.000000, 180.000020         );
	CreateDynamicObject(8673, 1988.471924, -2612.602783, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8673, 1955.174316, -2612.602783, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8673, 1918.171631, -2612.602783, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8673, 2021.093384, -2612.602783, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3406, 2035.411499, -2580.602051, 12.923743, 270.060294, 0.000000, 0.000000         );
	CreateDynamicObject(3406, 2029.542969, -2580.583740, 12.923743, 270.060294, 0.000000, 0.000000         );
	CreateDynamicObject(2232, 2025.617065, -2583.465332, 14.630288, 0.000000, 0.000000, 303.749983         );
	CreateDynamicObject(2232, 2032.794800, -2584.916260, 14.630288, 0.000000, 0.000000, 11.250026          );
	CreateDynamicObject(2232, 2026.406372, -2584.672607, 14.630288, 0.000000, 0.000000, 326.249978         );
	CreateDynamicObject(3383, 2029.168457, -2585.598877, 14.032413, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(14820, 2028.638916, -2585.461914, 15.197636, 0.000000, 0.000000, 0.000000          );
	CreateDynamicObject(3398, 1995.102905, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1424.498047, -2601.025635, 12.935335, 0.000000, 0.000000, 89.999942          );
	CreateDynamicObject(1238, 1439.127563, -2601.137939, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1436.778442, -2601.137939, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1434.354004, -2601.137939, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1431.878052, -2601.137939, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1429.878052, -2599.065186, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1428.253174, -2608.668701, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1428.253174, -2593.473389, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1429.878052, -2603.660889, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1428.855469, -2605.991455, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1238, 1428.855469, -2595.921631, 12.865055, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1327, 1426.318115, -2602.028320, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1426.318115, -2600.130859, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.544556, -2603.780273, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.194214, -2605.706543, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1424.943970, -2607.654785, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.694702, -2598.432617, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.369385, -2596.436523, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.369385, -2594.437500, 13.146866, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.144165, -2606.786133, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.194214, -2604.883789, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.744751, -2602.857910, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1426.445435, -2601.012207, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.694702, -2599.214355, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.419434, -2597.338867, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(1327, 1425.419434, -2595.366699, 13.696857, 0.000000, 269.759205, 123.750021       );
	CreateDynamicObject(978, 1423.701294, -2596.493652, 13.387095, 0.000000, 0.000000, 281.250045          );
	CreateDynamicObject(979, 1423.707764, -2605.601074, 13.387095, 0.000000, 0.000000, -101.249990         );
	CreateDynamicObject(978, 1423.701294, -2596.493652, 13.853319, 0.000000, 0.000000, 281.250045          );
	CreateDynamicObject(979, 1423.707764, -2605.601074, 13.852127, 0.000000, 0.000000, -101.249990         );
	CreateDynamicObject(979, 1423.707764, -2605.601074, 12.929684, 0.000000, 0.000000, -101.249990         );
	CreateDynamicObject(978, 1423.701294, -2596.493652, 12.924600, 0.000000, 0.000000, 281.250045          );
	CreateDynamicObject(1340, 1989.885132, -2583.330078, 13.674461, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(1341, 1990.150879, -2586.224121, 13.549461, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(1342, 1980.344604, -2583.682861, 13.580568, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1346, 1993.936157, -2587.430420, 13.897881, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1571, 2016.341431, -2585.076660, 13.877691, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(1430, 2013.313843, -2590.229248, 12.862433, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(1430, 1976.758301, -2590.270264, 12.862433, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(1430, 1939.230469, -2590.166016, 12.862433, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(1430, 1901.420166, -2590.209961, 12.862433, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(2676, 2009.368774, -2588.460449, 12.653839, 0.000000, 0.000000, 326.249978         );
	CreateDynamicObject(2676, 2003.743896, -2589.710449, 12.653839, 0.000000, 0.000000, 326.249978         );
	CreateDynamicObject(2676, 2003.743896, -2584.586914, 12.653839, 0.000000, 0.000000, 326.249978         );
	CreateDynamicObject(2676, 2008.819214, -2582.836914, 12.653839, 0.000000, 0.000000, 247.500023         );
	CreateDynamicObject(2676, 1998.319214, -2586.886719, 12.653839, 0.000000, 0.000000, 247.500023         );
	CreateDynamicObject(2675, 1969.245239, -2586.628174, 12.611136, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2675, 1970.745239, -2589.578369, 12.611136, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2675, 1973.745239, -2585.328369, 12.611136, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2675, 1963.745239, -2587.078369, 12.611136, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2674, 1934.987305, -2583.246094, 12.568615, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2674, 1932.737305, -2586.947266, 12.568615, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2674, 1930.737305, -2584.947266, 12.568615, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2674, 1928.737305, -2582.947266, 12.568615, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2674, 1926.487305, -2586.197266, 12.568615, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1897.605591, -2583.469727, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1894.105591, -2582.219727, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1890.605591, -2584.719727, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1887.855591, -2582.522461, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1895.605591, -2586.719727, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(2672, 1891.355591, -2588.992676, 12.826335, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1346, 1956.912354, -2587.430420, 13.897881, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1346, 1919.262695, -2587.430420, 13.897881, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1346, 1882.138550, -2587.430420, 13.897881, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1340, 1952.285522, -2583.330078, 13.674461, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(1340, 1914.285522, -2583.330078, 13.674461, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(1341, 1952.101318, -2586.224121, 13.549461, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(1341, 1914.401611, -2586.224121, 13.549461, 0.000000, 0.000000, 180.000037         );
	CreateDynamicObject(1342, 1943.844604, -2583.682861, 13.580568, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(1342, 1906.619385, -2583.682861, 13.580568, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(955, 1977.966919, -2586.009521, 12.949923, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(955, 1940.566528, -2586.134033, 12.949923, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(955, 1903.214966, -2586.134033, 12.949923, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(956, 1977.847534, -2587.293213, 12.950888, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(956, 1940.521240, -2587.293213, 12.950888, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(956, 1902.970947, -2587.293213, 12.950888, 0.000000, 0.000000, 89.999981           );
	CreateDynamicObject(1209, 1978.077515, -2581.896973, 12.546875, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(1209, 1940.778442, -2581.896973, 12.546875, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(1209, 1903.177124, -2581.896973, 12.546875, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(3504, 2013.796143, -2587.361084, 13.889238, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3504, 1976.669067, -2587.686768, 13.889238, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3504, 1939.194336, -2587.686768, 13.889238, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(3504, 1901.593506, -2587.686768, 13.889238, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(11292, 1606.342163, -2582.522949, 14.010907, 0.000000, 0.000000, 0.000000          );
	CreateDynamicObject(8674, 1605.667236, -2587.661621, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8674, 1616.041870, -2587.657715, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8674, 1621.193970, -2582.506348, 14.013791, 0.000000, 0.000000, 89.999981          );
	CreateDynamicObject(3819, 1615.355591, -2582.630127, 13.544633, 0.000000, 0.000000, 89.999999          );
	CreateDynamicObject(3279, 1599.768677, -2582.010498, 1.247493, 0.000000, 0.000000, 0.000000            );
	CreateDynamicObject(3504, 1603.294434, -2579.588135, 13.889238, 0.000000, 0.000000, 179.999980         );
	CreateDynamicObject(956, 1610.085693, -2579.740967, 12.950888, 0.000000, 0.000000, 179.999980          );
	CreateDynamicObject(955, 1607.628540, -2579.678711, 12.949923, 0.000000, 0.000000, 179.999963          );
	CreateDynamicObject(1209, 1605.811279, -2579.718506, 12.546875, 0.000000, 0.000000, 179.999963         );
	CreateDynamicObject(3398, 2012.579346, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1975.404175, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1957.979492, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1937.979248, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1920.575928, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1900.676025, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1883.183350, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(8674, 1873.315186, -2592.816650, 13.948789, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(3398, 1860.933350, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1832.806519, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1777.056519, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1747.556519, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1721.556519, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1700.556519, -2580.822510, 14.910305, 0.000000, 0.000000, -0.000040          );
	CreateDynamicObject(3398, 1680.306519, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1655.806519, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1632.556519, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1610.956421, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1590.856079, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1572.055786, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1548.805786, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1520.805786, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1488.805786, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(3398, 1461.055786, -2580.822510, 14.910305, 0.000000, 0.000000, 0.859340           );
	CreateDynamicObject(8674, 1595.366943, -2587.662842, 14.013791, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(8674, 1590.207764, -2582.495361, 14.013791, 0.000000, 0.000000, 270.000019         );
	CreateDynamicObject(1430, 1608.843628, -2579.934570, 12.862433, 0.000000, 0.000000, 0.000000           );
	CreateDynamicObject(5814, 1882.113892, -2603.440186, 28.170925, 180.377387, 351.405633, 247.500023     );
	CreateDynamicObject(18074, 1873.439087, -2618.355957, 17.411411, 87.662485, 0.000000, 191.250006       );
	CreateDynamicObject(18074, 1890.819946, -2581.085938, 23.244612, 87.662485, 0.000000, 0.000000         );
	CreateDynamicObject(18074, 1962.529785, -2592.940918, 22.386353, 266.321458, 0.000000, 179.999980      );
	CreateDynamicObject(9527, 1962.934326, -2594.261475, 30.911026, 4.297183, 253.429965, 89.999981        );
	CreateDynamicObject(8674, 1961.490356, -2592.667236, 16.027565, 0.000000, 0.000000, 0.000000           );

	//GUN LICENSE
	CreateDynamic3DTextLabel("Use /gunlicense to begin weapon license quiz", COLOR_GREY,  1561.3698,-1674.1140,2110.5364, 10.0);
	AddStaticPickup(1239, 2, 1561.3698,-1674.1140,2110.5364, -1);
	//CITYHALL
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1430.1719, -1719.4688, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1443.2031, -1592.9453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1466.4844, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1451.3359, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1471.3516, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1488.5313, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1498.0547, -1598.0938, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1504.8906, -1596.7031, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);
 	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	//GYM
 	RemoveBuildingForPlayer(playerid, 17758, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1498, 2229.6641, -1720.4219, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 17515, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2264.8125, -1697.0234, 12.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 17978, 2260.0000, -1707.7344, 17.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17875, 2292.5234, -1695.8594, 16.7969, 0.25);

	//ALHAMBRA
	RemoveBuildingForPlayer(playerid, 5544, 1873.7422, -1682.4766, 34.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1837.6641, -1640.3828, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1837.4375, -1683.9688, 12.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1837.4375, -1683.9531, 12.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1837.4375, -1686.9844, 12.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1837.4375, -1677.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1837.4375, -1680.9531, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1837.4375, -1680.9375, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5408, 1873.7422, -1682.4766, 34.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);

	//Demorgan - new doc
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 16093, 211.6484, 1810.1563, 20.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 16638, 211.7266, 1809.1875, 18.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 165.9531, 1849.9922, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, 259.0234, 1861.9063, 8.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, 259.9688, 1864.9375, 8.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, 258.0781, 1862.9531, 8.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16322, 248.7266, 1869.9844, 11.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, 259.9688, 1866.9219, 8.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, 258.0781, 1866.9219, 8.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16641, 251.4453, 1866.3047, 9.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
	//VAGOSI BY DZIBA
	RemoveBuildingForPlayer(playerid, 5019, 1936.468, -2079.109, 15.726, 0.250);
	RemoveBuildingForPlayer(playerid, 4984, 1880.710, -2112.632, 21.257, 0.250);
	RemoveBuildingForPlayer(playerid, 5087, 1880.710, -2112.632, 21.257, 0.250);
	RemoveBuildingForPlayer(playerid, 4982, 1892.539, -2012.828, 21.375, 0.250);
	RemoveBuildingForPlayer(playerid, 5086, 1892.539, -2012.828, 21.375, 0.250);
	RemoveBuildingForPlayer(playerid, 1372, 1920.484, -2088.171, 12.687, 0.250);
	RemoveBuildingForPlayer(playerid, 5016, 1936.468, -2079.109, 15.726, 0.250);
	RemoveBuildingForPlayer(playerid, 1413, 1935.132, -2074.867, 13.726, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 1951.835, -2095.625, 12.750, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 1957.546, -2082.171, 16.390, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 1950.453, -2074.164, 12.554, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 1944.804, -2077.703, 15.851, 0.250);
	//============================= drug house ================================
	RemoveBuildingForPlayer(playerid, 3662, 2142.7031, -1657.9297, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2164.9375, -1666.3047, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2138.8984, -1678.9688, 14.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2142.7031, -1657.9297, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2142.8594, -1663.0859, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2165.1094, -1671.4531, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2164.9375, -1666.3047, 17.5547, 0.25);

     //=========General Hospital map by johnson=========//



    seatbelt[playerid] = 0;

	isharvesting[playerid] = 0;
	if(IsPlayerNPC(playerid)) return 1;
	// Nametag
    chosednumber[playerid] = -1;
    TutStep[playerid] = 0;
    InsideTut[playerid] = 0;
	SetPVarInt(playerid, "Mobile", 501);

	PlayerData[playerid][pRobHouse] = -1;
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME);
    DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
    fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
	SendClientMessage(playerid, 0xA9C4E4FF, "Establishing connection to the {F7A763}Prospect Roleplay{A9C4E4} please wait...");


	/////////////aerodrom nikola tesla
	RemoveBuildingForPlayer(playerid, 1215, 1586.210, -2325.562, 13.023, 0.250);
	RemoveBuildingForPlayer(playerid, 4992, 1654.539, -2286.804, 13.320, 0.250);
	RemoveBuildingForPlayer(playerid, 712, 1568.578, -2364.148, 21.648, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1569.312, -2342.109, 11.296, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 1570.679, -2323.421, 16.312, 0.250);
 //speed cameras
	_vhudFlash[playerid] = CreatePlayerTextDraw(playerid, -20.000000, 2.000000,"|");
	PlayerTextDrawUseBox(playerid,_vhudFlash[playerid],1);
 	PlayerTextDrawBoxColor(playerid,_vhudFlash[playerid],0xffffff55);
  	PlayerTextDrawTextSize(playerid,_vhudFlash[playerid],660.000000,22.000000);
   	PlayerTextDrawAlignment(playerid,_vhudFlash[playerid],0);
   	PlayerTextDrawBackgroundColor(playerid,_vhudFlash[playerid],0x000000ff);
    PlayerTextDrawFont(playerid,_vhudFlash[playerid],3);
    PlayerTextDrawLetterSize(playerid,_vhudFlash[playerid],1.000000,52.200000);
    PlayerTextDrawColor(playerid,_vhudFlash[playerid],0xffffffff);
    PlayerTextDrawSetOutline(playerid,_vhudFlash[playerid], 1);
    PlayerTextDrawSetProportional(playerid,_vhudFlash[playerid], 1);
    PlayerTextDrawSetShadow(playerid, _vhudFlash[playerid], 1);

	firstperson[playerid] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	CreatePlayerTextDraws(playerid);
	// ----------------------------------------------------------------------- //
	PlayerData[playerid][pGender] = -1; // shitty register dialog
	PlayerData[playerid][pAge] = 0;
	// ----------------------------------------------------------------------- //
    // ---------------------------< Mechanic > ------------------------------ //
	RemoveBuildingForPlayer(playerid, 5516, 1977.8359, -1569.0469, 19.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 5634, 1931.3125, -1574.8438, 16.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1959.3984, -1577.7578, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 714, 2007.6094, -1556.6563, 12.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1943.8672, -1602.8047, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 5630, 1928.4922, -1575.9688, 20.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1931.7422, -1569.8828, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1942.5625, -1599.2969, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1954.3594, -1603.6406, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1976.1719, -1600.1797, 12.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5475, 1977.8359, -1569.0469, 19.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1987.1172, -1618.2578, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1983.3359, -1557.6797, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2021.3359, -1599.2969, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1264, 2019.5313, -1597.0000, 13.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 11327, -2026.9141, 129.4063, 30.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 11319, -1904.5313, 277.8984, 42.9531, 0.25);



	// House objects
	RemoveBuildingForPlayer(playerid, 14862, 245.5547, 300.8594, 998.8359, 0.25); // int 1
	RemoveBuildingForPlayer(playerid, 1740, 243.8828, 301.9766, 998.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 14861, 245.7578, 302.2344, 998.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 14860, 246.5156, 301.5859, 1000.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 14864, 246.1875, 303.1094, 998.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 246.7109, 303.8750, 1002.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 14863, 246.9844, 303.5781, 998.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 248.4063, 300.5625, 999.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 248.4922, 304.3516, 998.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 248.4844, 306.1250, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 248.8672, 301.9609, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 250.1016, 301.9609, 999.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1744, 250.1016, 301.9609, 1000.1563, 0.25);
    /*RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25); // int 2
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);*/
 	RemoveBuildingForPlayer(playerid, 15039, 2232.3438, -1106.7422, 1049.7500, 0.25); //
	RemoveBuildingForPlayer(playerid, 15038, 2235.2891, -1108.1328, 1051.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 15035, 2205.9375, -1073.9922, 1049.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 15028, 2263.1250, -1138.2422, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 15026, 2264.9063, -1137.7656, 1051.3594, 0.25);
    RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2318.7813, -1145.4609, 1054.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2261.6953, -1223.0781, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2258.1406, -1220.5859, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2258.5938, -1221.5469, 1048.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2254.4063, -1218.2734, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1213.9219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1212.9375, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1213.9375, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2252.4297, -1215.4531, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2254.1953, -1215.4531, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2297, 2255.4219, -1213.5313, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2248, 2262.3906, -1215.5469, 1048.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1816, 2261.4141, -1213.4531, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1212.1641, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2247.2969, -1208.8594, 1049.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2247.5625, -1211.9531, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2247.5469, -1210.9688, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2247.5469, -1208.9844, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2247.5547, -1207.9766, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2247.5547, -1206.9922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2109, 2250.2813, -1212.2500, 1048.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2249.2344, -1211.4531, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2250.3047, -1210.8984, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2248.5234, -1206.9922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2319, 2250.3438, -1206.9609, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2261.4609, -1212.0625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2258.1094, -1210.3750, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15044, 2255.0938, -1209.7813, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2258.4766, -1209.7891, 1048.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2099, 2262.8047, -1208.4922, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2254.1172, -1206.5000, 1050.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2254.6328, -1207.2734, 1048.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2256.2109, -1206.1016, 1048.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2256.2188, -1206.8594, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2257.6172, -1207.7266, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2235, 2261.4297, -1206.2031, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2262.1172, -1206.1016, 1048.8281, 0.25);
	/*RemoveBuildingForPlayer(playerid, 1734, 2452.0313, -1702.0234, 1015.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 14742, 2451.9063, -1701.1875, 1014.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 14741, 2447.4219, -1693.4531, 1012.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 14761, 2449.9609, -1690.8438, 1014.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2459.3828, -1691.4766, 1013.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 14745, 2460.2422, -1695.1016, 1012.9453, 0.25);*/
	RemoveBuildingForPlayer(playerid, 2249, 2251.3594, -1218.1797, 1048.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 15045, 2324.4297, -1143.3125, 1049.6016, 0.25);

    // Miner objects
    RemoveBuildingForPlayer(playerid, 5967, 1259.4375, -1246.8125, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 5857, 1259.4375, -1246.8125, 17.1094, 0.25);



	// Default values are handled via MySQL. Don't assign default values here.

	//(playerid);
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;

    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pEditLandGraffiti] = -1;
	PlayerData[playerid][pID] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pvLock] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pLoginTries] = 0;
	PlayerData[playerid][pSetup] = 0;
	PlayerData[playerid][pGender] = 0;
	PlayerData[playerid][pAge] = 0;
	PlayerData[playerid][pSkin] = 0;
	PlayerData[playerid][pCameraX] = 0;
	PlayerData[playerid][pCameraY] = 0;
	PlayerData[playerid][pCameraZ] = 0;
	PlayerData[playerid][pPosX] = 0;
	PlayerData[playerid][pPosY] = 0;
	PlayerData[playerid][pPosZ] = 0;
	PlayerData[playerid][pPosA] = 0;
	PlayerData[playerid][pInterior] = 0;
	PlayerData[playerid][pWorld] = 0;
	PlayerData[playerid][pCash] = 5000;
	PlayerData[playerid][pBank] = 0;
	PlayerData[playerid][pPaycheck] = 0;
	PlayerData[playerid][pLevel] = 1;
	PlayerData[playerid][pWeight] = 0;
	PlayerData[playerid][pReps] = 0;
	PlayerData[playerid][pSpeedLevel] = 0;
	PlayerData[playerid][pDistanceRan] = 0;
	PlayerData[playerid][pGraphic] = 0;
	PlayerData[playerid][pPasswordChanged] = 0;
	PlayerData[playerid][pEXP] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pHours] = 0;
	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pAdminName] = 0;
	PlayerData[playerid][pHealth] = 100.0;
	PlayerData[playerid][pArmor] = 0.0;
	PlayerData[playerid][pUpgradePoints] = 0;
	PlayerData[playerid][pWarnings] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pHospital] = 0;
	PlayerData[playerid][pSpawnHealth] = 50.0;
	PlayerData[playerid][pSpawnArmor] = 0;

	PlayerData[playerid][pJailType] = 0;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pNewbieMuted] = 0;
	PlayerData[playerid][pHelpMuted] = 0;
	PlayerData[playerid][pAdMuted] = 0;
	PlayerData[playerid][pLiveMuted] = 0;
	PlayerData[playerid][pGlobalMuted] = 0;
	PlayerData[playerid][pReportMuted] = 0;
	PlayerData[playerid][pReportWarns] = 0;
	PlayerData[playerid][pFightStyle] = 0;
	PlayerData[playerid][pAccent] = 0;
	PlayerData[playerid][pCookies] = 0;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pJob] = JOB_NONE;
	PlayerData[playerid][pSecondJob] = JOB_NONE;
	PlayerData[playerid][pCrimes] = 0;
	PlayerData[playerid][pArrested] = 0;
	PlayerData[playerid][pWantedLevel] = 0;
	PlayerData[playerid][pMaterials] = 0;
	PlayerData[playerid][pWeed] = 0;
	PlayerData[playerid][pCocaine] = 0;
	PlayerData[playerid][pMeth] = 0;
	PlayerData[playerid][pMaskID] = 0;
	PlayerData[playerid][pPainkillers] = 0;
	PlayerData[playerid][pTicketTime] = 0;
	PlayerData[playerid][pSeeds] = 0;
	PlayerData[playerid][pEphedrine] = 0;
	PlayerData[playerid][pMuriaticAcid] = 0;
	PlayerData[playerid][pBakingSoda] = 0;
	PlayerData[playerid][pCigars] = 0;
	PlayerData[playerid][pWalkieTalkie] = 0;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pRentingHouse] = 0;
	PlayerData[playerid][pSpraycans] = 0;
	PlayerData[playerid][pBoombox] = 0;
	PlayerData[playerid][pMP3Player] = 0;
	PlayerData[playerid][pPhonebook] = 0;
	PlayerData[playerid][pFishingRod] = 0;
	PlayerData[playerid][pFishingBait] = 0;
	PlayerData[playerid][pFishWeight] = 0;
	PlayerData[playerid][pComponents] = 0;
	PlayerData[playerid][pCourierSkill] = 0;
	PlayerData[playerid][pFishingSkill] = 0;
	PlayerData[playerid][pWeaponSkill] = 0;
	PlayerData[playerid][pMechanicSkill] = 0;
	PlayerData[playerid][pLawyerSkill] = 0;
	PlayerData[playerid][pSmugglerSkill] = 0;
	PlayerData[playerid][pToggleTextdraws] = 0;
	PlayerData[playerid][pToggleOOC] = 0;
	PlayerData[playerid][pTogglePhone] = 0;
	PlayerData[playerid][pToggleAdmin] = 0;
	PlayerData[playerid][pToggleHelper] = 0;
	PlayerData[playerid][pTogglePoints] = 0;
	PlayerData[playerid][pToggleTurfs] = 0;
	PlayerData[playerid][pToggleNewbie] = 0;
	PlayerData[playerid][pToggleWT] = 0;
	PlayerData[playerid][pToggleRadio] = 0;
	PlayerData[playerid][pTogglePM] = 0;
	PlayerData[playerid][pToggleVIP] = 0;
	PlayerData[playerid][pToggleMusic] = 0;
	PlayerData[playerid][pToggleFaction] = 0;
	PlayerData[playerid][pToggleGang] = 0;
	PlayerData[playerid][pToggleNews] = 0;
	PlayerData[playerid][pToggleGlobal] = 1;
	PlayerData[playerid][pToggleCam] = 0;
	PlayerData[playerid][pCarLicense] = 0;
	PlayerData[playerid][pDonator] = 0;
	PlayerData[playerid][pVIPTime] = 0;
	PlayerData[playerid][pVIPCooldown] = 0;
	PlayerData[playerid][pWeapons] = 0;
	PlayerData[playerid][pGunsAmmo] = 0;
	PlayerData[playerid][pFaction] = 0;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pGang] = 0;
	PlayerData[playerid][pGangRank] = 0;
	PlayerData[playerid][pDivision] = 0;
	PlayerData[playerid][pCrew] = 0;
	PlayerData[playerid][pContracted] = 0;
	PlayerData[playerid][pContractBy] = 0;
	PlayerData[playerid][pBombs] = 0;
	PlayerData[playerid][pCompletedHits] = 0;
	PlayerData[playerid][pFailedHits] = 0;
	PlayerData[playerid][pReports] = 0;
	PlayerData[playerid][pNewbies] = 0;
	PlayerData[playerid][pHelpRequests] = 0;
	PlayerData[playerid][pSpeedometer] = 0;
	PlayerData[playerid][pFactionMod] = 0;
	PlayerData[playerid][pWebDev] = 0;
	PlayerData[playerid][pGangMod] = 0;
	PlayerData[playerid][pBanAppealer] = 0;
	PlayerData[playerid][pHelperManager] = 0;
	PlayerData[playerid][pAdminPersonnel] = 0;
	PlayerData[playerid][pGameAffairs] = 0;
	PlayerData[playerid][pWebDev] = 0;
	PlayerData[playerid][pComplaintMod] = 0;
	PlayerData[playerid][pHumanResources] = 0;
	PlayerData[playerid][pHelperManager] = 0;
	PlayerData[playerid][pDeveloper] = 0;
	PlayerData[playerid][pWeedPlanted] = 0;
	PlayerData[playerid][pWeedTime] = 0;
	PlayerData[playerid][pWeedGrams] = 0;
	PlayerData[playerid][pWeedX] = 0;
	PlayerData[playerid][pWeedY] = 0;
	PlayerData[playerid][pWeedZ] = 0;
	PlayerData[playerid][pWeedA] = 0;
	PlayerData[playerid][pInventoryUpgrade] = 0;
	PlayerData[playerid][pAddictUpgrade] = 0;
	PlayerData[playerid][pTraderUpgrade] = 0;
	PlayerData[playerid][pAssetUpgrade] = 0;

	PlayerData[playerid][pLastReport] = 0;
	PlayerData[playerid][pLastNewbie] = 0;
	PlayerData[playerid][pLastFare] = 0;
	PlayerData[playerid][pLastRequest] = 0;
	PlayerData[playerid][pLastPay] = 0;
	PlayerData[playerid][pLastRepair] = 0;
	PlayerData[playerid][pLastRefuel] = 0;
	PlayerData[playerid][pLastDrug] = 0;
	PlayerData[playerid][pLastSell] = 0;
	PlayerData[playerid][pLastEnter] = 0;
	PlayerData[playerid][pLastPress] = 0;
	PlayerData[playerid][pLastDeath] = 0;
	PlayerData[playerid][pLastDesync] = 0;
	PlayerData[playerid][pLastGlobal] = 0;
	PlayerData[playerid][pFPS] = 0;
	PlayerData[playerid][pDrunkLevel] = 0;
	PlayerData[playerid][pSpectating] = INVALID_PLAYER_ID;
	PlayerData[playerid][pAdminDuty] = 0;
	PlayerData[playerid][pActiveReport] = -1;
	PlayerData[playerid][pHospitalTime] = 0;
	PlayerData[playerid][pListen] = 0;
	PlayerData[playerid][pJoinedEvent] = 0;
	PlayerData[playerid][pPaintball] = 0;
	PlayerData[playerid][pPaintballTeam] = -1;
	PlayerData[playerid][pDueling] = INVALID_PLAYER_ID;
	PlayerData[playerid][pEventTeam] = 0;
	PlayerData[playerid][pAwaitingClothing] = 0;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pFreezeTimer] = -1;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pHelpRequest][0] = 0;
	PlayerData[playerid][pAcceptedHelp] = 0;
	PlayerData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLandOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWarOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDuelOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pEditType] = 0;
    PlayerData[playerid][pEditObject] = INVALID_OBJECT_ID;
    PlayerData[playerid][pFurniturePerms] = -1;
    PlayerData[playerid][pLandPerms] = -1;
	PlayerData[playerid][pPizzas] = 0;
	PlayerData[playerid][pLastPizza] = 0;
	PlayerData[playerid][pLastStuck] = 0;
	PlayerData[playerid][pLastUpdate] = 0;
	PlayerData[playerid][pLastLoad] = 0;
	PlayerData[playerid][pLastBet] = 0;
	PlayerData[playerid][pLastShot] = 0;
	PlayerData[playerid][pCBug] = 0;
	PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pFishTime] = 0;
	PlayerData[playerid][pUsedBait] = 0;
	PlayerData[playerid][pSmuggleMats] = 0;
	PlayerData[playerid][pSmuggleTime] = 0;
	PlayerData[playerid][pSmuggleDrugs] = 0;
	PlayerData[playerid][pRefuel] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerData[playerid][pAFK] = 0;
    PlayerData[playerid][pAFKTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pMiningTime] = 0;
	PlayerData[playerid][pMiningRock] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
    PlayerData[playerid][pSweeping] = 0;
	PlayerData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	PlayerData[playerid][pTagType] = TAG_NONE;
	PlayerData[playerid][pVIPColor] = 0;
    PlayerData[playerid][pTaxiFare] = 0;
    PlayerData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTaxiBill] = 0;
    PlayerData[playerid][pTaxiTime] = 0;
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    PlayerData[playerid][pGang] = -1;
    PlayerData[playerid][pGangRank] = 0;
	PlayerData[playerid][pDuty] = 0;
	PlayerData[playerid][pBackup] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pTazedTime] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pTied] = 0;
	PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pSkinSelected] = -1;
	PlayerData[playerid][pReceivingAid] = 0;
    PlayerData[playerid][pDelivered] = 0;
    PlayerData[playerid][pPlantedBomb] = 0;
    PlayerData[playerid][pBombObject] = INVALID_OBJECT_ID;
    PlayerData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	PlayerData[playerid][pSpamTime] = 0;
    PlayerData[playerid][pMuted] = 0;
    PlayerData[playerid][pBoomboxPlaced] = 0;
    PlayerData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	PlayerData[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    PlayerData[playerid][pZonePickups][0] = -1;
    PlayerData[playerid][pZonePickups][1] = -1;
    PlayerData[playerid][pZonePickups][2] = -1;
    PlayerData[playerid][pZonePickups][3] = -1;
    PlayerData[playerid][pZoneID] = -1;
    PlayerData[playerid][pZoneCreation] = 0;
    PlayerData[playerid][pShowLands] = 0;
    PlayerData[playerid][pShowTurfs] = 0;
    PlayerData[playerid][pStreamType] = MUSIC_NONE;
    PlayerData[playerid][pFreeNamechange] = 0;
	PlayerData[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pCurrentWeapon] = 0;
    PlayerData[playerid][pCurrentAmmo] = 0;
    PlayerData[playerid][pCurrentVehicle] = 0;
    PlayerData[playerid][pVehicleCount] = 0;
    PlayerData[playerid][pACWarns] = 0;
    PlayerData[playerid][pACTime] = 0;
    PlayerData[playerid][pArmorTime] = 0;
    PlayerData[playerid][pACFired] = 0;
    PlayerData[playerid][pWeedObject] = INVALID_OBJECT_ID;
    PlayerData[playerid][pPickPlant] = INVALID_PLAYER_ID;
    PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pCookMeth] = 0;
    PlayerData[playerid][pCookTime] = 0;
    PlayerData[playerid][pCookGrams] = 0;
    PlayerData[playerid][pDrugsUsed] = 0;
    PlayerData[playerid][pDrugsTime] = 0;
    PlayerData[playerid][pBandana] = 0;
	PlayerData[playerid][pCapturingPoint] = -1;
	PlayerData[playerid][pCaptureTime] = 0;
	PlayerData[playerid][pWatchingIntro] = 0;
	PlayerData[playerid][pLoginCamera] = 0;
	PlayerData[playerid][pPoisonTime] = 0;
	PlayerData[playerid][pJetpack] = 0;
    PlayerData[playerid][pWatchOn] = 0;
    PlayerData[playerid][pGPSOn] = 0;
    PlayerData[playerid][pTextFrom] = INVALID_PLAYER_ID;
    PlayerData[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    PlayerData[playerid][pMechanicCall] = 0;
	PlayerData[playerid][pTaxiCall] = 0;
    PlayerData[playerid][pEmergencyCall] = 0;
	PlayerData[playerid][pClip] = 0;
	PlayerData[playerid][pReloading] = 0;
    PlayerData[playerid][pFindTime] = 0;
    PlayerData[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pRobCash] = 0;
	PlayerData[playerid][pLootTime] = 0;
    PlayerData[playerid][pRemoveFrom] = INVALID_PLAYER_ID;
	PlayerData[playerid][pSniper] = 0;
	PlayerData[playerid][pLockBreak] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pLockTimer] = 0;
	PlayerData[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
    PlayerData[playerid][pAnimation] = 0;
	PlayerData[playerid][pDropTime] = 0;
    PlayerData[playerid][pCocaineTrunk] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pCocaineTime] = 0;
	PlayerData[playerid][pCocaineFrom] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pLastFire] = 0;
    PlayerData[playerid][pRapidFire] = 0;
    PlayerData[playerid][pGodmode] = 0;
    PlayerData[playerid][pGodmodeHP] = 100.0;
    PlayerData[playerid][pGodmodeAP] = 0.0;
	PlayerData[playerid][pNOPTime] = 0;
    PlayerData[playerid][pPreviewHouse] = -1;
    PlayerData[playerid][pPreviewType] = 0;
    PlayerData[playerid][pPreviewTime] = 0;
    PlayerData[playerid][pDamageTimer] = -1;
    PlayerData[playerid][pHHCheck] = 0;
	PlayerData[playerid][pHHTime] = 0;
	PlayerData[playerid][pHHRounded] = 0;
	PlayerData[playerid][pHHCount] = 0;
	PlayerData[playerid][pNoDamage] = 0;
	PlayerData[playerid][pGovTimer] = 0;
	PlayerData[playerid][pUndercover][0] = 0;
    PlayerData[playerid][pUndercover][1] = 0;
	PlayerData[playerid][pUndercoverHP] = 0.0;
	PlayerData[playerid][pUndercoverAR] = 0.0;
	PlayerData[playerid][pHurt] = 0;
	PlayerData[playerid][pBugged] = 0;
	PlayerData[playerid][pSkates] = 0;
	PlayerData[playerid][pSkateObj] = 0;
	PlayerData[playerid][pSkating] = false;
	PlayerData[playerid][pOil] = 0;
	PlayerData[playerid][pCreatingPoll] = 0;
	PlayerData[playerid][pAnsweredPoll] = 0;
	PlayerData[playerid][pRareTime] = 0;
	PlayerData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHunted] = 0;
	PlayerData[playerid][pHuntKilled] = 0;
	PlayerData[playerid][pDiamonds] = 0;
	PlayerData[playerid][pDeleteMode] = 0;
	PlayerData[playerid][pAdvertWarnings] = 0;
	PlayerData[playerid][pNoKnife] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pMarriedTo] = 0;
	PlayerData[playerid][pStationEdit] = 0;
	PlayerData[playerid][pRobbingBiz] = -1;
	PlayerData[playerid][pBlindfold] = 0;
	PlayerData[playerid][pBlinded] = 0;

	aimWarnings[playerid] = 0;
	PayCheckCode[playerid] = 0;

    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    PlayerData[playerid][pWeapons][i] = 0;
	    PlayerData[playerid][pTempWeapons][i] = 0;
	    PlayerData[playerid][pGunsAmmo][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cMatColor1] = 0;
	    ClothingInfo[playerid][i][cMatColor2] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}

    /*if(!BobTheBuilder[playerid])
	{
		DestroyAllBuildings(playerid);
	}
	BobTheBuilder[playerid] = 0;
	*/
	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
 	// 						Paintball
	//	Deagle Float:minx, Float:miny, Float:maxx, Float:maxy)
	zone_paintball[0] = GangZoneCreateEx(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	area_paintball[0] = CreateDynamicRectangle(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	// 	Sniper
	zone_paintball[1] = GangZoneCreateEx(-2591.2288, -1814.2455, -2178.9082, -1394.5500);
	area_paintball[1] = CreateDynamicRectangle(-2591.2288, -1814.2455, -2178.9082, -1394.5500);

    // Miner objects

	// GPS
	PlayerData[playerid][pText][0] = CreatePlayerTextDraw(playerid, 88.000000, 323.000000, "Loading...");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pText][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][0], 0.260000, 1.300000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][0], 1);

	// HP & armor
	PlayerData[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][3], 1);

	PlayerData[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][4], 1);


	// Achievements
	PlayerData[playerid][pText][6] = CreatePlayerTextDraw(playerid, 502.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][6], 0.500000, 4.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][6], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pText][6], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pText][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pText][6], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pText][6], 611.000000, 0.000000);

	PlayerData[playerid][pText][7] = CreatePlayerTextDraw(playerid, 502.000000, 116.000000, "LD_DRV:gold");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][7], 4);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][7], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pText][7], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pText][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pText][7], 255);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pText][7], 31.000000, 33.000000);

	PlayerData[playerid][pText][8] = CreatePlayerTextDraw(playerid, 499.000000, 99.000000, "Achievements");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][8], 0);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][8], 0.409999, 1.700000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][8], 1);

	PlayerData[playerid][pText][9] = CreatePlayerTextDraw(playerid, 539.000000, 121.000000, "~g~~h~~h~First wheels");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pText][9], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pText][9], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pText][9], 0.230000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pText][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pText][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pText][9], 1);

	Streamer_ToggleIdleUpdate(playerid, true);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME);

	gConnections++;
    SaveServerInfo();

	return 1;

}

// LS ELEVATOR

public OnDynamicObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetDynamicObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetDynamicObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}


	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	new title[68], string[500], ip[32];
	GetPlayerIp(playerid, ip, 32);
    format(string, sizeof(string), "Report Player\nPrivate Message\n");
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		format(string, sizeof(string), "%sKick Player\nBan Player\nSpectate Player\nBring Player\nGoto Player\nNewbie Mute Player\nFreeze Player\nUnfreeze Player\nSlap Player\nRevive Player\nCheck Player\nNon-Roleplay Name\nShow Rules\nCheck Player's Gun\nCheck Player's Vehicles\n{33CCFF}IP Address: {FFFFFF}%s", string, ip);
	}
	SetPVarInt(playerid, "pClickedID", clickedplayerid);
	format(title, sizeof(title), "{33CCFF}Player Control Panel {FFFFFF}(SELECTED: ID %d)", clickedplayerid);
	Dialog_Show(playerid, DIALOG_PCP,DIALOG_STYLE_LIST,title,string,"Select","Cancel");
	return 1;
}
// END LS ELEVATOR
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
    if(_:clickedid == INVALID_TEXT_DRAW) return 1; // block any invalid textdraws.
    if(_:clickedid == INVALID_TEXT_DRAW) return 1; // block any invalid textdraws.
	if(clickedid == td_mdc_Exit) {
		mdc_Hide(playerid, true);
	} else if(clickedid == td_mdc_SectionText[0]) {
		Dialog_Show(playerid, SearchCitizem, DIALOG_STYLE_INPUT, "{3D62A8}Search Citizen", "Please enter the citizen's full name below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[1]) {
        Dialog_Show(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[2]) {
		Dialog_Show(playerid, SearchPhoneNumber, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[3]) {
		Dialog_Show(playerid, DIALOG_MDC_SEARCH_PLATE, DIALOG_STYLE_INPUT, "{3D62A8}Search License Plate", "Please enter the license plate below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_CriminalRecord || clickedid == td_mdc_CriminalRecordArrow) {
	    new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowCriminalRecord(playerid, name);
	} else if(clickedid == td_mdc_Cases || clickedid == td_mdc_CasesArrow) {
		Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{3D62A8}Case Files", "{ffffff}The Los Santos Police Department's Mobile Data Computer is presently under \ndevelopment. We ask for your patience and understanding.\n\nSincerely,\n{a9c4e4}LSPD Tech. Department", "Close", "");
	} else if(clickedid == td_mdc_Properties || clickedid == td_mdc_PropertiesArrow) {
		Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{3D62A8}Property Data", "{ffffff}The Los Santos Police Department's Mobile Data Computer is presently under \ndevelopment. We ask for your patience and understanding.\n\nSincerely,\n{a9c4e4}LSPD Tech. Department", "Close", "");
	} else if(clickedid == td_mdc_Vehicles || clickedid == td_mdc_VehiclesArrow) {
	    new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowVehicles(playerid, name);
	} else if(clickedid == td_mdc_cr_ArrowUp) {
		new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(ScrollTop > 0) {
		    ScrollTop -= 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, 200);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}

				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_ArrowDown) {
	    new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(Iter_Count(RecordIterator[playerid]) > ScrollTop + 7) {
		    ScrollTop += 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, 200);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}

				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_Info[0]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop"));
	} else if(clickedid == td_mdc_cr_Info[1]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 1);
	} else if(clickedid == td_mdc_cr_Info[2]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 2);
	} else if(clickedid == td_mdc_cr_Info[3]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 3);
	} else if(clickedid == td_mdc_cr_Info[4]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 4);
	} else if(clickedid == td_mdc_cr_Info[5]) {
		mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 5);
	} else if(clickedid == td_mdc_cr_Info[6]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 6);
	} else if(clickedid == td_mdc_veh_ArrowRight || clickedid == td_mdc_veh_Next) {
		new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
	    SetPVarInt(playerid, "mdc_VehicleIndex", GetPVarInt(playerid, "mdc_VehicleIndex") + 1);
		mdc_ShowVehicles(playerid, name);
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerNPC(playerid)) return 1;



	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);
    InsideShamal[playerid] = INVALID_VEHICLE_ID;

    chosednumber[playerid] = -1;
    openedpaycheck[playerid] = 0;
	isharvesting[playerid] = 0;
 	DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
 	PlayerData[playerid][aMeStatus] = 0;
	if (PlayerData[playerid][pCalling] > 0)
	{
		HangupCall(playerid);
	}
    DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
    fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
    PlayerData[playerid][pCarryCrate] = -1;
    PlayerData[playerid][pRobHouse] = -1;
 	SavePlayerVariables(playerid);

 	foreach(new i : Player)
	{
	    if(PlayerData[i][pSpectating] == playerid)
	    {
	        SendClientMessageEx(i, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerData[i][pSpectating]), PlayerData[i][pSpectating]);
	    	PlayerData[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(PlayerData[i][pHouseOffer] == playerid)
		{
		    PlayerData[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerData[i][pGarageOffer] == playerid)
		{
		    PlayerData[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pBizOffer] == playerid)
		{
		    PlayerData[i][pBizOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pVestOffer] == playerid)
		{
		    PlayerData[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pCarOffer] == playerid)
		{
		    PlayerData[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pFactionOffer] == playerid)
		{
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pGangOffer] == playerid)
		{
		    PlayerData[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pFriskOffer] == playerid)
		{
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pTicketOffer] == playerid)
		{
		    PlayerData[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pLiveOffer] == playerid)
		{
		    PlayerData[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pLiveBroadcast] == playerid)
		{
		    PlayerData[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pShakeOffer] == playerid)
		{
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pLandOffer] == playerid)
		{
		    PlayerData[i][pLandOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pSellOffer] == playerid)
		{
		    PlayerData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pAllianceOffer] == playerid)
		{
		    PlayerData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[playerid][pGangOffer] == playerid)
		{
			PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerData[i][pDefendOffer] == playerid)
		{
		    PlayerData[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pDiceOffer] == playerid)
		{
		    PlayerData[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pInviteOffer] == playerid)
		{
		    PlayerData[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pRobberyOffer] == playerid)
		{
		    PlayerData[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerData[i][pDuelOffer] == playerid)
		{
		    PlayerData[i][pDuelOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pMarriageOffer] == playerid)
		{
		    PlayerData[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pTextFrom] == playerid)
		{
		    PlayerData[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pWhisperFrom] == playerid)
		{
		    PlayerData[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pFindPlayer] == playerid)
		{
		    PlayerData[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pRemoveFrom] == playerid)
		{
		    PlayerData[i][pRemoveFrom] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SendClientMessageEx(i, COLOR_YELLOW, "Your chat with %s (ID %i) has ended as they left the server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(PlayerData[i][pActiveReport] >= 0 && (ReportInfo[PlayerData[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[PlayerData[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[PlayerData[i][pActiveReport]][rReporter] == playerid)
				SendClientMessage(i, COLOR_GREEN, "The player who made the report has left the server.");
			else if(ReportInfo[PlayerData[i][pActiveReport]][rHandledBy] == playerid)
                SendClientMessage(i, COLOR_GREEN, "The admin who accepted the report has left the server.");

		    ReportInfo[PlayerData[i][pActiveReport]][rExists] = 0;
		    PlayerData[i][pActiveReport] = -1;
		}
		if(PlayerData[i][pDueling] == playerid)
		{
		    SendClientMessage(i, COLOR_WHITE, "Your duel target has left the server.");
		    PlayerData[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(PlayerData[i][pContractTaken] == playerid)
		{
		    SendClientMessage(i, COLOR_YELLOW, "Your contract target has disconnected from the server.");
		    PlayerData[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pDraggedBy] == playerid)
		{
		    SendClientMessage(i, COLOR_AQUA, "The person dragging you has disconnected. You are free!");
			PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(PlayerData[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}

	}

	if(PlayerData[playerid][pLogged])
	{
	    if(PlayerData[playerid][pUndercover][0])
		{
		    OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
		}
		if(PlayerData[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s possibly left the server while in a gunfight.", GetRPName(playerid));
			PlayerData[playerid][pInjured] = 1;
		}
	    SavePlayerVariables(playerid);

	    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s left the server while tazed or cuffed.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	if(PlayerData[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}
	if(PlayerData[playerid][pHunted])
	{
	    SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( The hunted AIDS victim %s has left the server ))", GetRPName(playerid));
	}
	if(PlayerData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(PlayerData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has left the server while injured.", GetRPName(playerid));
		PlayerData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(PlayerData[i][pAcceptedEMS] == playerid)
	    {
	        SendClientMessage(i, COLOR_YELLOW, "Your medic has left the server while rescuing you. (you can now accept your fate)");
	        PlayerData[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(PlayerData[playerid][pTutorial])
	{
	    KillTimer(PlayerData[playerid][pTutorialTimer]);
	}
	if(IsValidDynamicObject(PlayerData[playerid][pEditObject]))
	{
	    DestroyDynamicObject(PlayerData[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(PlayerData[playerid][pBombObject]))
	{
	    DestroyDynamicObject(PlayerData[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(PlayerData[playerid][pWeedObject]))
	{
	    DestroyDynamicObject(PlayerData[playerid][pWeedObject]);
	}
	if(PlayerData[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	{
	    CancelBreakIn(playerid);
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, PlayerData[playerid][pUsername]);
	}
	if(PlayerData[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(PlayerData[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(PlayerData[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}

	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(PlayerData[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(PlayerData[playerid][pZonePickups][i]);
	    }
	}

	if(PlayerData[playerid][pLogged])
	{
		foreach(new i: Vehicle)
		{
	    	if(IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 600000, false, "i", i);
	   		}
		}
	}
	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s disconnected and therefore failed to capture the point. ))", GetRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}

 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(PlayerData[playerid][pGang] >= 0)
		        {
		            GangInfo[PlayerData[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(PlayerData[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET turftokens = turftokens + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(PlayerData[playerid][pFaction] >= 0)
		        {
		            FactionInfo[PlayerData[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET turftokens = turftokens + 1 WHERE id = %i", PlayerData[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}


	switch(reason)
	{
	    case 0: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s has left the server. (Timeout)", GetRPName(playerid));
	    case 1: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s has left the server. (Leaving)", GetRPName(playerid));
	    case 2: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s has left the server. (Kicked)", GetRPName(playerid));
	}
	if(PlayerData[playerid][pGang] >= 0)
	{
	    SendGangMessage(PlayerData[playerid][pGang], COLOR_AQUA, "(( %s has disconnected ))", GetRPName(playerid));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerData[playerid][pKicked]) return 0;


	if(!PlayerData[playerid][pLogged])
	{
	    ClearChat(playerid);

		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);
        SetPlayerTeam(playerid, NO_TEAM);

		// Due to a SA-MP bug, you can't apply camera coordinates directly after enabling spectator mode (to hide HUD).
		// In this case we'll use a timer to defer this action.

		#if defined SERVER_INTRO
		    ShowMainMenuCamera(playerid, 1);
		#else
		    SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
		#endif
	}

	return 1;
}


public OnPlayerSpawn(playerid)
{

    if(PlayerData[playerid][pKicked]) return 0;

	if(PlayerData[playerid][pTruckingLevel] == 0)
	{
	    PlayerData[playerid][pTruckingLevel] = 1;
	}

	if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
		SetPlayerPos(playerid, GetPVarFloat(playerid, "air_Xpos"), GetPVarFloat(playerid, "air_Ypos"), GetPVarFloat(playerid, "air_Zpos"));
		SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "air_Rpos"));

		DeletePVar(playerid, "air_Xpos");
		DeletePVar(playerid, "air_Ypos");
		DeletePVar(playerid, "air_Zpos");
		DeletePVar(playerid, "air_Rpos");
		DeletePVar(playerid, "air_HP");
		DeletePVar(playerid, "air_Arm");

		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, InsideShamal[playerid]);
		return SetPlayerInterior(playerid, 1);
	}

   //	hidemotd(playerid);
    foreach(new i : Player)
	{
	    if(PlayerData[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 1000, false, "ii", i, playerid);
	    }
	}
	TextDrawHideForPlayer(playerid, Blind);
    DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
    fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
    for( new i = 0; i < 1; i ++) {
		PlayerTextDrawHide( playerid, LoginTD[ playerid ][ i ] );
	}


    //TextDrawHideForPlayer(playerid, loginwb);
    TextDrawHideForPlayer(playerid, loginwb1);
    TextDrawHideForPlayer(playerid, welcomepm);
    TextDrawHideForPlayer(playerid, welcomepm1);
    TextDrawHideForPlayer(playerid, welcomepm2);
    TextDrawHideForPlayer(playerid, welcomepm3);

	if(PlayerData[playerid][pSetup])
	{
	    if(PlayerData[playerid][pTutorial])
		{
	    	KillTimer(PlayerData[playerid][pTutorialTimer]);
	    	PlayerData[playerid][pTutorial] = 0;
		}
	//	AnimationCameraView(playerid, 1,false);
		InsideTut[playerid] = 1;
		new tstr[1024];
		strcat(tstr, "Hello there, welcome to Prospect Roleplay!\nThanks for choosing us as your Roleplay destination\n");
		strcat(tstr, "This tutorial will guide you through the basic steps of the server\n");
		strcat(tstr, "Please enjoy this short tutorial to get to know more about our server\n\n");
		strcat(tstr, "{00aa00}Press next to continue.");
		TutStep[playerid] = 1;
        InterpolateCameraPos(playerid, -37.715755, -2101.054931, 121.661994, 3031.810302, -638.207458, 196.425064, 12000);
		InterpolateCameraLookAt(playerid, -33.558185, -2098.420898, 120.781112, 3028.381103, -641.794555, 195.814514, 12000);
		Dialog_Show(playerid,DIALOG_SHOW_TUTORIAL,DIALOG_STYLE_MSGBOX,"{F7A763}Tutorial - Welcome", tstr, "Next", "");
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, 0);
//		SendClientMessage(playerid, COLOR_WHITE, "Welcome to {F7A763}Prospect Roleplay{FFFFFF}. You have successfully registered your account on our server.");
//		SendClientMessage(playerid, COLOR_WHITE, "Before you can play, you are required to fill in some information then watch a brief tutorial.");
	}
	else if(PlayerData[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);

	    if(PlayerData[playerid][pJailType] == 2)
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "* You were placed in admin prison by %s, reason: %s", PlayerData[playerid][pPrisonedBy], PlayerData[playerid][pPrisonReason]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "* You haven't completed your jail sentence yet.");
		}
	}
	else if(PlayerData[playerid][pPaintball] > 0)
	{
	    SetPlayerInPaintball(playerid, PlayerData[playerid][pPaintball]);
	}
	else
	{
	    PlayerData[playerid][pJoinedEvent] = 0;

	    if(PlayerData[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);
			if(GetPVarInt(playerid, "MASK_USED") == 1) {
				foreach(new i: Player) {
					ShowPlayerNameTagForPlayer(i, playerid, 0);
					CallLocalFunction("OnPlayerStreamIn","ii",i,playerid);
				}
			}
            GameTextForPlayer(playerid, "~r~Injured~n~~w~/phone or~n~/accept death", 5000, 3);
	        SendClientMessage(playerid, COLOR_DOCTOR, "You are injured and losing blood. /call 911 for medical attention.");
	        SendClientMessage(playerid, COLOR_DOCTOR, "If you wish to accept your death and go to hospital use /accept death.");
	    }
	    else if(PlayerData[playerid][pHospital])
	    {
	        if(PlayerData[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid, .type = PlayerData[playerid][pInsurance]);

			ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{

		    SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
		    SetScriptArmour(playerid, PlayerData[playerid][pArmor]);
		}

		if(!PlayerData[playerid][pHospital])
		{
		    if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				PlayerData[PlayerData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				PlayerData[playerid][pDueling] = INVALID_PLAYER_ID;
			}
			if(PlayerData[playerid][pInjured])
			{
					if(PlayerData[playerid][pInterior] || PlayerData[playerid][pWorld])
					{
					    SetTimerEx("StreamedCheck", 1000, false, "ifffii", playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ], PlayerData[playerid][pInterior], PlayerData[playerid][pWorld]);
					}
					SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
					SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
					SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
					SetPlayerWeapons(playerid);
					SetCameraBehindPlayer(playerid);
			}
			else
			{
				switch(PlayerData[playerid][pSpawnSelect])
				{
				    case 0:
				    {
						if(PlayerData[playerid][pInterior] || PlayerData[playerid][pWorld])
						{
						    SetTimerEx("StreamedCheck", 1000, false, "ifffii", playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ], PlayerData[playerid][pInterior], PlayerData[playerid][pWorld]);
						}
						SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
						SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
						SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
				 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
						SetPlayerWeapons(playerid);
						SetCameraBehindPlayer(playerid);
					}
					case 1:
					{
					    new houseid = PlayerData[playerid][pSpawnHouse];
					    if(HouseInfo[houseid][hExists] && IsHouseOwner(playerid, houseid))
					    {
							SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
							SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
							SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
					 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
							SetPlayerWeapons(playerid);
							SetCameraBehindPlayer(playerid);
						}
						else
						{
							SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
							SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
							SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
					 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
							SetPlayerWeapons(playerid);
							SetCameraBehindPlayer(playerid);
						}
					}
					case 2:
					{
						new factionid = PlayerData[playerid][pFaction];
						if(factionid != -1)
						{
							for(new i = 0; i < MAX_LOCKERS; i ++)
							{
							    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
							    {
									SetPlayerPos(playerid, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]);
	      							SetPlayerFacingAngle(playerid, 90.0);
									SetPlayerInterior(playerid, LockerInfo[playerid][lInterior]);
									SetPlayerVirtualWorld(playerid, LockerInfo[playerid][lWorld]);
									SetPlayerWeapons(playerid);
									SetCameraBehindPlayer(playerid);
								}
							}
						}
						else
						{
							SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
							SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
							SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
					 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
							SetPlayerWeapons(playerid);
							SetCameraBehindPlayer(playerid);
						}
					}
				}
			}
		}
	}

	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);
	PreloadPlayerAnims(playerid);
	RefreshPlayerTextdraws(playerid);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{

	if((gettime() - PlayerData[playerid][pLastDeath]) < 2)
	{
	    return 1;
	}


	if (CarRadars[playerid] == 1)
	{
		CarRadars[playerid] = 0;
		PlayerTextDrawHide(playerid, _crTextTarget[playerid]);
		PlayerTextDrawHide(playerid, _crTextSpeed[playerid]);
		PlayerTextDrawHide(playerid, _crTickets[playerid]);
		DeletePVar(playerid, "_lastTicketWarning");
	}
    if(GetPVarInt(playerid, "Mobile") != 501)
    {
        if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")) && GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
        {
		    SendClientMessage(GetPVarInt(playerid, "Mobile"),COLOR_GREY,"The phone line went dead...");
		    if(GetPlayerSpecialAction(GetPVarInt(playerid, "Mobile")) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(GetPVarInt(playerid, "Mobile"), SPECIAL_ACTION_STOPUSECELLPHONE);
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", 501);
		}
        SetPVarInt(playerid, "Mobile", 501);
    }
    foreach(new i : Player)
	{
		if(PlayerData[i][pAdmin] >= 5 || PlayerData[i][pAdminDuty])
		{
		    if(PlayerData[playerid][pInjured] == 0)
		    {
	    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
	 		}
		}
	}
	if(PlayerData[playerid][pLogged])
	{
		if(PlayerData[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(PlayerData[i][pJoinedEvent] && !PlayerData[playerid][pHunted])
			    {
			        if(killerid == INVALID_PLAYER_ID)
					{
			            SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
					}
			        else
			        {
						SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
                        SetScriptArmour(killerid, 100);
					}
				}
			}
			if(PlayerData[playerid][pHunted])
			{
                if(killerid == INVALID_PLAYER_ID)
                {
                    SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( Our dear friend %s has died of vicious AIDS, may he rest in piece. ))", GetRPName(playerid));
                }
                else
                {
					SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( Our dear friend %s was slain by %s, may he rest in piece. ))", GetRPName(playerid), GetRPName(killerid));
					SendClientMessageEx(killerid, COLOR_AQUA, "You have slain the hunted %s, you have been flagged for a prize.", GetRPName(playerid));
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Server', NOW(), 'Allhunt winner')", PlayerData[killerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					SendAdminMessage(COLOR_LIGHTRED, "ADMIN: Server flagged %s's account for 'Allhunt winner'.",  GetRPName(killerid));
				}
				PlayerData[playerid][pHunted] = 0;
			}
		}
		else if(PlayerData[playerid][pPaintball] > 0)
		{
		    foreach(new i : Player)
			{
			    if(PlayerData[playerid][pPaintball] == PlayerData[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));

				}
			}
		}
		else if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
		{
		    new entranceid = GetInsideEntrance(playerid);

			SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "(( You lost your duel against %s! ))", GetRPName(PlayerData[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SendClientMessageEx(killerid, COLOR_LIGHTORANGE, "(( You won the duel against %s! ))", GetRPName(playerid));

				if(entranceid >= 0 && EntranceInfo[entranceid][eType] == 1)
				{
				    foreach(new i : Player)
				    {
				        if(GetInsideEntrance(i) == entranceid)
				        {
				            SendClientMessageEx(i, COLOR_YELLOW, "Duel Arena: %s has won their duel against %s.", GetRPName(killerid), GetRPName(playerid));
						}
				    }
				}
				else
				{
					SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has won their duel against %s.", GetRPName(killerid), GetRPName(playerid));
				}

				SetPlayerWeapons(killerid);
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID)
			{
			    HandleContract(playerid, killerid);
			}

		    if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pJailType] == 0 && PlayerData[playerid][pPreviewHouse] == -1)
		    {
			    if(PlayerData[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
				    PlayerData[playerid][pInjured] = 1;
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SendClientMessageEx(i, COLOR_GREY, "Dispatch: Beacon %s (%i) is in need of immediate medical assistance.", GetRPName(playerid), playerid);
						}
					}
				}
				else
				{
					PlayerData[playerid][pInjured] = 0;
					PlayerData[playerid][pHospital] = 1;
					if(PlayerData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SendClientMessageEx(PlayerData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has bled out.", GetRPName(playerid));
                        PlayerData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}

				}
			}
			else
			{
			    PlayerData[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", PlayerData[killerid][pID], PlayerData[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}



	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] was helibladed by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}

	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}

	gTotalDeaths++;
	SaveServerInfo();

	PlayerData[playerid][pLastDeath] = gettime();
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

    IsPlayerSteppingInVehicle[playerid] = vehicleid;
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}

	if((!ispassenger) && (PlayerData[playerid][pCuffed] || PlayerData[playerid][pTied] || PlayerData[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}

	if(!ispassenger)
	{
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_PIZZAMAN))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Pizzaman.");
	        ClearAnimations(playerid);
	    }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[6]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Courier.");
	        ClearAnimations(playerid);
	    }
	    if((sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) && !PlayerHasJob(playerid, JOB_SWEEPER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Street Sweeper.");
	        ClearAnimations(playerid);
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        ClearAnimations(playerid);
	    }
	    if((garbageVehicles[0] <= vehicleid <= garbageVehicles[5]) && !PlayerHasJob(playerid, JOB_GARBAGEMAN))
	    {
     		SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Garbage Man.");
	        ClearAnimations(playerid);
		}
		if((testVehicles[0] <= vehicleid <= testVehicles[4]) && !PlayerData[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not taking your drivers test.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        ClearAnimations(playerid);
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && VehicleInfo[vehicleid][vRank] > PlayerData[playerid][pFactionRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you aren't a rank %i in your faction.", VehicleInfo[vehicleid][vRank]);
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vRank] > PlayerData[playerid][pGangRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you aren't a rank %i in your gang.", VehicleInfo[vehicleid][vRank]);
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vVIP] > 0 && PlayerData[playerid][pDonator] < VehicleInfo[vehicleid][vVIP])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a %s.", GetVIPRank(VehicleInfo[vehicleid][vVIP]));
	        ClearAnimations(playerid);
	    }
	}
	seatbelt[playerid] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{

	switch(PlayerData[playerid][pCP])
	{
	    case CHECKPOINT_PIZZA:
	    {
			new string[32], amount = ((90 - PlayerData[playerid][pPizzaTime]) * 10) + random(200), tip = percent(amount, 5);

            if(gettime() - PlayerData[playerid][pLastPizza] < 15 && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
		    {
		        PlayerData[playerid][pACWarns]++;

		        if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport pizza delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerData[playerid][pLastPizza]);
				}
				else
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport pizza runs", GetRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport pizza runs");
				}
		    }

		    if(PlayerData[playerid][pLaborUpgrade] > 0)
			{
				amount += percent(amount, PlayerData[playerid][pLaborUpgrade]);
			}

			format(string, sizeof(string), "~g~+$%i", amount);
			GameTextForPlayer(playerid, string, 5000, 1);

			AddToPaycheck(playerid, amount);
			GivePlayerCash(playerid, tip);

			PlayerData[playerid][pPizzas] = 0;
			PlayerData[playerid][pPizzaTime] = 0;
			PlayerData[playerid][pCP] = CHECKPOINT_NONE;
			SendClientMessageEx(playerid, COLOR_AQUA, "You received {00AA00}$%i{33CCFF} for this delivery. You also received a {00AA00}$%i{33CCFF} tip.", amount, tip);
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_TEST:
	    {
	        PlayerData[playerid][pTestCP]++;

	        if(PlayerData[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[4]))
	            {
					SendClientMessage(playerid, COLOR_LIGHTRED, "* You failed the test as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(PlayerData[playerid][pTestVehicle]);

				    PlayerData[playerid][pCP] = CHECKPOINT_NONE;
		            PlayerData[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerData[playerid][pTestCP]][0], drivingTestCPs[PlayerData[playerid][pTestCP]][1], drivingTestCPs[PlayerData[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(PlayerData[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
			        GameTextForPlayer(playerid, "~r~Failed", 5000, 1);
			        SendClientMessage(playerid, COLOR_LIGHTRED, "* You brought back the vehicle damaged and therefore failed your test.");
			    }
			    else
			    {
			        AwardAchievement(playerid, "Legal driver");

                    GameTextForPlayer(playerid, "~w~Passed!~n~~r~-$500", 5000, 1);
			        SendClientMessage(playerid, COLOR_AQUA, "You successfully passed your drivers test and received your license!");

			        GivePlayerCash(playerid, -500);
			        PlayerData[playerid][pCarLicense] = 1;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET carlicense = 1 WHERE uid = %i", PlayerData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(PlayerData[playerid][pTestVehicle]);

			    PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	            PlayerData[playerid][pDrivingTest] = 0;
	        }
	    }
	    case CHECKPOINT_MINING:
	    {
	        new cost, string[20];

	        if(PlayerData[playerid][pMiningRock] == 1) {
	            cost = 250 + random(100);
			} else if(PlayerData[playerid][pMiningRock] == 2) {
			    cost = 500 + random(100);
			} else if(PlayerData[playerid][pMiningRock] == 3) {
				new rock = random(552);
				switch(rock)
				{
				    case 0..250:
				    {
				        cost = 795 + random(50);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Bam, a great stone indeed, the fact you can find stuff in this dump makes me wonder whether theres a diamond hidden in there somewhere.");
					}
				    case 251..380:
				    {
				        cost = 4495 + random(200);
				        SendClientMessage(playerid, COLOR_WHITE, "Looks like a ruby, awesome. I'll be sending this Mining Enterprises immediately.");
				    }
				    case 381..400:
				    {
			        	cost = 52595 + random(2000);
			        	AwardAchievement(playerid, "Diamond!");
						SendClientMessage(playerid, COLOR_WHITE, "BINGO!, It's a freakin' diamond, we're going to be damn rich!");
						SendClientMessage(playerid, COLOR_WHITE, "Boss: You know what? since you found it, you should get to keep it.");
						PlayerData[playerid][pDiamonds] ++;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET diamonds = %i WHERE uid = %i", PlayerData[playerid][pDiamonds], PlayerData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					}
				    case 401..552:
				    {
				        cost = 6575 + random(500);
				        SendClientMessage(playerid, COLOR_WHITE, "Looks like you've found a sapphire, damn good job. Let's go for that diamond!");
				    }
				}
				PlayerData[playerid][pRareTime] = 3600;
				SendClientMessage(playerid, COLOR_GREY, "A cooldown for 60 minutes (of playtime) has been applied. Until then you can't find anymore rare stones.");
			}

            if(PlayerData[playerid][pLaborUpgrade] > 0)
			{
				cost += percent(cost, PlayerData[playerid][pLaborUpgrade]);
			}

			AddToPaycheck(playerid, cost);

			SendClientMessageEx(playerid, COLOR_AQUA, "You have earned {00AA00}$%i{33CCFF} on your paycheck for your mined rock.", cost);
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			GameTextForPlayer(playerid, string, 5000, 1);

			PlayerData[playerid][pMiningRock] = 0;
			PlayerData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        //if((PlayerData[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.2129, -2264.1548, 13.3467)) || (PlayerData[playerid][pSmuggleMats] == 2 && IsPlayerInRangeOfPoint(playerid, 3.0, 2288.0918, -1105.6555, 37.9766)))
            if((PlayerData[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.2129, -2264.1548, 13.3467))
			|| (PlayerData[playerid][pSmuggleMats] == 2 && IsPlayerInRangeOfPoint(playerid, 3.0, 2288.0918, -1105.6555, 37.9766))
			|| (PlayerData[playerid][pSmuggleMats] == 3 && IsPlayerInRangeOfPoint(playerid, 20.0, 29.0318,-1399.3555,1.7680))
			|| (PlayerData[playerid][pSmuggleMats] == 4 && (IsPlayerInRangeOfPoint(playerid, 30.0, -1368.1206,-203.7393,14.1484) || IsPlayerInRangeOfPoint(playerid,30.0,310.8307,2033.6459,17.6406) || IsPlayerInRangeOfPoint(playerid,30.0,401.2192,2502.6482,16.4844) || IsPlayerInRangeOfPoint(playerid,30.0,1582.8756,1356.8186,10.8556) || IsPlayerInRangeOfPoint(playerid,30.0,1574.8552,1505.5690,10.8361))))
			{
			    if(gettime() - PlayerData[playerid][pSmuggleTime] < 20 && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
			    {
			        PlayerData[playerid][pACWarns]++;

			        if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerData[playerid][pSmuggleTime]);
					}
					else
					{
					    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport matrun", GetRPName(playerid), SERVER_ANTICHEAT);
					    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport matrun");
					}
			    }

                if(PlayerData[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
	    			return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    if(PlayerData[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 75);
			    } else {
			        AddPointMoney(POINT_MATFACTORY2, 75);
			    }

			    if(PlayerData[playerid][pGang] >= 0)
			    {
			        GiveGangPoints(PlayerData[playerid][pGang], 1);
				}

				if(IsPlayerInAnyVehicle(playerid))
				{
				    PlayerData[playerid][pDedication] = 0;
				}

				if(PlayerData[playerid][pDedication])
				{
				    AwardAchievement(playerid, "Dedication");
				}

		 	   	if(PlayerData[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 75);
			        PlayerData[playerid][pMaterials] += 250;
					SendClientMessage(playerid, COLOR_AQUA, "You have dropped off your load and collected 250 materials from the depot.");
			    }else if (PlayerData[playerid][pSmuggleMats] == 2) {
			        AddPointMoney(POINT_MATFACTORY2, 75);
			        PlayerData[playerid][pMaterials] += 250;
					SendClientMessage(playerid, COLOR_AQUA, "You have dropped off your load and collected 250 materials from the depot.");
			    } else if (PlayerData[playerid][pSmuggleMats] == 3) {
                    PlayerData[playerid][pMaterials] += 250;
					SendClientMessage(playerid, COLOR_AQUA, "You have dropped off your load and collected 350 materials from the depot.");
				} else if (PlayerData[playerid][pSmuggleMats] == 4) {
                    PlayerData[playerid][pMaterials] += 650;
					SendClientMessage(playerid, COLOR_AQUA, "You have dropped off your load and collected 650 materials from the depot.");
				}
				if(PlayerData[playerid][pSmuggleMats] > 0 && PlayerData[playerid][pDonator] >= 1)
                {
                    PlayerData[playerid][pMaterials] += 250;
                    SendClientMessage(playerid, COLOR_AQUA, "You've earned 250 more materials for being a {D909D9}Donator");
                }
		    	PlayerData[playerid][pSmuggleMats] = 0;
		    	PlayerData[playerid][pCP] = CHECKPOINT_NONE;

			    //SendClientMessage(playerid, COLOR_AQUA, "You have dropped off your load and collected 250 materials from the depot.");
		    	DisablePlayerCheckpoint(playerid);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 2500 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 250);

			switch(PlayerData[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SendClientMessage(playerid, COLOR_GREY, "You aren't at the correct dropoff spot.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SendClientMessage(playerid, COLOR_GREY, "The drug den does not need anymore seeds.");
					}

					gSeedsStock += 10;
                    IncreaseJobSkill(playerid, JOB_DRUGDEALER);
					GivePlayerCash(playerid, amount);
				    SendClientMessageEx(playerid, COLOR_AQUA, "You have earned {00AA00}$%i{33CCFF} for your delivery of marijuana seeds.", amount);
				}
				case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2349.7727, -1169.6304, 28.0243))
				    {
			    	    return SendClientMessage(playerid, COLOR_GREY, "You aren't at the correct dropoff spot.");
					}
					if(gCocaineStock >= 500)
					{
					    return SendClientMessage(playerid, COLOR_GREY, "The crack house does not need anymore cocaine.");
					}

					gCocaineStock += 10;
                    IncreaseJobSkill(playerid, JOB_DRUGDEALER);
					GivePlayerCash(playerid, amount);
				    SendClientMessageEx(playerid, COLOR_AQUA, "You have earned {00AA00}$%i{33CCFF} for your delivery of cocaine.", amount);
				}
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SendClientMessage(playerid, COLOR_GREY, "You aren't at the correct dropoff spot.");
					}
					if(gEphedrineStock >= 250)
					{
					    return SendClientMessage(playerid, COLOR_GREY, "The drug den does not need anymore ephedrine.");
					}

					gEphedrineStock += 10;
                    IncreaseJobSkill(playerid, JOB_DRUGDEALER);
					GivePlayerCash(playerid, amount);
				    SendClientMessageEx(playerid, COLOR_AQUA, "You have earned {00AA00}$%i{33CCFF} for your delivery of raw ephedrine.", amount);
				}
			}

			if(gettime() - PlayerData[playerid][pSmuggleTime] < 60 && PlayerData[playerid][pAdmin] < MODERATOR)
		    {
		        PlayerData[playerid][pACWarns]++;

		        if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerData[playerid][pSmuggleTime]);
				}
				else if(!PlayerData[playerid][pKicked])
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport drug smuggling", GetRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport drug smuggling");
				}
		    }
		    else
		    {
		        if(PlayerData[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(PlayerData[playerid][pGang], 1);
				}
			}

			PlayerData[playerid][pSmuggleDrugs] = 0;
			PlayerData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);

	    }
	    case CHECKPOINT_HOUSE:
	    {
            ShowActionBubble(playerid, "* %s has entered the house.", GetRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[PlayerData[playerid][pInviteHouse]][hIntX], HouseInfo[PlayerData[playerid][pInviteHouse]][hIntY], HouseInfo[PlayerData[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[PlayerData[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[PlayerData[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[PlayerData[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && PlayerData[playerid][pRobCash] > 0)
	        {
	            if(gettime() - PlayerData[playerid][pLastLoad] < 60 && PlayerData[playerid][pAdmin] < MODERATOR)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Robbery failed. You arrived at the checkpoint too fast.");
	                SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] arrived to the bank robbery checkpoint too fast.", GetRPName(playerid), playerid);
	            }
	            else
	            {
	                if(PlayerData[playerid][pGang] >= 0)
	                {
	                    GiveGangPoints(PlayerData[playerid][pGang], 50);
	                }

					RobberyInfo[rStolen] += PlayerData[playerid][pRobCash];
					GivePlayerCash(playerid, PlayerData[playerid][pRobCash]);
					SendClientMessageEx(playerid, COLOR_AQUA, "You have earned {00AA00}$%i{33CCFF} for successfully completing the bank robbery.", PlayerData[playerid][pRobCash]);
				}

				RemoveFromBankRobbery(playerid);
			}

			PlayerData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_DROPCAR:
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);

	        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
			}
			if(IsVehicleOwner(playerid, vehicleid))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You can't drop off your own vehicle.");
			}
			if(!GetVehicleCranePrice(vehicleid))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is not worth anything.");
			}
			if(VehicleInfo[vehicleid][vID] > 0 && IsPointInRangeOfPoint(VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], 300.0, 2695.8010, -2226.6643, 13.5501))
			{
	    		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is parked too close to the crane. You can't deliver it.");
			}

	        if(gettime() - PlayerData[playerid][pDropTime] < 10 && PlayerData[playerid][pAdmin] < MODERATOR)
	        {
	            PlayerData[playerid][pACWarns]++;

		        if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport car delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerData[playerid][pDropTime]);
				}
				else if(!PlayerData[playerid][pKicked])
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport delivering", GetRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport delivering");
				}
			}

	        new money = GetVehicleCranePrice(vehicleid);

	        GivePlayerCash(playerid, money);
	        AddPointMoney(POINT_AUTOEXPORT, money / 3);

			SetVehicleToRespawn(vehicleid);

	        PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
		}
		case CHECKPOINT_GARBAGE:
		{
 			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Trashmaster.");
			}
		    if(PlayerData[playerid][pGarbage] == 1)
		    {
                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
                TogglePlayerControllable(playerid, 0);
                SetTimerEx("garbagewait", 5000, false, "i", playerid);
				DisablePlayerCheckpoint(playerid);

				PlayerData[playerid][pGarbage] = 2;
				SetPlayerCheckpoint(playerid, 1138.8413,-1333.5553,13.6871, 5.0);
			}
			if(PlayerData[playerid][pGarbage] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1138.8413,-1333.5553,13.6871))
			    {
	   				GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerData[playerid][pGarbage] = 3;
					SetPlayerCheckpoint(playerid, 2121.7314,-1342.7231,23.9844, 5.0);
				}

			}
			if(PlayerData[playerid][pGarbage] == 3)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2121.7314,-1342.7231,23.9844))
			    {
	                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait..", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerData[playerid][pGarbage] = 4;
					SetPlayerCheckpoint(playerid, 1920.7303,-1791.3890,13.3828, 5.0);
				}
			}
			if(PlayerData[playerid][pGarbage] == 4)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1920.7303,-1791.3890,13.3828))
			    {
	                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerData[playerid][pGarbage] = 5;
					SetPlayerCheckpoint(playerid, 2444.9341,-2090.0244,13.5469, 5.0);
				}

			}
			if(PlayerData[playerid][pGarbage] == 5)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2444.9341,-2090.0244,13.5469))
			    {
					GameTextForPlayer(playerid, "Unloading Garbage....~n~Please wait.", 5000, 3);
					PlayerData[playerid][pGarbage] = 0;
					DisablePlayerCheckpoint(playerid);

					new amount = 1000 + random(500);
					PlayerData[playerid][pCash] = PlayerData[playerid][pCash] + amount;
					SendClientMessageEx(playerid, COLOR_AQUA, "Paycheck: You've earned $%i for your time working as a garbage man.", amount);

					PlayerData[playerid][pCP] = CHECKPOINT_NONE;

	   				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cash = %i WHERE uid = %i", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}
		case CHECKPOINT_FARMER:
		{
			isharvesting[playerid] = 1;
		    // created by someone else, unable to find original author.
		    if(IsPlayerInRangeOfPoint(playerid, 10, -309.0990,-1381.1797,10.7049))
		 	{
	 			DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -286.6838,-1366.6523,9.2448, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -286.6838,-1366.6523,9.2448))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -299.1016,-1345.1233,7.8737, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -299.1016,-1345.1233,7.8737))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -285.5391,-1314.0519,9.4996, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -285.5391,-1314.0519,9.4996))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -263.7585,-1322.7645,9.2727, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -263.7585,-1322.7645,9.2727))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -247.7353,-1312.8854,10.7708, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -247.7353,-1312.8854,10.7708))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -230.6390,-1326.7452,10.5278, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -230.6390,-1326.7452,10.5278))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -208.9200,-1312.6355,8.0123, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -208.9200,-1312.6355,8.0123))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -184.9501,-1314.5737,6.7411, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -184.9501,-1314.5737,6.7411))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 15 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -165.0671,-1340.6115,3.1610, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -165.0671,-1340.6115,3.1610))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -182.6981,-1357.5033,4.1997, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -182.6981,-1357.5033,4.1997))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -166.5868,-1381.2855,3.2646, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -166.5868,-1381.2855,3.2646))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -169.7452,-1395.7577,3.3153, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -169.7452,-1395.7577,3.3153))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -162.0952,-1412.2350,3.0394, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -162.0952,-1412.2350,3.0394))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 10 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -192.4460,-1407.2355,3.9017, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -192.4460,-1407.2355,3.9017))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -207.5008,-1421.8888,3.2155, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -207.5008,-1421.8888,3.2155))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -226.2545,-1411.9092,6.5599, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -226.2545,-1411.9092,6.5599))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -247.6317,-1427.6404,6.6805, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -247.6317,-1427.6404,6.6805))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -263.1941,-1420.1913,9.3854, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -263.1941,-1420.1913,9.3854))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 5 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -284.1987,-1431.4486,12.0138, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -284.1987,-1431.4486,12.0138))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -300.6557,-1424.9337,14.0705, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -300.6557,-1424.9337,14.0705))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -320.6297,-1431.7501,15.1514, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -320.6297,-1431.7501,15.1514))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -330.9842,-1410.7192,14.1269, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -330.9842,-1410.7192,14.1269))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, -343.0883,-1369.3920,14.4816, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -343.0883,-1369.3920,14.4816))
		 	{
		 	    new vehicleid = GetPlayerVehicleID(playerid);
			 	new amount = Random(200, 600);
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessageEx(playerid, COLOR_AQUA,"FARM: You've harvested the field and made $%i from selling the crops.", amount);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SetVehicleToRespawn(vehicleid);
				Harvesting[playerid] = 0;
				PlayerData[playerid][pCP] = CHECKPOINT_NONE;
		  		AddToPaycheck(playerid, amount);
			}
			//===FSHARE===//
			/*if(IsPlayerInRangeOfPoint(playerid, 10, -335.1576,-1030.4205,59.1934))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 4 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -1111.2207,-1619.7231,76.3672, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -1111.2207,-1619.7231,76.367))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 3 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -414.3708,-1754.7161,6.4640, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -414.3708,-1754.7161,6.4640))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 2 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -579.6287,-1468.8931,10.5009, 10);
			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -579.6287,-1468.8931,10.5009))
		 	{
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done! You got 1 More checkpoints to go.");
				SetPlayerCheckpoint(playerid, -382.5363,-1426.1783,26.2084, 10);

			}
			if(IsPlayerInRangeOfPoint(playerid, 10, -382.5363,-1426.1783,26.2084))
		 	{
		 	    new vehicleid = GetPlayerVehicleID(playerid);
		 		DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_GREY, "FARMER: Well done farmer! Here is your reward. You deserve it.");
				SendClientMessage(playerid, COLOR_PURPLE,"FARMER: You gained 2000$ from farm sharing.");
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				SetVehicleToRespawn(vehicleid);
				GivePlayerMoney(playerid, 2000);// you can change the money.
			}*/
		}
		case CHECKPOINT_HOUSEROB:
		{
			new rand1 = Random(1, 1000);
			new rand = Random(1, 200);
			if(PlayerData[playerid][pRobHouse] == 1)
			{
			    GivePlayerCash(playerid, rand1);
			    SendClientMessageEx(playerid, COLOR_AQUA, "Congratulations, Mission complete, you have received $%d for the stolen safe", rand1);
			}
			else
			{
			    GivePlayerCash(playerid, rand);
			    SendClientMessageEx(playerid, COLOR_AQUA, "Congratulations, Mission complete, you have received $%d for the stolen item", rand);
			}
            DisablePlayerCheckpoint(playerid);
			PlayerData[playerid][pWantedLevel]++;
			PlayerData[playerid][pCrimes]++;
			PlayerData[playerid][pBugFix] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerData[playerid][pWantedLevel], PlayerData[playerid][pCrimes], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		case CHECKPOINT_TRUCKDELIVERY:
		{
		    if(PlayerTruckJob[playerid][pTDActive] == 1)
		    {
			    //SendClientMessageEx(playerid, COLOR_YELLOW, " * You have reached the delivery destination, type /unloadtrailer to unload your trailer!");
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
				    if(PlayerTruckJob[playerid][pTDTrailer] == GetVehicleTrailer(GetPlayerVehicleID(playerid)))
				    {
					    new DestDepot = PlayerTruckJob[playerid][pTDDestDepot];
			//		    new Float:posx, Float:posy, Float:posz;
//					    GetPlayerPos(playerid, posx, posy, posz);

					    if(IsPlayerInRangeOfPoint(playerid, 20.0, TruckDepotInfo[DestDepot][pTDPosX], TruckDepotInfo[DestDepot][pTDPosY], TruckDepotInfo[DestDepot][pTDPosZ]))
					    {
					        // Send to unload, wait 10 seconds, freeze them
					        SetTimerEx("UnloadTruckJob", 10000, 0, "i", playerid);
					        TogglePlayerControllable(playerid, 0);

					        // Give them the waiting message
					        GameTextForPlayer(playerid, "~w~Unloading Trailer, please wait...",10000,3);
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_GREY, "  You are not at the Delivery Unloading Point!");
					    }
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "  This trailer is not your delivery trailer!");
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "  There is no trailer attached to your truck!");
				}
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    PlayerData[playerid][pCP] = CHECKPOINT_NONE;
			    DisablePlayerCheckpoint(playerid);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "  You are not on a truck delivery.");
		}
		default:
	    {
	        PlayerData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}

	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	if(pickupid == gPaycheck && IsPlayerInRangeOfPoint(playerid, 5.0, 1667.4180, -972.4201, 683.6855))
	{
	    if(PlayerData[playerid][pPaycheck] > 0)
	    {
			new
				string[20];

			format(string, sizeof(string), "~g~+$%i", PlayerData[playerid][pPaycheck]);
			GameTextForPlayer(playerid, string, 5000, 1);

			GivePlayerCash(playerid, PlayerData[playerid][pPaycheck]);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET paycheck = 0 WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerData[playerid][pPaycheck] = 0;
	    }
	}

	if(PlayerData[playerid][pDonator] == 1)
	{
	    if(pickupid == gVIPHealth) {
	        SetPlayerHealth(playerid, 100.0);
		} else if(pickupid == gVIPArmor) {
		    SetScriptArmour(playerid, 100.0);
		}
	}

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GivePlayerWeaponEx(playerid, 46);
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pSpecialTag]))
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}

	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if((22 <= weaponid <= 36) && damagedid != INVALID_PLAYER_ID && !PlayerHasWeapon(playerid, weaponid, true) && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: %s", GetRPName(playerid), SERVER_ANTICHEAT, string);
		BanPlayer(playerid, SERVER_ANTICHEAT, string);
	    return 0;
	}

	if((damagedid != INVALID_PLAYER_ID && weaponid == 23) && ((IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT) && PlayerData[playerid][pTazer] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
	{
		if(PlayerData[damagedid][pAdminDuty])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't taze an administrator currently on duty.");
		}
		if(PlayerData[damagedid][pTazedTime])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This player has already been tazed.");
		}
		if(!IsPlayerInRangeOfPlayer(playerid, damagedid, 10.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't taze that player. They are too far from you.");
		}
		if((22 <= GetPlayerWeapon(damagedid) <= 38) && IsPlayerAiming(damagedid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
		}
		if(IsPlayerInAnyVehicle(damagedid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't taze a player who is in a vehicle.");
		}

		PlayerData[damagedid][pTazedTime] = 10;
		TogglePlayerControllable(damagedid, 0);

		ApplyAnimation(damagedid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
		GameTextForPlayer(damagedid, "~r~Tazed", 5000, 3);

		ShowActionBubble(playerid, "* %s aims their tazer full of electricity at %s and stuns them.", GetRPName(playerid), GetRPName(damagedid));
		SendClientMessageEx(damagedid, COLOR_AQUA, "You've been {FF6347}stunned{33CCFF} with electricity by %s's tazer.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(damagedid));
		return 0;
	}
	if(PlayerData[playerid][pToggleHUD] == 0 && IsPlayerConnected(playerid))
	{
		new string[50];
		format(string, sizeof(string), "~g~%.0f damage.", amount);
		TextDrawSetString(Damage[playerid], string);
		TextDrawShowForPlayer(playerid, Damage[playerid]);
		PlayerPlaySound(playerid, 17802, 0.0, 0.0, 15.0);
		KillTimer(PlayerData[playerid][pDamageTimer]);
		PlayerData[playerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", playerid);
	}

	if(damagedid != INVALID_PLAYER_ID && IsPlayerConnected(damagedid))
	{
        AddDamages(playerid, damagedid, weaponid, bodypart, amount);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", playerid, weaponid, BULLET_HIT_TYPE_PLAYER, damagedid, GetPlayerNameEx(damagedid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	new string[50];
	if(gettime() - PlayerData[playerid][pLastUpdate] >= 3 && !PlayerData[playerid][pHurt])
	{
	    GameTextForPlayer(issuerid, "That player is AFK!", 5000, 3);
	    return 0;
	}
	if(IsPlayerConnected(issuerid))
	{
	    if(weaponid == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
	    {
	        SetPlayerHealth(playerid, 0.0);
	        HandleContract(playerid, issuerid);
	    }

    	if(PlayerData[playerid][pToggleHUD] == 0)
		{
			format(string, sizeof(string), "~r~Damage: %s hit you for %.0f damage.", GetRPName(issuerid), amount);
			TextDrawSetString(Damage[playerid], string);
			TextDrawShowForPlayer(playerid, Damage[playerid]);
			PlayerPlaySound(playerid, 17802, 0.0, 0.0, 15.0);
			KillTimer(PlayerData[playerid][pDamageTimer]);
			PlayerData[playerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", playerid);
		}
		if (IsValidDamageWeapon(weaponid) && WeaponDamages[weaponid] != 0.0 && PlayerData[issuerid][pTazer] == 0) {
		    ProcessDamage(playerid, weaponid);
		}

	}
	return 1;
}
forward OnLoadGunDamages();
public OnLoadGunDamages()
{
	new
		rows = cache_get_row_count(connectionID),
		weaponid
	;

    for (new i = 0; i < rows; i ++)
	{
	    weaponid = cache_get_field_content_int(i, "Weapon");

		if (IsValidDamageWeapon(weaponid))
		{
		    WeaponDamages[weaponid] = cache_get_field_content_float(i, "Damage");
		}
	}
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
	    new bank[32];

     	if(GetPlayerVirtualWorld(playerid) == GetStaticEntranceWorld("Mulholland Bank")) {
     	    bank = "Mulholland Bank";
	    } else if(GetPlayerVirtualWorld(playerid) == GetStaticEntranceWorld("Rodeo Bank")) {
	        bank = "Rodeo Bank";
	    }

		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Heist started", 5000, 1);
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
				PlayerData[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				PlayerData[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", PlayerData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", PlayerData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SendClientMessageEx(i, COLOR_SERVERDEF, "* HQ: A robbery is occurring at the %s. There are %i confirmed robbers.", bank, GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SendClientMessageToAllEx(COLOR_AQUA, "Breaking News: A bank robbery is currently taking place at the %s!", bank);

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2335, -998.6115, 671.0032, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("/lootbox\nto loot deposit box.", COLOR_YELLOW, 1680.2344, -1002.5356, 671.0032, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("/lootbox\nto loot deposit box.", COLOR_YELLOW, 1674.2708, -998.4954, 671.0032, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("/lootbox\nto loot deposit box.", COLOR_YELLOW, 1674.2708, -994.5173, 671.0032, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}
	if(PlayerData[playerid][pDeleteMode])
	{
		PlayerData[playerid][pSelected] = objectid;
		ShowDialogToPlayer(playerid, DIALOG_DELETEOBJECT);
	}

	return 1;
}
forward RechargeTazer(playerid);
public RechargeTazer(playerid)
{
	if (PlayerData[playerid][pTazer])
	{
		GivePlayerWeapon(playerid, 23, 1);
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_OBJECT && PlayerData[playerid][pRangeBooth] != -1 && hitid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);
		SendClientMessageEx(playerid, COLOR_GREEN, "~b~Targets:~w~ %d/10", PlayerData[playerid][pTargets]);
		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
	    PlayerPlaySoundEx(playerid, 6003);
		SetTimerEx("RechargeTazer", 2000, false, "i", playerid);
		ShowPlayerFooter(playerid, "Recharging tazer, please wait...", 2000);
	}
	if((PlayerData[playerid][pPaintball] > 0) && (GetPlayerVirtualWorld(playerid) != 1001 && GetPlayerVirtualWorld(playerid) != 1000))
	{
	    if(gettime() - PlayerData[playerid][pLastShot] >= 3)
	    {
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is using paintball weapons outside of paintball.", GetRPName(playerid), playerid);
			PlayerData[playerid][pLastShot] = gettime();
	 		ResetPlayerWeapons(playerid);
		}

		return 0;
	}

	new entranceid;
	if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(playerid, 150.0, 1419.6472, 4.0132, 1002.3906) && (entranceid = GetInsideEntrance(playerid)) != -1 && EntranceInfo[entranceid][eType] != 1)
	{
	    if(gettime() - PlayerData[playerid][pLastShot] >= 3)
	    {
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is using duel weapons outside of the duel arena.", GetRPName(playerid), playerid);
			PlayerData[playerid][pLastShot] = gettime();
			ResetPlayerWeapons(playerid);
		}

		return 0;
	}
	if(!PlayerHasWeapon(playerid, weaponid, true) && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked] && gettime() > PlayerData[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: %s", GetRPName(playerid), SERVER_ANTICHEAT, string);
		BanPlayer(playerid, SERVER_ANTICHEAT, string);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!PlayerData[hitid][pJoinedEvent] && !PlayerData[hitid][pPaintball] && PlayerData[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, PlayerData[hitid][pArmor]);
		}
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(PlayerData[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			PlayerData[playerid][pACFired]++;
			}

		    if(!PlayerData[playerid][pReloading] && PlayerData[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
    		    {
					SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s was automatically kicked for infinite ammo.", GetRPName(playerid));
					Log_Write("log_cheat", "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), PlayerData[playerid][pID]);
					KickPlayer(playerid);
				}
			}

			PlayerData[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}

	// Anti CBug moved to WC_cbugpunishment
	/*if((23 <= weaponid <= 25) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new interval, time = NetStats_GetConnectedTime(playerid);

		switch(weaponid)
		{
		    case 23: interval = 200;
		    case 24: interval = 600;
			case 25: interval = 500;
	    }

     	if((time - PlayerData[playerid][pCBug]) < interval && PlayerData[playerid][pPaintball] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerData[playerid][pJoinedEvent] && EventInfo[eCS]))
	    {
	        if((hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID) && !PlayerData[hitid][pAdminDuty])
	        {
		        //ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
		        //SetPlayerHealth(playerid, GetPlayerHealthEx(playerid) - 30.0);
		        //GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
 	        	//SendClientMessage(playerid, COLOR_LIGHTRED, "* Please do not abuse the C-Bug glitch. This action has been reported to the admins.");

				GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
		        ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
		        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly abusing C-Bug with a %s.", GetRPName(playerid), playerid, GetWeaponNameEx(weaponid));
		        SetPlayerArmedWeapon(playerid, 0);
		        PlayerData[playerid][pCBug] = time;
		        return 0;
	        }
	    }

	    PlayerData[playerid][pCBug] = time;
	}*/

	// Rapid fire detection
	if((22 <= weaponid <= 27) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    new time = NetStats_GetConnectedTime(playerid);

	    if((time - PlayerData[playerid][pLastFire]) < 25)
	    {
	        PlayerData[playerid][pRapidFire]++;

	        if(PlayerData[playerid][pRapidFire] >= 5)
	        {
	            SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Rapid fire", GetRPName(playerid), SERVER_ANTICHEAT);
             	BanPlayer(playerid, SERVER_ANTICHEAT, "Rapid fire");
	        }
	    }

	    PlayerData[playerid][pLastFire] = time;
	}

	/*else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, null, '%f', '%f', '%f', %i)", playerid, weaponid, hittype, hitid, fX, fY, fZ, gettime());
	}*/

	return 1;
}

/*public WC_CbugPunishment(playerid, weapon)
{
	if(!CanPlayerCbug(playerid))
 	{
        if(!PlayerData[playerid][pAdminDuty])
        {
	        //ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
	        //SetPlayerHealth(playerid, GetPlayerHealthEx(playerid) - 30.0);
	        //GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
        	//SendClientMessage(playerid, COLOR_LIGHTRED, "* Please do not abuse the C-Bug glitch. This action has been reported to the admins.");

			GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
	        ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly abusing C-Bug with a %s.", GetRPName(playerid), playerid, GetWeaponNameEx(weapon));
	        SetPlayerArmedWeapon(playerid, 0);
	        FreezeSyncData(playerid, false);
			//ClearAnimations(playerid, 1);
	        return 0;
        }
   	}
   	return 1;
}*/
stock CheckAdmin(playerid, level)
{
	if (PlayerData[playerid][pAdmin] >= level)
		return true;
	else
		return false;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && PlayerData[playerid][pAdmin] < 2 && !PlayerData[playerid][pKicked])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]))
	    {
		    PlayerData[playerid][pACWarns]++;

		    if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
	    	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], distance);
			}
			else
			{
		    	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport hacks", GetRPName(playerid), SERVER_ANTICHEAT);
		    	BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport hacks");
			}
		}
	}

	return 1;
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && PlayerData[playerid][pAdmin] < 2 && !PlayerData[playerid][pKicked])
	{
	    PlayerData[playerid][pACWarns]++;

	    if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly using airbreak.", GetRPName(playerid), playerid);
	        Log_Write("log_cheat", "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), PlayerData[playerid][pID]);
		}
		else
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Airbreak", GetRPName(playerid), SERVER_ANTICHEAT);
		    BanPlayer(playerid, SERVER_ANTICHEAT, "Airbreak");
		}
	}

	return 1;
}

public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock.");
		            }
		            if(PlayerData[playerid][pDonator] == 0 && PlayerData[playerid][pCash] < 1000)
	                {
	                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy new clothes.");
	                }
					if((PlayerData[playerid][pDonator] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
					    return SendClientMessage(playerid, COLOR_GREY, "You are not allowed to use that skin as it is either invalid or faction reserved.");
					}

					if(PlayerData[playerid][pDonator] == 0)
					{
					    new price = 1000;

	                    if(PlayerData[playerid][pTraderUpgrade] > 0)
	                    {
							price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
							SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
	                    }

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
	                	BusinessInfo[businessid][bProducts]--;

	                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                	mysql_tquery(connectionID, queryBuffer);

	                	ShowActionBubble(playerid, "* %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), FormatNumber(price));
	             		SendClientMessageEx(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
	                }
	                else
	                {
	                    SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You changed your clothes free of charge.");
					}

					SetScriptSkin(playerid, modelid);
					SendClientMessageEx(playerid, -1, "%d", modelid);
		        }
			}
	    }
	    case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);
				if(houseid == -1)
				    houseid = GetFurnitureHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PreviewFurniture(playerid, listitem + PlayerData[playerid][pPreviewIndex]);
				}
	        }
	    }
	    case MODEL_SELECTION_LANDOBJECTS:
	    {
	        if(response)
	        {
	            new landid = GetNearbyLand(playerid);

		    	if(landid >= 0 && HasLandPerms(playerid, landid))
				{
					PurchaseLandObject(playerid, landid, listitem + PlayerData[playerid][pFurnitureIndex]);
				}
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + PlayerData[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
	    }
	    case MODEL_SELECTION_COPCLOTHING:
	    {
	        if((response) && IsLawEnforcement(playerid))
	        {
	            SetPlayerAttachedObject(playerid, 9, modelid, copClothing[listitem][cBone]);

				PlayerData[playerid][pEditType] = EDIT_COP_CLOTHING;
		        PlayerData[playerid][pSelected] = listitem;

				SendClientMessageEx(playerid, COLOR_AQUA, "You have selected {FF6347}%s{33CCFF}. Use the editor to arrange your clothing and click the disk icon to save.", copClothing[listitem][cName]);
        		EditAttachedObject(playerid, 9);
	        }
	    }
	    case MODEL_SELECTION_VIPCLOTHES:
	    {
	        if((response) && PlayerData[playerid][pDonator] > 0)
	        {
	            SetScriptSkin(playerid, modelid);
	            SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You changed your clothes free of charge.");
	        }
		}
		case MODEL_SELECTION_VEHICLES:
		{
			if(response)
			{
			    PlayerData[playerid][pSelected] = listitem;
			    PurchaseVehicle(playerid);
			}
		}
		case MODEL_SELECTION_VIPVEHICLES:
		{
			if(response)
			{
				SCM(playerid, COLOR_GREY, "Nuffin happened");
			}
		}
	    case MODEL_SELECTION_SKIN_REGISTER:// Registraton clothes.
	    {
	        if(!response)
	        {
	            return ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
			}
	        if(response)
	        {
				SetScriptSkin(playerid, modelid);
				PlayerData[playerid][pSkin] = modelid;
				ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
			}
	    }
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(PlayerData[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	/*if(PlayerData[playerid][pPreviewHouse] >= 0)
	{
		PlayerData[playerid][pPreviewHouse] = -1;
  		PlayerData[playerid][pPreviewType] = 0;
    	PlayerData[playerid][pPreviewTime] = 0;
    	SendClientMessage(playerid, COLOR_GREY, "Preview cancelled. You left your house interior.");
	}*/

	return 1;
}

bool:IsVehicleBajs(vehid)
{
	switch(GetVehicleModel(vehid))
	{
		case 481, 509, 510: return true;
	}
	return false;
}
public OnPlayerUpdate(playerid) // every second <3 ty KYE!!
{
	if(PlayerData[playerid][pKicked])
		return 0;

	if(!PlayerData[playerid][pLogged])
		return 1;
	new index = GetPlayerAnimationIndex(playerid);
	if (PlayerData[playerid][pWorkout] != WORKOUT_NONE)
	{
		switch (PlayerData[playerid][pWorkout])
		{
			case WORKOUT_DUMBELLS:
			{
				if (index < 570 || index > 577)
				{
					ApplyAnimation(playerid, "Freeweights", "gym_free_loop", 4.1, 1, 0, 0, 0, 0, 1);
				}
			}
			case WORKOUT_TREADMILL:
			{
				if (index < 662 || index > 665)
				{
					switch (PlayerData[playerid][pSpeedLevel])
					{
						case 1..3:
						{
							ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_walk", 4.1, 1, 0, 0, 0, 0, 1);
						}
						case 4..6:
						{
							ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_jog", 4.1, 1, 0, 0, 0, 0, 1);
						}
						case 7..10:
						{
							ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_sprint", 4.1, 1, 0, 0, 0, 0, 1);
						}
					}
				}
			}
		}
	}

	if(GetPlayerWeapon(playerid)  == 38 ) // when they sync something which they should not!!!
	{
	    RemovePlayerWeapon(playerid, 38);
	}
	new Float:CarHealth[MAX_PLAYERS];
	if(IsPlayerInAnyVehicle(playerid) == 1 && seatbelt[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}
 	new vehicle = GetPlayerVehicleID(playerid);
	if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) {

		if( !IsVehicleBajs( vehicle ) )
		{
		    if(PlayerData[playerid][pSpeedometer] == 1)
		    {

			}
			else if(PlayerData[playerid][pSpeedometer] == 2)
			{

			}
		}
	}

	new vehicleid = GetPlayerVehicleID(playerid), keys, string[128], drunkLevel = GetPlayerDrunkLevel(playerid);
	if(PlayerData[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    PlayerData[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    PlayerData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    PlayerData[playerid][pACAmmo] = PlayerData[playerid][pCurrentAmmo];
	    PlayerData[playerid][pACFired] = 0;
	    PlayerData[playerid][pCBug] = 0;
		PlayerData[playerid][pClip] = GetWeaponClipSize(PlayerData[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && PlayerData[playerid][pAdmin] < MODERATOR)
		{
			if(PlayerData[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, PlayerData[playerid][pCurrentWeapon], true) && !PlayerData[playerid][pKicked])
			{
			    PlayerData[playerid][pACWarns]++;

			    if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(PlayerData[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetWeaponNameEx(PlayerData[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(PlayerData[playerid][pCurrentWeapon]));

					SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: %s", GetRPName(playerid), SERVER_ANTICHEAT, string);
					BanPlayer(playerid, SERVER_ANTICHEAT, string);
				}
			}
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerData[playerid][pReloading] = 1;
		}

	    PlayerData[playerid][pACFired] = 0;
	}

	if(PlayerData[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerData[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerData[playerid][pReloading] = 0;
	}

	if(PlayerData[playerid][pCurrentVehicle] != vehicleid)
	{
	    PlayerData[playerid][pCurrentVehicle] = vehicleid;
	    PlayerData[playerid][pVehicleCount]++;

	    if((!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && PlayerData[playerid][pVehicleCount] >= 4 && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
	    {
	        SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Car warping", GetRPName(playerid), SERVER_ANTICHEAT);
	        BanPlayer(playerid, SERVER_ANTICHEAT, "Car warping");
	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}
	if(PlayerData[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(PlayerData[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        PlayerData[playerid][pClip] -= PlayerData[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(PlayerData[playerid][pClip] < 0)
      		{
       			PlayerData[playerid][pClip] = 0;
			}
		}

	    PlayerData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerData[playerid][pReloading] = 1;
		}

	    PlayerData[playerid][pACFired] = 0;
	}

	if(PlayerData[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerData[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerData[playerid][pReloading] = 0;
	}
	if(!PlayerData[playerid][pToggleHUD] && !PlayerData[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][4], string);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);


	}

	if(GetPlayerWeapon(playerid) > 1 && PlayerData[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
	if(PlayerData[playerid][pInjured])
	{
		format(string, sizeof(string), "(( Has been injured %d times, /damages %d for more information. ))", totalDamages[playerid], playerid);
		SetPlayerChatBubble(playerid, string, COLOR_ADM, 30.0, 2000);
	}
	if(!drunkLevel)
	{
	    SetPlayerDrunkLevel(playerid, 1000);
	}

	if(PlayerData[playerid][pDrunkLevel] != drunkLevel)
	{
	    new value = PlayerData[playerid][pDrunkLevel] - drunkLevel;

	    if(0 <= value <= 250)
	    {
	        PlayerData[playerid][pFPS] = value;
		}

	    PlayerData[playerid][pDrunkLevel] = drunkLevel;
	}

    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}

    if((keys & KEY_HANDBRAKE) && GetPlayerWeapon(playerid) == 34)
	{
 		if(!PlayerData[playerid][pSniper])
	    {
		    for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
		    {
	    	    if(ClothingInfo[playerid][i][cAttached]) RemovePlayerAttachedObject(playerid, i);
			}

		    PlayerData[playerid][pSniper] = 1;
		}
	}
	else if(PlayerData[playerid][pSniper])
	{
	    SetPlayerClothing(playerid);
	    PlayerData[playerid][pSniper] = 0;
	}
	if(PlayerData[playerid][pNoKnife] && GetPlayerWeapon(playerid) == 4)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
	if(PlayerData[playerid][pAnimation] != index)
	{
	    if(PlayerData[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	    {
	        vehicleid = PlayerData[playerid][pLockBreak];

	        if(!IsValidVehicle(vehicleid) || VehicleInfo[vehicleid][vOwnerID] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You are no longer breaking into this vehicle as it despawned.");
				CancelBreakIn(playerid);
	        }
	        else if(GetNearbyVehicle(playerid) != vehicleid)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You are no longer breaking into this vehicle as you left its location.");
				CancelBreakIn(playerid);
	        }
	        else if(VehicleInfo[vehicleid][vLocked] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You are no longer breaking into this vehicle as it was unlocked.");
	            CancelBreakIn(playerid);
	        }
	        else if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You are no longer breaking into this vehicle as you aren't onfoot.");
	            CancelBreakIn(playerid);
	        }
	        else
	        {
			    switch(index)
			    {
					case 17..19, 1545..1547, 312..314, 1136..1138, 472..474, 482..484, 494..496, 504..505, 1165:
					{
					    if(IsValidVehicle(vehicleid) && (IsPlayerAtVehicleDoor(playerid, vehicleid, DOOR_DRIVER) || IsPlayerAtVehicleDoor(playerid, vehicleid, DOOR_PASSENGER)))
					    {
					        new
					            damage[4];

					        GetVehicleDamageStatus(vehicleid, damage[0], damage[1], damage[2], damage[3]);

							if(2 <= GetPlayerWeapon(playerid) <= 9)
							    PlayerData[playerid][pLockHealth] -= 20.0;
					        else
								PlayerData[playerid][pLockHealth] -= 10.0;

					        if(PlayerData[playerid][pLockHealth] <= 0)
					        {
					            VehicleInfo[vehicleid][vLocked] = 0;

								SetVehicleParams(vehicleid, VEHICLE_DOORS, false);
						        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

								GameTextForPlayer(playerid, "~g~Vehicle unlocked!", 3000, 6);
								ShowActionBubble(playerid, "* %s successfully kicked down the door of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));

								CancelBreakIn(playerid);
								UpdateVehicleDamageStatus(vehicleid, damage[0], 262144, damage[2], damage[3]);
					        }
					        else
					        {
								new
								    Float:x,
								    Float:y,
								    Float:z,
									garageid = GetVehicleGarage(vehicleid);

		      					if(!GetVehicleParams(vehicleid, VEHICLE_ALARM))
		      					{
		      					    if(VehicleInfo[vehicleid][vAlarm] > 0)
									{
										foreach(new i : Player)
		      					    	{
		      					        	if(IsVehicleOwner(i, vehicleid))
		      					        	{
		      					        	    SendClientMessageEx(i, COLOR_YELLOW, "* SMS from OnStar: The alarm was activated on your %s located in %s, Ph: 999 *", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
											}

											if(GetFactionType(i) == FACTION_POLICE)
											{
												if(VehicleInfo[vehicleid][vAlarm] == 2)
												{
												    SendClientMessageEx(i, COLOR_SERVERDEF, "* HQ: The alarm was activated on %s's %s in %s. *", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			      					            }
			      					            else if(VehicleInfo[vehicleid][vAlarm] == 3)
												{
												    if(PlayerData[playerid][pCP] == CHECKPOINT_NONE)
												    {
												        PlayerData[playerid][pCP] = CHECKPOINT_MISC;

												        if(garageid >= 0)
														{
													        SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
												        }
														else
														{
												            GetVehiclePos(vehicleid, x, y, z);
												            SetPlayerCheckpoint(playerid, x, y, z, 3.0);
												        }
												    }

												    SendClientMessageEx(i, COLOR_SERVERDEF, "* HQ: The alarm was activated on %s's %s in %s (marked on map). *", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			      					            }
		      					            }
		      					        }
		      					    }

		      					    SetVehicleParams(vehicleid, VEHICLE_ALARM, true);
								}

		                        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, z);
		                        UpdateVehicleDamageStatus(vehicleid, damage[0], 131072, damage[2], damage[3]);

								format(string, sizeof(string), "%.0f HP", PlayerData[playerid][pLockHealth]);

								if(PlayerData[playerid][pLockText] == Text3D:INVALID_3DTEXT_ID)
								{
								    if(IsPlayerAtVehicleDoor(playerid, PlayerData[playerid][pLockBreak], DOOR_DRIVER)) {
									    PlayerData[playerid][pLockText] = CreateDynamic3DTextLabel(string, COLOR_GREEN, -x * 2, y + 0.25, z, 5.0, .attachedvehicle = vehicleid);
									} else if(IsPlayerAtVehicleDoor(playerid, PlayerData[playerid][pLockBreak], DOOR_PASSENGER)) {
									    PlayerData[playerid][pLockText] = CreateDynamic3DTextLabel(string, COLOR_GREEN, x * 2, y + 0.25, z, 5.0, .attachedvehicle = vehicleid);
									}
								}
								else
								{
								    UpdateDynamic3DTextLabelText(PlayerData[playerid][pLockText], COLOR_GREEN, string);
								}

								KillTimer(PlayerData[playerid][pLockTimer]);
								PlayerData[playerid][pLockTimer] = SetTimerEx("DestroyLockText", 5000, false, "i", playerid);
							}
					    }
					}
			    }
			}
		}

	    PlayerData[playerid][pAnimation] = index;
	}

	PlayerData[playerid][pLastUpdate] = gettime();

	return 1;
}

forward OnPlayerUpdateEx();
public OnPlayerUpdateEx()
{
    foreach(new playerid : Player)
    {
		if(PlayerData[playerid][pKicked])
	    	continue;

		if(!PlayerData[playerid][pLogged])
	    	continue;

		new keys, ud, lr;

		GetPlayerKeys(playerid, keys, ud, lr);
		if(PlayerData[playerid][pHurt] > 0)
		{
		    PlayerData[playerid][pHurt]--;
		}
		if(PlayerData[playerid][pGovTimer] > 0)
		{
			PlayerData[playerid][pGovTimer]--;
		}
		if(PlayerData[playerid][pRareTime] > 0)
		{
		    PlayerData[playerid][pRareTime]--;
		}
		if(GetPlayerMoney(playerid) != PlayerData[playerid][pCash])
		{
		    ResetPlayerMoney(playerid);
		    GivePlayerMoney(playerid, PlayerData[playerid][pCash]);
		}
		if(GetPlayerScore(playerid) != PlayerData[playerid][pLevel])
		{
		    SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
		}
		if(GetPlayerWantedLevel(playerid) != PlayerData[playerid][pWantedLevel])
		{
		    SetPlayerWantedLevel(playerid, PlayerData[playerid][pWantedLevel]);
		}
		if((GetPlayerAnimationIndex(playerid) != 1209) && ((PlayerData[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (PlayerData[playerid][pTazedTime] > 0 && PlayerData[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
		{
		    ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);
		}

		if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
		{
		    new
		        Float:x,
		        Float:y,
		        Float:z,
		        Float:vx,
		        Float:vy,
		        Float:vz,
		        Float:cx,
		        Float:cy,
		        Float:cz;

		    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    for(new i = 0; i < MAX_FIRES; i ++)
			    {
			        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
			        {
			            gFireHealth[i] = gFireHealth[i] - 10.0;

			            if(gFireHealth[i] <= 0.0)
			            {
			                PlayerData[playerid][pTotalFires]++;

				            GetDynamicObjectPos(gFireObjects[i], x, y, z);
				            GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
			        }
				}
			}
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
			{
			    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
			    GetPlayerCameraPos(playerid, cx, cy, cz);

			    for(new i = 0; i < MAX_FIRES; i ++)
			    {
			        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
			        {
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);

						if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
		   				{
		   				    gFireHealth[i] = gFireHealth[i] - 5.0;

		   				    if(gFireHealth[i] <= 0.0)
			            	{
			   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
			   			    	GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

					            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
								DestroyDynamicObject(gFireObjects[i]);

								gFireObjects[i] = INVALID_OBJECT_ID;
								gFireHealth[i] = 0.0;
							}
						}
				  	}
			    }
			}

			if(!IsFireActive())
			{
			    new amount;

			    foreach(new i : Player)
			    {
			        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
			        {
			            amount = gFires * 150;

			            if(PlayerData[i][pLaborUpgrade] > 0)
						{
							amount += percent(amount, PlayerData[i][pLaborUpgrade]);
						}

			            SendClientMessageEx(i, COLOR_AQUA, "Well done! You helped put out the fire and received {00AA00}$%i{33CCFF}.", amount);
			            GivePlayerCash(i, amount);
			        }
				}

				gFires = 0;
			}
		}
	}
	return 1;
}

/*Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    return GetPlayerDistanceFromPoint(targetid, Pos[0], Pos[1], Pos[2]);
}
*/

forward UpdateCarRadars();
public UpdateCarRadars()
{
	foreach(new p : Player)
	{
		if (!IsPlayerConnected(p) || !IsPlayerInAnyVehicle(p) || CarRadars[p] == 0) continue;

		new target = -1;
		new Float:tempDist = 50.0;

		if(CarRadars[p] == 1)
		{
			foreach(new t : Player)
			{
				if (!IsPlayerInAnyVehicle(t) || t == p || IsPlayerInVehicle(t, GetPlayerVehicleID(p))) continue;

				new Float:distance = GetDistanceBetweenPlayers(p, t);

				if (distance < tempDist)
				{
					target = t;
					tempDist = distance;
				}
			}

			if (target == -1)
			{
				// no target was found
				PlayerTextDrawSetString(p, _crTextTarget[p], "Target Vehicle: ~r~N/A");
				PlayerTextDrawSetString(p, _crTextSpeed[p], "Speed: ~r~N/A");
				PlayerTextDrawSetString(p, _crTickets[p], "Tickets: ~r~N/A");
			}
			else
			{
				new targetVehicle = GetPlayerVehicleID(target);
				new Float: speed = player_get_speed(target);

				new str[60];

				format(str, sizeof(str), "Target Vehicle: ~r~%s (%i)", GetVehicleName(targetVehicle), targetVehicle);
				PlayerTextDrawSetString(p, _crTextTarget[p], str);
				format(str, sizeof(str), "Speed: ~r~%d MPH", floatround(speed, floatround_round));
				PlayerTextDrawSetString(p, _crTextSpeed[p], str);
				foreach(new i : Player)
				{
					new veh = GetPlayerVehicle(i, targetVehicle);
					if (veh != -1 && VehicleInfo[veh][vTickets] > 0)
					{
						format(str, sizeof(str), "Tickets: ~r~$%s", number_format(VehicleInfo[veh][vTickets]));
						PlayerTextDrawSetString(p, _crTickets[p], str);
						if (gettime() >= (GetPVarInt(p, "_lastTicketWarning") + 10))
						{
							SetPVarInt(p, "_lastTicketWarning", gettime());
							PlayerPlaySound(p, 4202, 0.0, 0.0, 0.0);
						}
					}
				}
			}
		}
	}
}
forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 25, 15000);
	            SendInfoMessage(playerid, "You have advanced to the next level (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 28, 15000);
	            SendInfoMessage(playerid, "You have advanced to the next level (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 29, 15000);
	            SendInfoMessage(playerid, "You have advanced to the next level (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 30, 15000);
	            SendInfoMessage(playerid, "You have advanced to the next level (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 27, 15000);
	            SendInfoMessage(playerid, "You have advanced to the next level (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendInfoMessage(playerid, "You have completed the shooting challenge!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}


public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Illegal modding", GetRPName(playerid), SERVER_ANTICHEAT);
	    BanPlayer(playerid, SERVER_ANTICHEAT, "Illegal modding");
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}


	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}

	vehicleStream[vehicleid][0] = 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(PlayerData[playerid][pLogged] && !PlayerData[playerid][pKicked])
	{
	    text[0] = toupper(text[0]);
	    if(PlayerData[playerid][pTutorial])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently in the tutorial. Chatting is disabled.");
	        return 0;
		}
		else if(PlayerData[playerid][pHospital])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently in the hospital. Chatting is disabled.");
	        return 0;
		}
		else if(PlayerData[playerid][pMuted])
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently muted. Chatting is disabled.");
	        return 0;
		}
		else if(++PlayerData[playerid][pSpamTime] >= 4 && PlayerData[playerid][pAdmin] < MODERATOR)
		{
		    PlayerData[playerid][pMuted] = 10;
		    SendClientMessage(playerid, COLOR_YELLOW, "You've been temporarily muted by the server for ten seconds for spamming.");
		    return 0;
		}
		else if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{00aa00}AdmWarning{FFFF00}: %s (ID: %d) may be server advertising: '{00aa00}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SendAdminMessage(COLOR_YELLOW, string, 2);
			SendClientMessage(playerid, COLOR_GREY, "Your chat was blocked, you have automatically reported for server advertising.");
        	if(++PlayerData[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Server advertisement", GetRPName(playerid), SERVER_ANTICHEAT);
	    		BanPlayer(playerid, SERVER_ANTICHEAT, "Server advertisement");
        	}
			return 0;
		}

		else if (PlayerData[playerid][pCalling] != 0 && PlayerData[playerid][pCalling] != 1)
		{
			SendDistanceMessage(playerid, 20.0, COLOR_WHITE, "(Phone) %s says: %s", GetRPName(playerid), text);
		}
		else
		{
			new
			    string[144];

			if (PlayerData[playerid][pCalling] > 1)
			{
				if (PlayerData[playerid][pCaller] != INVALID_PLAYER_ID)
				{
					if (PlayerData[playerid][pPayphone] == -1)
					{
						SendSplitMessage(PlayerData[playerid][pCaller], COLOR_YELLOW, "(Phone) %s says: %s", GetRPName(playerid), text);
						SendDistanceMessage(playerid, 20.0, COLOR_WHITE, "(Cellphone) %s says: %s", GetRPName(playerid), text);
					}
					else
					{
						SendSplitMessage(PlayerData[playerid][pCaller], COLOR_YELLOW, "(Phone) Unknown says: %s", text);
						SendDistanceMessage(playerid, 20.0, COLOR_WHITE, "(Cellphone) %s says: %s", GetRPName(playerid), text);
					}
				}
				else
				{
					switch (PlayerData[playerid][pCalling])
					{
				        case 911:
				        {
					        if(!strcmp(text, "Police", true))
					        {
					            SendClientMessage(playerid, COLOR_OLDSCHOOL, "Dispatch: This is the Los Santos Police Department. What is your emergency?");
					        	PlayerData[playerid][pCalling] = 912;
					        }
							else if(!strcmp(text, "medic", true))
					        {
					            SendClientMessage(playerid, COLOR_DOCTOR, "Dispatch: This is the Los Santos Fire & Medical Department. What is your emergency?");
					        	PlayerData[playerid][pCalling] = 913;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "Dispatch: Sorry? I don't know what you mean... Enter 'police' or 'medic'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SendClientMessageEx(i, COLOR_SERVERDEF, "______ Emergency Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerData[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SendClientMessageEx(i, COLOR_GREY2, "Emergency: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "* Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }
							strcpy(PlayerData[playerid][pEmergency], text, 128);
                            PlayerData[playerid][pEmergencyCall] = 120;
                            PlayerData[playerid][pEmergencyType] = FACTION_POLICE;
						    SendClientMessage(playerid, COLOR_OLDSCHOOL, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SendClientMessageEx(i, COLOR_DOCTOR, "______ Emergency Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerData[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SendClientMessageEx(i, COLOR_GREY2, "Emergency: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "* Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }
						    strcpy(PlayerData[playerid][pEmergency], text, 128);
						    PlayerData[playerid][pEmergencyCall] = 120;
						    PlayerData[playerid][pEmergencyType] = FACTION_MEDIC;
						    SendClientMessage(playerid, COLOR_DOCTOR, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SendClientMessageEx(i, COLOR_SERVERDEF, "______ News Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerData[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Message: %s", text);
						        }
						    }
						    SendClientMessage(playerid, COLOR_SERVERDEF, "News Team: Thank you. We will get back to you shortly!");
						    HangupCall(playerid);
						}
						case 6324:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_MECHANIC))
						        {
						            SendClientMessageEx(i, COLOR_SERVERDEF, "______ Mechanic Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerData[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Situation: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "* Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }
							PlayerData[playerid][pMechanicCall] = 60;
						    SendClientMessage(playerid, COLOR_LIGHTORANGE, "Dispatch: Thank you. We will alert all mechanics on duty.");
						    HangupCall(playerid);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SendClientMessageEx(i, COLOR_SERVERDEF, "______ Taxi Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), PlayerData[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Location: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "* Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }
							PlayerData[playerid][pTaxiCall] = 60;
						    SendClientMessage(playerid, COLOR_YELLOW, "Dispatch: Thank you. We will alert all taxi drivers on duty.");
						    HangupCall(playerid);
						}
					}
				}
			}
			else if(PlayerData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!PlayerData[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
			    		{
			    		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "Live Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
						    SendClientMessageEx(i, COLOR_LIGHTGREEN, "Live Guest %s: %s", GetRPName(playerid), text);
						}
					}
				}
			}
			else
			{
			    if(IsPlayerInAnyVehicle(playerid) && !IsAMotorBike(GetPlayerVehicleID(playerid)) && CarWindows[GetPlayerVehicleID(playerid)] == 0)
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && !IsAMotorBike(GetPlayerVehicleID(playerid)))
			            {
        					SendClientMessageEx(i, COLOR_GREY1, "(Windows closed) %s says: %s", GetRPName(playerid), text);
			            }
			        }
			    }
			    else
			    {
					if(!strcmp(PlayerData[playerid][pAccent], "None", true))
					{
				    	format(string, sizeof(string), "(%s) %s says: %s", PlayerData[playerid][pAccent], GetRPName(playerid), text);
					}
					else
					{
   				    	format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
					}
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
				}
				ReturnChatAnimation(playerid, text);
			}
		}
	}

    PlayerData[playerid][pAFKPos][0] = 0.0;
    PlayerData[playerid][pAFKPos][1] = 0.0;
    PlayerData[playerid][pAFKPos][2] = 0.0;
	return 0;
}

func StopTalking(playerid)
{

    PlayerData[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SendClientMessage(playerid, COLOR_GREY, "Animations cleared.");
    return 1;
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(PlayerData[playerid][pKicked]) return 0;

	if(!PlayerData[playerid][pLogged])
	{
	    SendClientMessage(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(isnull(params))
	{
	    params[0] = EOS;
	}
	if(PlayerData[playerid][pTutorial])// && strcmp(cmd, "/report", true, 6))
 	{
  		SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently in the tutorial. Commands are disabled.");
    	return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(PlayerData[playerid][pMuted])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "* You are currently muted. Commands are disabled.");
        return 0;
	}
	if(++PlayerData[playerid][pSpamTime] >= 4 && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    PlayerData[playerid][pMuted] = 10;
	    SendClientMessage(playerid, COLOR_YELLOW, "You've been temporarily muted by the server for ten seconds due to flooding.");
	    return 0;
	}
	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{00aa00}AdmWarning{FFFF00}: %s (ID: %d) may be server advertising: '{00aa00}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SendAdminMessage(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
		SendClientMessage(playerid, COLOR_GREY, "Your command was blocked, you have automatically reported for server advertising.");
        PlayerData[playerid][pAdvertWarnings] ++;
		return 0;
	}
	printf("[zcmd] [%s]:%s %s", GetPlayerNameEx(playerid), cmd, params);
	Log_Write("log_command", "[zcmd] [%s](uid: %d):%s %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], cmd, params);

//	Log_Write("log_chat", "[%s]:%s %s.", GetPlayerNameEx(playerid), cmd, params);

	/*if((PlayerData[playerid][pAdmin] < STAFF_MANAGER) && (!strcmp(cmd, "/ban", true, 3) || !strcmp(cmd, "/kick", true, 4) || !strcmp(cmd, "/sban", true, 4) || !strcmp(cmd, "/skick", true, 5) || !strcmp(cmd, "/permaban", true, 8) || !strcmp(cmd, "/rangeban", true, 8) || !strcmp(cmd, "/getip", true, 5) || !strcmp(cmd, "/traceip", true, 7)))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "* These commands cannot be used during beta testing.");
		return 0;
	}
	if((PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR) && (!strcmp(cmd, "/adminname")))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "* These commands cannot be used during beta testing.");
		return 0;
	}*/

	//PlayerData[playerid][pAFKPos][0] = 0.0;
    //PlayerData[playerid][pAFKPos][1] = 0.0;
    //PlayerData[playerid][pAFKPos][2] = 0.0;
	return 1;
}



public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "That command doesn't exist! Use /help for a list of commands.");
	    //SendClientMessage(playerid, 0x089DCEFF, "[U:RP] {AAAAAA}Sorry, that command doesn't exist! Use /help for a list of commands.");
	    SendClientMessageEx(playerid, COLOR_SERVERDEF, "[P:RP]{C8C8C8} Sorry, but '/%s' does not appear to be working. Use {89DCEF}/help{C8C8C8} for a list of valid commands.", cmd);
	}
/*	if(result == -1)
	{
		TextDrawShowForPlayer(playerid, Textdraw0);
		TextDrawShowForPlayer(playerid, Textdraw1);
		TextDrawShowForPlayer(playerid, Textdraw2);
		TextDrawShowForPlayer(playerid, Textdraw3);
		TextDrawShowForPlayer(playerid, Textdraw4);
		TextDrawShowForPlayer(playerid, Textdraw5);
		TextDrawShowForPlayer(playerid, Textdraw6);
		TextDrawShowForPlayer(playerid, Textdraw7);
		TextDrawShowForPlayer(playerid, Textdraw8);
	  	SetTimerEx("unkcmd", 5000, false, "i", playerid);
	 	PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	}
*/
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(success)
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip) && PlayerData[i][pAdmin] < 6 && !PlayerData[i][pDeveloper])
	        {
	            BanPlayer(i, "Server", "Unauthorized RCON login");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s was banned for an unauthorized RCON login.", GetRPName(i));
			}
		}
	}

	return 1;
}


public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new time = NetStats_GetConnectedTime(playerid);

	if(PlayerData[playerid][pSkating] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    SetPlayerArmedWeapon(playerid, 0);
	    if(newkeys & KEY_HANDBRAKE)
		{
	        ApplyAnimationEx(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1);
	        if(!PlayerData[playerid][pSkateAct])
			{
	                PlayerData[playerid][pSkateAct] = true;
	                RemovePlayerAttachedObject(playerid, 5);
	                DestroyDynamicObject(PlayerData[playerid][pSkateObj]);
	                PlayerData[playerid][pSkateObj] = CreateDynamicObject(19878,0,0,0,0,0,0, .playerid = playerid);
	                AttachDynamicObjectToPlayer(PlayerData[playerid][pSkateObj], playerid, -0.2,0,-0.9,0,0,90);
	        }
	    }
        if(oldkeys & KEY_HANDBRAKE)
		{
            ApplyAnimationEx(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(PlayerData[playerid][pSkateAct])
			{
                PlayerData[playerid][pSkateAct] = false;
                DestroyDynamicObject(PlayerData[playerid][pSkateObj]);
                RemovePlayerAttachedObject(playerid, 5);
                SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            }
        }
   	}
	if(newkeys & KEY_SPRINT)
	{
	    if(PlayerData[playerid][pLoopAnim])
	    {
	        PlayerData[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
		WorkoutUpdate(playerid);
	}

	if(newkeys & KEY_SECONDARY_ATTACK && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)) && vehicleFuel[GetPlayerVehicleID(playerid)] <= 0)
	{
	    RemovePlayerFromVehicle(playerid);
	}
	// LS ELEVATOR
	if(!IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_YES))
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
	        ShowElevatorDialog(playerid);
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Elevator called", 3500, 4);
				}
		    }
		}
	}

	// END LS ELEVATOR
 	if((time - PlayerData[playerid][pLastPress]) >= 400)
	{
		if(newkeys & KEY_YES)
		{
			new success;

            if(PlayerData[playerid][pInjured] == 0 && PlayerData[playerid][pTazedTime] == 0 && PlayerData[playerid][pCuffed] == 0 && PlayerData[playerid][pDueling] == INVALID_PLAYER_ID)
			{
			    if(PlayerData[playerid][pHurt] - 30 > 0)
			        return SendClientMessageEx(playerid, COLOR_GREY, "You are too hurt to operate/enter anything. Please wait %i seconds before trying again.", (PlayerData[playerid][pHurt] - 30));

				if((success = EnterCheck(playerid)) == 0)
					success = ExitCheck(playerid);

				if(!success)
				{
					DoorCheck(playerid);
					//GateCheck(playerid);
				}
				if (IsPlayerNearGymEquipment(playerid)) GymCheck(playerid);
			}

			PlayerData[playerid][pLastPress] = time; // Prevents spamming. Sometimes keys get messed up and register twice.
		}
		else if(newkeys & KEY_NO)
 		{
 		    if(!GateCheck(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		    {
		  		callcmd::engine(playerid, "\1");
			}
			PlayerData[playerid][pLastPress] = time; // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(PlayerData[playerid][pKicked]) return 0;
    IsPlayerSteppingInVehicle[playerid] = -1;

	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(PlayerData[playerid][pToggleVehCam] == 1)
		{
			new p = GetPlayerVehicleID(playerid);
			if(IsAMotorBike(p) || IsAHelicopter(p) || IsVehicleBajs(p) || IsAPlane(p) || IsABoat(p))
			{
				return 0;
			}
			else
			{
				pObj[playerid] = CreatePlayerObject(playerid,19300, 0.0000, -1282.9984, 10.1493, 0.0000, -1, -1, 100);
				AttachPlayerObjectToVehicle(playerid,pObj[playerid],p,-0.314999, -0.195000, 0.510000, 0.000000, 0.000000, 0.000000);
				AttachCameraToPlayerObject(playerid,pObj[playerid]);
				SetPVarInt(playerid,"used",1);
			}
		}

		new vehicleid = GetPlayerVehicleID(playerid);

	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_PIZZAMAN))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Pizzaman.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((rentcar[0] <= vehicleid <= rentcar[7] && Renting[playerid] == 0))
	    {
	        Dialog_Show(playerid, DIALOG_RENTCAR, DIALOG_STYLE_MSGBOX, "Rent a truck", "Are you sure you want to rent this truck for $1,000?", "Yes", "No");
		}
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[6]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Courier.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) && !PlayerHasJob(playerid, JOB_SWEEPER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Street Sweeper.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[4]) && !PlayerData[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not taking your drivers test.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && VehicleInfo[vehicleid][vRank] > PlayerData[playerid][pFactionRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you aren't a rank %i in your faction.", VehicleInfo[vehicleid][vRank]);
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vRank] > PlayerData[playerid][pGangRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you aren't a rank %i in your gang.", VehicleInfo[vehicleid][vRank]);
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vVIP] > 0 && PlayerData[playerid][pDonator] < VehicleInfo[vehicleid][vVIP])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a %s.", GetVIPRank(VehicleInfo[vehicleid][vVIP]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    /*if(VehicleInfo[vehicleid][vLocked])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You cannot operate this vehicle as it is locked.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }*/
	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE) && !IsADickVehicle(vehicleid))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[4])
		    {
		        PlayerData[playerid][pCP] = CHECKPOINT_TEST;
		        PlayerData[playerid][pTestVehicle] = vehicleid;
		        PlayerData[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
				SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerData[playerid][pTestCP]][0], drivingTestCPs[PlayerData[playerid][pTestCP]][1], drivingTestCPs[PlayerData[playerid][pTestCP]][2], 3.0);
				SendClientMessage(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
		    }
		    else
		    {

			    //SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
			    GameTextForPlayer(playerid, "~r~Engine Off~n~~w~/engine", 3000, 3);
			  //  SendClientMessage(playerid, COLOR_YELLOW,"(( Note: use /togglecam to turn-off the 1st-person-view. ))");
			    SendClientMessageEx(playerid, COLOR_AQUA, "Your vehicle's engine is turned %s, you can use /engine or Press 'N' to turn it off/on.", (GetVehicleParams(vehicleid, VEHICLE_ENGINE))?("on"):("off"));
			}
	    }

	    /*if(testVehicles[0] <= vehicleid <= testVehicles[4])
	    {
	        PlayerData[playerid][pCP] = CHECKPOINT_TEST;
	        PlayerData[playerid][pTestVehicle] = vehicleid;
	        PlayerData[playerid][pTestCP] = 0;

			SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerData[playerid][pTestCP]][0], drivingTestCPs[PlayerData[playerid][pTestCP]][1], drivingTestCPs[PlayerData[playerid][pTestCP]][2], 3.0);
			SendClientMessage(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
	    }*/

	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~r~Out of fuel", 5000, 3);
	    //	TogglePlayerControllable(playerid, 0);
	    }

	    if(!PlayerData[playerid][pCarLicense] && !PlayerData[playerid][pDrivingTest] && !IsVehicleBajs(vehicleid))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "You are operating this vehicle without a license. Watch out for the cops!");
	    }

	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_AQUA, "This vehicle has %s in unpaid tickets. You can pay your tickets using /paytickets.", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	    }

//	    if(!PlayerData[playerid][pToggleTextdraws] && VehicleHasEngine(vehicleid))
//	    {
//		    PlayerTextDrawShow(playerid, PlayerData[playerid][pText][1]);
//		    PlayerTextDrawShow(playerid, PlayerData[playerid][pText][2]);
//		}


		SetPlayerArmedWeapon(playerid, 0);

		/*if(isnull(vehicleStream[vehicleid]))
		{
	  		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Radio: Use {FFD700}/setradio{F7A763} to listen to a radio station.");
		}*/

		/*if(isnull(vehicleStream[vehicleid]))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Use {C8C8C8}/setradio{FFFFFF} to change the radio station in this vehicle.");
		}*/
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
		if (CarRadars[playerid] == 1)
		{
			PlayerTextDrawShow(playerid, _crTextTarget[playerid]);
			PlayerTextDrawShow(playerid, _crTextSpeed[playerid]);
			PlayerTextDrawShow(playerid, _crTickets[playerid]);
			DeletePVar(playerid, "_lastTicketWarning");
		}

		if(GetPVarInt(playerid,"used") == 1)
		{
			SetPVarInt(playerid,"used",0);
			SetCameraBehindPlayer(playerid);
			DestroyPlayerObject(playerid,pObj[playerid]);
		}
     	if(PlayerData[playerid][pDrivingTest])
	    {
         	PlayerData[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(PlayerData[playerid][pTestVehicle]);
         	SendClientMessage(playerid, COLOR_LIGHTRED, "* You have exited the vehicle and therefore failed the test.");
		}

		for(new i = 0; i < 38; i ++)
    	{
			PlayerTextDrawHide(playerid, SpeedoMeterTextDraw[playerid][i]);
		}

//	    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][1]);
//	    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][2]);
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
        if(PlayerData[playerid][pWeapons][4] > 0)	SetPlayerArmedWeapon(playerid,PlayerData[playerid][pWeapons][4]);
		else SetPlayerArmedWeapon(playerid,0);
		if((driverid != INVALID_VEHICLE_ID && PlayerData[driverid][pTaxiFare] > 0 && PlayerData[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(PlayerData[playerid][pCash] < PlayerData[driverid][pTaxiFare])
		    {
		        SendClientMessage(playerid, COLOR_GREY, "You can't afford to pay the fare. Therefore you can't ride this taxi.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			PlayerData[driverid][pTaxiPassenger] = playerid;
			PlayerData[driverid][pTaxiBill] = PlayerData[driverid][pTaxiFare];
			PlayerData[driverid][pTaxiTime] = 0;

			ShowActionBubble(playerid, "* %s enters %s's taxi cab.", GetRPName(playerid), GetRPName(driverid));
			SendClientMessageEx(playerid, COLOR_YELLOW, "You will be charged the fare price of {FF6347}$%i{33CCFF} every 15 seconds during your ride.", PlayerData[driverid][pTaxiFare]);
			SendClientMessageEx(driverid, COLOR_AQUA, "*%s has entered your taxi. You will earn {00AA00}$%i{33CCFF} every 15 seconds during the ride.", GetRPName(playerid), PlayerData[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 23, 25, 28..33:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerData[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && PlayerData[playerid][pStreamType] == MUSIC_NONE && !PlayerData[playerid][pToggleMusic])
  		{
  		    PlayerData[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SendClientMessage(playerid, COLOR_WHITE, "You are now tuned in to this vehicle's radio. /stopmusic to stop listening.");
	    }

	    PlayerData[playerid][pDedication] = 0;
	}
	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerData[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(PlayerData[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    PlayerData[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(PlayerData[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock now.");
					}
	                if(PlayerData[playerid][pCash] < clothingArray[PlayerData[playerid][pSelected]][clothingPrice])
	                {
	                    return SendClientMessage(playerid, COLOR_GREY, "You couldn't afford to purchase this item.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;
							ClothingInfo[playerid][i][cMatColor1] = 0;
							ClothingInfo[playerid][i][cMatColor2] = 0;
	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerData[playerid][pID], clothingArray[PlayerData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[PlayerData[playerid][pSelected]][clothingName], clothingArray[PlayerData[playerid][pSelected]][clothingPrice], businessid, i);
							return 1;
						}
					}

					SendClientMessage(playerid, COLOR_GREY, "You have no more clothing slots available. Therefore you can't buy this.");
	            }
	        }
	        else
	        {
	            if(PlayerData[playerid][pMenuType] == 0)
	                ShowClothingSelectionMenu(playerid);
	            else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = PlayerData[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;
 		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SendClientMessageEx(playerid, COLOR_GREY, "Changes saved.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
		case EDIT_COP_CLOTHING:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
                {
                    if(!ClothingInfo[playerid][i][cExists])
                    {
                        ClothingInfo[playerid][i][cModel] = modelid;
                        ClothingInfo[playerid][i][cBone] = boneid;
                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
                        ClothingInfo[playerid][i][cRotX] = fRotX;
                        ClothingInfo[playerid][i][cRotY] = fRotY;
                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerData[playerid][pID], copClothing[PlayerData[playerid][pSelected]][cName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerAttachCopClothing", "isi", playerid, copClothing[PlayerData[playerid][pSelected]][cName], i);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "You have no more clothing slots available. Therefore you can't attach this.");
	        }
	        else
	        {
	            ShowCopClothingMenu(playerid);
			}
		}
	}

    return 1;
}
Dialog:FurnEditConfirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: EditDynamicObjectEx(playerid, EDIT_TYPE_FURNITURE, Furniture[GetPVarInt(playerid, "FurnID")][fObject], GetPVarInt(playerid, "FurnID"));
			case 1: ListTexture(playerid);
			case 2: PreviewFurniture(playerid, Furniture[GetPVarInt(playerid, "FurnID")][fObject]);
			case 3: DeleteFurniture(GetPVarInt(playerid, "FurnID"));
		}
	}
	return 1;
}

stock  GetPlayerTurfZone(playerid)
{
	for(new i = 0; i < MAX_TURFS; i++) if(IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea])) return i;
	return -1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    if(areaid == TurfInfo[i][tArea])
	    {
			if(PlayerData[playerid][pGang] != -1 || IsLawEnforcement(playerid))
			{
		        if(TurfInfo[i][tTime])
		        {
		     	    if(GetPlayerTurfZone(TurfInfo[i][tCapturer]) == i)
		     	    {
		     	        SetPlayerMarkerForPlayer(playerid, TurfInfo[i][tCapturer], (GangInfo[PlayerData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
		     	    }
		        }
			}
	    }
	}
	return 1;
}

/*public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    if(InsideMainMenu{playerid}) return 1;
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    if(areaid == TurfInfo[i][tAreaId])
	    {
			if(PlayerData[playerid][pFMember] != INVALID_FAMILY_ID || IsACop(playerid))
			{
		        if(TurfInfo[i][tTimeToClaim])
		        {
				    if(GetPlayerTurfZone(TurfInfo[i][tCapturer]) == i)
			 	    {
			 	        if(IsACop(TurfInfo[i][tCapturer]))
			 	        {
				 	        if(PlayerData[TurfInfo[i][tCapturer]][pDuty])
				 	        {
				 	            SetPlayerMarkerForPlayer(playerid, TurfInfo[i][tCapturer], arrGroupData[PlayerData[TurfInfo[i][tCapturer]][pMember]][g_hDutyColour] * 256 + 0);
				 	        }
				 	        else
				 	        {
				 	            SetPlayerMarkerForPlayer(playerid, TurfInfo[i][tCapturer], 0xFFFFFF00);
				 	        }
						}
						else
						{
						    SetPlayerMarkerForPlayer(playerid, TurfInfo[i][tCapturer], 0xFFFFFF00);
						}
			 	    }
				}
			}
	    }
	}
	return 1;
}*/


public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{

	if (response == EDIT_RESPONSE_CANCEL)
	{
	    switch (PlayerData[playerid][pEdit])
	    {
	        case EDIT_TYPE_PREVIEW:
	        {
	            DestroyDynamicObject(gPreviewFurniture[playerid]);
	            gPreviewFurniture[playerid] = INVALID_OBJECT_ID;
			}
	        case EDIT_TYPE_FURNITURE:
	        {
	            UpdateFurniture(PlayerData[playerid][pEditID]);
	        }
   			case EDIT_TYPE_PAYPHONE:
			{
			    UpdatePayphone(PlayerData[playerid][pEditID]);
			}
 	        case EDIT_TYPE_ATM:
	        {
	            UpdateATM(PlayerData[playerid][pEditID]);
			}
		}
	    PlayerData[playerid][pEdit] = EDIT_TYPE_NONE;
	}
	else if (response == EDIT_RESPONSE_FINAL)
	{
	    switch (PlayerData[playerid][pEdit])
	    {
	        case EDIT_TYPE_PREVIEW: // Furniture preview
	        {
	            //if (!IsPointInRangeOfPoint(20.0, x, y, z, HouseInfo[PlayerData[playerid][pHouse]][hSpawn][0], HouseInfo[PlayerData[playerid][pHouse]][hSpawn][1], HouseInfo[PlayerData[playerid][pHouse]][hSpawn][2]) && !IsPointInRangeOfPoint(100.0, x, y, z, HouseInfo[PlayerData[playerid][pHouse]][hInt][0], HouseInfo[PlayerData[playerid][pHouse]][hInt][1], HouseInfo[PlayerData[playerid][pHouse]][hInt][2]))

	            if (GetInsideHouse(playerid) != PlayerData[playerid][pHouse] && GetFurnitureHouse(playerid) != PlayerData[playerid][pHouse])
				{
				    SendErrorMessage(playerid, "The object is out of range from your house.");
				}
				else if (!PlayerCanAfford(playerid, g_FurnitureList[PlayerData[playerid][pPreviewIndex]][e_ModelPrice]))
				{
				    SendErrorMessage(playerid, "You don't have enough money.");
				}
				else
				{
					new id = AddFurniture(PlayerData[playerid][pHouse], g_FurnitureList[PlayerData[playerid][pPreviewIndex]][e_ModelID], x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

				    if (id == -1)
				    {
				        SendErrorMessage(playerid, "There are no available furniture slots.");
				        SendAdminMessage(COLOR_RED, "Admin: %s has failed to add furniture! \"MAX_FURNITURE\" needs to be adjusted.", GetRPName(playerid));
					}
					else
					{
					    GivePlayerCash(playerid, -g_FurnitureList[PlayerData[playerid][pPreviewIndex]][e_ModelPrice]);

						ShowFurnitureCategories(playerid);
					    SendInfoMessage(playerid, "Furniture purchased for {33CC33}%s{FFFFFF}. Use /edit to manage your furniture.", FormatNumber(g_FurnitureList[PlayerData[playerid][pPreviewIndex]][e_ModelPrice]));
					}
				}
				DestroyDynamicObject(gPreviewFurniture[playerid]);
				gPreviewFurniture[playerid] = INVALID_OBJECT_ID;
	        }
	        case EDIT_TYPE_FURNITURE: // House furniture
	        {
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][0] = x;
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][1] = y;
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][2] = z;
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][3] = rx;
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][4] = ry;
	            Furniture[PlayerData[playerid][pEditID]][fSpawn][5] = rz;

	            UpdateFurniture(PlayerData[playerid][pEditID]);
	            SaveFurniture(PlayerData[playerid][pEditID]);

	            SendInfoMessage(playerid, "You have edited furniture ID: %i.", PlayerData[playerid][pEditID]);
	        }
	        case EDIT_TYPE_PAYPHONE: // Payphones
			{
	            Payphones[PlayerData[playerid][pEditID]][phX] = x;
	            Payphones[PlayerData[playerid][pEditID]][phY] = y;
	            Payphones[PlayerData[playerid][pEditID]][phZ] = z;
	            Payphones[PlayerData[playerid][pEditID]][phA] = rz;

	            UpdatePayphone(PlayerData[playerid][pEditID]);
	            SavePayphone(PlayerData[playerid][pEditID]);

	            SendInfoMessage(playerid, "You have edited payphone ID: %i.", PlayerData[playerid][pEditID]);
	        }
	        case EDIT_TYPE_ATM: // ATM machines
	        {
	            ATM[PlayerData[playerid][pEditID]][atmSpawn][0] = x;
	            ATM[PlayerData[playerid][pEditID]][atmSpawn][1] = y;
	            ATM[PlayerData[playerid][pEditID]][atmSpawn][2] = z;
	            ATM[PlayerData[playerid][pEditID]][atmSpawn][3] = rz;

	            UpdateATM(PlayerData[playerid][pEditID]);
	            SaveATM(PlayerData[playerid][pEditID]);

	            SendInfoMessage(playerid, "You have edited ATM machine ID: %i.", PlayerData[playerid][pEditID]);
	        }
	    }
	    PlayerData[playerid][pEdit] = EDIT_TYPE_NONE;
	    PlayerData[playerid][pEditID] = -1;
	}
	switch(PlayerData[playerid][pEditType])
	{
		case EDIT_LAND_OBJECT_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerData[playerid][pEditObject]);
				PlayerData[playerid][pEditObject] = INVALID_OBJECT_ID;
				PlayerData[playerid][pEditType] = 0;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new landid = PlayerData[playerid][pObjectLand];

					if(landid >= 0 && HasLandPerms(playerid, landid))
					{
					    if(PlayerData[playerid][pCash] < landArray[PlayerData[playerid][pSelected]][fPrice])
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You couldn't afford to purchase this item.");
		                }
		                if(!IsPointInLand(landid, x, y))
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "The object has exceeded the boundaries for your land.");
						}

					    new
					        string[16];

					    GivePlayerCash(playerid, -landArray[PlayerData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '0.0', '0.0', '0.0', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], landArray[PlayerData[playerid][pSelected]][fModel], landArray[PlayerData[playerid][pSelected]][fName], landArray[PlayerData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);

						format(string, sizeof(string), "~r~-$%i", landArray[PlayerData[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(landArray[PlayerData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							if(IsGateModel(landArray[PlayerData[playerid][pSelected]][fModel]))
							{
								SendClientMessage(playerid, COLOR_WHITE, "You can use /gate to open and close your gate. To change the destination coordinates, use /land and choose 'Edit object'.");
							}
						    else
							{
								SendClientMessage(playerid, COLOR_WHITE, "You can use /door to control your door and /lock to unlock or lock it.");
						    }
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        if(PlayerData[playerid][pMenuType] == 0)
						ShowLandObjects(playerid, MODEL_SELECTION_LANDOBJECTS);
					else
						ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
				}
			}
		}
		case EDIT_LAND_OBJECT:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerData[playerid][pObjectLand], x, y))
        			{
           				SendClientMessage(playerid, COLOR_GREY, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SendClientMessage(playerid, COLOR_GREY, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerData[playerid][pObjectLand]][lLabels]);
		        PlayerData[playerid][pEditType] = 0;
			}
		}
		case EDIT_LAND_GATE_MOVE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerData[playerid][pObjectLand], x, y))
        			{
           				SendClientMessage(playerid, COLOR_GREY, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET move_x = '%f', move_y = '%f', move_z = '%f', move_rx = '%f', move_ry = '%f', move_rz = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SendClientMessage(playerid, COLOR_GREY, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerData[playerid][pObjectLand]][lLabels]);
		        PlayerData[playerid][pEditType] = 0;
			}
		}
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
		}

	}
 	return 1;
}
Dialog:DealerList(playerid, response, listitem, inputtext[])
{
    new
		company = PlayerData[playerid][pCompany];

	if (!IsValidCompanyID(company))
	{
        return 0;
	}
	if (response)
	{
	    if (listitem == 0)
	    {
	        if (!IsVehicleSpawnSetup(company))
			{
		    	return SendErrorMessage(playerid, "The vehicle spawn point is not setup.");
			}
			else
			{
                Dialog_Show(playerid, DealerAdd, DIALOG_STYLE_INPUT, "{FFFFFF}Add Vehicle", "Please enter the model ID or name of the vehicle to add:", "Submit", "Back");
			}
	  	}
		else
		{
		    PlayerData[playerid][pSelected] = gListedItems[playerid][--listitem];
		    Dialog_Show(playerid, DealerEdit, DIALOG_STYLE_LIST, "{FFFFFF}Edit vehicle", "Price: %s\nDelete Vehicle", "Select", "Back", FormatNumber(DealershipCars[PlayerData[playerid][pSelected]][dcPrice]));
		}
	}
	return 1;
}

Dialog:DealerEdit(playerid, response, listitem, inputtext[])
{
    new
		company = PlayerData[playerid][pCompany];

	if (!IsValidCompanyID(company))
	{
        return 0;
	}
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            Dialog_Show(playerid, DealerPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "The current price for this vehicle is %s.\n\nPlease input the new price for this vehicle below.", "Submit", "Cancel", FormatNumber(DealershipCars[PlayerData[playerid][pSelected]][dcPrice]));
	        }
	        case 1:
	        {
	            new
	                vehicle = PlayerData[playerid][pSelected];

				format(queryBuffer, sizeof(queryBuffer), "DELETE FROM rp_dealercars WHERE ID = %i", DealershipCars[vehicle][dcID]);
				mysql_tquery(connectionID, queryBuffer);

                DealershipCars[vehicle][dcExists] = 0;
                SendInfoMessage(playerid, "You have deleted a vehicle: %s.", GetVehicleModelName(DealershipCars[vehicle][dcModel]));

				ShowDealershipEditMenu(playerid, company);
    		}
	    }
	}
	else
	{
	    ShowDealershipEditMenu(playerid, company);
	}
	return 1;
}

Dialog:DealerPrice(playerid, response, listitem, inputtext[])
{
    new
		company = PlayerData[playerid][pCompany];

	if (!IsValidCompanyID(company))
	{
        return 0;
	}
	if (response)
	{
	    new vehicle = PlayerData[playerid][pSelected], amount;

	    if (sscanf(inputtext, "i", amount))
		{
		    return Dialog_Show(playerid, DealerPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "The current price for this vehicle is %s.\n\nPlease input the new price for this vehicle below.", "Submit", "Cancel", FormatNumber(DealershipCars[vehicle][dcPrice]));
		}
		else if (amount < 0)
		{
		    return Dialog_Show(playerid, DealerPrice, DIALOG_STYLE_INPUT, "{FFFFFF}Vehicle price", "The current price for this vehicle is %s.\n\nPlease input the new price for this vehicle below.", "Submit", "Cancel", FormatNumber(DealershipCars[vehicle][dcPrice]));
		}
		else
		{
		    DealershipCars[vehicle][dcPrice] = amount;
			SaveDealershipCar(vehicle);

			SendInfoMessage(playerid, "You have set the price to %s for vehicle: %s.", FormatNumber(amount), GetVehicleModelName(DealershipCars[vehicle][dcModel]));
			ShowDealershipEditMenu(playerid, company);
		}
	}
	return 1;
}
GetFirstDealershipCar(company)
{
	for (new i = 0; i < MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[i][dcCompany] == BusinessInfo[company][bID] && DealershipCars[i][dcModel] > 0)
		{
			return i;
		}
	}
	return -1;
}
ShowDealershipPreviewMenu(playerid, company)
{
	if (IsValidCompanyID(company) && BusinessInfo[company][bType] == BUSINESS_DEALERSHIP)
	{
	    new index = GetFirstDealershipCar(company);

	    if (index == -1)
		{
			return 0;
	    }
	    else
	    {
	        PlayerData[playerid][pDealershipMenu] = company;
	        PlayerData[playerid][pDealershipIndex] = index;
			ShowVehicleSelectionMenu(playerid, MODEL_SELECTION_VEHICLES);
	    }
	}
	return 1;
}
Dialog:PhoneMusic(playerid, response, listitem, inputtext[])
{
	if(response)
	{

	}
	return 1;
}
Dialog:PhoneMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
			}
			case 1:
			{
				Dialog_Show(playerid, PhoneSMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
			}
			case 2:
			{
				ListContacts(playerid);
			}
			case 3:
			{
				Dialog_Show(playerid, PhoneMusic, DIALOG_STYLE_LIST, "{6688ff}Phone Music", "Default Ringtone\nMusical Ringtone 1\nMusical Ringtone 2\nMusical Ringtone 3\nMusical Ringtone 4\nMusical Ringtone 5\nMusical Ringtone 6\nMusical Ringtone 7", "Select", "Cancel");
			}
			case 4:
			{
				SendErrorMessage(playerid, "This feature is still being developed.");
			}
			case 5:
			{
				Dialog_Show(playerid, PhoneSettings, DIALOG_STYLE_LIST, "{6688FF}Phone Settings", "Power %s\nSound Off", "Select", "Cancel", (PlayerData[playerid][pTogglePhone]) ? ("Off") : ("On"));
			}
		}
	}
	return 1;
}
Dialog:ContactNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new number;

		if (sscanf(inputtext, "i", number))
		{
			return Dialog_Show(playerid, ContactNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", "Please input the number for the contact '%s':", "Submit", "Cancel", gTargetName[playerid]);
		}
		else if (number < 1)
		{
			return Dialog_Show(playerid, ContactNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", "You have entered an invalid number.\n\nPlease input the number for the contact '%s':", "Submit", "Cancel", gTargetName[playerid]);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO `rp_contacts` (Phone, Contact, Number) VALUES(%i, '%s', %i)", PlayerData[playerid][pPhone], mysql_escaped(gTargetName[playerid]), number);
			mysql_tquery(connectionID, queryBuffer);

			ListContacts(playerid);
			SendInfoMessage(playerid, "You have added a contact: %s (%i).", gTargetName[playerid], number);
		}
	}
	return 1;
}

Dialog:AddContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
		{
			return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
		}
		else if (strlen(inputtext) > 24)
		{
			return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "The contact name must be below 24 characters.\n\nPlease input the name of the contact to add below:", "Submit", "Cancel");
		}
		else
		{
			strcpy(gTargetName[playerid], inputtext, MAX_PLAYER_NAME);

			Dialog_Show(playerid, ContactNumber, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", "Please input the number for the contact '%s':", "Submit", "Cancel", gTargetName[playerid]);
		}
	}
	else
	{
		ListContacts(playerid);
	}
	return 1;
}

Dialog:ContactOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT Contact, Number FROM `rp_contacts` WHERE ID = %i", PlayerData[playerid][pSelected]);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "i", playerid);
			}
			case 1:
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT Contact, Number FROM `rp_contacts` WHERE ID = %i", PlayerData[playerid][pSelected]);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerTextContact", "i", playerid);
			}
			case 2:
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM `rp_contacts` WHERE ID = %i", PlayerData[playerid][pSelected]);
				mysql_tquery(connectionID, queryBuffer);

				ListContacts(playerid);
				SendInfoMessage(playerid, "You have deleted the selected contact.");
			}
		}
	}
	else
	{
		ListContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (listitem == 0)
		{
			Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
		}
		else
		{
			PlayerData[playerid][pSelected] = gListedItems[playerid][--listitem];

			Dialog_Show(playerid, ContactOptions, DIALOG_STYLE_LIST, "{FFFFFF}Contact options", "Call contact\nText Message\nDelete contact", "Select", "Cancel");
		}
	}
	return 1;
}

Dialog:PhoneSettings(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (PlayerData[playerid][pTogglePhone] == 0)
					PlayerData[playerid][pTogglePhone] = 1;
				else
					PlayerData[playerid][pTogglePhone] = 0;
			}
		}
	}
	return 1;
}

Dialog:PhoneSMS(playerid, response, listitem, inputtext[])
{
	new number;

	if (response)
	{
		if (sscanf(inputtext, "i", number))
		{
			return Dialog_Show(playerid, PhoneSMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
		}
		else if (PlayerData[playerid][pPhone] == number)
		{
			return Dialog_Show(playerid, PhoneSMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "You can't text your own number.\n\nPlease specify the number you would like to SMS:", "Call", "Cancel");
		}
		else if (number < 1)
		{
			return Dialog_Show(playerid, PhoneSMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
		}
		else
		{
			new strHead[64];
			format(strHead, sizeof(strHead), "{6688FF}SMS to %i", number);

			PlayerData[playerid][pPhoneSMS] = number;

			Dialog_Show(playerid, PhoneSMStext, DIALOG_STYLE_INPUT, strHead, "Please type your message:", "Send", "Cancel");
		}
	}
	return 1;
}

Dialog:PhoneSMStext(playerid, response, listitem, inputtext[])
{
	new text[512];
	new number = PlayerData[playerid][pPhoneSMS];
	new strHead[64];
	if (response)
	{
		format(strHead, sizeof(strHead), "{6688FF}SMS to %i", number);

		if (sscanf(inputtext, "s[512]", text))
		{
			Dialog_Show(playerid, PhoneSMStext, DIALOG_STYLE_INPUT, strHead, "Please type your message:", "Send", "Cancel");
		}
		else
		{
			SendTextMessage(playerid, number, text);
		}
	}
	return 1;
}

Dialog:PhoneCall(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new number;

		if (sscanf(inputtext, "i", number))
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
		}
		else if (PlayerData[playerid][pCalling] > 0)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You are already on a call. Use {6688FF}/hangup{FFFFFF} to end it.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (PlayerData[playerid][pPhone] == number)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't dial your own number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (number < 1)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You have entered an invalid phone number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else
		{
			CallNumber(playerid, number);
		}
	}
	return 1;
}
Dialog:PhoneCallPP(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new number, payphone = GetClosestPayphone(playerid);

		if (sscanf(inputtext, "i", number))
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
		}
		else if (PlayerData[playerid][pCalling] > 0)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You are already on a call. Use {6688FF}/hangup{FFFFFF} to end it.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (PlayerData[playerid][pPhone] == number)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't dial your own number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (number < 1)
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You have entered an invalid phone number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (IsValidPayphoneID(payphone) && number == Payphones[payphone][phNumber])
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't call this number as it belongs to this payphone.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else if (IsValidPayphoneID(payphone) && (Payphones[payphone][phOccupied] || Payphones[payphone][phCaller] != INVALID_PLAYER_ID))
		{
			return Dialog_Show(playerid, PhoneCall, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "This payphone is already in use.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
		}
		else
		{
			CallNumber(playerid, number, payphone);
		}
	}
	return 1;
}


Dialog:SearchCitizem(playerid, response, listitem, inputtext[]) {
	if(response) {
        mdc_SearchCitizen(playerid, inputtext);
	} else {
	    SelectTextDraw(playerid, -1);
	}
	return 1;
}
Dialog:SearchPhoneNumber(playerid, response, listitem, inputtext[]) {
	if(response) {
	    if(!IsNumeric(inputtext)) {
	        SendClientMessage(playerid, COLOR_GREY, "You have to enter a valid numeric phone number.");
	        Dialog_Show(playerid, SearchPhoneNumber, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	    } else {
	        new query[130];
			mysql_format(connectionID, query, sizeof(query), "SELECT `username`, `skin`, `age`, `gender`, `carlicense`, `gunlicense`, `job` FROM `users` WHERE `phone` = %i;", strval(inputtext));
			mysql_tquery(connectionID, query, "mdc_SearchPhoneNumber", "ii", playerid, strval(inputtext));
	    }
	} else {
	    SelectTextDraw(playerid, -1);
	}
	return 1;
}
Dialog:DIALOG_MDC_SEARCH_SERIAL(playerid, response, listitem, inputtext[]) {
    if(response) {
        if(!IsNumeric(inputtext)) {
            SendClientMessage(playerid, COLOR_GREY, "You have to enter a numeric weapon serial number.");
            Dialog_Show(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons serial number below:", "Search", "Cancel");
        } else {
	    	new query[140];
			mysql_format(connectionID, query, sizeof(query), "SELECT `username`, `skin`, `age`, `sex`, `carlicense`, `gunlicense`, `job`, `phone` FROM `users` WHERE `WepSerial` = %d;", strval(inputtext));
			mysql_tquery(connectionID, query, "mdc_SearchSerial", "i", playerid);
		}
	} else {
	    SelectTextDraw(playerid, -1);
	}
	return 1;
}
Dialog:DIALOG_MDC_SEARCH_PLATE(playerid, response, listitem, inputtext[]) {
	if(response) {
	    new query[140];
	    mysql_format(connectionID, query, sizeof(query), "SELECT `modelid`, `color1`, `color2`, `owner` FROM `vehicles` WHERE `plate` = '%e';", inputtext);
	    mysql_tquery(connectionID, query, "mdc_SearchLicensePlate", "is", playerid, inputtext);
	} else {
	    SelectTextDraw(playerid, -1);
	}
	return 1;
}

Dialog:DIALOG_RELEASECAR(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem];
		if(IsValidVehicle(carid))
		{
		    if(VehicleInfo[carid][carImpounded] == 1)
		    {
		        if (PlayerData[playerid][pCash] < VehicleInfo[carid][carImpoundPrice])
		            return SendErrorMessage(playerid, "You can't afford to release this vehicle.");

	            GivePlayerCash(playerid, -VehicleInfo[carid][carImpoundPrice]);

	            VehicleInfo[carid][vPosX] = 1182.026;
	            VehicleInfo[carid][vPosY] = -1794.379;
	            VehicleInfo[carid][vPosZ] = 13.103;
	            VehicleInfo[carid][vPosA] = 0.0;

				SetVehiclePos(carid, VehicleInfo[carid][vPosX], VehicleInfo[carid][vPosY], VehicleInfo[carid][vPosZ]);
				SetVehicleZAngle(carid, VehicleInfo[carid][vPosA]);

				SendClientMessageEx(playerid, COLOR_GREY, "You have released your %s for %s.", vehicleNames[VehicleInfo[carid][vModel] - 400], FormatNumber(VehicleInfo[carid][carImpoundPrice]));

	            VehicleInfo[carid][carImpounded] = 0;
	            VehicleInfo[carid][carImpoundPrice] = 0;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `vehicles` SET `carimpounded` = 0 WHERE id = %i", VehicleInfo[carid][vID]);
				mysql_tquery(connectionID, queryBuffer);
	            ReloadVehicle(carid);
		    }
		}
	}
	return 1;
}
Dialog:DIALOG_HELP(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
				SendClientMessage(playerid, COLOR_SERVERDEF, "Account: {C8C8C8}/stats, /b, /g, /me, /do, /(o)oc, /(s)hout, /(l)ow, /(w)hisper, /(n)ewbie.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "Account: {C8C8C8}/pay, /id, /time, /report, /upgrade, /charity, /stopmusic, /joinevent, /quitevent.");
			}
			case 1:
			{
				callcmd::animhelp(playerid);
			}
			case 2:
			{
				SendClientMessage(playerid, COLOR_SERVERDEF, "Business: {C8C8C8}/buybiz /lock /bwithdraw /bdeposit /entryfee /sellbiz /sellmybiz /bizinfo.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "Business: {C8C8C8}/bdepositmats /bwithdrawmats.");
			}
			case 3:
			{
				callcmd::bankhelp(playerid);
			}
			case 4:
			{
				callcmd::viphelp(playerid);
			}
			case 5:
			{
				if(PlayerData[playerid][pFaction] == -1)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
				}

				SendClientMessage(playerid, COLOR_SERVERDEF, "Faction: {C8C8C8}/fc /d /(r)adio /div /faction /division /locker /showbadge /(m)egaphone");

				switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
				{
				    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
				    {
				        SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /gate /door /cell /tazer /cuff /uncuff /drag /detain /charge /arrest");
				        SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /wanted /frisk /take /ticket /gov /ram /deploy /undeploy /undeployall /backup");
				        SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /mdc /clearwanted /siren /badge /vticket /vfrisk /vtake /seizeplant /mir /fpark");

						if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_FEDERAL)
							SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /listcallers /trackcall /cells /passport /callsign /bug /listbugs /tog bugged");
						else
						    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /listcallers /trackcall /cells /claim /callsign /fpark");
					}
					case FACTION_MEDIC:
					{
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /heal /drag /stretcher /deliverpt /getpt /listpt /injuries /deploy /undeploy /undeployall");
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /badge /gov /backup /listcallers /trackcall /callsign /fpark");
					}
					case FACTION_NEWS:
					{
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /news /live /endlive /liveban /badge /addeposit /adwithdraw /fpark");
					}
					case FACTION_GOVERNMENT:
					{
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /gov /settax /factionpay /tazer /cuff /uncuff /detain /taxdeposit /taxwithdraw /fpark");
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /backup /badge");
					}
					case FACTION_HITMAN:
					{
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /contracts /takehit /profile /passport /plantbomb /pickupbomb /detonate");
					    SendClientMessage(playerid, COLOR_SERVERDEF, "Faction:{C8C8C8} /hfind, /noknife, /hm /fpark");
					}
				}
			}
			case 6:
			{
				SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/dice, /flipcoin, /accent, /helpers, /helpme, /accept, /activity, /skill, /quitjob.");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/give, /sell, /toggle, /cancelcp, /afk, /(ad)vertise, /buy, /refuel, /phone, /sms.");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/clothing, /locate, /frisk, /contract, /number, /boombox, /switchspeedo, /stuck.");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/shakehand, /dropgun, /grabgun, /tokenshop, /usecigar, /usedrug, /showid.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/(inv)entory, /guninv, /changename, /drop, /eject, /dicebet, /gangs, /factions.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/calculate, /serverstats, /resetupgrades, /turfs, /lands, /watch, /gps, /fixvw.");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/myupgrades, /unmute, /breakin, /achievements, /buyinsurance, /tie, /untie.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/househelp, /garagehelp, /bizhelp, /jobhelp, /animhelp, /vehiclehelp, /donatorhelp.");
				SendClientMessage(playerid, COLOR_SERVERDEF, "General: {C8C8C8}/bankhelp, /factionhelp, /ganghelp, /landhelp, /breakcuffs");
			}
			case 7:
			{
				if(PlayerData[playerid][pGang] == -1)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a gang member.");
				}

				SendClientMessage(playerid, COLOR_SERVERDEF, "Gang:{C8C8C8} /f /gang /gstash /gbackup /bandana /capture /claim /reclaim /turfinfo /points");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "Gang:{C8C8C8} /gbuyvehicle /gpark /gfindcar /grespawncars /gsellcar /gunmod /lock, /endalliance, /gspray");
			    SendClientMessage(playerid, COLOR_SERVERDEF, "Crew:{C8C8C8} /managecrew /crew");
			}
			case 8:
			{
				callcmd::garagehelp(playerid);
			}
			case 9:
			{
			    SendClientMessage(playerid, COLOR_SERVERDEF, "House:{C8C8C8} /buyhouse /lock /stash /furniture /upgradehouse /sellhouse /sellmyhouse");
				SendClientMessage(playerid, COLOR_SERVERDEF, "House:{C8C8C8} /door /renthouse /unrent /setrent /tenants /evict /evictall /houseinfo");
				SendClientMessage(playerid, COLOR_SERVERDEF, "House: {C8C8C8}/houseinvite /hlights /installhousealarm (/iha), /uninstallhousealarm (/uha)");
			}
			case 10:
			{
				switch(PlayerData[playerid][pJob])
				{
					//case JOB_NONE: SendClientMessage(playerid, COLOR_SERVERDEF, "You have no job and therefore no job commands to view.");
					case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /getpizza, /cancelcp.");
					case JOB_COURIER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /load, /deliver, /cancelcp.");
					case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /fish, /myfish, /sellfish.");
					case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /smugglemats, /sellgun.");
					case JOB_MECHANIC: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /buycomps, /repair, /refill, /nos, /hyd, /takecall.");
					case JOB_MINER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /mine, /cancelcp.");
					case JOB_SWEEPER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /startsweeping, /stopsweeping.");
					case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /setfare, /takecall.");
			        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
			        case JOB_LAWYER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /defend, /free, /wanted.");
			        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8}* /find.");
			        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /garbage");
			        case JOB_FARMER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8}* /harvest");
			 	}

			 	if(PlayerData[playerid][pSecondJob] != JOB_NONE)
			 	{
			 	    switch(PlayerData[playerid][pSecondJob])
					{
						//case JOB_NONE: SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
						case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /getpizza.");
						case JOB_COURIER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /load, /deliver.");
						case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /fish, /myfish, /sellfish.");
						case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /smugglemats, /sellgun.");
						case JOB_MECHANIC: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /buycomps, /repair, /refill, /nos, /hyd.");
						case JOB_MINER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /mine.");
						case JOB_SWEEPER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /startsweeping, /stopsweeping.");
						case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /setfare.");
				        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
				        case JOB_LAWYER: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /defend, /free, /wanted.");
				        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /find.");
				        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_SERVERDEF, "Job:{C8C8C8} /garbage");
				 	}
				}
			}
			case 11:
			{
				callcmd::landhelp(playerid);
			}
			case 12:
			{
				callcmd::planthelp(playerid);
			}
			case 13:
			{
			    callcmd::vehiclehelp(playerid);
			}
		}
	}
	return 1;
}

Dialog:DIALOG_NEWUPGRADEONE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(PlayerData[playerid][pUpgradePoints] < 1)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You have no upgrade points available which you can spend.");
		}
        switch(listitem)
        {
			case 0:
			{
			    if(PlayerData[playerid][pInventoryUpgrade] >= 5)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your inventory skill is already upgraded to its maximum level of 5.");
				}
				PlayerData[playerid][pInventoryUpgrade]++;
				PlayerData[playerid][pUpgradePoints]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET inventoryupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pInventoryUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your inventory skill to %i/5. Your inventory capacity was increased.", PlayerData[playerid][pInventoryUpgrade]);
			}
			case 1:
			{
			    if(PlayerData[playerid][pAddictUpgrade] >= 3)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your addict skill is already upgraded to its maximum level of 3.");
				}

				PlayerData[playerid][pAddictUpgrade]++;
				PlayerData[playerid][pUpgradePoints]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET addictupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pAddictUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", PlayerData[playerid][pAddictUpgrade], PlayerData[playerid][pAddictUpgrade] * 5.0);
			}
			case 2:
			{
			    if(PlayerData[playerid][pTraderUpgrade] >= 3)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your trader skill is already upgraded to its maximum level of 3.");
				}

				PlayerData[playerid][pTraderUpgrade]++;
				PlayerData[playerid][pUpgradePoints]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET traderupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pTraderUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your trader skill to level %i/3. You now pay %i percent less for items in shops.", PlayerData[playerid][pTraderUpgrade], PlayerData[playerid][pTraderUpgrade] * 10);

			}
			case 3:
			{
			    if(PlayerData[playerid][pAssetUpgrade] >= 4)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your asset skill is already upgraded to its maximum level of 4.");
				}

				PlayerData[playerid][pAssetUpgrade]++;
				PlayerData[playerid][pUpgradePoints]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET assetupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pAssetUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", PlayerData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));

			}
			case 4:
			{
			    if(PlayerData[playerid][pLaborUpgrade] >= 5)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your labor skill is already upgraded to its maximum level of 5.");
				}

				PlayerData[playerid][pLaborUpgrade]++;
				PlayerData[playerid][pUpgradePoints]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET laborupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pLaborUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your labor skill to level %i/5. You now earn %i percent more extra cash when you work.", PlayerData[playerid][pLaborUpgrade], PlayerData[playerid][pLaborUpgrade] * 2);

			}
			case 5:
			{
			    if(PlayerData[playerid][pSpawnHealth] >= 100)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your spawn health is at maximum (100).");
			    }

			    PlayerData[playerid][pSpawnHealth] += 5.0;
			    PlayerData[playerid][pUpgradePoints]--;

			    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", PlayerData[playerid][pSpawnHealth]);

			}
			case 6:
			{
			    if(PlayerData[playerid][pSpawnArmor] > 100 && PlayerData[playerid][pDonator] == 0)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (100).");
			    }
			    else if(PlayerData[playerid][pSpawnArmor] > 125 && PlayerData[playerid][pDonator] <= 1)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (125).");
			    }
			    else if(PlayerData[playerid][pSpawnArmor] > 150 && PlayerData[playerid][pDonator] > 0)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (150).");
			    }

			    PlayerData[playerid][pSpawnArmor] += 2.0;
			    PlayerData[playerid][pUpgradePoints]--;

			    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", PlayerData[playerid][pSpawnArmor]);

			}
		}
		if(PlayerData[playerid][pInventoryUpgrade] == 5 || PlayerData[playerid][pAddictUpgrade] == 3 || PlayerData[playerid][pTraderUpgrade] == 3 || PlayerData[playerid][pAssetUpgrade] == 4 || PlayerData[playerid][pLaborUpgrade] == 5 || PlayerData[playerid][pSpawnHealth] == 100 || PlayerData[playerid][pSpawnArmor] == 100)
		{
		    AwardAchievement(playerid, "Benefits");
		}
	}
	return 1;
}

Dialog:DIALOG_SHOW_TRUCKJOBS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        /*    LEGAL TRUCK JOBS    */
        if(listitem == 0)
        {
            PlayerTruckJob[playerid][pTDActive] = 1;
            PlayerTruckJob[playerid][pTDLegal] = 1;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pLegalTruckJob1];
            PlayerTruckJob[playerid][pTDDestDepot] = LegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
        if(listitem == 1)
        {
            PlayerTruckJob[playerid][pTDActive] = 1;
            PlayerTruckJob[playerid][pTDLegal] = 1;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pLegalTruckJob2];
            PlayerTruckJob[playerid][pTDDestDepot] = LegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
        if(listitem == 2)
        {
            PlayerTruckJob[playerid][pTDActive] = 1;
            PlayerTruckJob[playerid][pTDLegal] = 1;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pLegalTruckJob3];
            PlayerTruckJob[playerid][pTDDestDepot] = LegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
        /*    Illegal Truck Jobs     */
        if(listitem == 3)
        {
            PlayerTruckJob[playerid][pTDActive] = 1;
            PlayerTruckJob[playerid][pTDLegal] = 0;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pIllegalTruckJob1];
            PlayerTruckJob[playerid][pTDDestDepot] = IllegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
        if(listitem == 4)
        {
        	PlayerTruckJob[playerid][pTDActive] = 1;
        	PlayerTruckJob[playerid][pTDLegal] = 0;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pIllegalTruckJob2];
            PlayerTruckJob[playerid][pTDDestDepot] = IllegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
        if(listitem == 5)
        {
            PlayerTruckJob[playerid][pTDActive] = 1;
            PlayerTruckJob[playerid][pTDLegal] = 0;
            PlayerTruckJob[playerid][pTDJobID] = PlayerData[playerid][pIllegalTruckJob3];
            PlayerTruckJob[playerid][pTDDestDepot] = IllegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDestDepot];

            SetTimerEx("LoadTruckJob", 10000, 0, "ii", playerid, PlayerTruckJob[playerid][pTDLegal]);
            GameTextForPlayer(playerid, "~w~Loading Trailer, please wait...",10000,3);
            TogglePlayerControllable(playerid, 0);
        }
	}
	return 1;
}

Dialog:DIALOG_PCP(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new params[158], string[200];
		if(listitem == 0)
		{
			format(string,sizeof(string),"Please enter the reason why you wish to report this player:");
		    Dialog_Show(playerid, DIALOG_PCP_REPORT, DIALOG_STYLE_INPUT, "{33CCFF}Player Control Panel :: Reporting", string, "Report", "Cancel");
		}
		if(listitem == 1)
		{
			Dialog_Show(playerid, DIALOG_PM, DIALOG_STYLE_INPUT, "Private Message", "Input your private message text:", "Send", "Cancel");
		}
		if(listitem == 2)
		{
			format(string,sizeof(string),"Please enter the reason why you wish to kick this player:");
		    Dialog_Show(playerid, DIALOG_PCP_KICK, DIALOG_STYLE_INPUT, "{33CCFF}Player Control Panel :: Kicking", string, "Kick", "Cancel");
		}
		if(listitem == 3)
		{
			format(string,sizeof(string),"Please enter the time to ban this player for:");
		    Dialog_Show(playerid, DIALOG_PCP_BAN1, DIALOG_STYLE_INPUT, "{33CCFF}Player Control Panel :: Banning", string, "Continue", "Cancel");
		}
		if(listitem == 4)
		{
			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::spec(playerid, params);
		}

		if(listitem == 5)
		{
			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::gethere(playerid, params);
		}
		if(listitem == 6)
		{
			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::goto(playerid, params);
		}
		if(listitem == 7)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::nmute(playerid, params);
		}
		if(listitem == 8)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::freeze(playerid, params);
		}
		if(listitem == 9)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::unfreeze(playerid, params);
		}
		if(listitem == 10)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::slap(playerid, params);
		}
		if(listitem == 11)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::revive(playerid, params);
		}
		if(listitem == 12)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::check(playerid, params);
		}
		if(listitem == 13)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::nrn(playerid, params);
		}
		if(listitem == 14)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::showrules(playerid, params);
		}

		if(listitem == 15)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::listguns(playerid, params);
		}
		if(listitem == 16)
		{

			format(params, sizeof(params), "%i", GetPVarInt(playerid, "pClickedID"));
			DeletePVar(playerid, "pClickedID");
			return callcmd::listpvehs(playerid, params);
		}
		if(listitem == 17) { DeletePVar(playerid, "pClickedID"); return 1; }
	}
	else
	{
		DeletePVar(playerid, "pClickedID");
		return 1;
	}
	return 1;
}
Dialog:DIALOG_PM(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(!IsPlayerConnected(GetPVarInt(playerid, "pClickedID")))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}

		if(PlayerData[playerid][pHours] < 3)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to play at least 3 hours+ to use this command");
		}
		if(PlayerData[GetPVarInt(playerid, "pClickedID")][pTogglePM])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has disabled incoming private messages.");
		}
        if(GetPVarInt(playerid, "pClickedID") == playerid)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You can't pm yourself");
		}
		SendClientMessageEx(GetPVarInt(playerid, "pClickedID"), COLOR_GREEN, "(( PM from %s: %s ))", GetRPName(playerid), inputtext);
		SendClientMessageEx(GetPVarInt(playerid, "pClickedID"), COLOR_GREEN, "(( PM to %s: %s ))", GetRPName(GetPVarInt(playerid, "pClickedID")), inputtext);
		if(PlayerData[GetPVarInt(playerid, "pClickedID")][pWhisperFrom] == INVALID_PLAYER_ID)
		{
		    SendClientMessage(GetPVarInt(playerid, "pClickedID"), COLOR_WHITE, "* You can use '/rpm [message]' to reply to this private message.");
		}
		PlayerData[GetPVarInt(playerid, "pClickedID")][pWhisperFrom] = playerid;
	}
	return 1;
}

Dialog:DIALOG_PCP_REPORT(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new params[158];
		format(params, sizeof(params), "%i %s", GetPVarInt(playerid, "pClickedID"), inputtext);
		DeletePVar(playerid, "pClickedID");
		return callcmd::report(playerid, params);
	}
	else
	{
		DeletePVar(playerid, "pClickedID");
		return 1;
	}

}
Dialog:DIALOG_PCP_KICK(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new params[158];
		format(params, sizeof(params), "%i %s", GetPVarInt(playerid, "pClickedID"), inputtext);
		DeletePVar(playerid, "pClickedID");
		return callcmd::kick(playerid, params);
	}
	else
	{
		DeletePVar(playerid, "pClickedID");
		return 1;
	}

}
Dialog:DIALOG_PCP_BAN1(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string[128];
		SetPVarInt(playerid, "pBanTime", strval(inputtext));
		format(string,sizeof(string),"Please enter the reason why you wish to ban this player:");
		Dialog_Show(playerid, DIALOG_PCP_BAN2, DIALOG_STYLE_INPUT, "{33CCFF}Player Control Panel :: Banning", string, "Ban", "Cancel");
	}
	else
	{
		DeletePVar(playerid, "pClickedID");
		DeletePVar(playerid, "pBanTime");
	}
	return 1;
}
Dialog:DIALOG_PCP_BAN2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new params[158];
		format(params, sizeof(params), "%i %i %s", GetPVarInt(playerid, "pClickedID"), GetPVarInt(playerid, "pBanTime"), inputtext);
		DeletePVar(playerid, "pClickedID");
		DeletePVar(playerid, "pBanTime");
		return callcmd::ban(playerid, params);
	}
	else
	{
		DeletePVar(playerid, "pClickedID");
		DeletePVar(playerid, "pBanTime");
		return 1;
	}

}


Dialog:DIALOG_SHOW_TUTORIAL(playerid, response, listitem, inputtext[])
{
	if(response || !response)
	{
		if(InsideTut[playerid] < 1)
		{
			return 1;
		}

		switch(TutStep[playerid])
		{
			case 1:
			{
			    new str[1024];
	            ClearChatbox(playerid);

				TutStep[playerid] = 2;

	            InterpolateCameraPos(playerid, 3022.353027, -640.721740, 193.414672, 1227.661254, -1835.082397, 25.913717, 12000);
				InterpolateCameraLookAt(playerid, 3019.046142, -644.348388, 192.459640, 1226.208251, -1830.758422, 23.866357, 12000);
				SetPlayerPos(playerid, 1223.7166,-1851.4952,8.3894);
				strcat(str, "{FFFFFF}You're about to see our Department of Motor Vehicles. This is where you'll obtain your drivers license.\n");
				strcat(str, "While you may drive without a license, it is recommended that you obtain one, else LSPD will be after you!\n");
				strcat(str, "Once you've obtained your drivers license, it's time to get a job! We have many great jobs to offer.\n");
				strcat(str, "If you're looking for a decent starting job, try out our courier job, garbage man job, or miner job!\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Driver License", str, "Next", "");
			}
			case 2:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 3;

				InterpolateCameraPos(playerid, 1244.807250, -1896.417480, 62.970653, 1320.417602, -1480.743286, 78.601524, 5000);
				InterpolateCameraLookAt(playerid, 1243.523193, -1892.262817, 60.502914, 1318.168212, -1476.724731, 76.654434, 5000);
				SetPlayerPos(playerid, 1310.9757,-1445.2444,-27.2783);
				strcat(str, "{FFFFFF}This is the market area, the most common hangout on Prospect Roleplay\n");
				strcat(str, "You'll be starting out as a level 1 newbie with no upgrades. You'll need to level up with XP.\n");
				strcat(str, "For every hour you play, you'll gain 1 respect point. You earn this on your paycheck.\n");
				strcat(str, "Paychecks will be given out once every hour when the time hits xx:00.\n");
				strcat(str, "As a new player, your inventory is severely limited. You'll need to upgrade it with upgrade points.\n");
				strcat(str, "You'll also start out with a 2 hour weapon restriction to avoid deathmatching.\n");
                strcat(str, "We believe that our upgrades system gives the players an incentive to play and work hard.\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Meet and Greet", str, "Next", "");
			}
			case 3:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 4;

				InterpolateCameraPos(playerid, 1320.417602, -1480.743408, 78.601516, 1482.683227, -1628.944824, 44.981044, 5000);
				InterpolateCameraLookAt(playerid, 1317.750488, -1476.783447, 77.116455, 1486.893188, -1631.457153, 43.999187, 5000);
				SetPlayerPos(playerid, 1493.3798,-1668.6997,-15.7351);
				strcat(str, "{FFFFFF}Prospect Roleplay has many great factions to offer.\n");
				strcat(str, "You're currently looking at the Los Santos Police Department.\n");
				strcat(str, "Factions are legal organizations, each with their own unique roles.\n");
                strcat(str, "Whether it be enforcing the law, saving lives, or reporting the news.\n");
                strcat(str, "You can apply to become a faction member on our community forums.\n");
                strcat(str, "Being in a faction is fun and can lead to some good perks for you!\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Factions", str, "Next", "");
			}
			case 4:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 5;

				InterpolateCameraPos(playerid, 1477.633544, -1627.411010, 50.594058, 2446.644531, -1661.652465, 29.177988, 7000);
				InterpolateCameraLookAt(playerid, 1481.815795, -1629.860473, 49.365783, 2451.346191, -1662.243896, 27.582590, 7000);

				SetPlayerPos(playerid, 2467.3708,-1666.0961,7.8903);


				strcat(str, "{FFFFFF}Doing things the legal way isnt your type? We've got you covered\n");
				strcat(str, "Here on Prospect Roleplay we have an amazing gang system with many unique features!\n");
				strcat(str, "Gangs are illegal organizations you may join by roleplaying with the higher ranks.\n");
				strcat(str, "Gangs offer many different types of roleplay, from street gangs to mafias & cartels.\n");
				strcat(str, "Grab yourself a gun and roleplay your way into a gang and start claiming turfs!\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Gangs", str, "Next", "");
			}
			case 5:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 6;

				InterpolateCameraPos(playerid, 2426.551025, -1659.479614, 44.816139, 2097.071533, -1293.159912, 29.785530, 7000);
				InterpolateCameraLookAt(playerid, 2431.008300, -1659.783935, 42.571231, 2095.802246, -1288.467041, 28.616756, 7000);

				SetPlayerPos(playerid, 2093.6177,-1302.5441,4.6590);


				strcat(str, "{FFFFFF}Want your own piece of real estate? We've got you covered!\n");
				strcat(str, "Here on Prospect Roleplay we offer a wide variety of property types you may own.\n");
				strcat(str, "Buying your own house will allow you to customize the interior and store your goodies.\n");
				strcat(str, "Buying a garage will allow you to keep your car from being stolen, repair it, and upgrade it.\n");
                strcat(str, "Buying your own business is an excellent source of income! There are many different types!\n");
                strcat(str, "Lands are quite special. You can own your own piece of the map.\n");
                strcat(str, "Owning a land allows you to place walls and other objects, and customize your piece of land.\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Real Estate", str, "Next", "");
			}
			case 6:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 7;

				InterpolateCameraPos(playerid, 2100.492675, -1313.117553, 40.094261, 2214.083496, -1122.290161, 34.281135, 7000);
				InterpolateCameraLookAt(playerid, 2099.261718, -1308.616088, 38.299301, 2214.811767, -1127.109375, 33.165603, 7000);

				SetPlayerPos(playerid, 2216.8718,-1122.6305,4.1262);


				strcat(str, "{FFFFFF}Being a roleplay server, we do have rules, but we promise they're not too bad!\n");
				strcat(str, "1.) No Deathmatching - killing without a proper reason. Don't ruin it for everyone else.\n");
				strcat(str, "2.) No Metagaming - Metagaming is mixing OOC information in character.\n");
				strcat(str, "3.) No Powergaming - Powergaming is commiting unrealistic acts and forcing actions upon others.\n");
				strcat(str, "4.) No hacking/cheating - We have zero tolerance for people who use cheats. Permanent ban.\n");
				strcat(str, "5.) No exploiting - If you find a bug that gives you an unfair advantage, report it on the forums.\n");
                strcat(str, "Please visit our website www.prospectrp.net for a complete list of our rules!\n\n");
				strcat(str, "{00aa00}Press next to continue.");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - Basic Rules", str, "Next", "");
			}
			case 7:
			{
			    new str[1024];
			    ClearChatbox(playerid);

				TutStep[playerid] = 8;

				InterpolateCameraPos(playerid, 2219.225830, -1129.354248, 40.080249, 1765.863159, -1268.650512, 123.706245, 5500);
				InterpolateCameraLookAt(playerid, 2219.667968, -1134.274780, 39.310207, 1760.993774, -1269.778442, 123.835456, 5500);
				strcat(str, "{FFFFFF}This tutorial was designed to help you get started in the server.\n");
				strcat(str, "Make sure to sign-up on the forums forum.prospectrp.net to stay connected with us.\n");
				strcat(str, "Thank you, and we hope you have a nice experience in Prospect Roleplay!\n");
				strcat(str, "So get out there! Get a job and buy yourself some property, make a name for yourself!\n");
				strcat(str, "Remember! Rich people have the most power so try not to get bankrupt.\n\n");
				strcat(str, "{00aa00}Wishing you best of luck!");
				Dialog_Show(playerid, DIALOG_SHOW_TUTORIAL, DIALOG_STYLE_MSGBOX, "{F7A763}Tutorial - The end", str, "Continue", "");
			}
			case 8:
			{

				InterpolateCameraPos(playerid, 1314.181030, -1916.689697, 218.157684, 1479.942749, -1804.981689, 161.074020, 5500, CAMERA_MOVE);
				InterpolateCameraLookAt(playerid, 1317.859252, -1914.111328, 215.961776, 1480.490600, -1800.099243, 160.145843, 5500, CAMERA_MOVE);
				SetPlayerPos(playerid, 1481.1783, -1798.1080, 58.0037);
				SetPlayerFacingAngle(playerid, 184.29);
				TogglePlayerControllable(playerid, 1);
				ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
		        new randomhp = playerid + random(20);
		        SetPlayerVirtualWorld(playerid, randomhp);
			}
		}
	}
	return 1;
}

Dialog:DIALOG_FOOD(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0) //Sprunk
        {
            GivePlayerCash(playerid, -50);
            GivePlayerHealth(playerid, 25.0);
            ShowActionBubble(playerid, "* %s pays $50 to the vendor and receives a can of sprunk.", GetRPName(playerid));
        }
        else if(listitem == 1) //Burger
        {
            GivePlayerCash(playerid, -15);
            GivePlayerHealth(playerid, 10.0);
            ShowActionBubble(playerid, "* %s pays $15 to the vendor and receives a piece of burger.", GetRPName(playerid));
        }
        else if(listitem == 2) //Cigar
        {
            GivePlayerCash(playerid, -35);
            PlayerData[playerid][pCigars]++;
            ShowActionBubble(playerid, "* %s pays $35 to the vendor and receives a piece of cigar.", GetRPName(playerid));
        }
        else if(listitem == 3) //Hot dog
        {
            GivePlayerCash(playerid, -25);
            GivePlayerHealth(playerid, 17.0);
            ShowActionBubble(playerid, "* %s pays $25 to the vendor and receives a piece of hot dog.", GetRPName(playerid));
        }
   	    else if(listitem == 4) //Rope
        {
            GivePlayerCash(playerid, -20);
            PlayerData[playerid][pRope] += 2;
            ShowActionBubble(playerid, "* %s pays $20 to the vendor and receives 2 ropes.", GetRPName(playerid));
        }
        else if(listitem == 5) //Chocolate
        {
            GivePlayerCash(playerid, -15);
            GivePlayerHealth(playerid, 12.0);
            ShowActionBubble(playerid, "* %s pays $15 to the vendor and receives a bar of chocolate.", GetRPName(playerid));
        }
    }
    return 1;
}
Dialog:DIALOG_BLACKMARKET1(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
            GivePlayerWeaponEx(playerid, 8);
        }
        else if(listitem == 1)
        {
            GivePlayerWeaponEx(playerid, 24);
        }
        else if(listitem == 2)
        {
            GivePlayerWeaponEx(playerid, 29);
        }
        else if(listitem == 3)
        {
            GivePlayerWeaponEx(playerid, 33);
        }
        else if(listitem == 4)
        {
            GivePlayerWeaponEx(playerid, 30);
        }
	}
	return 1;
}

Dialog:DIALOG_STAFFHELP(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
        	SendClientMessage(playerid, COLOR_WHITE, "{1abc9c}HELPER:{DDDDDD} /hc, /listhelp, /accepthelp, /answerhelp, /denyhelp, /sta, /return.");
			SendClientMessage(playerid, COLOR_WHITE, "{1abc9c}HELPER:{DDDDDD} /nmute, /hmute, /gmute");
        }
        else if(listitem == 1)
        {
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /a, /clearchat, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag, /listflags, /check, /dm.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /ocheck, /oflag, /listflagged, /hhcheck, /kills, /shots, /damages.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /aduty, /adminname, /kick, /ban, /warn, /slap, /ar, /tr, /rr, /cr, /setint, /setvw.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /skiptut, /listguns, /disarm.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /jail, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn.");
			SendClientMessage(playerid, COLOR_WHITE, "{e67e22}MODERATOR:{DDDDDD} /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /(o)dm.");
        }
        else if(listitem == 2)
        {
            SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /ban, /(o)getip, /iplookup");
			SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /prison, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor, /mark, /gotomark.");
			SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /veh, /destroyveh, /respawncars, /broadcast, /fixveh, /healrange.");
			SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /resetadtimer, /baninfo, /banhistory, /togooc, /tognewbie, /togglobal, /listpvehs, /despawnpveh.");
			SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /vehicleinfo, /refillcars, /refilldrug.");
			SendClientMessage(playerid, COLOR_WHITE, "{f1c40f}ADMINISTRATOR:{DDDDDD} /alock, /duel, /startchat, /invitechat, /kickchat, /endchat, /freezerange, /unfreezerange, /reviverange.");
        }
        else if(listitem == 3)
        {
			SendClientMessage(playerid, COLOR_WHITE, "{3498db}SENIOR ADMINISTRATOR:{DDDDDD} /givegun, /setname, /setweather, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount.");
			SendClientMessage(playerid, COLOR_WHITE, "{3498db}SENIOR ADMINISTRATOR:{DDDDDD} /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent, /eventkick.");
        }
		else if(listitem == 4)
        {
			SendClientMessage(playerid, COLOR_WHITE, "{9b59b6}LEAD ADMINISTRATOR:{DDDDDD} /setstat, /givemoney, /givemoneyall, /givetoken, /givetokenall, /setvip, /osetvip, /saveaccounts.");
			SendClientMessage(playerid, COLOR_WHITE, "{9b59b6}LEAD ADMINISTRATOR:{DDDDDD} /removevip, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /listassets.");
			SendClientMessage(playerid, COLOR_WHITE, "{9b59b6}LEAD ADMINISTRATOR:{DDDDDD} /adestroyboombox, /setbanktimer, /resetrobbery, /addtorobbery, /givepayday, /givepveh, /givedoublexp.");
        }
		else if(listitem == 5)
        {
			SendClientMessage(playerid, COLOR_WHITE, "{1abc9c}STAFF MANAGER:{DDDDDD} /makeadmin, /omakeadmin, /setmotd, /setstaff, /forceaduty, /setpassword.");
			SendClientMessage(playerid, COLOR_WHITE, "{1abc9c}STAFF MANAGER:{DDDDDD} /gmx, /sellinactive, /inactivecheck, /changelist, /fixplayerid, /giveachievement.");
			SendClientMessage(playerid, COLOR_WHITE, "{1abc9c}STAFF MANAGER:{DDDDDD} /settitle, /oadmins, /disablevpn, /landperms, /forcedeleteobject, /obscurent, /ovips.");
        }
		else if(listitem == 6)
        {
			SendClientMessage(playerid, COLOR_WHITE, "{c73232}COMMUNITY MANAGER:{DDDDDD} /setdamages, /adminstrike, /doublexp, /enddoublexp");
        }
	}
	return 1;
}

Dialog:DIALOG_GANGS(playerid, response, listitem, inputtext[])
{
	if(response)
    {
		switch(listitem){
			default: {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE gangname = '%e'", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, inputtext[5]);
			}
		}
	}
	return 1;
}

Dialog:DIALOG_FACTIONS(playerid, response, listitem, inputtext[])
{
	if(response)
    {
		if(listitem == 0)
		{
           	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE faction = %i", 0);
	    	mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, 0);
        }
        else if(listitem == 1)
        {
          	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE faction = %i", 1);
	    	mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, 1);
        }
        else if(listitem == 2)
        {
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE faction = %i", 2);
	    	mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, 2);
        }
        else if(listitem == 3)
        {
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE faction = %i", 3);
	    	mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, 3);
        }
	}
	return 1;
}

Dialog:DIALOG_GUNQUIZ2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
           return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 1)
        {
          return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 2)
        {
             Dialog_Show(playerid, DIALOG_GUNQUIZ3, DIALOG_STYLE_LIST, "Question 2", "Option 1\nOption 2\nOption 3\nOption 4", "Select", "Cancel");
        }
        else if(listitem == 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
	}
	return 1;
}
Dialog:DIALOG_GUNQUIZ3(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
           return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 1)
        {
           Dialog_Show(playerid, DIALOG_GUNQUIZ4, DIALOG_STYLE_LIST, "Question 2", "Option 1\nOption 2\nOption 3\nOption 4", "Select", "Cancel");
        }
        else if(listitem == 2)
        {
              return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
	}
	return 1;
}
Dialog:DIALOG_GUNQUIZ4(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
			 Dialog_Show(playerid, DIALOG_GUNQUIZ5, DIALOG_STYLE_LIST, "Question 2", "Option 1\nOption 2\nOption 3\nOption 4", "Select", "Cancel");
        }
        else if(listitem == 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 2)
        {
              return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
	}
	return 1;
}
Dialog:DIALOG_GUNQUIZ5(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
			PlayerData[playerid][pGunLicense] = 1;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gunlicense = %d WHERE uid = %i", PlayerData[playerid][pGunLicense], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			return SendClientMessage(playerid, COLOR_AQUA, "You have successfully passed the weapon license quiz and therefore granted the license.");
        }
        else if(listitem == 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 2)
        {
              return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
        else if(listitem == 3)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You failed the weapon license quiz.");
        }
	}
	return 1;
}
Dialog:DIALOG_BLACKMARKET2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		if(listitem == 0)
		{
            GivePlayerWeaponEx(playerid, 8);
        }
        else if(listitem == 1)
        {
            GivePlayerWeaponEx(playerid, 24);
        }
        else if(listitem == 2)
        {
            GivePlayerWeaponEx(playerid, 29);
        }
        else if(listitem == 3)
        {
            GivePlayerWeaponEx(playerid, 33);
        }
        else if(listitem == 4)
        {
            GivePlayerWeaponEx(playerid, 30);
        }
        else if(listitem == 5)
        {
            GivePlayerWeaponEx(playerid, 31);
        }
	}
	return 1;
}

Dialog:DIALOG_SETTINGS2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
			    if(!PlayerData[playerid][pTogglePM])
			    {
			        PlayerData[playerid][pTogglePM] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "PM toggled. You will no longer receive any private message from players.");
			    }
			    else
			    {
			        PlayerData[playerid][pTogglePM] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "PM enabled. You will now receive private message from players again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 1:
            {
			    if(!PlayerData[playerid][pDonator])
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You are not a donator and therefore cannot toggle this feature.");
				}

			    if(!PlayerData[playerid][pToggleVIP])
			    {
			        PlayerData[playerid][pToggleVIP] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Donator chat toggled. You will no longer see any messages in donator chat.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleVIP] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Donator chat enabled. You will now see messages in donator chat again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 2:
            {
			    if(PlayerData[playerid][pFaction] == -1)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle this chat.");
				}

			    if(!PlayerData[playerid][pToggleFaction])
			    {
			        PlayerData[playerid][pToggleFaction] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleFaction] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 3:
            {
			    if(PlayerData[playerid][pGang] == -1)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You are not a gang member and therefore can't toggle this chat.");
				}

			    if(!PlayerData[playerid][pToggleGang])
			    {
			        PlayerData[playerid][pToggleGang] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleGang] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 4:
            {
			    if(!PlayerData[playerid][pToggleCam])
			    {
			        PlayerData[playerid][pToggleCam] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleCam] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 5:
            {
			    if(!PlayerData[playerid][pToggleHUD])
			    {
			        PlayerData[playerid][pToggleHUD] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][4]);

			    }
			    else
			    {
			        PlayerData[playerid][pToggleHUD] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

			        PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
			        PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 6:
            {
			    if(!PlayerData[playerid][pToggleVehCam])
			    {
			        PlayerData[playerid][pToggleVehCam] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "One Seat Driving Person toggled.");


			    }
			    else
			    {
			        PlayerData[playerid][pToggleVehCam] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "On Seat Driving Person enabled.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
            }
            case 7: ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
		}
	}
	return 1;
}
Dialog:DIALOG_SETTINGS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
        switch(listitem)
        {
            case 0:
            {
			    if(!PlayerData[playerid][pToggleTextdraws])
			    {
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][0]);
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][1]);
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][2]);
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][4]);



			        TextDrawHideForPlayer(playerid, TimeTD);

			        PlayerData[playerid][pToggleTextdraws] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
			    }
			    else
			    {
			        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
			        {
			            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][1]);
			            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][2]);
			        }
			        if(PlayerData[playerid][pGPSOn])
			        {
			            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][0]);
			        }
			        if(PlayerData[playerid][pWatchOn])
			        {
			            TextDrawShowForPlayer(playerid, TimeTD);
			        }
			        if(!PlayerData[playerid][pToggleHUD])
			        {
			            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
			            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);
			        }


			        PlayerData[playerid][pToggleTextdraws] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 1:
            {
			    if(!PlayerData[playerid][pToggleOOC])
			    {
			        PlayerData[playerid][pToggleOOC] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleOOC] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 2:
            {
			    if(!PlayerData[playerid][pToggleGlobal])
			    {
			        PlayerData[playerid][pToggleGlobal] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleGlobal] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 3:
            {
			    if(!PlayerData[playerid][pTogglePhone])
			    {
			        if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			        {
			            return SendClientMessage(playerid, COLOR_GREY, "You can't do this while in a call.");
			        }

			        PlayerData[playerid][pTogglePhone] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
			    }
			    else
			    {
			        PlayerData[playerid][pTogglePhone] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 4:
            {
			    if(!PlayerData[playerid][pToggleWhisper])
			    {
			        PlayerData[playerid][pToggleWhisper] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Whispers toggled. You will no longer receive any whispers from players.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleWhisper] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Whispers enabled. You will now receive whispers from players again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 5:
            {
			    if(!PlayerData[playerid][pToggleNewbie])
			    {
			        PlayerData[playerid][pToggleNewbie] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleNewbie] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 6:
            {
			    if(!PlayerData[playerid][pWalkieTalkie])
				{
			    	return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
				}

			    if(!PlayerData[playerid][pToggleWT])
			    {
			        PlayerData[playerid][pToggleWT] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie toggled. You will no longer receive any messages on your walkie talkie.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleWT] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie enabled. You will now receive messages on your walkie talkie again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 7:
			{
		 		if(PlayerData[playerid][pFaction] == -1)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle your radio.");
				}

			    if(!PlayerData[playerid][pToggleRadio])
			    {
			        PlayerData[playerid][pToggleRadio] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleRadio] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
			}
            case 8:
            {
			    if(!PlayerData[playerid][pToggleMusic])
			    {
			        PlayerData[playerid][pToggleMusic] = 1;
			        StopAudioStreamForPlayer(playerid);
			        SendClientMessage(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleMusic] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 9:
            {
			    if(!PlayerData[playerid][pToggleNews])
			    {
			        PlayerData[playerid][pToggleNews] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
			    }
			    else
			    {
			        PlayerData[playerid][pToggleNews] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
			    }
			    ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
            }
            case 10: ShowDialogToPlayer(playerid, DIALOG_SETTINGS2);
		}
	}
	return 1;
}

Dialog:DIALOG_STATS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0: DisplayStats(playerid);
			case 1: callcmd::myassets(playerid);
	        case 2: DisplayInventory(playerid);
			case 3: ShowDialogToPlayer(playerid, DIALOG_SKILL);
			case 4: callcmd::myupgrades(playerid);
			case 5: callcmd::achievements(playerid);
			case 6: callcmd::myfactionstats(playerid);
			case 7: callcmd::myskills(playerid);
			case 8: callcmd::myoffenses(playerid);
		}
	}
	return 1;
}

Dialog:DIALOG_ADNEW(playerid, response, listitem, inputtext[])
{
    if(response)
    {

	    new businessid = GetInsideBusiness(playerid), price = strlen(inputtext) * 25;
		if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "Please input your advertisement");
		if((PlayerData[playerid][pDonator] == 0) && (businessid == -1 || BusinessInfo[businessid][bType] != 5))
		{
		    if(GetClosestBusiness(playerid, BUSINESS_AGENCY) == -1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "There are no advertisement agencies in town.");
		        return 1;
		    }
		    businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);
		}
		if(PlayerData[playerid][pDonator] < 1 && PlayerData[playerid][pCash] < price)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need %s in order to place the advertisement. You can't afford that.", FormatNumber(price));
		}
		if(PlayerData[playerid][pDonator] > 0)
		{
		    SendClientMessage(playerid, COLOR_VIP, "Donator Perk: Your advertisement was posted free of charge!");
		}
		else
		{
		    new string[20];
			format(string, sizeof(string), "~r~-$%i", price);
			GameTextForPlayer(playerid, string, 5000, 1);

			GivePlayerCash(playerid, -price);

			if(businessid >= 0)
			{
			    if(BusinessInfo[businessid][bProducts] > 0)
			    {
					BusinessInfo[businessid][bCash] += (price/100) * 75;
				}
				BusinessInfo[businessid][bProducts]--;
				gNewsVault += (price/100)*5;
				SaveServerInfo();

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		gLastAd = gettime();
		strval(inputtext);
		SendClientMessageToAllEx((PlayerData[playerid][pDonator] > 0) ? (0x00AA00FF) : (0x00AA00FF), "> Advertisement: %s {00aa00}[Ph: %i]", inputtext, PlayerData[playerid][pPhone]);
	}
	return 1;
}


Dialog:MPSPAYTICKETS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		new
			szMessage[128];

		if(PlayerData[playerid][pWantedLevel] != 0)
		{
			return SendClientMessageEx(playerid, COLOR_YELLOW, "The police has been warned that you are wanted, and are on their way.");
		}
		if(VehicleInfo[listitem][vTickets]) {
			if(GetPlayerCash(playerid) < VehicleInfo[listitem][vTickets]) {
				return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough money on you to pay the ticket.");
			}
			GivePlayerCash(playerid, -VehicleInfo[listitem][vTickets]);

			format(szMessage, sizeof(szMessage), "You have paid the $%s ticket on your %s.", number_format(VehicleInfo[listitem][vTickets]), vehicleNames[VehicleInfo[listitem][vModel] - 400]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			VehicleInfo[listitem][vTickets] = 0;

		}
		else if(VehicleInfo[listitem][pvImpounded]) {

			new
				iCost = (VehicleInfo[listitem][vPrice] / 20) + VehicleInfo[listitem][vTickets] + (PlayerData[playerid][pLevel] * 3000);

			if(GetPlayerCash(playerid) < iCost) {
				return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money on you.");
			}
			format(szMessage, sizeof(szMessage), "You have released your %s for $%i.", vehicleNames[VehicleInfo[listitem][vModel] - 400], iCost);
			SendClientMessage(playerid, COLOR_AQUA, szMessage);
			GivePlayerCash(playerid, -iCost);
			new Float:vehposx, Float:vehposy, Float:vehposz, Float:angle;
			vehposx = 1198.6892;
			vehposy = -1834.5319;
			vehposz = 13.3995;
			angle = 268.9968;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET  pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', impounded = 0 WHERE id = %d", vehposx, vehposy, vehposz, angle, VehicleInfo[listitem][vID]);
   			mysql_tquery(connectionID, queryBuffer);
			VehicleInfo[listitem][pvImpounded] = 0;
		}
		else SendClientMessage(playerid, COLOR_GREY, "This vehicle either does not exist, or does not need to be released or have its tickets paid.");
    }
	return 1;
}
Dialog:DIALOG_RENTCAR(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    RemovePlayerFromVehicle(playerid);
	}
	else
	{
        if(PlayerData[playerid][pCash] < 999)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't rent this truck.");
        }
	    GivePlayerCash(playerid, -1000);
	    SendClientMessage(playerid, COLOR_GREY, "Dealership: Thank you for renting a truck, good luck in your job!");
		Renting[playerid] = 1;
	}
	return 1;
}

Dialog:DIALOG_BUYVEHICLENEW(playerid, response, listitem, inputtext[])
{
    if(response)
	{
	    switch(listitem)
	    {
			case 0: ShowVehicleSelectionMenu(playerid, MODEL_SELECTION_VEHICLES);
			case 1: ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
		}
	}
	return 1;
}

Dialog:DIALOG_NEWBIE(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string[128];
		if(PlayerData[playerid][pAdmin] < HELPER)
		{
	 		PlayerData[playerid][pLastNewbie] = gettime();
		}
		if(isnull(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot send no question!");
		if(strlen(inputtext) > 110) return SendClientMessageEx(playerid, COLOR_GREY, "That message is too long!");
		format(string, sizeof(string), "{FF0000}New Question! {FFFFFF}%s(%d): %s", GetPlayerNameEx(playerid), playerid, inputtext);
		SendQuestionToStaff(COLOR_RED, string);
		SendQuestionToStaff(COLOR_WHITE, "* /nanswer (/na) to asnwer | /trashnewb (/tn) to trash *");
		SetPVarInt(playerid, "SendQuestion", 1);
		SetPVarString(playerid, "Question", inputtext);
		SendClientMessage(playerid, COLOR_WHITE, "Your question was successfully submitted, please wait. An helper will reply shortly.");

	}
	return 1;
}
Dialog:ACCOUNT_CREATION(playerid, response, listitem, inputtext[])
{
	if(!response) return ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
	switch(listitem)
	{
		case 0: return ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
		case 1: return ShowDialogToPlayer(playerid, DIALOG_GENDER);
		case 2: return ShowDialogToPlayer(playerid, DIALOG_AGE);
		case 3:
		{
			szMiscArray[0] = 0;
			szMiscArray = "None\n" \
			"English\n" \
			"American\n" \
			"British\n" \
			"Chinese\n" \
			"Korean\n" \
			"Japanese\n" \
			"Asian\n" \
			"Canadian\n" \
			"Australian\n" \
			"Southern\n" \
			"Russian\n" \
			"Ukrainian\n" \
			"German\n" \
			"French\n" \
			"Portuguese\n" \
			"Polish\n" \
			"Estonian\n" \
			"Latvian\n" \
			"Dutch\n" \
			"Jamaican\n" \
			"Turkish\n" \
			"Mexican\n" \
			"Spanish\n" \
			"Arabic\n" \
			"Israeli\n" \
			"Romanian\n" \
			"Italian\n" \
			"Gangsta\n" \
			"Greek\n" \
			"Serbian\n" \
			"Balkin\n" \
			"Danish\n" \
			"Scottish\n" \
			"Irish\n" \
			"Indian\n" \
			"Norwegian\n" \
			"Swedish\n" \
			"Finnish\n" \
			"Hungarian\n" \
			"Bulgarian\n" \
			"Pakistani\n" \
			"Cuban\n" \
			"Slavic\n" \
			"Indonesian\n" \
			"Filipino\n" \
			"Hawaiian\n" \
			"Somalian\n" \
			"Armenian\n" \
			"Persian\n" \
			"Vietnamese\n" \
			"Slovenian\n" \
			"Kiwi\n" \
			"Brazilian\n" \
			"Georgian";
			return Dialog_Show(playerid, DIALOG_REGISTER_ACCENT, DIALOG_STYLE_LIST, "Accent", szMiscArray, "Select", "<<");
		}
		case 4:
		{
			if(PlayerData[playerid][pGender] == -1) {
				SendClientMessage(playerid, COLOR_YELLOW, "Please select your gender first.");
				return ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
			ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_SKIN_REGISTER, "Choose a Skin", clothesShopSkins, sizeof(clothesShopSkins));
       	}

		case 5:
		{
			if(PlayerData[playerid][pGender] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Please pick a gender.");
				return ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
			}
			if(PlayerData[playerid][pAge] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You must choose a age to complete");
			    ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
			}
		    PlayerData[playerid][pTutorial] = 0;
		   	PlayerData[playerid][pSetup] = 0;
            HideTutorialTextDraws(playerid);
            SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		    SetPlayerPos(playerid, 2247.3511,-1724.0511,13.5469);
		    SetPlayerFacingAngle(playerid, 181.4170);
		    print("Spawned player on spawn 2");
		    SetPlayerVirtualWorld(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		    StopAudioStreamForPlayer(playerid);
		    TogglePlayerControllable(playerid, 1);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", PlayerData[playerid][pGender], PlayerData[playerid][pAge], PlayerData[playerid][pSkin], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SendClientMessage(playerid, COLOR_WHITE, "Welcome to {F7A763}Prospect Roleplay{FFFFFF}. Make sure to visit www.prospectrp.net for news and updates.");
			SendClientMessage(playerid, COLOR_WHITE, "Use the {FFFF90}/locate{FFFFFF} command to point to locations of jobs, businesses, and common places.");
            displayWelcomeMessage(playerid);
			StopAudioStreamForPlayer(playerid);
	        DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
	        fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
			SendStaffMessage(COLOR_YELLOW, "OnPlayerSpawn: %s[%d] has just spawned on Prospect Roleplay for the first time!", GetRPName(playerid), playerid);
			SendClientMessage(playerid, COLOR_AQUA, "You need a driver's license, the DMV has been marked on your map. Navigate to the marker to begin your drivers test.");
			PlayerData[playerid][pCP] = CHECKPOINT_MISC;
            SetPlayerCheckpoint(playerid, 1219.2590, -1812.1093, 16.5938, 3.0);
			return 1;
		}
	}
	return 1;
}
Dialog:DIALOG_REGISTER_ACCENT(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: strcpy(PlayerData[playerid][pAccent], "None", 16);
			case 1: strcpy(PlayerData[playerid][pAccent], "English", 16);
			case 2: strcpy(PlayerData[playerid][pAccent], "American", 16);
			case 3: strcpy(PlayerData[playerid][pAccent], "British", 16);
			case 4: strcpy(PlayerData[playerid][pAccent], "Chinese", 16);
			case 5: strcpy(PlayerData[playerid][pAccent], "Korean", 16);
			case 6: strcpy(PlayerData[playerid][pAccent], "Japanese", 16);
			case 7: strcpy(PlayerData[playerid][pAccent], "Asian", 16);
			case 8: strcpy(PlayerData[playerid][pAccent], "Canadian", 16);
			case 9: strcpy(PlayerData[playerid][pAccent], "Australian", 16);
			case 10: strcpy(PlayerData[playerid][pAccent], "Southern", 16);
			case 11: strcpy(PlayerData[playerid][pAccent], "Russian", 16);
			case 12: strcpy(PlayerData[playerid][pAccent], "Ukrainian", 16);
			case 13: strcpy(PlayerData[playerid][pAccent], "German", 16);
			case 14: strcpy(PlayerData[playerid][pAccent], "French", 16);
			case 15: strcpy(PlayerData[playerid][pAccent], "Portuguese", 16);
			case 16: strcpy(PlayerData[playerid][pAccent], "Polish", 16);
			case 17: strcpy(PlayerData[playerid][pAccent], "Estonian", 16);
			case 18: strcpy(PlayerData[playerid][pAccent], "Latvian", 16);
			case 19: strcpy(PlayerData[playerid][pAccent], "Dutch", 16);
			case 20: strcpy(PlayerData[playerid][pAccent], "Jamaican", 16);
			case 21: strcpy(PlayerData[playerid][pAccent], "Turkish", 16);
			case 22: strcpy(PlayerData[playerid][pAccent], "Mexican", 16);
			case 23: strcpy(PlayerData[playerid][pAccent], "Spanish", 16);
			case 24: strcpy(PlayerData[playerid][pAccent], "Arabic", 16);
			case 25: strcpy(PlayerData[playerid][pAccent], "Israeli", 16);
			case 26: strcpy(PlayerData[playerid][pAccent], "Romanian", 16);
			case 27: strcpy(PlayerData[playerid][pAccent], "Italian", 16);
			case 28: strcpy(PlayerData[playerid][pAccent], "Gangsta", 16);
			case 29: strcpy(PlayerData[playerid][pAccent], "Greek", 16);
			case 30: strcpy(PlayerData[playerid][pAccent], "Serbian", 16);
			case 31: strcpy(PlayerData[playerid][pAccent], "Balkin", 16);
			case 32: strcpy(PlayerData[playerid][pAccent], "Danish", 16);
			case 33: strcpy(PlayerData[playerid][pAccent], "Scottish", 16);
			case 34: strcpy(PlayerData[playerid][pAccent], "Irish", 16);
			case 35: strcpy(PlayerData[playerid][pAccent], "Indian", 16);
			case 36: strcpy(PlayerData[playerid][pAccent], "Norwegian", 16);
			case 37: strcpy(PlayerData[playerid][pAccent], "Swedish", 16);
			case 38: strcpy(PlayerData[playerid][pAccent], "Finnish", 16);
			case 39: strcpy(PlayerData[playerid][pAccent], "Hungarian", 16);
			case 40: strcpy(PlayerData[playerid][pAccent], "Bulgarian", 16);
			case 41: strcpy(PlayerData[playerid][pAccent], "Pakistani", 16);
			case 42: strcpy(PlayerData[playerid][pAccent], "Cuban", 16);
			case 43: strcpy(PlayerData[playerid][pAccent], "Slavic", 16);
			case 44: strcpy(PlayerData[playerid][pAccent], "Indonesian", 16);
			case 45: strcpy(PlayerData[playerid][pAccent], "Filipino", 16);
			case 46: strcpy(PlayerData[playerid][pAccent], "Hawaiian", 16);
			case 47: strcpy(PlayerData[playerid][pAccent], "Somalian", 16);
			case 48: strcpy(PlayerData[playerid][pAccent], "Armenian", 16);
			case 49: strcpy(PlayerData[playerid][pAccent], "Persian", 16);
			case 50: strcpy(PlayerData[playerid][pAccent], "Vietnamese", 16);
			case 51: strcpy(PlayerData[playerid][pAccent], "Slovenian", 16);
			case 52: strcpy(PlayerData[playerid][pAccent], "Kiwi", 16);
			case 53: strcpy(PlayerData[playerid][pAccent], "Brazilian", 16);
			case 54: strcpy(PlayerData[playerid][pAccent], "Georgian", 16);
			default: SendClientMessage(playerid, COLOR_GREY, "Invalid accent. Valid types range from 0 to 53.");
		}

	}
	return ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
}

Dialog:Graffiti_Text(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	    {
	        return Dialog_Show(playerid, Graffiti_Text, DIALOG_STYLE_INPUT, "Graffiti Text", "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
		}
		if (strlen(inputtext) > 64)
		{
		    return Dialog_Show(playerid, Graffiti_Text, DIALOG_STYLE_INPUT, "Graffiti Text", "Error: Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
		}
        if (IsSprayingInProgress(id))
        {
	        return SendClientMessage(playerid, COLOR_GREY, "There is another player spraying at this point already.");
		}
        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;
        GraffitiData[id][graffitiDefault] = 0;
		format(GraffitiData[id][graffitiFont], 50, gang_tag_font[playerid]);
		printf("Debug: %s", GraffitiData[id][graffitiFont]);
		strpack(PlayerData[playerid][pGraffitiText], inputtext, 64 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);
		SendAdminMessage(COLOR_LIGHTRED, "%s[ID %i] has started spraying a gang tag %s", GetRPName(playerid), playerid, inputtext);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
	}
	return 1;
}
Dialog:DIALOG_REGISTER(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
        {
            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
            return 1;
		}
        if(strlen(inputtext) < 4)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "* Please choose a password containing at least 4 characters.");
            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
            return 1;
        }

        WP_Hash(PlayerData[playerid][pPassword], 129, inputtext);
        Dialog_Show(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, "Confirm Pass", "Please repeat your account password for verification:", "Submit", "Back");
	}
	else
	{
	    KickPlayer(playerid);
	}
	return 1;
}
Dialog:DIALOG_CONFIRMPASS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
			password[129];

        if(isnull(inputtext))
        {
            return Dialog_Show(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, "Confirm Pass", "Please repeat your account password for verification:", "Submit", "Back");
		}

		WP_Hash(password, sizeof(password), inputtext);

		if(!strcmp(PlayerData[playerid][pPassword], password))
		{
		    gTotalRegistered++;
		    SaveServerInfo();

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO "#TABLE_USERS" (username, password, regdate, lastlogin, ip, passwordchanged) VALUES('%s', '%s', NOW(), NOW(), '%s', 1)", GetPlayerNameEx(playerid), password, GetPlayerIP(playerid));
            mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
		}
		else
		{
		    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
		    SendClientMessage(playerid, COLOR_LIGHTRED, "* Your repeated password does not match your chosen password. Please try again.");
		}
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_REGISTER);
    }
    return 1;
}
Dialog:DIALOG_LOGIN(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
	}
    if(response)
    {
        new
            specifiers[] = "%D of %M, %Y @ %k:%i",
            password[129];

		if(isnull(inputtext))
		{
		    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
		    return 1;
		}

		WP_Hash(password, sizeof(password), inputtext);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, '%s') AS login_date FROM "#TABLE_USERS" WHERE username = '%s' AND password = '%s'", specifiers, GetPlayerNameEx(playerid), password);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
    }
    else
    {
		KickPlayer(playerid);
	}
	return 1;
}
Dialog:DIALOG_GENDER(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0)
        {
            PlayerData[playerid][pGender] = 1;
            PlayerData[playerid][pSkin] = 299;
            SendClientMessage(playerid, COLOR_YELLOW, "Your character is a Male. Now you need to choose the age of your character.");
		}
		else if(listitem == 1)
		{
            PlayerData[playerid][pGender] = 2;
            PlayerData[playerid][pSkin] = 69;
            SendClientMessage(playerid, COLOR_YELLOW, "Your character is a Female. Now you need to choose the age of your character.");
		}
        ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_GENDER);
	}
	return 1;
}
Dialog:DIALOG_AGE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new age = strval(inputtext);

		if(!(10 <= age <= 99))
		{
		    ShowDialogToPlayer(playerid, DIALOG_AGE);
		    SendClientMessage(playerid, COLOR_GREY, "You may only enter a number from 10 to 99. Please try again.");
		    return 1;
        }

        PlayerData[playerid][pAge] = age;
        PlayerData[playerid][pReferralUID] = 0;
        //PlayerData[playerid][pTutorial] = 1;
        //PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 3000, false, "ii", playerid, 1);

        //SendClientMessage(playerid, COLOR_GREEN, "* Good stuff! That's all we need right now. The tutorial will start in a moment.");
        //SetPlayerToSpawn(playerid);

       // SendClientMessageEx(playerid, COLOR_YELLOW, "Wow! your character is %i years old. Have you been referred to the server by anyone?", age);
        ShowDialogToPlayer(playerid, ACCOUNT_CREATION);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_AGE);
	}
	return 1;
}
Dialog:DIALOG_REFERRAL(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext) || strlen(inputtext) > 24)
        {
            return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
		}
		if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GREY, "You can't put down your own name as a referral.");
		    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM "#TABLE_USERS" WHERE username = '%e'", inputtext);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
    }
    else
    {
		PlayerData[playerid][pTutorial] = 1;
        PlayerData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 3000, false, "ii", playerid, 11);
        //SendClientMessage(playerid, COLOR_YELLOW, "That's all the information we need right now. The tutorial will start in just a moment.");
	}
	return 1;
}
Dialog:DIALOG_INTERIORS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
        GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
    }
    return 1;
}

Dialog:DIALOG_BUY(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new businessid = GetInsideBusiness(playerid);

        if(BusinessInfo[businessid][bProducts] <= 0)
        {
            return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock.");
        }

        if(BusinessInfo[businessid][bType] == BUSINESS_STORE)
        {
            switch(listitem)
            {
                case 0:
                {
                 	new price = 600;

                    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

                    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    PlayerData[playerid][pPhone] = random(799999) + 199999;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phone = %i WHERE uid = %i", PlayerData[playerid][pPhone], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Mobile phone purchased. Your new phone number is %i.", PlayerData[playerid][pPhone]);
				}
				case 1:
				{
				    new price = 300;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pWalkieTalkie])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have a walkie talkie already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pWalkieTalkie] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET walkietalkie = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a walkie talkie.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Walkie talkie purchased. Use /wt to speak and /channel to change the frequency.");
				}
				case 2:
				{
				    new price = 500;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pCigars] >= 20)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 20 cigars.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pCigars] += 10;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = %i WHERE uid = %i", PlayerData[playerid][pCigars], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a pack of cigars.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Cigars purchased. Use /usecigar to smoke a cigar.");
				}
				case 3:
				{
				    new price = 100;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pSpraycans] + 10 > 20)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 20 spraycans.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pSpraycans] += 10;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received 10 spraycans.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Spraycans purchased. Use /colorcar and /paintcar in a vehicle to use them.");
				}
			/*	case 4:
				{
				    new price = 200;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pPhonebook])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have a phonebook already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pPhonebook] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phonebook = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a phonebook.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Phonebook purchased. Use /number to lookup a player's number.");
				}*/
				case 4:
				{
				    new price = 200;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

                    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

					GivePlayerWeaponEx(playerid, 43);
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a camera.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Camera purchased.");
				}
				case 5:
				{
				    new price = 50;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pMP3Player])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have an MP3 player already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pMP3Player] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET mp3player = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received an MP3 player.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "MP3 player purchased. Use /mp3 for a list of options.");
				}
				case 6:
				{
				    new price = 50;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pFishingRod])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have a fishing rod already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pFishingRod] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishingrod = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a fishing rod.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Fishing rod purchased. Use /fish at the pier or in a boat to begin fishing.");
				}
				case 7:
				{
				    new price = 300;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pFishingBait] + 10 > 20)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 20 pieces of bait.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pFishingBait] += 10;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishingbait = %i WHERE uid = %i", PlayerData[playerid][pFishingBait], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received fish bait.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Fishing bait purchased. Bait increases the odds of catching bigger fish.");
				}
				case 8:
				{
				    new price = 300;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pMuriaticAcid] + 1 > 10)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 10 bottles of muriatic acid.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pMuriaticAcid] += 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET muriaticacid = %i WHERE uid = %i", PlayerData[playerid][pMuriaticAcid], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottle of muriatic acid.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Muriatic acid purchased.");
				}
				case 9:
				{
				    new price = 30;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pBakingSoda] + 1 > 3)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 3 bottles of baking soda.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pBakingSoda] += 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bakingsoda = %i WHERE uid = %i", PlayerData[playerid][pBakingSoda], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottle of baking soda.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Baking soda purchased.");
				}
				case 10:
				{
				    new price = 600;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pWatch])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have a pocket watch already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pWatch] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET watch = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a pocket watch.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Pocket watch purchased. Use /watch to toggle it.");
				}
				case 11:
				{
				    new price = 150;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pGPS])
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You have a GPS already.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pGPS] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gps = 1 WHERE uid = %i", PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a GPS.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "GPS purchased. Use /gps to toggle it.");
				}
				case 12:
				{
				    new price = 70;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pGasCan] + 5 > 20)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 20 liters of gas.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pGasCan] += 5;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gascan = %i WHERE uid = %i", PlayerData[playerid][pGasCan], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received 5 liters of gasoline.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
				}
				case 13:
				{
				    new price = 40;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pRope] + 2 > 10)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 10 ropes.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pRope] += 2;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rope = %i WHERE uid = %i", PlayerData[playerid][pRope], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received 2 ropes.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Ropes purchased. Use /tie to tie people in your vehicle.");
				}
				case 14:
				{
				    new price = 300;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pBoombox] == 1)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You already own a boombox.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pBoombox] = 1;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET boombox = %i WHERE uid = %i", PlayerData[playerid][pBoombox], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a boombox.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Boombox purchased. Use /boombox for more information.");
				}
				case 15:
				{
				    new price = 30;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
				    if(PlayerData[playerid][pBlindfold] + 2 > 10)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 10 blindfolds.");
				    }

				    if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

				    PlayerData[playerid][pBlindfold] += 2;
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET blindfold = %i WHERE uid = %i", PlayerData[playerid][pBlindfold], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received 2 blindfolds.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "2 blindfolds purchased. Use /blindfold to blind people in your vehicle.");
				}
			}
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
		{
		    if(PlayerData[playerid][pGunLicense] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You don't have a gun license, you may request that on our forums");
			}
		    if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than 2 hours. You can't buy stuff here.");
			}

		    switch(listitem)
			{
		        case 0:
		        {
		            new price = 15000;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerHasWeapon(playerid, 22))
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerWeaponEx(playerid, 22);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a 9mm pistol.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "9mm pistol purchased.");
		        }
		        case 1:
		        {
		            new price = 25000;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerHasWeapon(playerid, 25))
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerWeaponEx(playerid, 25);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a shotgun.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Shotgun purchased.");
		        }
		        case 2:
		        {
		            new price = 40000;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerHasWeapon(playerid, 33))
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerWeaponEx(playerid, 33);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a country rifle.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Country rifle purchased.");
		        }
		        case 3:
		        {
		            new price = 15000;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    SetScriptArmour(playerid, 25.0);
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received light armor.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Light armor of 35 armor points purchased.");
		        }
		        case 4:
		        {
		            new price = 25000;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    SetScriptArmour(playerid, 50.0);
                    GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received medium armor.", GetRPName(playerid), price);
                    SendClientMessage(playerid, COLOR_WHITE, "Light armor of 60 armor points purchased.");
		        }
			}
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		{
		    new
				string[128];

            format(string, sizeof(string), "%s's %s [%i products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

		    if(listitem == 0)
			{
				//ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
				Dialog_Show(playerid, ClothesNew, DIALOG_STYLE_LIST, "Clothes Shop", "Custom Skins\nNormal Skins", "Select", "Close");
			}
			else
			{
				PlayerData[playerid][pCategory] = listitem - 1;
				ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
		    }
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessage(playerid, COLOR_WHITE, "You have chosen the normal fighting style.");
				}
				case 1:
				{
				    new price = 4725;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    BusinessInfo[businessid][bCash] += price;

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased the Boxing fighting style for $%i.", price);
				}
				case 2:
				{
				    new price = 7650;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    BusinessInfo[businessid][bCash] += price;

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased the Kung-Fu fighting style for $%i.", price);
				}
				case 3:
				{
				    new price = 9275;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    BusinessInfo[businessid][bCash] += price;

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased the Kneehead fighting style for $%i.", price);
				}
				case 4:
				{
				    new price = 1250;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    BusinessInfo[businessid][bCash] += price;

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased the Grabkick fighting style for $%i.", price);
				}
				case 5:
				{
				    new price = 2950;

				    if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }
                    if(PlayerData[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You already have this fighting style.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    BusinessInfo[businessid][bCash] += price;

                    PlayerData[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
                    SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[playerid][pFightStyle], PlayerData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased the Elbow fighting style for $%i.", price);
				}
			}
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            new price = 10;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 10.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
				}
				case 1:
		        {
		            new price = 30;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 15.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
				}
				case 2:
		        {
		            new price = 40;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 20.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received french fries.", GetRPName(playerid), price);
				}
				case 3:
		        {
		            new price = 40;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 25.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a hamburger.", GetRPName(playerid), price);
				}
				case 4:
		        {
		            new price = 50;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 30.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a cheeseburger.", GetRPName(playerid), price);
				}
				case 5:
		        {
		            new price = 60;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 25.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a mac & cheese.", GetRPName(playerid), price);
				}
				case 6:
		        {
		            new price = 70;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 35.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a club sandwich.", GetRPName(playerid), price);
				}
				case 7:
		        {
		            new price = 80;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 45.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received fish & chips.", GetRPName(playerid), price);
				}
				case 8:
		        {
		            new price = 110;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 55.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a pan pizza.", GetRPName(playerid), price);
				}
		    }
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
		{
		    switch(listitem)
		    {
		        case 0:
		        {
		            new price = 10;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    GivePlayerHealth(playerid, 10.0);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
				}
				case 1:
		        {
		            new price = 30;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
				}
				case 2:
		        {
		            new price = 45;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottle of beer.", GetRPName(playerid), price);
				}
				case 3:
		        {
		            new price = 300;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottle of wine.", GetRPName(playerid), price);
				}
				case 4:
		        {
		            new price = 500;

		            if(PlayerData[playerid][pCash] < price)
                    {
                        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
                    }

					if(PlayerData[playerid][pTraderUpgrade] > 0)
                    {
						price -= percent(price, (PlayerData[playerid][pTraderUpgrade] * 10));
						SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Your level %i/3 trader perk reduced the price of this item to $%i.", PlayerData[playerid][pTraderUpgrade], price);
                    }

                    GivePlayerCash(playerid, -price);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

					BusinessInfo[businessid][bCash] += price;
                    BusinessInfo[businessid][bProducts]--;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s paid $%i to the shopkeeper and received a bottle of whiskey.", GetRPName(playerid), price);
				}
			}
		}
		else if(BusinessInfo[businessid][bType] == BUSINESS_TOOLSHOP)
		{
		    //First aid kit\t500 materials\nBody repair kit\t1000 materials\nPolice scanner\t2000 materials\nRimkit\t4000 materials

		    switch(listitem)
		    {
		        case 0:
		        {
		            if(PlayerData[playerid][pMaterials] < 1000)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pFirstAid] + 1 > 20)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 20 first aid kits.");
		            }

		            PlayerData[playerid][pFirstAid]++;
		            PlayerData[playerid][pMaterials] -= 1000;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET firstaid = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pFirstAid], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 1000;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 500 materials to the shopkeeper and received a first aid kit.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /firstaid to in order to use a first aid kit.");
				}
				case 1:
		        {
		            if(PlayerData[playerid][pMaterials] < 10000)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pBodykits] + 1 > 10)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 10 bodywork kits.");
		            }

		            PlayerData[playerid][pBodykits]++;
		            PlayerData[playerid][pMaterials] -= 10000;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bodykits = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pBodykits], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 10000;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 1000 materials to the shopkeeper and received a bodywork kit.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /bodykit in a vehicle to repair its bodywork and health.");
				}
				case 2:
		        {
		            if(PlayerData[playerid][pMaterials] < 5000)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pPoliceScanner])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You already have this item.");
		            }

		            PlayerData[playerid][pPoliceScanner] = 1;
		            PlayerData[playerid][pMaterials] -= 5000;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET policescanner = 1, materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 5000;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 2000 materials to the shopkeeper and received a police scanner.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /scanner to listen to emergency and department chats.");
				}
				case 3:
		        {
		            if(PlayerData[playerid][pMaterials] < 4000)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pRimkits] + 1 > 5)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 5 rimkits.");
		            }

		            PlayerData[playerid][pRimkits]++;
		            PlayerData[playerid][pMaterials] -= 4000;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rimkits = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 4000;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 4000 materials to the shopkeeper and received a rimkit.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /rimkit in your vehicle to install a new set of rims.");
				}
				case 4:
				{
				    if(PlayerData[playerid][pCash] < 500)
				        return SendClientMessage(playerid, COLOR_GREY, "You dont have enough money to purchase");
					PlayerData[playerid][pHelmet] = 1;
					GivePlayerCash(playerid, -500);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET helmet = %d WHERE uid = %i", PlayerData[playerid][pHelmet], PlayerData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
			        SendClientMessage(playerid, COLOR_GREEN, "Helmet purchased. /helmet to use it.");

				}
				case 5:
				{
		            if(PlayerData[playerid][pMaterials] < 2500)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pHouseAlarm] > 1)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 1 house alarm.");
		            }
		            PlayerData[playerid][pHouseAlarm]++;
		            PlayerData[playerid][pMaterials] -= 2500;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET housealarm = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 2500;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 2500 materials to the shopkeeper and received a house alarm.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /usehousealarm in your house to install the alarm.");
				}
				case 6: //pVehicleCMD
				{
		            if(PlayerData[playerid][pMaterials] < 4500)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pVehicleCMD] == 1)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 1 vehicle command.");
		            }
		            PlayerData[playerid][pVehicleCMD] = 1;
		            PlayerData[playerid][pMaterials] -= 4500;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vehiclecmd = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 4500;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 4500 materials to the shopkeeper and received a auto vehicle command.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Press '2' while you are driving an vehicle to activate.");
				}
				case 7: //pCrowbar
				{
		            if(PlayerData[playerid][pMaterials] < 2500)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials.");
		            }
		            if(PlayerData[playerid][pVehicleCMD] == 1)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 1 vehicle command.");
		            }
		            PlayerData[playerid][pCrowbar] = 1;
		            PlayerData[playerid][pMaterials] -= 2500;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET crowbar = %i, materials = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            BusinessInfo[businessid][bMaterials] += 2500;
		            BusinessInfo[businessid][bProducts]--;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    mysql_tquery(connectionID, queryBuffer);

                    ShowActionBubble(playerid, "* %s exchanged 2500 materials to the shopkeeper and received a crowbar.", GetRPName(playerid));
                    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use '/breakcuffs' to break cuffs from anybody's hand.");
				}
			}
		}
    }
    return 1;
}

Dialog:DIALOG_PICKLOAD(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!PlayerHasJob(playerid, JOB_COURIER))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Mule or a Boxville.");
		}
		if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1766.9261,-2048.9807,13.8355))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not at the loading dock.");
		}

		switch(listitem)
		{
		    case 0:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Grocery supplies{33CCFF}. Use /deliver at any Supermarket to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_STORE;
            }
            case 1:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Ammunition{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_GUNSHOP;
            }
            case 2:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Clothing items{33CCFF}. Use /deliver at any Clothes Shop to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_CLOTHES;
            }
            case 3:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Food & drinks{33CCFF}. Use /deliver at any Restaurant to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_RESTAURANT;
            }
            case 4:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Beverages{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_BARCLUB;
            }
            case 5:
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You selected {FF6347}Tools & equipment{33CCFF}. Use /deliver at any Tool Shop to drop off this shipment.");
				PlayerData[playerid][pShipment] = BUSINESS_TOOLSHOP;
            }
		}

		PlayerData[playerid][pLastLoad] = gettime();
    }
    return 1;
}
Dialog:DIALOG_UNREADTEXTS(playerid, response, listitem, inputtext[])
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", PlayerData[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer);

    if(response)
    {
		callcmd::texts(playerid, "\1");
    }
    return 1;
}
Dialog:DIALOG_ATM(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0)
        {
            ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
        }
        else
        {
            ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
        }
    }
    return 1;
}
Dialog:DIALOG_ATMDEPOSIT(playerid, response, listitem, inputtext[])
{
	if(response)
    {
        new amount, fee;

        if(sscanf(inputtext, "i", amount))
        {
			return ShowDialogToPlayer(playerid, DIALOG_ATM);
        }
        if(amount < 1 || amount > PlayerData[playerid][pCash])
        {
            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
            ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
            return 1;
        }
        if(amount > 1000000)
        {
            SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than $1,000,000 at a time.");
            ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
            return 1;
        }

        PlayerData[playerid][pBank] += amount;
        GivePlayerCash(playerid, -amount);

        if(PlayerData[playerid][pDonator] == 0)
        {
            fee = percent(amount, 3);

            PlayerData[playerid][pBank] -= fee;
           // AddToTaxVault(fee);
        }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[playerid][pBank], PlayerData[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);

        ShowActionBubble(playerid, "* %s presses a button and deposits some cash into the ATM.", GetRPName(playerid));
        SendClientMessageEx(playerid, COLOR_AQUA, "You have deposited %s into your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerData[playerid][pBank]));

		if(fee)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
		    AddToTaxVault(fee);
        }
        else if(PlayerData[playerid][pDonator] > 0)
        {
			SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You do not pay the 3 percent convenience fee as you are a donator!");
        }
    }
    return 1;
}
Dialog:DIALOG_ATMWITHDRAW(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new amount, fee;

        if(sscanf(inputtext, "i", amount))
        {
			return ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
        }
        if(amount < 1 || amount > PlayerData[playerid][pBank])
        {
            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
            ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
            return 1;
        }
        if(amount > 1000000)
        {
            SendClientMessage(playerid, COLOR_GREY, "You can't withdraw more than $1,000,000 at a time.");
            ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
            return 1;
        }

        PlayerData[playerid][pBank] -= amount;
        GivePlayerCash(playerid, amount);

        if(PlayerData[playerid][pDonator] == 0)
        {
            fee = percent(amount, 3);

            PlayerData[playerid][pBank] -= fee;
        }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[playerid][pBank], PlayerData[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);

        ShowActionBubble(playerid, "* %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
        SendClientMessageEx(playerid, COLOR_AQUA, "You have withdrawn %s from your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerData[playerid][pBank]));

		if(fee)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
		    AddToTaxVault(fee);
        }
        else if(PlayerData[playerid][pDonator] > 0)
        {
			SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You do not pay the 3 percent convenience fee as you are a donator!");
        }
    }
    return 1;
}
Dialog:DIALOG_CHANGEPASS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strlen(inputtext) < 4)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You need to enter a password greater than 4 characters.");
        }

		new
		    password[129];

		WP_Hash(password, sizeof(password), inputtext);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET password = '%s', passwordchanged = '1' WHERE uid = %i", password, PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessage(playerid, COLOR_WHITE, "Your account password was changed successfully.");
	}
	return 1;
}
Dialog:DIALOG_BUYCLOTHINGTYPE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayerData[playerid][pMenuType] = listitem;

        if(listitem == 0)
			ShowClothingSelectionMenu(playerid);
		else
			ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
    }
    else
    {
        callcmd::buy(playerid, "\1");
	}
	return 1;
}
Dialog:DIALOG_BUYCLOTHING(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PreviewClothing(playerid, listitem + PlayerData[playerid][pClothingIndex]);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
	}
	return 1;
}
Dialog:DIALOG_CLOTHING(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!ClothingInfo[playerid][listitem][cExists])
        {
            return SendClientMessage(playerid, COLOR_GREY, "The slot you've selected does not contain any item of clothing.");
        }

        if(ClothingInfo[playerid][listitem][cAttached]) {
			Dialog_Show(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Detach\nEdit\nDelete", "Select", "Cancel");
        } else {
            Dialog_Show(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Attach\nEdit\nDelete", "Select", "Cancel");
        }

        PlayerData[playerid][pSelected] = listitem;
	}
	return 1;
}
Dialog:DIALOG_CLOTHINGMENU(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new clothingid = PlayerData[playerid][pSelected];

        switch(listitem)
        {
            case 0:
            {
                if(!ClothingInfo[playerid][clothingid][cAttached])
                {
                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
                    {
	                    ClothingInfo[playerid][clothingid][cAttached] = 1;

	                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
							ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
						SendClientMessageEx(playerid, COLOR_WHITE, "%s attached to slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
						mysql_tquery(connectionID, queryBuffer);

						for(new i = 0, count = 0; i < MAX_PLAYER_CLOTHING; i ++)
						{
						    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
						    {
						        count++;

						        if(count == 5)
						        {
						            AwardAchievement(playerid, "Dress up");
								}
							}
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "No attachment slots available. You can only have up to five clothing items attached at once.");
                    }
                }
                else
                {
                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
                    ClothingInfo[playerid][clothingid][cAttached] = 0;
                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
					mysql_tquery(connectionID, queryBuffer);

					SendClientMessageEx(playerid, COLOR_WHITE, "%s detached and added to inventory.", ClothingInfo[playerid][clothingid][cName]);
                }
            }
			case 1:
			{
		    	Dialog_Show(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Edition menu", "Edit offset\nChange bone", "Select", "Cancel");
			}
			case 2:
			{
		    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "%s deleted from your clothing inventory.", ClothingInfo[playerid][clothingid][cName]);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
		    	mysql_tquery(connectionID, queryBuffer);

			    ClothingInfo[playerid][clothingid][cAttached] = 0;
	            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
			    ClothingInfo[playerid][clothingid][cExists] = 0;
			    ClothingInfo[playerid][clothingid][cID] = 0;
			    ClothingInfo[playerid][clothingid][cName] = 0;
			}
		}
	}
	return 1;
}
Dialog:DIALOG_CLOTHINGEDIT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerData[playerid][pEditType] = EDIT_CLOTHING;

                if(!ClothingInfo[playerid][PlayerData[playerid][pSelected]][cAttached]) {
                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][PlayerData[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosZ],
						ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleZ]);

					EditAttachedObject(playerid, 9);
                }
                else {
                    EditAttachedObject(playerid, ClothingInfo[playerid][PlayerData[playerid][pSelected]][cAttachedIndex]);
                }

                GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
			}
			case 1:
			{
				Dialog_Show(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Choose a new bone for this clothing item.", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Select", "Cancel");
			}
		}
	}
	return 1;
}
Dialog:DIALOG_CLOTHINGBONE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        ClothingInfo[playerid][PlayerData[playerid][pSelected]][cBone] = listitem + 1;

        if(ClothingInfo[playerid][PlayerData[playerid][pSelected]][cAttached])
        {
            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerData[playerid][pSelected]][cAttachedIndex]);
            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][PlayerData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cModel], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cPosZ],
                ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cScaleZ]);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][PlayerData[playerid][pSelected]][cBone], ClothingInfo[playerid][PlayerData[playerid][pSelected]][cID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "Bone for {00AA00}%s{FFFFFF} changed to '%s'.", ClothingInfo[playerid][PlayerData[playerid][pSelected]][cName], inputtext);
    }
    return 1;
}


Dialog:DIALOG_SPAWNCAR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerData[playerid][pID], listitem);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
    }
    return 1;
}
Dialog:DIALOG_DESPAWNCAR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new count;

        foreach(new i: Vehicle)
	 	{
	 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
	 	    {
	 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
	 	        {
	 	            return SendClientMessage(playerid, COLOR_GREY, "This vehicle is occupied.");
	 	        }

	 	        SendClientMessageEx(playerid, COLOR_AQUA, "Your {FF6347}%s{33CCFF} which is located in %s has been despawned.", GetVehicleName(i), GetVehicleZoneName(i));
    			DespawnVehicle(i);
    			return 1;
	 	    }
        }
    }
    return 1;
}
Dialog:DIALOG_CARSTORAGE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerData[playerid][pID], listitem);
        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
	}
	return 1;
}
Dialog:DIALOG_FINDCAR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new count, garageid;

        foreach(new i: Vehicle)
	 	{
	 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
	 	    {
                PlayerData[playerid][pCP] = CHECKPOINT_MISC;

	            if((garageid = GetVehicleGarage(i)) >= 0)
	            {
	                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
	                SendClientMessageEx(playerid, COLOR_YELLOW, "Your %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
	            }
	            else
	            {
	                new
	                    Float:x,
	                    Float:y,
	                    Float:z;

	                GetVehiclePos(i, x, y, z);
	                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	                SendClientMessageEx(playerid, COLOR_YELLOW, "Your %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
	            }

	            return 1;
            }
		}
	}
	return 1;
}
Dialog:DIALOG_BIZINTERIOR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new businessid = PlayerData[playerid][pSelected];

        foreach(new i : Player)
        {
            if(GetInsideBusiness(i) == businessid)
            {
				SetPlayerPos(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ]);
				SetPlayerFacingAngle(i, bizInteriorArray[listitem][intA]);
				SetPlayerInterior(i, bizInteriorArray[listitem][intID]);
				SetCameraBehindPlayer(i);
            }
        }

        BusinessInfo[businessid][bIntX] = bizInteriorArray[listitem][intX];
        BusinessInfo[businessid][bIntY] = bizInteriorArray[listitem][intY];
        BusinessInfo[businessid][bIntZ] = bizInteriorArray[listitem][intZ];
        BusinessInfo[businessid][bIntA] = bizInteriorArray[listitem][intA];
	    BusinessInfo[businessid][bInterior] = bizInteriorArray[listitem][intID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You've changed the interior of business %i to %s.", businessid, bizInteriorArray[listitem][intName]);
    }
    return 1;
}
Dialog:DIALOG_FACTIONLOCKER(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerData[playerid][pFaction]))
    {
		switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
		{
			case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY:
			{
			    if(listitem == 0) // Toggle duty
			    {
			        if(!PlayerData[playerid][pDuty])
			        {
			            if(IsLawEnforcement(playerid))
			            {
			                ShowActionBubble(playerid, "* %s clocks in and grabs their police issued equipment from the locker.", GetRPName(playerid));
						}
						else if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_MEDIC)
			            {
			                ShowActionBubble(playerid, "* %s clocks in and grabs their medical supplies from the locker.", GetRPName(playerid));
						}

                        PlayerData[playerid][pDuty] = 1;

						SetPlayerHealth(playerid, 100.0);
						SetScriptArmour(playerid, 100.0);
					}
					else
					{
					    PlayerData[playerid][pDuty] = 0;
					    //ResetPlayerWeaponsEx(playerid);

					    //SetScriptArmour(playerid, 0.0);
						ShowActionBubble(playerid, "* %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
					}
				}
				else if(listitem == 1) // Equipment
				{
				    if(PlayerData[playerid][pGunLicense] == 0)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You cannot use your faction equipment as you don't have a gun license.");
					}
				    ShowDialogToPlayer(playerid, DIALOG_FACTIONEQUIPMENT);
    				/*if(IsLawEnforcement(playerid))
    				{
				    	Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12\nSniper Rifle", "Select", "Cancel");
					}
					else
					{
					    Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nFire Extinguisher\nDesert Eagle\nPainkillers", "Select", "Cancel");
					}*/
				}
				else if(listitem == 2) // Uniforms
				{
				    if(!GetFactionSkinCount(PlayerData[playerid][pFaction]))
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "There are no uniforms setup for your faction.");
					}
					if(PlayerData[playerid][pClothes] >= 0)
					{
					    PlayerData[playerid][pSkin] = PlayerData[playerid][pClothes];
					    PlayerData[playerid][pClothes] = -1;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET skin = %i, clothes = -1 WHERE uid = %i", PlayerData[playerid][pSkin], PlayerData[playerid][pID]);
					    mysql_tquery(connectionID, queryBuffer);

					    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
					    ShowActionBubble(playerid, "* %s switches back to their old outfit.", GetRPName(playerid));
					}
					else
					{
                        PlayerData[playerid][pSkinSelected] = -1;
					    Dialog_Show(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
					}
				}
				else if(listitem == 3 && FactionInfo[PlayerData[playerid][pFaction]][fType] != FACTION_MEDIC)
				{
                    ShowCopClothingMenu(playerid);
				}
			}
			case FACTION_GOVERNMENT, FACTION_NEWS:
			{
			    if(PlayerData[playerid][pGunLicense] == 0)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You cannot use your faction equipment as you don't have a gun license.");
				}
			    if(listitem == 0) // Equipment
			    {
			        ShowDialogToPlayer(playerid, DIALOG_FACTIONEQUIPMENT);
			        /*if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
  					{
  					    Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12", "Select", "Cancel");
					}
					else
					{
					    Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nCamera", "Select", "Cancel");
					}*/
				}
				else if(listitem == 1) // Uniforms
				{
				    if(!GetFactionSkinCount(PlayerData[playerid][pFaction]))
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "There are no uniforms setup for your faction.");
					}
					if(PlayerData[playerid][pClothes] >= 0)
					{
					    PlayerData[playerid][pSkin] = PlayerData[playerid][pClothes];
					    PlayerData[playerid][pClothes] = -1;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET skin = %i, clothes = -1 WHERE uid = %i", PlayerData[playerid][pSkin], PlayerData[playerid][pID]);
					    mysql_tquery(connectionID, queryBuffer);

					    ShowActionBubble(playerid, "* %s switches back to their old outfit.", GetRPName(playerid));
					}
					else
					{
					    PlayerData[playerid][pSkinSelected] = -1;
				    	Dialog_Show(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
					}
				}
			}
			case FACTION_HITMAN:
			{
			    if(PlayerData[playerid][pGunLicense] == 0)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You cannot use your faction equipment as you don't have a gun license.");
				}
			    if(listitem == 0) // Order weapons
			    {
			        Dialog_Show(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Order weapons", "Kevlar Vest (Free)\nKnife (Free)\nSilenced pistol ($1,000)\nShotgun ($1,500)\nDesert Eagle ($2,000)\nMP5 ($2,500)\nCountry rifle ($4,000)\nAK-47 ($6,000)\nM4 ($8,000)\nSPAS-12 ($8,500)\nSniper rifle ($9,000)\nBomb ($15,000)", "Order", "Cancel");
				}
				else if(listitem == 1) // Change clothes
				{
				    Dialog_Show(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.com/wiki/Skins:All ))", "Submit", "Cancel");
				}
			}
        }
    }
    return 1;
}
Dialog:DIALOG_FACTIONEQUIPMENT(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerData[playerid][pFaction]))
    {
		switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
		{
			/*case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetScriptArmour(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
			        }
			        case 1:
			        {
			            SetPlayerHealth(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
			        }
			        case 2:
			        {
                        GivePlayerWeaponEx(playerid, 3);
			            ShowActionBubble(playerid, "* %s grabs a nitestick from the locker.", GetRPName(playerid));
			        }
			        case 3:
			        {
                        GivePlayerWeaponEx(playerid, 41);
			            ShowActionBubble(playerid, "* %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
			        }
			        case 4:
			        {
						GivePlayerWeaponEx(playerid, 24);
			            ShowActionBubble(playerid, "* %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
			        }
			        case 5:
			        {
			            GivePlayerWeaponEx(playerid, 25);
			            ShowActionBubble(playerid, "* %s grabs a Shotgun from the locker.", GetRPName(playerid));
			        }
			        case 6:
			        {
			            GivePlayerWeaponEx(playerid, 29);
			            ShowActionBubble(playerid, "* %s grabs an MP5 from the locker.", GetRPName(playerid));
			        }
			        case 7:
			        {
			            GivePlayerWeaponEx(playerid, 31);
			            ShowActionBubble(playerid, "* %s grabs an M4 from the locker.", GetRPName(playerid));
			        }
			        case 8:
			        {
			            GivePlayerWeaponEx(playerid, 27);
			            ShowActionBubble(playerid, "* %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
			        }
			        case 9:
			        {
			            GivePlayerWeaponEx(playerid, 34);
			            ShowActionBubble(playerid, "* %s grabs a Sniper Rifle from the locker.", GetRPName(playerid));
			        }
				}
			}
			case FACTION_MEDIC:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetScriptArmour(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
			        }
			        case 1:
			        {
			            SetPlayerHealth(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
			        }
			        case 2:
			        {
                        GivePlayerWeaponEx(playerid, 42);
			            ShowActionBubble(playerid, "* %s grabs a fire extinguisher from the locker.", GetRPName(playerid));
			        }
			        case 3:
			        {
         				GivePlayerWeaponEx(playerid, 24);
			            ShowActionBubble(playerid, "* %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
			        }
			        case 4:
			        {
			            PlayerData[playerid][pPainkillers] = 5;
			            ShowActionBubble(playerid, "* %s grabs a five pack of painkillers from the locker.", GetRPName(playerid));

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			            mysql_tquery(connectionID, queryBuffer);
			        }
				}
			}
			case FACTION_GOVERNMENT:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetScriptArmour(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
			        }
			        case 1:
			        {
			            SetPlayerHealth(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
			        }
			        case 2:
			        {
			            GivePlayerWeaponEx(playerid, 24);
			            ShowActionBubble(playerid, "* %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
			        }
			        case 3:
			        {
			            GivePlayerWeaponEx(playerid, 25);
			            ShowActionBubble(playerid, "* %s grabs a Shotgun from the locker.", GetRPName(playerid));
			        }
			        case 4:
			        {
			            GivePlayerWeaponEx(playerid, 29);
			            ShowActionBubble(playerid, "* %s grabs an MP5 from the locker.", GetRPName(playerid));
			        }
			        case 5:
			        {
			            GivePlayerWeaponEx(playerid, 31);
			            ShowActionBubble(playerid, "* %s grabs an M4 from the locker.", GetRPName(playerid));
			        }
			        case 6:
			        {
			            GivePlayerWeaponEx(playerid, 27);
			            ShowActionBubble(playerid, "* %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
			        }
			        case 7:
			        {
			            GivePlayerWeaponEx(playerid, 34);
			            ShowActionBubble(playerid, "* %s grabs a Sniper Rifle from the locker.", GetRPName(playerid));
			        }
			    }
			}
			case FACTION_NEWS:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetScriptArmour(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
			        }
			        case 1:
			        {
			            SetPlayerHealth(playerid, 100.0);
			            ShowActionBubble(playerid, "* %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
			        }
			        case 2:
			        {
			            GivePlayerWeaponEx(playerid, 43);
			            ShowActionBubble(playerid, "* %s grabs a digital camera from the locker.", GetRPName(playerid));
			        }
			    }
			}*/
			case FACTION_HITMAN:
			{
			    switch(listitem)
			    {
			        case 0:
					{
					    if(PlayerData[playerid][pCash] < 0)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

			            GivePlayerCash(playerid, -0);
			            SetScriptArmour(playerid, 100.0);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a kevlar vest for Free.");
			            GameTextForPlayer(playerid, "~r~-FREE", 5000, 1);
			    	}
					case 1:
					{
					    if(PlayerData[playerid][pCash] < 1500)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

			            GivePlayerWeaponEx(playerid, 4);
			            GivePlayerCash(playerid, -0);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a knife for Free.");
			            GameTextForPlayer(playerid, "~r~Free", 5000, 1);
			    	}
			    	case 2:
					{
					    if(PlayerData[playerid][pCash] < 1000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 23);
			            GivePlayerCash(playerid, -1000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a silenced pistol for $1,000.");
			            GameTextForPlayer(playerid, "~r~-$1000", 5000, 1);
			    	}
			    	case 3:
					{
					    if(PlayerData[playerid][pCash] < 1500)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 25);
			            GivePlayerCash(playerid, -1500);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a shotgun for $1,500.");
			            GameTextForPlayer(playerid, "~r~-$1500", 5000, 1);
			    	}
			    	case 4:
					{
					    if(PlayerData[playerid][pCash] < 2000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 24);
			            GivePlayerCash(playerid, -2000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a Desert Eagle for $2,000.");
			            GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
			    	}
			    	case 5:
					{
					    if(PlayerData[playerid][pCash] < 2500)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 29);
			            GivePlayerCash(playerid, -2500);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered an MP5 for $2,500.");
			            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
			    	}
			    	case 6:
					{
					    if(PlayerData[playerid][pCash] < 4000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 33);
			            GivePlayerCash(playerid, -4000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a country rifle for $4,000.");
			            GameTextForPlayer(playerid, "~r~-$4000", 5000, 1);
			    	}
			    	case 7:
					{
					    if(PlayerData[playerid][pCash] < 6000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 30);
			            GivePlayerCash(playerid, -6000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered an AK-47 for $6,000.");
			            GameTextForPlayer(playerid, "~r~-$6000", 5000, 1);
			    	}
			    	case 8:
					{
					    if(PlayerData[playerid][pCash] < 8000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 31);
			            GivePlayerCash(playerid, -8000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered an M4 for $8,000.");
			            GameTextForPlayer(playerid, "~r~-$8000", 5000, 1);
			    	}
			    	case 9:
					{
					    if(PlayerData[playerid][pCash] < 8500)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 27);
			            GivePlayerCash(playerid, -8500);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a SPAS-12 for $8,500.");
			            GameTextForPlayer(playerid, "~r~-$8500", 5000, 1);
			    	}
			    	case 10:
					{
					    if(PlayerData[playerid][pCash] < 9000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }

						GivePlayerWeaponEx(playerid, 34);
			            GivePlayerCash(playerid, -9000);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a sniper rifle for $9,000.");
			            GameTextForPlayer(playerid, "~r~-$9000", 5000, 1);
			    	}
			    	case 11:
					{
					    if(PlayerData[playerid][pCash] < 15000)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
			            }
			            if(PlayerData[playerid][pBombs] > 3)
			            {
			                return SendClientMessage(playerid, COLOR_GREY, "You have more than 3 bombs. You can't buy anymore.");
						}

			            PlayerData[playerid][pBombs]++;
			            GivePlayerCash(playerid, -15000);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bombs = %i WHERE uid = %i", PlayerData[playerid][pBombs], PlayerData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

			            SendClientMessageEx(playerid, COLOR_AQUA, "* You ordered a bomb for $15,000. /plantbomb to place the bomb.");
			            GameTextForPlayer(playerid, "~r~-$15000", 5000, 1);
			    	}
			    }
			}
			default:
			{
			    new amount, weapon, locker = GetNearbyLocker(playerid);
				if(strfind(inputtext, "Kevlar Vest", true) != -1)
				{
				    amount = LockerInfo[locker][locKevlar][1];
                    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					SetScriptArmour(playerid, 100.0);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a kevlar vest for $%i.", amount);
				}
				else if(strfind(inputtext, "Medkit", true) != -1)
				{
				    amount = LockerInfo[locker][locMedKit][1];
                    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					SetPlayerHealth(playerid, 100.0);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a medkit for $%i.", amount);
				}
				else if(strfind(inputtext, "Nitestick", true) != -1)
				{
					amount = LockerInfo[locker][locNitestick][1]; weapon = 3;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Mace", true) != -1)
				{
					amount = LockerInfo[locker][locMace][1]; weapon = 41;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
                else if(strfind(inputtext, "Deagle", true) != -1)
				{
					amount = LockerInfo[locker][locDeagle][1]; weapon = 24;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Shotgun", true) != -1)
				{
					amount = LockerInfo[locker][locShotgun][1]; weapon = 25;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "MP5", true) != -1)
				{
					amount = LockerInfo[locker][locMP5][1]; weapon = 29;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "M4", true) != -1)
				{
					amount = LockerInfo[locker][locM4][1]; weapon = 31;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "SPAS-12", true) != -1)
				{
					amount = LockerInfo[locker][locSpas12][1]; weapon = 27;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Sniper", true) != -1)
				{
					amount = LockerInfo[locker][locSniper][1]; weapon = 34;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Camera", true) != -1)
				{
					amount = LockerInfo[locker][locCamera][1]; weapon = 43;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Fire Extinguisher", true) != -1)
				{
					amount = LockerInfo[locker][locFireExt][1]; weapon = 42;
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

					GivePlayerWeaponEx(playerid, weapon);
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received a %s for $%i.", GetWeaponNameEx(weapon), amount);
				}
				else if(strfind(inputtext, "Painkillers", true) != -1)
				{
					amount = LockerInfo[locker][locPainKillers][1];
				    if(PlayerData[playerid][pCash] < amount)
				    {
				        return SendClientMessage(playerid, COLOR_GREY, "You can't afford this weapon.");
		            }

                    PlayerData[playerid][pPainkillers] = 5;
		            GivePlayerCash(playerid, -amount);

		            SendClientMessageEx(playerid, COLOR_AQUA, "* You received painkillers for $%i.", amount);
				}
			}
		}
	}
	return 1;
}
Dialog:DIALOG_FACTIONSKINS(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerData[playerid][pFaction]))
    {
        if(response)
        {
			new index = PlayerData[playerid][pSkinSelected] + 1;

			if(index >= MAX_FACTION_SKINS)
			{
			    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
			    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
			    PlayerData[playerid][pSkinSelected] = -1;
			}
			else
			{
			    // Find the next skin in the array.
				for(new i = index; i < MAX_FACTION_SKINS; i ++)
				{
				    if(FactionInfo[PlayerData[playerid][pFaction]][fSkins][i] != 0)
				    {
				        SetPlayerSkin(playerid, FactionInfo[PlayerData[playerid][pFaction]][fSkins][i]);
				        PlayerData[playerid][pSkinSelected] = i;
				        break;
			        }
                }

                if(index == PlayerData[playerid][pSkinSelected] + 1)
                {
                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
					{
				    	if(FactionInfo[PlayerData[playerid][pFaction]][fSkins][i] != 0)
				    	{
                            SetPlayerSkin(playerid, FactionInfo[PlayerData[playerid][pFaction]][fSkins][i]);
				        	PlayerData[playerid][pSkinSelected] = i;
				        	break;
						}
					}
                }
            }

            Dialog_Show(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
        }
        else
        {
            PlayerData[playerid][pClothes] = PlayerData[playerid][pSkin];
            PlayerData[playerid][pSkin] = GetPlayerSkin(playerid);
            PlayerData[playerid][pSkinSelected] = -1;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET skin = %i, clothes = %i WHERE uid = %i", PlayerData[playerid][pSkin], PlayerData[playerid][pClothes], PlayerData[playerid][pID]);
            mysql_tquery(connectionID, queryBuffer);

            ShowActionBubble(playerid, "* %s takes a uniform out of the locker and puts it on.", GetRPName(playerid));
		}
    }
    return 1;
}
Dialog:DIALOG_HITMANCLOTHES(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, PlayerData[playerid][pFaction]))
    {
		new skinid;

    	if(sscanf(inputtext, "i", skinid))
		{
			return Dialog_Show(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.com/wiki/Skins:All ))", "Submit", "Cancel");
        }
        if(!(1 <= skinid <= 311))
        {
            SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
            return Dialog_Show(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.com/wiki/Skins:All ))", "Submit", "Cancel");
        }

        SetScriptSkin(playerid, skinid);
		GameTextForPlayer(playerid, "~w~Clothes changed for free", 3000, 3);
    }
    return 1;
}

Dialog:DIALOG_VEHICLELOOKUP1(playerid, response, listitem, inputtext[])
{
    if((response) && IsLawEnforcement(playerid))
    {
	    new vehicleid, string[128];

	    if(sscanf(inputtext, "i", vehicleid))
	    {
    	    return Dialog_Show(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
		}
		if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
		{
		    SendClientMessage(playerid, COLOR_GREY, "The vehicle ID specified is not owned by any particular person.");
	    	return Dialog_Show(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
		}

		PlayerData[playerid][pSelected] = vehicleid;

		format(string, sizeof(string), "Name: %s\nOwner: %s\nTickets: $%i\nLocation: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vTickets], GetVehicleZoneName(vehicleid));
    	Dialog_Show(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Vehicle lookup", string, "Track", "Cancel");
	}
	return 1;
}
Dialog:DIALOG_VEHICLELOOKUP2(playerid, response, listitem, inputtext[])
{
	if((response) && IsLawEnforcement(playerid))
    {
		new garageid, vehicleid = PlayerData[playerid][pSelected];

		if((garageid = GetVehicleGarage(vehicleid)) >= 0)
		{
		    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
		    SendClientMessage(playerid, COLOR_WHITE, "Checkpoint marked at the garage this vehicle is inside of.");
		}
		else
		{
		    new
				Float:x,
				Float:y,
				Float:z;

            SendClientMessage(playerid, COLOR_WHITE, "Checkpoint marked at the vehicle's last known location.");

			GetVehiclePos(vehicleid, x, y, z);
			SetPlayerCheckpoint(playerid, x, y, z, 3.0);
		}

		PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	}
	return 1;
}
Dialog:DIALOG_FACTIONPAY1(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayerData[playerid][pSelected] = listitem;
        Dialog_Show(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
    }
    return 1;
}
Dialog:DIALOG_FACTIONPAY2(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_NONE)
    {
        if(response)
        {
            new amount, factionid = PlayerData[playerid][pFaction], rankid = PlayerData[playerid][pSelected];

            if(sscanf(inputtext, "i", amount))
            {
                return Dialog_Show(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
			}
			if(!(1 <= amount <= 10000))
			{
			    SendClientMessage(playerid, COLOR_GREY, "The specified amount must range from $1 to $10,000.");
			    return Dialog_Show(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
			}
			if(GetTotalFactionPay(factionid) - FactionInfo[factionid][fPaycheck][rankid] + amount > FactionInfo[factionid][fBudget])
			{
				return SendClientMessageEx(playerid, COLOR_GREY, "Your faction only has a budget of $%i left! might have to do some adjusting there.", (FactionInfo[factionid][fBudget] - GetTotalFactionPay(factionid)));
			}

			FactionInfo[factionid][fPaycheck][rankid] = amount;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
		    mysql_tquery(connectionID, queryBuffer);

			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the paycheck for rank %i to $%i.", rankid, amount);
			SendAdminMessage(COLOR_RED, "ADMIN: %s [ID: %i] has set the paycheck for rank %i to $%i.", GetRPName(playerid), playerid, rankid, amount);

		    Log_Write("log_faction", "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
        }

		ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
    }
    return 1;
}
Dialog:DIALOG_PHONEBOOK(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!strcmp(inputtext, ">> Next page", true))
        {
            PlayerData[playerid][pPage]++;
            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
        }
        else if(!strcmp(inputtext, "<< Go back", true) && PlayerData[playerid][pPage] > 1)
        {
            PlayerData[playerid][pPage]--;
            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
        }
    }
    return 1;
}
Dialog:DIALOG_CREATEZONE(playerid, response, listitem, inputtext[])
{
    if((response) && (PlayerData[playerid][pAdmin] >= MANAGEMENT || PlayerData[playerid][pGangMod] || PlayerData[playerid][pDynamicAdmin]))
    {
        PlayerData[playerid][pMinX] = 0.0;
        PlayerData[playerid][pMinY] = 0.0;
        PlayerData[playerid][pMaxX] = 0.0;
        PlayerData[playerid][pMaxY] = 0.0;

        if(PlayerData[playerid][pZoneType] == ZONETYPE_LAND)
		{
	        PlayerData[playerid][pZoneCreation] = ZONETYPE_LAND;
	        SendClientMessage(playerid, COLOR_WHITE, "Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
		}
		else if(PlayerData[playerid][pZoneType] == ZONETYPE_TURF)
		{
	        PlayerData[playerid][pZoneCreation] = ZONETYPE_TURF;
	        SendClientMessage(playerid, COLOR_WHITE, "Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
		}
    }
    return 1;
}
Dialog:DIALOG_CONFIRMZONE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(PlayerData[playerid][pZoneCreation] == ZONETYPE_LAND)
        {
	        for(new i = 0; i < MAX_LANDS; i ++)
			{
			    if(!LandInfo[i][lExists])
			    {
			        new
			            Float:minx = PlayerData[playerid][pMinX],
			            Float:miny = PlayerData[playerid][pMinY],
			            Float:maxx = PlayerData[playerid][pMaxX],
			            Float:maxy = PlayerData[playerid][pMaxY],
			            Float:x, Float:y, Float:z;

        			GetPlayerPos(playerid, z, z, z);

			        if(minx > maxx)
					{
                        PlayerData[playerid][pMinX] = maxx;
                        PlayerData[playerid][pMaxX] = minx;
			        }
			        if(miny > maxy)
					{
			            PlayerData[playerid][pMinY] = maxy;
			            PlayerData[playerid][pMaxY] = miny;
			        }

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO lands (price, min_x, min_y, max_x, max_y, heightx, heighty, heightz) VALUES(%i, '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerData[playerid][pLandCost], PlayerData[playerid][pMinX], PlayerData[playerid][pMinY], PlayerData[playerid][pMaxX], PlayerData[playerid][pMaxY], x, y, z);
					mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLand", "iiifffffff", playerid, i, PlayerData[playerid][pLandCost], PlayerData[playerid][pMinX], PlayerData[playerid][pMinY], PlayerData[playerid][pMaxX], PlayerData[playerid][pMaxY], x, y, z);
  					CancelZoneCreation(playerid);
					return 1;
				}
			}

			SendClientMessage(playerid, COLOR_GREY, "Land slots are currently full. Ask developers to increase the internal limit.");
			CancelZoneCreation(playerid);
    	}
    	else if(PlayerData[playerid][pZoneCreation] == ZONETYPE_TURF)
    	{
   			for(new i = 0; i < MAX_TURFS; i ++)
			{
			    if(!TurfInfo[i][tExists])
			    {
			        new
			            Float:minx = PlayerData[playerid][pMinX],
			            Float:miny = PlayerData[playerid][pMinY],
			            Float:maxx = PlayerData[playerid][pMaxX],
			            Float:maxy = PlayerData[playerid][pMaxY],
			            Float:z;

        			GetPlayerPos(playerid, z, z, z);

			        if(minx > maxx)
					{
                        PlayerData[playerid][pMinX] = maxx;
                        PlayerData[playerid][pMaxX] = minx;
			        }
			        if(miny > maxy)
					{
			            PlayerData[playerid][pMinY] = maxy;
			            PlayerData[playerid][pMaxY] = miny;
			        }

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f')", i, PlayerData[playerid][pTurfName], PlayerData[playerid][pTurfType], PlayerData[playerid][pMinX], PlayerData[playerid][pMinY], PlayerData[playerid][pMaxX], PlayerData[playerid][pMaxY], z);
					mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, PlayerData[playerid][pTurfName], PlayerData[playerid][pTurfType], PlayerData[playerid][pMinX], PlayerData[playerid][pMinY], PlayerData[playerid][pMaxX], PlayerData[playerid][pMaxY], z);
  					CancelZoneCreation(playerid);
					return 1;
				}
			}

			SendClientMessage(playerid, COLOR_GREY, "Turf slots are currently full. Ask developers to increase the internal limit.");
			CancelZoneCreation(playerid);
    	}
	}
	else
	{
	    CancelZoneCreation(playerid);

        if(PlayerData[playerid][pZoneType] == ZONETYPE_LAND)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
			SendClientMessage(playerid, COLOR_WHITE, "Note: You can use /landcancel to exit land creation mode.");
			PlayerData[playerid][pZoneCreation] = ZONETYPE_LAND;
		}
		else if(PlayerData[playerid][pZoneType] == ZONETYPE_TURF)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
			SendClientMessage(playerid, COLOR_WHITE, "Note: You can use /turfcancel to exit turf creation mode.");
			PlayerData[playerid][pZoneCreation] = ZONETYPE_TURF;
		}
	}
	return 1;
}
Dialog:DIALOG_LANDBUILDTYPE(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
	{
		return 0;
	}

    if(response)
    {
		PlayerData[playerid][pMenuType] = listitem;
		ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
	}
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	}
	return 1;
}
Dialog:DIALOG_LANDBUILD1(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
	{
		return 0;
	}

    if(response)
    {
        switch(PlayerData[playerid][pMenuType])
        {
            case 0: // Model selection
            {
				PlayerData[playerid][pCategory] = listitem;
				ShowLandObjects(playerid, MODEL_SELECTION_LANDOBJECTS);
            }
            case 1:
            {
				PlayerData[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
			}
       }
	}
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_LANDBUILDTYPE);
	}
	return 1;
}
Dialog:DIALOG_LANDBUILD2(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
	{
		return 0;
	}

    if(response)
    {
        PurchaseLandObject(playerid, landid, listitem + PlayerData[playerid][pFurnitureIndex]);
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
	}
	return 1;
}
Dialog:DIALOG_LANDMENU(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_LANDOBJECTS, playerid);
			}
			case 1:
			{
			    Dialog_Show(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
			}
			case 2:
			{
				if(!LandInfo[landid][lLabels])
			    {
			        LandInfo[landid][lLabels] = 1;
			        SendClientMessage(playerid, COLOR_AQUA, "You will now see labels appear above the objects in your land.");
			    }
			    else
			    {
			        LandInfo[landid][lLabels] = 0;
			        SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any labels appear above your land objects.");
			    }

			    ReloadAllLandObjects(landid);
			    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
			case 3:
			{
			    PlayerData[playerid][pPage] = 1;
			    ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
			}
			case 4:
			{
			    Dialog_Show(playerid, DIALOG_LANDSELLALL, DIALOG_STYLE_MSGBOX, "Clear objects", "This option sells all the objects in your land. You will receive\n75 percent of the total cost of all your objects.\n\nPress {FF6347}Confirm{A9C4E4} to proceed with the operation.", "Confirm", "Back");
			}
			case 5:
			{
			    if(LandInfo[landid][lLevel] >= 5)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your land can't be upgraded any further.");
			    }

			    new
			        string[224];

			    format(string, sizeof(string), "You are about to upgrade your land to level %i/5.\n\nThis upgrade will cost you {00AA00}$100,000{A9C4E4} and unlocks %i more\nobject slots for your land.\n\nAre you sure you want to upgrade your land?", LandInfo[landid][lLevel] + 1, GetLandObjectCapacity(LandInfo[landid][lLevel] + 1) - GetLandObjectCapacity(LandInfo[landid][lLevel]));
				Dialog_Show(playerid, DIALOG_LANDUPGRADE, DIALOG_STYLE_MSGBOX, "Upgrade land", string, "Yes", "No");
			}
			case 6:
			{
			    Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
			}
		}
    }
    return 1;
}
Dialog:DIALOG_LANDUPGRADE(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
        if(LandInfo[landid][lLevel] < 5)
    	{
            if(PlayerData[playerid][pCash] < 100000)
            {
                return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade your land.");
            }

            LandInfo[landid][lLevel]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET level = level + 1 WHERE id = %i", LandInfo[landid][lID]);
            mysql_tquery(connectionID, queryBuffer);

            GivePlayerCash(playerid, -100000);
            GameTextForPlayer(playerid, "~r~-$100000", 5000, 1);
            SendClientMessageEx(playerid, COLOR_GREEN, "You paid $100,000 to upgrade your land to level %i/5. Your land can now have up to %i objects.", LandInfo[landid][lLevel], GetLandObjectCapacity(LandInfo[landid][lLevel]));
        }
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
    }
    return 1;
}
Dialog:DIALOG_LANDEDITOBJECT(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
        new objectid;

        if(sscanf(inputtext, "i", objectid))
        {
            return Dialog_Show(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_LAND)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Invalid object. You can find out an object's ID by enabling labels.");
		    return Dialog_Show(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != LandInfo[landid][lID])
        {
            SendClientMessage(playerid, COLOR_GREY, "Invalid object. This land object is not apart of your land.");
            return Dialog_Show(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
        }

        PlayerData[playerid][pSelected] = objectid;
		ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	}
	return 1;
}
Dialog:DIALOG_LANDOBJECTMENU(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
        new objectid = PlayerData[playerid][pSelected];

        if(!strcmp(inputtext, "Edit object"))
        {
            if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You can't edit your gate while it is opened.");
			}

	        PlayerData[playerid][pEditType] = EDIT_LAND_OBJECT;
    	    PlayerData[playerid][pEditObject] = objectid;
    		PlayerData[playerid][pObjectLand] = landid;

			EditDynamicObject(playerid, objectid);
		    GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
        }
        else if(!strcmp(inputtext, "Edit gate destination"))
        {
            if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You can't edit your gate while it is opened.");
			}

	        PlayerData[playerid][pEditType] = EDIT_LAND_GATE_MOVE;
	        PlayerData[playerid][pEditObject] = objectid;
	        PlayerData[playerid][pObjectLand] = landid;

			EditDynamicObject(playerid, objectid);
			SendClientMessage(playerid, COLOR_WHITE, "You are now editing the move-to position for your gate.");
	        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
        }
        else if(!strcmp(inputtext, "Duplicate object"))
        {
            PlayerData[playerid][pSelected] = objectid;
            PlayerData[playerid][pObjectLand] = landid;
            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJ, playerid);

        }
        else if(!strcmp(inputtext, "Sell object"))
        {
            PlayerData[playerid][pSelected] = objectid;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
	        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_LANDOBJECT, playerid);
		}
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);

	    //Dialog_Show(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
	}
	return 1;
}
Dialog:DIALOG_LANDOBJECTS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!strcmp(inputtext, ">> Next page", true))
        {
            PlayerData[playerid][pPage]++;
            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
        }
        else if(!strcmp(inputtext, "<< Go back", true) && PlayerData[playerid][pPage] > 1)
        {
            PlayerData[playerid][pPage]--;
            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
        }
        else
        {
            new objectid = strval(inputtext);

            if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
            {
	            PlayerData[playerid][pSelected] = objectid;
				ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
			}
        }
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	}
	return 1;
}
Dialog:DIALOG_LANDSELLALL(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid);

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_LANDOBJECTS, playerid);
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	}
	return 1;
}
/*Dialog:DIALOG_LANDPERMS:
{
    new landid = GetNearbyLand(playerid), targetid;

    if(landid == -1 || !HasLandPerms(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
		if(sscanf(inputtext, "u", targetid))
		{
			return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
        }
        if(!IsPlayerConnected(targetid))
        {
            SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
            return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
        }
        if(targetid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't give permissions to yourself.");
			return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		}

        if(PlayerData[targetid][pLandPerms] == landid)
        {
            PlayerData[targetid][pLandPerms] = -1;

            SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your access to their land's objects.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's access to your land's objects.", GetRPName(targetid));
		}
		else
		{
		    PlayerData[targetid][pLandPerms] = landid;

            SendClientMessageEx(targetid, COLOR_AQUA, "%s has granted you access to their land's objects.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_AQUA, "You have granted %s access to your land's objects.", GetRPName(targetid));
		}
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
}*/
Dialog:DIALOG_LANDPERMS(playerid, response, listitem, inputtext[])
{
    new landid = GetNearbyLand(playerid), targetid;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return 1;
    }

    if(response)
    {
		if(sscanf(inputtext, "u", targetid))
		{
			return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
        }
        if(!IsPlayerConnected(targetid))
        {
            SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
            return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
        }
        if(targetid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't give permissions to yourself.");
			return Dialog_Show(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		}

        if(PlayerData[targetid][pLandPerms] == landid)
        {
            PlayerData[targetid][pLandPerms] = -1;

            SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your access to their land's objects.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's access to your land's objects.", GetRPName(targetid));
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET landkeys = %i WHERE uid = %i", LandInfo[landid][lID], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else if(PlayerData[targetid][pLandPerms] == -1)
		{
		    PlayerData[targetid][pLandPerms] = landid;

            SendClientMessageEx(targetid, COLOR_AQUA, "%s has granted you access to their land's objects.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_AQUA, "You have granted %s access to your land's objects.", GetRPName(targetid));
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET landkeys = 0 WHERE uid = %i", PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_AQUA, "That player already has access to someone's land. (/droplandkeys)");
		}
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}
Dialog:DIALOG_MP3PLAYER(playerid, response, listitem, inputtext[])
{
	if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                Dialog_Show(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
            }
            case 1:
            {
          		Dialog_Show(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
            }
            case 2:
            {
				if(!connectionID)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "The radio station database is currently unavailable.");
				}

				ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		     case 3:
	       	  {
				switch(PlayerData[playerid][pMusicType])
				{
					case MUSIC_MP3PLAYER:
					{
					   	SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
            			ShowActionBubble(playerid, "* %s turns off their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
						ShowActionBubble(playerid, "* %s turns off their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
							ShowActionBubble(playerid, "* %s turns off the radio in the vehicle.", GetRPName(playerid));
						}
					}
				}
			}
			case 4:
			{
				 if(PlayerData[playerid][pDonator] < 1)
				 {
					 return SendClientMessage(playerid, COLOR_GREY, "You must be a donator to use this option");
				 }
				 Dialog_Show(playerid, DIALOG_VIPMUSIC, DIALOG_STYLE_INPUT, "Donator Uploaded Music", "Please enter the name of the .mp3 file to play:", "Submit", "Back");
			}
  		}
	}
	return 1;
}
Dialog:DIALOG_MP3MUSIC(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new url[128];

        if(isnull(inputtext) || strfind(inputtext, ".mp3", true) == -1)
        {
            return Dialog_Show(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
		}

		for(new i = 0, l = strlen(inputtext); i < l; i ++)
		{
		    switch(inputtext[i])
		    {
		        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
		        {
					continue;
				}
				default:
				{
				    SendClientMessage(playerid, COLOR_GREY, "The name of the .mp3 contains invalid characters, please try again.");
				    return Dialog_Show(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
				}
		    }
		}

		format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, inputtext);

		switch(PlayerData[playerid][pMusicType])
		{
            case MUSIC_MP3PLAYER:
            {
                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
		  		ShowActionBubble(playerid, "* %s changes the song on their MP3 player.", GetRPName(playerid));
			}
			case MUSIC_BOOMBOX:
			{
			    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
				ShowActionBubble(playerid, "* %s changes the song on their boombox.", GetRPName(playerid));
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
					ShowActionBubble(playerid, "* %s changes the song on the radio.", GetRPName(playerid));
				}
			}
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have started the playback of {00AA00}%s{33CCFF}.", inputtext);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	return 1;
}
Dialog:DIALOG_VIPMUSIC(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new url[128];

        if(isnull(inputtext))
        {
            return Dialog_Show(playerid, DIALOG_VIPMUSIC, DIALOG_STYLE_INPUT, "Donator Uploaded Music", "Please enter the name of the .mp3 file to play:", "Submit", "Back");
		}

		for(new i = 0, l = strlen(inputtext); i < l; i ++)
		{
		    switch(inputtext[i])
		    {
		        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
		        {
					continue;
				}
				default:
				{
				    SendClientMessage(playerid, COLOR_GREY, "The name of the .mp3 contains invalid characters, please try again.");
				    return Dialog_Show(playerid, DIALOG_VIPMUSIC, DIALOG_STYLE_INPUT, "Donator Uploaded Music", "Please enter the name of the .mp3 file to play:", "Submit", "Back");
				}
		    }
		}

		format(url, sizeof(url), "http://%s/%d/%s", VIP_MUSIC_URL, PlayerData[playerid][pID], inputtext);
		switch(PlayerData[playerid][pMusicType])
		{
            case MUSIC_MP3PLAYER:
            {
                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
		  		ShowActionBubble(playerid, "* %s changes the song on their MP3 player.", GetRPName(playerid));
			}
			case MUSIC_BOOMBOX:
			{
			    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
				ShowActionBubble(playerid, "* %s changes the song on their boombox.", GetRPName(playerid));
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
					ShowActionBubble(playerid, "* %s changes the song on the radio.", GetRPName(playerid));
				}
			}
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have started the playback of {00AA00}%s{33CCFF}.", inputtext);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	return 1;
}
Dialog:DIALOG_MP3URL(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
        {
            return Dialog_Show(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
  		}
		if(!IsValidYoutubeUrl(inputtext) && strfind(inputtext, ".mp3", true) == -1)
		{
		    return Dialog_Show(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", ".MP3 or Youtube Links only! Please enter another URL", "Submit", "Back");
		}

  		switch(PlayerData[playerid][pMusicType])
		{
            case MUSIC_MP3PLAYER:
            {
                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
		  		ShowActionBubble(playerid, "* %s changes the song on their MP3 player.", GetRPName(playerid));
			}
			case MUSIC_BOOMBOX:
			{
			    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
				ShowActionBubble(playerid, "* %s changes the song on their boombox.", GetRPName(playerid));
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
					ShowActionBubble(playerid, "* %s changes the song on the radio.", GetRPName(playerid));
				}
			}
		}
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	return 1;
}
Dialog:DIALOG_MP3RADIO(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
            }
            case 1:
            {
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
            }
            /*case 2:
            {
                ShowDialogToPlayer(playerid, DIALOG_MP3APISEARCH);
            }*/
        }
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	return 1;
}
Dialog:DIALOG_MP3RADIOGENRES(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        strcpy(PlayerData[playerid][pGenre], inputtext, 32);
        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
    }
    return 1;
}
Dialog:DIALOG_MP3RADIOSUBGENRES(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        PlayerData[playerid][pPage] = 1;
 		PlayerData[playerid][pSearch] = 0;

        strcpy(PlayerData[playerid][pSubgenre], inputtext, 32);
        if(!PlayerData[playerid][pStationEdit])
        {
 			ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		}
		else
		{
		    ShowDialogToPlayer(playerid, DIALOG_ADDSTATION);
		}
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
	}
	return 1;
}
Dialog:DIALOG_MP3RADIORESULTS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!strcmp(inputtext, ">> Next page", true))
        {
            PlayerData[playerid][pPage]++;
            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
        }
        else if(!strcmp(inputtext, "<< Go back", true) && PlayerData[playerid][pPage] > 1)
        {
            PlayerData[playerid][pPage]--;
            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
        }
        else
        {
	        listitem = ((PlayerData[playerid][pPage] - 1) * MAX_LISTED_STATIONS) + listitem;

			if(PlayerData[playerid][pSearch])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, 1", PlayerData[playerid][pGenre], PlayerData[playerid][pGenre], listitem);
				mysql_tquery(connectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
			}
			else
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, url FROM radiostations WHERE genre = '%e' AND subgenre = '%e' ORDER BY name LIMIT %i, 1", PlayerData[playerid][pGenre], PlayerData[playerid][pSubgenre], listitem);
	        	mysql_tquery(connectionID, queryBuffer, "Radio_PlayStation", "i", playerid);
			}
		}
	}
	else
	{
	    if(PlayerData[playerid][pSearch])
	    {
	        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
	    }
	    else
	    {
	        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
		}
	}
	return 1;
}
Dialog:DIALOG_MP3RADIOSEARCH(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(strlen(inputtext) < 3)
        {
            SendClientMessage(playerid, COLOR_GREY, "Your search query must contain 3 characters or more.");
            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
        }

        PlayerData[playerid][pPage] = 1;
        PlayerData[playerid][pSearch] = 1;

        strcpy(PlayerData[playerid][pGenre], inputtext, 32);
        ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
	}
	return 1;
}

Dialog:DIALOG_GANGSTASH(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
	}

    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
	            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
            }
            case 1:
            {
                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHVEST);
            }
            case 2:
            {
                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
            }
            case 3:
            {
                if(!GetGangSkinCount(PlayerData[playerid][pGang]))
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "There are no skins setup for your gang.");
				}

			    PlayerData[playerid][pSkinSelected] = -1;
			    Dialog_Show(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press {00AA00}>> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
			}
            case 4:
			{
			    if(PlayerData[playerid][pGangRank] < 5)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 5+ to craft weapons.");
                }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
			}
			case 5:
			{
			    PlayerData[playerid][pSelected] = ITEM_MATERIALS;
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
			}
            case 6:
            {
                PlayerData[playerid][pSelected] = ITEM_CASH;
                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
			}
        }
    }
    return 1;
}
Dialog:DIALOG_GANGSTASHVEST(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
    }

	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gVestRank])
                {
                    return SendClientMessageEx(playerid, COLOR_GREY, "You must be at least rank %i+ to craft kevlar vests.", GangInfo[PlayerData[playerid][pGang]][gVestRank]);
                }
				if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 200)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe for kevlar vests.");
				}
				if(GetPlayerArmourEx(playerid) >= 100)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You have a full vest already.");
				}

				GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 200;
				SetScriptArmour(playerid, 100.0);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s takes a kevlar vest from the gang stash.", GetRPName(playerid));
				SendClientMessage(playerid, COLOR_AQUA, "You crafted a kevlar vest using 200 materials from the safe.");
			}
			case 1:
			{
			    if(PlayerData[playerid][pGangRank] < 6)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to change the vest rank.");
				}

				Dialog_Show(playerid, DIALOG_GANGSTASHVESTRANK, DIALOG_STYLE_LIST, "Choose a rank to restrict vests to:", "R0+\nR1+\nR2+\nR3+\nR4+\nR5+\nR6", "Select", "Back");
			}
        }
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	}
	return 1;
}
Dialog:DIALOG_GANGSTASHVESTRANK(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
    }

    if(response)
    {
        GangInfo[PlayerData[playerid][pGang]][gVestRank] = listitem;
        SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Kevlar vests{33CCFF} to rank %i+.", listitem);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_vest = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
        mysql_tquery(connectionID, queryBuffer);
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASHVEST);
	return 1;
}
Dialog:DIALOG_GANGSTASHWEAPONS1(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
    }
    if(response)
    {
        PlayerData[playerid][pSelected] = listitem;
        Dialog_Show(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang stash | Weapons", "Withdraw\nDeposit\nChange Rank", "Select", "Back");
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
    }
    return 1;
}
Dialog:DIALOG_GANGSTASHWEAPONS2(playerid, response, listitem, inputtext[])
{
  	if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
    }
    if(response)
    {
		if(listitem == 0)
		{
		    if(PlayerData[playerid][pGangRank] < 1)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 1+ in order to withdraw weapons.");
            }
            if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
			{
				return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
			}

		    switch(PlayerData[playerid][pSelected])
		    {
		        case GANGWEAPON_9MM:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_9MM])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 22))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
		            GivePlayerWeaponEx(playerid, 22);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a 9mm from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
                case GANGWEAPON_SDPISTOL:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SDPISTOL])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 23))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
		            GivePlayerWeaponEx(playerid, 23);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a silenced pistol from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_DEAGLE:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_DEAGLE])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 24))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
		            GivePlayerWeaponEx(playerid, 24);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a Desert Eagle from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_SHOTGUN:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SHOTGUN])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 25))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
		            GivePlayerWeaponEx(playerid, 25);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a shotgun from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
                case GANGWEAPON_TEC9:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_TEC9])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 32))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
		            GivePlayerWeaponEx(playerid, 32);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a Tec-9 from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_UZI:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_UZI])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 28))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
		            GivePlayerWeaponEx(playerid, 28);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a Micro Uzi from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_MP5:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_MP5])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 29))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
		            GivePlayerWeaponEx(playerid, 29);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws an MP5 from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_AK47:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_AK47])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 30))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
		            GivePlayerWeaponEx(playerid, 30);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws an AK-47 from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_RIFLE:
		        {
		            if(PlayerData[playerid][pGangRank] < GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_RIFLE])
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "Your rank isn't high enough to withdraw this weapon.");
					}
		            if(GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "The gang stash doesn't have any of this weapon left.");
		            }
		            if(PlayerHasWeapon(playerid, 33))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
		            GivePlayerWeaponEx(playerid, 33);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s withdraws a rifle from the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
			}
		}
		else if(listitem == 1)
        {
            if(IsLawEnforcement(playerid))
			{
		    	return SendClientMessage(playerid, COLOR_GREY, "Law enforcement is prohibited from storing weapons.");
			}
            if(GetPlayerHealthEx(playerid) < 60)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You can't store weapons as your health is below 60.");
			}

            switch(PlayerData[playerid][pSelected])
		    {
		        case GANGWEAPON_9MM:
		        {
		            if(!PlayerHasWeapon(playerid, 22))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
		            RemovePlayerWeapon(playerid, 22);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a 9mm in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
                case GANGWEAPON_SDPISTOL:
		        {
		            if(!PlayerHasWeapon(playerid, 23))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
		            RemovePlayerWeapon(playerid, 23);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a silenced pistol in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_DEAGLE:
		        {
		            if(!PlayerHasWeapon(playerid, 24))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
		            RemovePlayerWeapon(playerid, 24);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a Desert Eagle in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_SHOTGUN:
		        {
		            if(!PlayerHasWeapon(playerid, 25))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
		            RemovePlayerWeapon(playerid, 25);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a shotgun in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
			/*	case GANGWEAPON_SPAS12:
		        {
		            if(!PlayerHasWeapon(playerid, 27))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]++;
		            RemovePlayerWeapon(playerid, 27);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_spas12 = weapon_spas12 + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a SPAS-12 in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a SPAS-12 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_SAWNOFF:
		        {
		            if(!PlayerHasWeapon(playerid, 26))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;
		            RemovePlayerWeapon(playerid, 26);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_sawnoff = weapon_sawnoff + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a sawnoff shotgun in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a sawnoff shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}*/
                case GANGWEAPON_TEC9:
		        {
		            if(!PlayerHasWeapon(playerid, 32))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
		            RemovePlayerWeapon(playerid, 32);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a Tec-9 in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_UZI:
		        {
		            if(!PlayerHasWeapon(playerid, 28))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
		            RemovePlayerWeapon(playerid, 28);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a Micro Uzi in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_MP5:
		        {
		            if(!PlayerHasWeapon(playerid, 29))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
		            RemovePlayerWeapon(playerid, 29);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits an MP5 in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_AK47:
		        {
		            if(!PlayerHasWeapon(playerid, 30))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
		            RemovePlayerWeapon(playerid, 30);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits an AK-47 in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
/*						case GANGWEAPON_M4:
		        {
		            if(!PlayerHasWeapon(playerid, 31))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
		            RemovePlayerWeapon(playerid, 31);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits an M4 in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}*/
				case GANGWEAPON_RIFLE:
		        {
		            if(!PlayerHasWeapon(playerid, 33))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
		            RemovePlayerWeapon(playerid, 33);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a rifle in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
/*						case GANGWEAPON_SNIPER:
		        {
		            if(!PlayerHasWeapon(playerid, 34))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
		            RemovePlayerWeapon(playerid, 34);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a sniper rifle in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}
				case GANGWEAPON_MOLOTOV:
		        {
		            if(!PlayerHasWeapon(playerid, 18))
		            {
		                return SendClientMessage(playerid, COLOR_GREY, "You don't have this weapon.");
					}

		            GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;
		            RemovePlayerWeapon(playerid, 18);

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weapon_molotov = weapon_molotov + 1 WHERE id = %i", PlayerData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);

		            ShowActionBubble(playerid, "* %s deposits a molotov in the gang stash.", GetRPName(playerid));
		            Log_Write("log_gang", "%s (uid: %i) deposits a molotov in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
				}*/
			}
		}
		else if(listitem == 2)
		{
		    if(PlayerData[playerid][pGangRank] < 6)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to edit weapon ranks.");
			}

		    Dialog_Show(playerid, GangStashWeaponRank, DIALOG_STYLE_LIST, "Choose a rank to restrict withdrawals to:", "R0+\nR1+\nR2+\nR3+\nR4+\nR5+\nR6", "Select", "Back");
		}
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
	}
	return 1;
}
Dialog:GangStashWeaponRank(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
	}

    if(response)
    {
        switch(PlayerData[playerid][pSelected])
        {
            case GANGWEAPON_9MM:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_9MM] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}9mm{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_9mm = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_SDPISTOL:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SDPISTOL] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Silenced pistol{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_9mm = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_DEAGLE:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_DEAGLE] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Desert Eagle{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_deagle = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_SHOTGUN:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_SHOTGUN] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Shotgun{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_shotgun = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
    		case GANGWEAPON_TEC9:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_TEC9] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Tec-9{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_tec9 = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_UZI:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_UZI] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Micro Uzi{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_uzi = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_MP5:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_MP5] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}MP5{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_mp5 = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_AK47:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_AK47] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}AK-47{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_ak47 = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
            case GANGWEAPON_RIFLE:
            {
                GangInfo[PlayerData[playerid][pGang]][gWeaponRanks][GANGWEAPON_RIFLE] = listitem;
                SendClientMessageEx(playerid, COLOR_AQUA, "You have set the rank restriction for {FF6347}Rifle{33CCFF} to rank %i+.", listitem);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET rank_rifle = %i WHERE id = %i", listitem, PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);
            }
		}

        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
    }
    else
    {
        Dialog_Show(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang stash | Weapons", "Withdraw\nDeposit\nChange Rank", "Select", "Back");
	}
	return 1;
}
Dialog:DIALOG_GANGSTASHDRUGS1(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
	}

    if(response)
    {
        switch(listitem)
        {
            case 0: PlayerData[playerid][pSelected] = ITEM_WEED;
            case 1: PlayerData[playerid][pSelected] = ITEM_COCAINE;
            case 2: PlayerData[playerid][pSelected] = ITEM_METH;
            case 3: PlayerData[playerid][pSelected] = ITEM_PAINKILLERS;
        }

		ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
    }
	else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	}
	return 1;
}
Dialog:DIALOG_GANGSTASHDRUGS2(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
	}

    if(response)
    {
        if(listitem == 0)
        {
            if(PlayerData[playerid][pGangRank] < 2)
            {
                return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 2+ in order to withdraw drugs.");
            }

            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
        }
        else if(listitem == 1)
        {
            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
        }
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
	}
	return 1;
}
Dialog:DIALOG_GANGWITHDRAW(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 3)
    {
        return 1;
	}

	if(response)
	{
	    new amount;

	    if(sscanf(inputtext, "i", amount))
	    {
	        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		}

		switch(PlayerData[playerid][pSelected])
		{
		    case ITEM_WEED:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gWeed])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				if(PlayerData[playerid][pWeed] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gWeed] -= amount;
				PlayerData[playerid][pWeed] += amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weed = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gWeed], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some weed from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i grams of weed from the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of weed from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_COCAINE:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gCocaine])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				if(PlayerData[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gCocaine] -= amount;
				PlayerData[playerid][pCocaine] += amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cocaine = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gCocaine], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some cocaine from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i grams of cocaine from the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of cocaine from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
            case ITEM_METH:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gMeth])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				if(PlayerData[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gMeth] -= amount;
				PlayerData[playerid][pMeth] += amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET meth = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMeth], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some meth from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i grams of meth from the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_PAINKILLERS:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gPainkillers])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				if(PlayerData[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gPainkillers] -= amount;
				PlayerData[playerid][pPainkillers] += amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET painkillers = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPainkillers], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some painkillers from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i painkillers from the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_MATERIALS:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gMaterials])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				if(PlayerData[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gMaterials] -= amount;
				PlayerData[playerid][pMaterials] += amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some materials from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i materials from the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_CASH:
		    {
		        if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gCash])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				GangInfo[PlayerData[playerid][pGang]][gCash] -= amount;
				GivePlayerCash(playerid, amount);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gCash], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s withdraws some cash from the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %s from the gang stash.", FormatNumber(amount));
				Log_Write("log_gang", "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
		}
	}
	else
	{
	    if(PlayerData[playerid][pSelected] == ITEM_MATERIALS) {
	        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
		} else if(PlayerData[playerid][pSelected] == ITEM_CASH) {
			ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
		} else {
		    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		}
	}
	return 1;
}
Dialog:DIALOG_GANGDEPOSIT(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return 1;
	}

	if(response)
	{
	    new amount;

	    if(sscanf(inputtext, "i", amount))
	    {
	        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		}

		switch(PlayerData[playerid][pSelected])
		{
		    case ITEM_WEED:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pWeed])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gWeed] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_WEED))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than %i grams of weed.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_WEED));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gWeed] += amount;
				PlayerData[playerid][pWeed] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET weed = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gWeed], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some weed in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i grams of weed in the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) deposits %i grams of weed in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_COCAINE:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pCocaine])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gCocaine] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_COCAINE))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than %i grams of cocaine.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_COCAINE));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gCocaine] += amount;
				PlayerData[playerid][pCocaine] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cocaine = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gCocaine], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some cocaine in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i grams of cocaine in the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) deposits %i grams of cocaine in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
            case ITEM_METH:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pMeth])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_METH))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than %i grams of meth.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_METH));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gMeth] += amount;
				PlayerData[playerid][pMeth] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET meth = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMeth], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some meth in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i grams of meth in the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_PAINKILLERS:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pPainkillers])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than %i painkillers.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gPainkillers] += amount;
				PlayerData[playerid][pPainkillers] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET painkillers = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPainkillers], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some painkillers in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i painkillers in the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_MATERIALS:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pMaterials])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than %i materials.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_MATERIALS));
				    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gMaterials] += amount;
				PlayerData[playerid][pMaterials] -= amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some materials in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i materials in the gang stash.", amount);
				Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
			case ITEM_CASH:
		    {
		        if(amount < 1 || amount > PlayerData[playerid][pCash])
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gCash] + amount > GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "The gang stash can't contain more than $%i.", GetGangStashCapacity(PlayerData[playerid][pGang], STASH_CAPACITY_CASH));
					return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				GangInfo[PlayerData[playerid][pGang]][gCash] += amount;
				GivePlayerCash(playerid, -amount);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gCash], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				ShowActionBubble(playerid, "* %s deposits some cash in the gang stash.", GetRPName(playerid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i in the gang stash.", FormatNumber(amount));
				Log_Write("log_gang", "%s (uid: %i) deposited $%i in the gang stash.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
			}
		}
	}
	else
	{
		if(PlayerData[playerid][pSelected] == ITEM_MATERIALS) {
	        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
		} else if(PlayerData[playerid][pSelected] == ITEM_CASH) {
			ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
		} else {
		    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		}
	}
	return 1;
}
Dialog:DIALOG_GANGSTASHCRAFT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
	    switch(listitem)
        {
            case 0:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 100)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 100;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_9mm = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_9MM], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a 9mm and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 100 materials from your gang stash to craft a 9mm.");
                Log_Write("log_gang", "%s (uid: %i) crafts a 9mm using 100 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 1:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 150)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 150;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_sdpistol = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a silenced pistol and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 150 materials from your gang stash to craft a silenced pistol.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a silenced pistol using 150 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 2:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 200)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 200;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_shotgun = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a shotgun and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 200 materials from your gang stash to craft a shotgun.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a shotgun using 200 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 3:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 500)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 500;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_uzi = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_UZI], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a Micro SMG and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 500 materials from your gang stash to craft a Micro SMG.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a Micro SMG using 500 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 4:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 500)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 500;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_tec9 = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a Tec-9 and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 500 materials from your gang stash to craft a Tec-9.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a Tec-9 using 500 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 5:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 1000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 1000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_mp5 = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MP5], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts an MP5 and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 1000 materials from your gang stash to craft an MP5.");
            	Log_Write("log_gang", "%s (uid: %i) crafts an MP5 using 1000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 6:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 1000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 1000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_rifle = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a rifle and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 1000 materials from your gang stash to craft a rifle.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a rifle using 1000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
            case 7:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 2000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 2000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_deagle = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a Desert Eagle and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 2000 materials from your gang stash to craft a Desert Eagle.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a Desert Eagle using 2000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
/*	                case 8:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 5000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 5000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_molotov = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a molotov and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 5000 materials from your gang stash to craft a molotov.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a molotov using 5000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }*/
            case 8:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 3000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 3000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_ak47 = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_AK47], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts an AK-47 and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 3000 materials from your gang stash to craft an AK-47.");
            	Log_Write("log_gang", "%s (uid: %i) crafts an AK-47 using 3000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
            }
/*	                case 10:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gMaterials] < 3000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "There aren't enough materials in the safe.");
                }

                GangInfo[PlayerData[playerid][pGang]][gMaterials] -= 3000;
                GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET materials = %i, weapon_sawnoff = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMaterials], GangInfo[PlayerData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF], PlayerData[playerid][pGang]);
                mysql_tquery(connectionID, queryBuffer);

                ShowActionBubble(playerid, "* %s crafts a sawnoff shotgun and stores it to the gang stash.", GetRPName(playerid));
                SendClientMessage(playerid, COLOR_AQUA, "You used 3000 materials from your gang stash to craft a sawnoff shotgun.");
            	Log_Write("log_gang", "%s (uid: %i) crafts a sawnoff shotgun using 3000 materials from the gang stash.", GetRPName(playerid), PlayerData[playerid][pID]);

                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCRAFT);
			}*/
		}
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	}
	return 1;
}
Dialog:DIALOG_GANGSTASHMATS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0)
		{
		    if(PlayerData[playerid][pGangRank] < 6)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 6+ in order to withdraw materials.");
            }

			ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		}
		else if(listitem == 1)
		{
			ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		}
	}
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
    }
    return 1;
}
Dialog:DIALOG_GANGSTASHCASH(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0)
		{
		    if(PlayerData[playerid][pGangRank] < 6)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 6+ in order to withdraw cash.");
            }

			ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		}
		else if(listitem == 1)
		{
			ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		}
	}
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
    }
    return 1;
}
Dialog:DIALOG_GANGSKINS(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] >= 0)
    {
        if(response)
        {
			new index = PlayerData[playerid][pSkinSelected] + 1;

			if(index >= MAX_GANG_SKINS)
			{
			    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
			    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
			    PlayerData[playerid][pSkinSelected] = -1;
			}
			else
			{
			    // Find the next skin in the array.
				for(new i = index; i < MAX_GANG_SKINS; i ++)
				{
				    if(GangInfo[PlayerData[playerid][pGang]][gSkins][i] != 0)
				    {
				        SetPlayerSkin(playerid, GangInfo[PlayerData[playerid][pGang]][gSkins][i]);
				        PlayerData[playerid][pSkinSelected] = i;
				        break;
			        }
                }

                if(index == PlayerData[playerid][pSkinSelected] + 1)
                {
                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
					{
				    	if(GangInfo[PlayerData[playerid][pGang]][gSkins][i] != 0)
				    	{
                            SetPlayerSkin(playerid, GangInfo[PlayerData[playerid][pGang]][gSkins][i]);
				        	PlayerData[playerid][pSkinSelected] = i;
				        	break;
						}
					}
                }
            }

            Dialog_Show(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press {00AA00}>> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
        }
        else
        {
            PlayerData[playerid][pSkinSelected] = -1;

			SetScriptSkin(playerid, GetPlayerSkin(playerid));
            ShowActionBubble(playerid, "* %s changes their clothes.", GetRPName(playerid));
		}
    }
    return 1;
}
Dialog:DIALOG_GANGFINDCAR(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new count, garageid;

        foreach(new i: Vehicle)
	 	{
	 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerData[playerid][pGang]) && (count++ == listitem))
	 	    {
                PlayerData[playerid][pCP] = CHECKPOINT_MISC;

	            if((garageid = GetVehicleGarage(i)) >= 0)
	            {
	                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
	                SendClientMessageEx(playerid, COLOR_YELLOW, "This %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
	            }
	            else
	            {
	                new
	                    Float:x,
	                    Float:y,
	                    Float:z;

	                GetVehiclePos(i, x, y, z);
	                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	                SendClientMessageEx(playerid, COLOR_YELLOW, "This %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
	            }

	            return 1;
            }
		}
	}
	return 1;
}
Dialog:DIALOG_GANGPOINTSHOP(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 6)
    {
        return 1;
    }

    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 500)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
				}
				if(PlayerData[playerid][pCash] < 50000)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You need $50,000 on hand to purchase this upgrade.");
				}
				if(GangInfo[PlayerData[playerid][pGang]][gDrugDealer])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Your gang already has this upgrade.");
				}

				GangInfo[PlayerData[playerid][pGang]][gDrugDealer] = 1;
				GangInfo[PlayerData[playerid][pGang]][gDrugX] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gDrugY] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gDrugZ] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gDrugWeed] = 0;
				GangInfo[PlayerData[playerid][pGang]][gDrugMeth] = 0;
				GangInfo[PlayerData[playerid][pGang]][gDrugCocaine] = 0;
				GangInfo[PlayerData[playerid][pGang]][gDrugPrices][0] = 500;
				GangInfo[PlayerData[playerid][pGang]][gDrugPrices][1] = 1000;
				GangInfo[PlayerData[playerid][pGang]][gDrugPrices][2] = 1500;
				GangInfo[PlayerData[playerid][pGang]][gPoints] -= 500;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugweed = 0, drugcocaine = 0, drugmeth = 0, weed_price = 500, cocaine_price = 1000, meth_price = 1500, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				GivePlayerCash(playerid, -50000);
				SendClientMessage(playerid, COLOR_AQUA, "You have spent 500 GP & $50,000 on an {00AA00}NPC drug dealer{33CCFF}. '/gang npc' to edit your drug dealer.");
				Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
			}
			case 1:
            {
                if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 500)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
				}
				if(PlayerData[playerid][pCash] < 50000)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You need $50,000 on hand to purchase this upgrade.");
				}
				if(GangInfo[PlayerData[playerid][pGang]][gArmsDealer])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Your gang already has this upgrade.");
				}

				GangInfo[PlayerData[playerid][pGang]][gArmsDealer] = 1;
				GangInfo[PlayerData[playerid][pGang]][gArmsX] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gArmsY] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gArmsZ] = 0.0;
				GangInfo[PlayerData[playerid][pGang]][gArmsMaterials] = 0;
				GangInfo[PlayerData[playerid][pGang]][gPoints] -= 500;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				GivePlayerCash(playerid, -50000);
				SendClientMessage(playerid, COLOR_AQUA, "You have spent 500 GP & $50,000 on an {00AA00}NPC arms dealer{33CCFF}. '/gang npc' to edit your arms dealer.");
				Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
			}
			case 2:
			{
			    if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 400)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
				}
				if(PlayerData[playerid][pCash] < 75000)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You need $75,000 on hand to purchase this upgrade.");
				}

				GivePlayerCash(playerid, -75000);
				GiveGangPoints(PlayerData[playerid][pGang], -400);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Duel arena')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have spent 400 GP & $75,000 on a {00AA00}Duel arena{33CCFF}. /report for an admin to set it up.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a duel arena for their gang.", GetRPName(playerid), playerid);
			}
            case 3:
			{
			    if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 4500)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
				}
				if(PlayerData[playerid][pCash] < 100000)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You need $100,000 on hand to purchase this upgrade.");
				}

				GivePlayerCash(playerid, -100000);
				GiveGangPoints(PlayerData[playerid][pGang], -4500);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Gang mapping (up to 50 objects)')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have spent 4500 GP & $100,000 on {00AA00}Mapping{33CCFF}. /report for an admin to set it up.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for mapping for their gang.", GetRPName(playerid), playerid);
			}
			case 4:
			{
			    if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 5000)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
				}
				if(PlayerData[playerid][pCash] < 100000)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You need $100,000 on hand to purchase this upgrade.");
				}

				GivePlayerCash(playerid, -100000);
				GiveGangPoints(PlayerData[playerid][pGang], -5000);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Gang point redemption', NOW(), 'Custom gang interior')", PlayerData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "You have spent 5000 GP & $100,000 on {00AA00}Custom gang interior{33CCFF}. /report for an admin to set it up.");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has a pending flag for a custom gang interior.", GetRPName(playerid), playerid);
			}
			case 5:
			{
			    new cashNeeded = 100000 + (50000*GangInfo[PlayerData[playerid][pGang]][gMatLevel]);
				new pointsNeeded = 1500 + (500*GangInfo[PlayerData[playerid][pGang]][gMatLevel]);
			    if(GangInfo[PlayerData[playerid][pGang]][gPoints] < pointsNeeded)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
			    }
			    if(PlayerData[playerid][pCash] < cashNeeded)
				{
    				return SendClientMessageEx(playerid, COLOR_GREY, "You need $%i on hand to purchase this upgrade.", cashNeeded);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gMatLevel] + 1 > 3)
				{
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang's materials upgrade is already maxed out. (3/3)");
				}

				GangInfo[PlayerData[playerid][pGang]][gMatLevel]++;
				GangInfo[PlayerData[playerid][pGang]][gPoints] -= pointsNeeded;
				GivePlayerCash(playerid, -cashNeeded);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET matlevel = %i, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gMatLevel], GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You have spent %i GP & $%i for materials upgrade %i/3", pointsNeeded, cashNeeded, GangInfo[PlayerData[playerid][pGang]][gMatLevel]);
				SendClientMessageEx(playerid, COLOR_GREEN, "Your gang will now receive %i materials from each material-class turf captured.", (10000+(5000*GangInfo[PlayerData[playerid][pGang]][gMatLevel])));

                Log_Write("log_gang", "%s (uid: %i) spent %i GP & $%i for gang level %i/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], pointsNeeded, cashNeeded, GangInfo[PlayerData[playerid][pGang]][gMatLevel], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
			}
			case 6:
			{
			    new cashNeeded = 40000 + (20000 * GangInfo[PlayerData[playerid][pGang]][gGunLevel]);
				new pointsNeeded = 1500 + (250*GangInfo[PlayerData[playerid][pGang]][gGunLevel]);
				if(GangInfo[PlayerData[playerid][pGang]][gPoints] < pointsNeeded)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
			    }
			    if(PlayerData[playerid][pCash] < cashNeeded)
				{
    				return SendClientMessageEx(playerid, COLOR_GREY, "You need $%i on hand to purchase this upgrade.", cashNeeded);
				}
				if(GangInfo[PlayerData[playerid][pGang]][gGunLevel] + 1 > 5)
				{
                    return SendClientMessage(playerid, COLOR_GREY, "Your gang's gun upgrade is already maxed out. (5/5");
				}

				GangInfo[PlayerData[playerid][pGang]][gGunLevel]++;
				GangInfo[PlayerData[playerid][pGang]][gPoints] -= pointsNeeded;
				GivePlayerCash(playerid, -cashNeeded);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET gunlevel = %i, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gGunLevel], GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessageEx(playerid, COLOR_GREEN, "You have spent %i GP & $%i for guns upgrade %i/5", pointsNeeded, cashNeeded, GangInfo[PlayerData[playerid][pGang]][gGunLevel]);
				SendClientMessageEx(playerid, COLOR_GREEN, "Your gang will now receive %i guns from each weapon-class turf captured.", (10+GangInfo[PlayerData[playerid][pGang]][gGunLevel]));


				Log_Write("log_gang", "%s (uid: %i) spent %i GP & $%i for gang level %i/5 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], pointsNeeded, cashNeeded, GangInfo[PlayerData[playerid][pGang]][gGunLevel], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
			}
			case 7:
			{
			    switch(GangInfo[PlayerData[playerid][pGang]][gLevel])
			    {
			        case 1:
			        {
			            if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 6000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
						}
						if(PlayerData[playerid][pCash] < 75000)
						{
						    return SendClientMessage(playerid, COLOR_GREY, "You need $75,000 on hand to purchase this upgrade.");
						}

						GangInfo[PlayerData[playerid][pGang]][gLevel] = 2;
						GangInfo[PlayerData[playerid][pGang]][gPoints] -= 6000;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET level = 2, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -75000);
						ReloadGang(PlayerData[playerid][pGang]);

						SendClientMessageEx(playerid, COLOR_GREEN, "You have spent 6000 GP & $75,000 for gang level 2/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerData[playerid][pGang]), GetGangVehicleLimit(PlayerData[playerid][pGang]));
						SendClientMessage(playerid, COLOR_GREEN, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

						Log_Write("log_gang", "%s (uid: %i) spent 6000 GP & $75000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
					}
					case 2:
			        {
			            if(GangInfo[PlayerData[playerid][pGang]][gPoints] < 12000)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have enough points.");
						}
						if(PlayerData[playerid][pCash] < 100000)
						{
						    return SendClientMessage(playerid, COLOR_GREY, "You need $100,000 on hand to purchase this upgrade.");
						}

						GangInfo[PlayerData[playerid][pGang]][gLevel] = 3;
						GangInfo[PlayerData[playerid][pGang]][gPoints] -= 12000;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET level = 3, points = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gPoints], PlayerData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -100000);
						ReloadGang(PlayerData[playerid][pGang]);

						SendClientMessageEx(playerid, COLOR_GREEN, "You have spent 12000 GP & $100,000 for gang level 3/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(PlayerData[playerid][pGang]), GetGangVehicleLimit(PlayerData[playerid][pGang]));
						SendClientMessage(playerid, COLOR_GREEN, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

						Log_Write("log_gang", "%s (uid: %i) spent 12000 GP & $100000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang]);
					}
				}
			}
        }
    }
    return 1;
}
Dialog:DIALOG_GANGARMSPRICES(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
    {
        return 1;
    }

    if(response)
    {
        PlayerData[playerid][pSelected] = listitem;
        Dialog_Show(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item:", "Submit", "Back");
    }
    else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
	}
	return 1;
}
Dialog:DIALOG_GANGARMSPRICE(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
    {
        return 1;
    }

    if(response)
    {
        new amount;

        if(sscanf(inputtext, "i", amount))
        {
            return Dialog_Show(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
		}
		if(amount < 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $0.");
		    return Dialog_Show(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
		}

		GangInfo[PlayerData[playerid][pGang]][gArmsPrices][PlayerData[playerid][pSelected]] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", PlayerData[playerid][pSelected] + 1, amount, PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		if(PlayerData[playerid][pSelected] == 0) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Micro Uzi{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 1) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Tec-9{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 2) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}MP5{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 3) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Desert Eagle{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 4) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Molotov{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 5) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}AK-47{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 6) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}M4{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 7) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Sniper{33CCFF} to $%i.", amount);
        } else if(PlayerData[playerid][pSelected] == 8) {
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the price of {00AA00}Sawnoff Shotgun{33CCFF} to $%i.", amount);
        }
    }

    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
    return 1;
}
Dialog:DIALOG_GANGARMSDEALER(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerData[playerid][pDealerGang]][gArmsX], GangInfo[PlayerData[playerid][pDealerGang]][gArmsY], GangInfo[PlayerData[playerid][pDealerGang]][gArmsZ]))
    {
        return 1;
	}

	if(response)
	{
	    if(listitem == 0)
	    {
			ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
		}
		else if(listitem == 1)
		{
		    if(PlayerData[playerid][pGang] != PlayerData[playerid][pDealerGang])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "This arms dealer doesn't belong to your gang.");
		    }
		    if(PlayerData[playerid][pGangRank] < 6)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You need to be rank 6+ in order to edit.");
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
	}
	return 1;
}
Dialog:DIALOG_GANGARMSWEAPONS(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[PlayerData[playerid][pDealerGang]][gArmsX], GangInfo[PlayerData[playerid][pDealerGang]][gArmsY], GangInfo[PlayerData[playerid][pDealerGang]][gArmsZ]))
    {
        return 1;
	}

	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 500)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 500;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 28);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a micro uzi.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}micro uzi{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 1:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 500)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 500;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 32);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a Tec-9.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}Tec-9{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 2:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 1000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 1000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 29);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received an MP5.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased an {00AA00}MP5{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 3:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 2000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 2000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 24);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a Desert Eagle.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}Desert Eagle{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 4:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 5000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 5000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 18);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a molotov.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}molotov{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 5:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 3000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 30);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received an AK-47.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased an {00AA00}AK-47{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 6:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 4000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 4000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 31);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received an M4.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased an {00AA00}M4{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 7:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 6500)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 6500;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 34);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}sniper{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
	        case 8:
	        {
	            if(GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] < 3000)
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "This gang's arms dealer doesn't have enough materials for this weapon.");
				}
				if(PlayerData[playerid][pCash] < GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this weapon.");
	            }

	            GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
	            GangInfo[PlayerData[playerid][pDealerGang]][gCash] += GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem];

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[PlayerData[playerid][pDealerGang]][gArmsMaterials], GangInfo[PlayerData[playerid][pDealerGang]][gCash], PlayerData[playerid][pDealerGang]);
	            mysql_tquery(connectionID, queryBuffer);

	            GivePlayerCash(playerid, -GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            GivePlayerWeaponEx(playerid, 26);

	            ShowActionBubble(playerid, "* %s paid $%i to the arms dealer and received a sawnoff shotgun.", GetRPName(playerid), GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	            SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a {00AA00}sawnoff shotgun{33CCFF} for $%i.", GangInfo[PlayerData[playerid][pDealerGang]][gArmsPrices][listitem]);
	        }
		}
	}
	else
    {
        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	}
	return 1;
}

Dialog:DIALOG_GANGARMSEDIT(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 6)
    {
        return 1;
	}

	if(response)
	{
	    switch(listitem)
	    {
	        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
			case 1: ShowDialogToPlayer(playerid, GangStashDepositMats);
			case 2: ShowDialogToPlayer(playerid, GangStashWithdrawMats);
	    }
	}
	else
	{
	    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	}
	return 1;
}
Dialog:GangStashDepositMats(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 6)
    {
        return 1;
	}

	if(response)
	{
	    new amount;

	    if(sscanf(inputtext, "i", amount))
	    {
	        return ShowDialogToPlayer(playerid, GangStashDepositMats);
		}
		if(amount < 1 || amount > PlayerData[playerid][pMaterials])
		{
		    SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	        return ShowDialogToPlayer(playerid, GangStashDepositMats);
	    }

	    GangInfo[PlayerData[playerid][pGang]][gArmsMaterials] += amount;
	    PlayerData[playerid][pMaterials] -= amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gArmsMaterials], PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have deposited %i materials in your arms dealer NPC.", amount);
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
	return 1;
}
Dialog:GangStashWithdrawMats(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 6)
    {
        return 1;
	}

	if(response)
	{
	    new amount;

	    if(sscanf(inputtext, "i", amount))
	    {
	        return ShowDialogToPlayer(playerid, GangStashWithdrawMats);
		}
		if(amount < 1 || amount > GangInfo[PlayerData[playerid][pGang]][gArmsMaterials])
		{
		    SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	        return ShowDialogToPlayer(playerid, GangStashWithdrawMats);
	    }

	    GangInfo[PlayerData[playerid][pGang]][gArmsMaterials] -= amount;
	    PlayerData[playerid][pMaterials] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET armsmaterials = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gArmsMaterials], PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have withdrawn %i materials from your arms dealer NPC.", amount);
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
	return 1;
}

Dialog:DIALOG_FREENAMECHANGE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
        {
            if(!IsPlayerLoggedIn(playerid))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Please reconnect with a proper roleplay name in the Firstname_Lastname format.");
	        	KickPlayer(playerid);
	        	return 1;
			}
            return Dialog_Show(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
		if(!(3 <= strlen(inputtext) <= 20))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Your name must contain 3 to 20 characters.");
		    return Dialog_Show(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
		if(strfind(inputtext, "_") == -1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "The name needs to contain at least one underscore.");
		    return Dialog_Show(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
        if(!IsValidName(inputtext))
        {
		    SendClientMessage(playerid, COLOR_GREY, "That name is not supported by SA-MP.");
		    return Dialog_Show(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}

        PlayerData[playerid][pFreeNamechange] = 1;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", inputtext);
        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
    }
    else
    {
        if(!PlayerData[playerid][pLogged])
        {
            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has been kicked for failing to change their name.", GetRPName(playerid), playerid);
            KickPlayer(playerid);
        }
        else
        {
	    	PlayerData[playerid][pJailType] = 2;
		    PlayerData[playerid][pJailTime] = 20 * 60;

			ResetPlayerWeaponsEx(playerid);
			ResetPlayer(playerid);

			SetPlayerInJail(playerid);
			GameTextForPlayer(playerid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET prisonedby = 'Server', prisonreason = 'failing to change their name' WHERE uid = %i", PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			strins(PlayerData[playerid][pPrisonedBy], "Server", 0);
			strins(PlayerData[playerid][pPrisonReason], "failing to change their name", 0);

            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has been prisoned for failing to change their name.", GetRPName(playerid), playerid);
			Log_Write("log_punishments", "%s (uid: %i) has been prisoned for 20 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), PlayerData[playerid][pID]);

		}
	}
	return 1;
}
Dialog:DIALOG_REMOVEFLAG(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		new targetid = PlayerData[playerid][pRemoveFrom];

		if(targetid == INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player has disconnected. You can't remove their flags now.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, description FROM flags WHERE uid = %i LIMIT %i, 1", PlayerData[targetid][pID], listitem);
		mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "ii", playerid, targetid);
    }
    return 1;
}
Dialog:DIALOG_NEWBIEUNMUTE(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pNewbieMuted])
    {
        switch(listitem)
        {
            case 0:
            {
                new fine = percent(PlayerData[playerid][pCash] + PlayerData[playerid][pBank], 5);

                GivePlayerCash(playerid, -fine);
                SendClientMessageEx(playerid, COLOR_AQUA, "You have chosen to pay a 5 percent fine of {FF6347}$%i{33CCFF} for a newbie unmute.", fine);
            }
            case 1:
            {
                if(PlayerData[playerid][pJailTime] > 600)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "This punishment is not available to you as you are jailed for more than 10 minutes.");
                }

                PlayerData[playerid][pJailType] = 1;
			    PlayerData[playerid][pJailTime] += 600;

			    ResetPlayerWeaponsEx(playerid);
				ResetPlayer(playerid);
				SetPlayerInJail(playerid);

			    SendClientMessage(playerid, COLOR_AQUA, "You have chosen a 10 minute jail sentence for a newbie unmute.");
            }
        }

        PlayerData[playerid][pNewbieMuted] = 0;
        PlayerData[playerid][pNewbieMuteTime] = 0;
    }
    return 1;
}
Dialog:DIALOG_REPORTUNMUTE(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pReportMuted])
    {
        switch(listitem)
        {
            case 0:
            {
                new fine = percent(PlayerData[playerid][pCash] + PlayerData[playerid][pBank], 5);

                GivePlayerCash(playerid, -fine);
                SendClientMessageEx(playerid, COLOR_AQUA, "You have chosen to pay a 5 percent fine of {FF6347}$%i{33CCFF} for a report unmute.", fine);
            }
            case 1:
            {
                if(PlayerData[playerid][pJailTime] > 600)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "This punishment is not available to you as you are jailed for more than 10 minutes.");
                }

                PlayerData[playerid][pJailType] = 1;
			    PlayerData[playerid][pJailTime] = 600;

			    ResetPlayerWeaponsEx(playerid);
				ResetPlayer(playerid);
				SetPlayerInJail(playerid);

			    SendClientMessage(playerid, COLOR_AQUA, "You have chosen a 10 minute jail sentence for a report unmute.");
            }
        }

        PlayerData[playerid][pReportMuted] = 0;
        PlayerData[playerid][pReportMuteTime] = 0;
    }
    return 1;
}
Dialog:DIALOG_GLOBALUNMUTE(playerid, response, listitem, inputtext[])
{
    if((response) && PlayerData[playerid][pGlobalMuted])
    {
        switch(listitem)
        {
            case 0:
            {
                new fine = percent(PlayerData[playerid][pCash] + PlayerData[playerid][pBank], 5);

                GivePlayerCash(playerid, -fine);
                SendClientMessageEx(playerid, COLOR_AQUA, "You have chosen to pay a 5 percent fine of {FF6347}$%i{33CCFF} for a global chat unmute.", fine);
            }
            case 1:
            {
                if(PlayerData[playerid][pJailTime] > 600)
                {
                    return SendClientMessage(playerid, COLOR_GREY, "This punishment is not available to you as you are jailed for more than 10 minutes.");
                }

                PlayerData[playerid][pJailType] = 1;
			    PlayerData[playerid][pJailTime] = 600;

			    ResetPlayerWeaponsEx(playerid);
				ResetPlayer(playerid);
				SetPlayerInJail(playerid);

			    SendClientMessage(playerid, COLOR_AQUA, "You have chosen a 10 minute jail sentence for a global chat unmute.");
            }
        }

        PlayerData[playerid][pGlobalMuted] = 0;
        PlayerData[playerid][pGlobalMuteTime] = 0;
    }
    return 1;
}
Dialog:DIALOG_VEHICLEDMV(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(PlayerData[playerid][pCash] < 1499)
        {
            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to release your vehicle");
		}
		new Float:vehposx, Float:vehposy, Float:vehposz, Float:angle;
		vehposx = 1198.6892;
		vehposy = -1834.5319;
		vehposz = 13.3995;
		angle = 268.9968;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET  pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', impounded = 0 WHERE id = %d", vehposx, vehposy, vehposz, angle, VehicleInfo[listitem][vID]);
		mysql_tquery(connectionID, queryBuffer);
		VehicleInfo[listitem][pvImpounded] = 0;
		SendClientMessage(playerid, COLOR_GREEN, "Your vehicle was released from the DMV, have a nice day!");
		GivePlayerCash(playerid, -1500);
	}
	return 1;
}
Dialog:DIALOG_REMOVEPVEH(playerid, response, listitem, inputtext[])
{
	if(response)
    {
        new targetid = PlayerData[playerid][pRemoveFrom];

		if(targetid == INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player has disconnected. You can't remove their vehicles now.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i LIMIT %i, 1", PlayerData[targetid][pID], listitem);
		mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveVehicle", "ii", playerid, targetid);
    }
    return 1;
}
Dialog:DIALOG_CRACKTRUNK(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehicleid = PlayerData[playerid][pCocaineFrom], amount;

        if(!IsPlayerInRangeOfBoot(playerid, vehicleid))
        {
            return SendClientMessage(playerid, COLOR_GREY, "You can't steal anything from the trunk now. You're not near it.");
        }
        if(VehicleInfo[vehicleid][vLocked])
        {
            return SendClientMessage(playerid, COLOR_GREY, "You can't steal anything from the trunk now. The vehicle is locked!");
        }

        if(strfind(inputtext, "Weed") != -1 && (amount = VehicleInfo[vehicleid][vWeed]/20) > 0)
        {
            if(PlayerData[playerid][pWeed] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
			    return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
			}

  			VehicleInfo[vehicleid][vWeed] -= amount;
  			PlayerData[playerid][pWeed] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %i grams of weed from the trunk.", GetRPName(playerid), amount);
        }
        else if(strfind(inputtext, "Cocaine") != -1 && (amount = VehicleInfo[vehicleid][vCocaine]/20) > 0)
        {
            if(PlayerData[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
			    return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
			}

  			VehicleInfo[vehicleid][vCocaine] -= amount;
  			PlayerData[playerid][pCocaine] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %i grams of cocaine from the trunk.", GetRPName(playerid), amount);
        }
        else if(strfind(inputtext, "Meth") != -1 && (amount = VehicleInfo[vehicleid][vMeth]/20) > 0)
        {
            if(PlayerData[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
			    return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
			}

  			VehicleInfo[vehicleid][vMeth] -= amount;
  			PlayerData[playerid][pMeth] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %i grams of meth from the trunk.", GetRPName(playerid), amount);
        }
        else if(strfind(inputtext, "Painkillers") != -1 && (amount = VehicleInfo[vehicleid][vPainkillers]/20) > 0)
        {
            if(PlayerData[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
			    return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
			}

  			VehicleInfo[vehicleid][vPainkillers] -= amount;
  			PlayerData[playerid][pPainkillers] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %i painkillers from the trunk.", GetRPName(playerid), amount);
        }
        else if(strfind(inputtext, "Materials") != -1 && (amount = VehicleInfo[vehicleid][vMaterials]/20) > 0)
        {
            if(PlayerData[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
			    return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
			}

  			VehicleInfo[vehicleid][vMaterials] -= amount;
  			PlayerData[playerid][pMaterials] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %i materials from the trunk.", GetRPName(playerid), amount);
        }
        else if(strfind(inputtext, "Cash") != -1 && (amount = VehicleInfo[vehicleid][vCash]/20) > 0)
        {
  			VehicleInfo[vehicleid][vCash] -= amount;
  			PlayerData[playerid][pCash] += amount;

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
  			mysql_tquery(connectionID, queryBuffer);

  			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cash = %i WHERE uid = %i", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

  			ShowActionBubble(playerid, "* %s steals %s worth of cash from the trunk.", GetRPName(playerid), FormatNumber(amount));
        }
        else
        {
            for(new i = 0; i < 5; i ++)
            {
                if(VehicleInfo[vehicleid][vWeapons][i] != 0 && !strcmp(GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), inputtext))
                {
                    if(PlayerHasWeapon(playerid, VehicleInfo[vehicleid][vWeapons][i]))
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You have this weapon already.");
                        return ShowDialogToPlayer(playerid, DIALOG_CRACKTRUNK);
					}

					GivePlayerWeaponEx(playerid, VehicleInfo[vehicleid][vWeapons][i]);
					ShowActionBubble(playerid, "* %s steals a %s from the trunk.", GetRPName(playerid), GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", i + 1, VehicleInfo[vehicleid][vID]);
					mysql_tquery(connectionID, queryBuffer);

					VehicleInfo[vehicleid][vWeapons][i] = 0;
					break;
				}
			}
        }
	}

	PlayerData[playerid][pCocaineTrunk] = INVALID_PLAYER_ID;
	return 1;
}
Dialog:DIALOG_HOUSEINTERIORS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new houseid = GetNearbyHouseEx(playerid);

        if(houseid >= 0 && IsHouseOwner(playerid, houseid))
        {
            SetPlayerPos(playerid, houseInteriors[listitem][intX], houseInteriors[listitem][intY], houseInteriors[listitem][intZ]);
            SetPlayerFacingAngle(playerid, houseInteriors[listitem][intA]);
            SetPlayerInterior(playerid, houseInteriors[listitem][intID]);
            SetCameraBehindPlayer(playerid);

            PlayerData[playerid][pPreviewHouse] = houseid;
            PlayerData[playerid][pPreviewType] = listitem;
            PlayerData[playerid][pPreviewTime] = 60;

            SendClientMessageEx(playerid, COLOR_AQUA, "This {FF6347}%s{33CCFF} interior costs %s. You have 60 seconds to look around and make up your mind.", houseInteriors[listitem][intClass], FormatNumber(houseInteriors[listitem][intPrice]));
            SendClientMessageEx(playerid, COLOR_AQUA, "Use /confirmupgrade if you wish to upgrade to this interior. Use /cancelupgrade to cancel preview mode.");
        }
    }
    return 1;
}
Dialog:DIALOG_LSELEVATOR(playerid, response, listitem, inputtext[])
{
    if(!response)
        return 0;

    if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
        GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
	else if(DidPlayerRequestElevator(playerid))
	    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
	else
        CallElevator(playerid, listitem);

	return 1;
}
Dialog:DIALOG_NEWBWELCOME(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new count;
		foreach(new i : Player)
		{
			if(PlayerData[i][pAdmin] > 0)
			{
			    count++;
			}
		}
		if(count > 0)
		{
        	new string[30];
        	format(string, sizeof(string), "Show me around LS please, I am new.");
			strcpy(PlayerData[playerid][pHelpRequest], string, 128);
			SendHelperMessage(COLOR_AQUA, "* Help Request: New Player %s (ID:%d) is requesting a helper to show them around. *", GetRPName(playerid), playerid);

			PlayerData[playerid][pLastRequest] = gettime();
			SendClientMessage(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
		}
		else
		{
		    Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{00aa00}P:RP{FFFFFF} | Failed", "{FFFFFF}Unfortunately there are no members of the {33CCFF}helper team{FFFFFF} online :(.\nYou can also try /newb, This is where most of the community can help you with simple questions such as \"Where is the Bank\".\nYou can also checkout {00aa00}www.prospectrp.net{FFFFFF} for beginner tutorials.", "Cancel", "");
		}
	}
	return 1;
}
Dialog:DIALOG_USERIMKIT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehicleid = GetPlayerVehicleID(playerid), componentid;

        if((vehicleid) && VehicleHasDoors(vehicleid) && PlayerData[playerid][pRimkits] > 0)
        {
  			if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid && !(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] == VehicleInfo[vehicleid][vGang]))
			{
			    return 1;
	        }

	        if(listitem == 0) {
				componentid = 1025;
			} else if(1 <= listitem <= 13) {
			    componentid = (listitem - 1) + 1073;
			} else if(14 <= listitem <= 16) {
			    componentid = (listitem - 14) + 1096;
			}

			VehicleInfo[vehicleid][vMods][CARMODTYPE_WHEELS] = componentid;
			PlayerData[playerid][pRimkits]--;

			AddVehicleComponent(vehicleid, componentid);
			SaveVehicleModifications(vehicleid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rimkits = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			ShowActionBubble(playerid, "* %s installs a set of %s rims on the vehicle.", GetRPName(playerid), inputtext);
		}
    }
    return 1;
}
Dialog:DIALOG_TURFLIST(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        tsstring = "Id\tName\tOwner\tPerk\t";
        if(strlen(tsstring) < 5)
        {
			SendClientMessage(playerid, COLOR_AQUA, "Please use /showturfs to enable turf bounds");
		}
		else
		{
		    Dialog_Show(playerid, DIALOG_TURFLIST2, DIALOG_STYLE_TABLIST_HEADERS, "Turf list", tsstring, "Cancel", "");
		}
	}
    return 1;
}
Dialog:DIALOG_TURFLIST2(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		SendClientMessage(playerid, COLOR_AQUA, "Please use /showturfs to enable turf bounds");
	}
	return 1;
}
Dialog:DIALOG_LOCATE(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
		    case 0: // JOBS
		    {
		    	Dialog_Show(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "GPS - Select Destination", "Pizzaman\nCourier\nFisherman\nWeapon Dealer\nMechanic\nMiner\nSweeper\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nGarbage Man\nFarmer\nTrucker", "Select", "Close");
		    }
		    case 1: // STORES
		    {
		    	Dialog_Show(playerid, DIALOG_LOCATELIST2, DIALOG_STYLE_LIST, "GPS - Select Destination", "24/7\nAmmunation\nClothing Store\nGymnasium\nRestaurant\nAdvertisement Store\nClub\nTool Shop\nDealership", "Select", "Close");
		    }
		    case 2: // GENERAL LOCATIONS
		    {
		    	Dialog_Show(playerid, DIALOG_LOCATELIST3, DIALOG_STYLE_LIST, "GPS - Select Destination", "DMV\nBank\nPaintball\nCasino\nDonator Lounge\nDrug Factory\nMaterials Pickup 1\nMaterials Pickup 2\nMaterials Factory 1\nMaterials Factory 2\nHeisenbergs\nAirport Materials Depot\nMarina Materials Depot", "Select", "Close");
		    }
			case 3: // Find Turfs
			{
			    new string[34 * MAX_TURFS];
			    for(new x = 0; x < MAX_TURFS; x++)
				{
				    if(TurfInfo[x][tExists]) {
			    		strcat(string, TurfInfo[x][tName]);
						strcat(string, "\n");
					}
				}
				if(strlen(string) > 2) {
					Dialog_Show(playerid, DIALOG_LOCATETURFS, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
				} else {
				    Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
				}
			}
			case 4: // Find Points
			{
			    new string[34 * MAX_POINTS];
			    for(new x = 0; x < MAX_POINTS; x++)
				{
				    if(PointInfo[x][pExists]) {
			    		strcat(string, PointInfo[x][pName]);
						strcat(string, "\n");
					}
				}
				if(strlen(string) > 2) {
					Dialog_Show(playerid, DIALOG_LOCATEPOINTS, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
				} else {
				    Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
				}
			}
			case 5: // More locations
			{
			    new string[MAX_LOCATIONS*34];
				for(new x = 0; x < MAX_LOCATIONS; x++)
				{
				    if(LocationInfo[x][locExists]) {
			    		strcat(string, LocationInfo[x][locName]);
						strcat(string, "\n");
					}
				}
				if(strlen(string) > 2) {
					Dialog_Show(playerid, DIALOG_LOCATELISTC, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
				} else {
				    Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
				}
			}
			case 6:
			{


			    new housestring[1064], type[16];
			    housestring = "House ID\tHouse Type\tHouse Locations\tStatus";
				foreach(new i : House)
				{
					if(HouseInfo[i][hType] == -1)
					{
					    type = "Other";
					}
					else
					{
					    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
					}
					if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
					{
						format(housestring, sizeof(housestring), "%s\n%d\t%s\t%s\t%s",housestring, i, type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]), (HouseInfo[i][hLocked]) ? ("Locked") : ("Unlocked"));
					}
				    if(strlen(housestring) > 0)
					{
						Dialog_Show(playerid, DIALOG_LOCATEHOUSE, DIALOG_STYLE_TABLIST_HEADERS, "My House Location", housestring, "Locate", "Close");
					}
				}
			//houses
			}
			case 7:
			{
			    new business[1064];
			    business = "Business ID\tBusiness Type\tBusiness Locations\tStatus";
			 	foreach(new i : Business)
				{
				    if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
				    {
						format(business, sizeof(business), "%s\n%d\t%s\t%s\t%s",business, i, bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), (BusinessInfo[i][bLocked]) ? ("Locked") : ("Unlocked"));
					}
				    if(strlen(business) > 0)
					{
						Dialog_Show(playerid, DIALOG_LOCATEBUSINESS, DIALOG_STYLE_TABLIST_HEADERS, "My Business Location", business, "Locate", "Close");
					}
				}
			}
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATEHOUSE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        foreach(new i : House)
        {
			if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
			{
			    SetPlayerCheckpoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], 2.5);
				SendClientMessage(playerid, COLOR_GREEN, "Waypoint set to your house.");
				PlayerData[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATEBUSINESS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	 	foreach(new i : Business)
		{
		    if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
		    {
			    SetPlayerCheckpoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ], 2.5);
			    SendClientMessage(playerid, COLOR_GREEN, "Waypoint set to your business");
			    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
		    }
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATELIST1(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
		    case 0:
				LocateMethod(playerid,"Pizzaman");
            case 1:
				LocateMethod(playerid,"Courier");
            case 2:
				LocateMethod(playerid,"Fisherman");
            case 3:
				LocateMethod(playerid,"WeaponDealer");
            case 4:
				LocateMethod(playerid,"Mechanic");
            case 5:
				LocateMethod(playerid,"Miner");
            case 6:
				LocateMethod(playerid,"Sweeper");
            case 7:
				LocateMethod(playerid,"TaxiDriver");
            case 8:
				LocateMethod(playerid,"DrugDealer");
            case 9:
				LocateMethod(playerid,"Lawyer");
            case 10:
				LocateMethod(playerid,"Detective");
			case 11:
			    LocateMethod(playerid,"GarbageMan");
			case 12:
			    LocateMethod(playerid,"Farmer");

		}
	}
	return 1;
}
Dialog:DIALOG_LOCATELIST2(playerid, response, listitem, inputtext[])
{
    if(response)
	{
	    switch(listitem)
	    {
		    case 0:
				LocateMethod(playerid,"Supermarket");
		    case 1:
		        LocateMethod(playerid,"GunShop");
		    case 2:
		        LocateMethod(playerid,"ClothesShop");
		    case 3:
		        LocateMethod(playerid,"Gym");
		    case 4:
		        LocateMethod(playerid,"Restaurant");
		    case 5:
		        LocateMethod(playerid,"AdAgency");
		    case 6:
		        LocateMethod(playerid,"Club");
		    case 7:
		        LocateMethod(playerid,"ToolShop");
			case 8:
			    LocateMethod(playerid,"Dealership");
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATELIST3(playerid, response, listitem, inputtext[])
{
    if(response)
	{
	    switch(listitem)
	    {
            case 0:
				LocateMethod(playerid,"DMV");
            case 1:
				LocateMethod(playerid,"Bank");
            case 2:
				LocateMethod(playerid,"Paintball");
        	case 3:
				LocateMethod(playerid,"Casino");
            case 4:
				LocateMethod(playerid,"Donator");
            case 5:
				LocateMethod(playerid,"Smuggledrugs");
            case 6:
				LocateMethod(playerid,"MatPickup1");
            case 7:
				LocateMethod(playerid,"MatPickup2");
            case 8:
				LocateMethod(playerid,"MatFactory1");
            case 9:
				LocateMethod(playerid,"MatFactory2");
        	case 10:
				LocateMethod(playerid,"Heisenbergs");
			case 11:
			    LocateMethod(playerid,"AirportDepot");
			case 12:
			    LocateMethod(playerid,"MarinaDepot");
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATELISTC(playerid, response, listitem, inputtext[])
{
    if(response)
    {
		LocateMethod(playerid, inputtext);
    }
    return 1;
}
Dialog:DIALOG_LOCATETURFS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    foreach(new i : Turf)
	    {
	        if(strfind(TurfInfo[i][tName], inputtext) != -1)
	        {
		   	 	PlayerData[playerid][pCP] = CHECKPOINT_MISC;
		    	SetPlayerCheckpoint(playerid, TurfInfo[i][tMinX], TurfInfo[i][tMinY], TurfInfo[i][tHeight], 3.0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "* Checkpoint marked at the location of %s.", TurfInfo[i][tName]);
		    	break;
			}
		}
	}
	return 1;
}
Dialog:DIALOG_LOCATEPOINTS(playerid, response, listitem, inputtext[])
{
    if(response)
	{
	    if(PointInfo[listitem][pExists])
	    {
            PlayerData[playerid][pCP] = CHECKPOINT_MISC;
		    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
		    SendClientMessageEx(playerid, COLOR_WHITE, "* Checkpoint marked at the location of %s.", PointInfo[listitem][pName]);
	    }
	}
	return 1;
}
Dialog:DIALOG_RULES(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
			case 0: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on cheats & unfair advantage", "All types of cheating, hacking, and unfair advantages are prohibited on this server", "Close", "");
			case 1: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on exploits", "Any and all exploits, such as QS, CS, NJ, script exploits, etc.\nIS STRICLY PROHIBITED!", "Close", "");
			case 2: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on advertisments", "Advertising anything other than in-game entities/items is prohibited", "Close", "");
			case 3: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on death-match", "Deathmatching is when you kill another player for an invalid (non-RP) reason.\nThis is strictly prohibited on this server", "Close", "");
	        case 4: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on spawn-killing", "Spawn-killing is similar to deathmatch, with worse punishments.\nDo not kill anyone that has just spawned!", "Close", "");
	        case 5: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on revenge-killing", "Killing a player because you got killed by them is not allowed!\nThis rule is expected to be followed during turfs.", "Close", "");
    	    case 6: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on car raming", "Ramming player without a valid in character reason is not allowed\nThis includes car-parking", "Close", "");
		 	case 7: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on heli-blading", "Heli-blading people is not allowed.", "Close", "");
	        case 8: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on meta-gaming", "Using out of character information for in character purposes is not allowed.", "Close", "");
	        case 9: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on money-farming", "Money-farming is when you create new accounts to leech spawn money\nThis will always result in a permanant ban.", "Close", "");
            case 10: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on lying to admins", "Intentionally lying to an administrator is not allowed.", "Close", "");
            case 11: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on robbery", "You can only rob the same player ONCE in 24 hours.\nPlease follow regulations regarding max. robbery, etc (available at www.prospectrp.net)", "Close", "");
            case 12: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FFFF00}Policy on scamming", "Donation scams are prohibited\nPlease follow regulations regarding max. scamming, etc (available at www.prospectrp.net)", "Close", "");
			case 13: Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Full list of rules", "{FFFFFF}Please visit {00aa00}www.prospectrp.net{FFFFFF} for a complete list of rules.", "Close", "");
		}
	}
	return 1;
}
Dialog:DIALOG_PAYCHECK(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new
		szMessage[150];
	if(strlen(inputtext) < 1)
	{
        format(szMessage, sizeof(szMessage), "You must enter the check code before signing.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
		Dialog_Show(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
		return 1;
    }
	if(!IsNumeric(inputtext))
	{
		format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of numbers only.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
		Dialog_Show(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
		return 1;
	}
    if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
	{
       	format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of 6 digits.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
		Dialog_Show(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
		return 1;
    }
    new code = strval(inputtext);
	if(code == PayCheckCode[playerid])
    {
		SendPaycheck(playerid);
    	PayCheckCode[playerid] = 0;
	}
	else
	{
        SendClientMessage(playerid, COLOR_WHITE, "Wrong check code.");
    }
    return 1;
}
Dialog:DIALOG_CREATEQUIZ(playerid, response, listitem, inputtext[])
{
	if(CreateQuiz == 0)
	{
	    strcpy(quizQuestion, inputtext);
	    CreateQuiz = 1;
        ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
	}
	else if(CreateQuiz == 1)
	{
	    strcpy(quizAnswer, inputtext);
        CreateQuiz = -1;
        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has started a quiz.", GetRPName(playerid));
        SendClientMessageToAllEx(COLOR_RETIRED, "QUIZ: %s (/quiz answer to answer)", quizQuestion);
	}
    return 1;
}
Dialog:DIALOG_DELETEOBJECT(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(IsValidDynamicObject(PlayerData[playerid][pSelected]))
        {
            new Text3D:textid = Text3D:Streamer_GetExtraInt(PlayerData[playerid][pSelected], E_OBJECT_3DTEXT_ID);
	        if(IsValidDynamic3DTextLabel(textid))
	        {
	            DestroyDynamic3DTextLabel(textid);
	        }
        	DestroyDynamicObject(PlayerData[playerid][pSelected]);
        	/*if(Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND)
        	{
        	    Iter_Remove(PlayerData[playerid][pSelected], LandObjects);
        	}*/
        	SendClientMessageEx(playerid, COLOR_AQUA, "You have successfully deleted object id %i.", PlayerData[playerid][pSelected]);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			foreach(new i : Player)
			{
			    if(IsPlayerInRangeOfPoint(i, 100.0, x, y ,z))
			    {
					Streamer_UpdateEx(i, x, y, z);
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_AQUA, "Unable to destroy that object, ERROR #1: Not a valid streamer object.");
		}
	}
    else
    {
        SendClientMessageEx(playerid, COLOR_AQUA, "You cancelled deleting object id %i.", PlayerData[playerid][pSelected]);
    }
    return 1;
}
Dialog:DIALOG_PAINTBALL(playerid, response, listitem, inputtext[])
{
    if(response)
    {
	    ShowActionBubble(playerid, "* %s has entered the paintball arena.", GetRPName(playerid));
		SetPlayerInPaintball(playerid, listitem+1);

		foreach(new i : Player)
		{
		    if(PlayerData[playerid][pPaintball] == PlayerData[i][pPaintball])
		    {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has entered the paintball arena. ))", GetRPName(playerid));
			}
	    }
    }
    return 1;
}
Dialog:DIALOG_ADDSTATION(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new name;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO radiostations VALUES ('%e', '%e', '%e', '%e')", name, inputtext, PlayerData[playerid][pSubgenre], PlayerData[playerid][pGenre]);
		mysql_tquery(connectionID, queryBuffer);
		PlayerData[playerid][pStationEdit] = 0;
    }
    return 1;
}

Dialog:DIALOG_NONE(playerid, response, listitem, inputtext[])
{
	return 1;
}
// ---------------------------------------
stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,range,x,y,z))
	    {
		    PlayerPlaySound(i, soundid, x, y, z);
	    }
	}
}

stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateDynamicObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to call", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5, 0, 1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyDynamicObject(Obj_Elevator);
	DestroyDynamicObject(Obj_ElevatorDoors[0]);
	DestroyDynamicObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyDynamicObject(Obj_FloorDoors[i][0]);
		DestroyDynamicObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopDynamicObject(Obj_Elevator);
	StopDynamicObject(Obj_ElevatorDoors[0]);
	StopDynamicObject(Obj_ElevatorDoors[1]);

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	Dialog_Show(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Elevator", string, "Accept", "Cancel");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}
stock Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	new Float:d;
	d += floatpower(x1-x2, 2.0);
	d += floatpower(y1-y2, 2.0);
	d += floatpower(z1-z2, 2.0);
	d = floatsqroot(d);
	return d;
}

stock Float:GetPizzaDistance(houseid)
{
	new Float: pizzaDistance;
	pizzaDistance = GetDistance(2104.1999511719, -1787.5999755859, 13.60000038147, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    return pizzaDistance;
}
stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

// ---------------------------------------

CMD:skate(playerid,params[])
{
	if(!PlayerData[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You do not own any skates.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!PlayerData[playerid][pSkating])
		{
            PlayerData[playerid][pSkating] = true;
            DestroyDynamicObject(PlayerData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"You have equiped your skating gear. Press RMB or Aim Key to skate.");
        }
		else
		{
			PlayerData[playerid][pSkating] = false;
            DestroyDynamicObject(PlayerData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
        }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must not be inside a vehicle.");
 	return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /b [local OOC]");
	}

	format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, GetRPName(playerid), params);
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

	return 1;
}

CMD:s(playerid, params[])
{
	return callcmd::shout(playerid, params);
}

CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /(s)hout [text]");
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "(Shouts) %s!", params);
	format(string, sizeof(string), "%s shouts: %s!", GetRPName(playerid), params);
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

	foreach(new i : House)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]))
		{
			foreach(new p : Player)
			{
				if(IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]))
				{
					if(GetPlayerVirtualWorld(p) == HouseInfo[i][hWorld])
					{
						format(string, sizeof(string), "[OUTSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	SendClientMessage(p, COLOR_GREY1, string);
			    	}
			    }
			}
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    	{
		    	foreach(new p : Player)
				{
					if(IsPlayerInRangeOfPoint(p, 15.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]))
					{
						if(GetPlayerVirtualWorld(p) == 0)
					    {
					        format(string, sizeof(string), "[INSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	    SendClientMessage(p, COLOR_GREY1, string);
			    	    }
			    	}
			    }
			}
		}
	}
	foreach(new i : Business)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]))
		{
			foreach(new p : Player)
			{
				if(IsPlayerInRangeOfPoint(p, 30.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]))
				{
					if(GetPlayerVirtualWorld(p) == BusinessInfo[i][bWorld])
					{
						format(string, sizeof(string), "[OUTSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	SendClientMessage(p, COLOR_GREY1, string);
			    	}
			    }
			}
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    	{
		    	foreach(new p : Player)
				{
					if(IsPlayerInRangeOfPoint(p, 15.0, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]))
					{
						if(GetPlayerVirtualWorld(p) == 0)
					    {
					        format(string, sizeof(string), "[INSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	    SendClientMessage(p, COLOR_GREY1, string);
			    	    }
			    	}
			    }
			}
		}
	}
	foreach(new i : Entrance)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]))
		{
			foreach(new p : Player)
			{
				if(IsPlayerInRangeOfPoint(p, 30.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]))
				{
					if(GetPlayerVirtualWorld(p) == EntranceInfo[i][eWorld])
					{
						format(string, sizeof(string), "[OUTSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	SendClientMessage(p, COLOR_GREY1, string);
			    	}
			    }
			}
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    	{
		    	foreach(new p : Player)
				{
					if(IsPlayerInRangeOfPoint(p, 15.0, EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]))
					{
						if(GetPlayerVirtualWorld(p) == 0)
					    {
					        format(string, sizeof(string), "[INSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	    SendClientMessage(p, COLOR_GREY1, string);
			    	    }
			    	}
			    }
			}
		}
	}

	foreach(new i : Garage)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
		{
			foreach(new p : Player)
			{
				if(IsPlayerInRangeOfPoint(playerid, 30.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]))
				{
					if(GetPlayerVirtualWorld(p) == GarageInfo[i][gWorld])
					{
						format(string, sizeof(string), "[OUTSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	SendClientMessage(p, COLOR_GREY1, string);
			    	}
			    }
			}
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]))
	    {
	    	if(GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    	{
		    	foreach(new p : Player)
				{
					if(IsPlayerInRangeOfPoint(p, 15.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
					{
						if(GetPlayerVirtualWorld(p) == 0)
					    {
					        format(string, sizeof(string), "[INSIDE]: %s shouts: %s!", GetRPName(playerid), params);
			        	    SendClientMessage(p, COLOR_GREY1, string);
			    	    }
			    	}
			    }
			}
		}
	}

	return 1;
}

CMD:my(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /my [action]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s's %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* ...%s", params[MAX_SPLIT_LENGTH]);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s's %s", GetRPName(playerid), params);
	}

	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /me [action]");
	}


	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* ...%s", params[MAX_SPLIT_LENGTH]);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s %s", GetRPName(playerid), params);
	}

	return 1;
}

CMD:ame(playerid, params[])
{
	new message[100], string[128];
	if(sscanf(params, "s[100]", message))
	{
		SendClientMessage(playerid, COLOR_GREY2, "Usage: /ame [action/off]");
 		SendClientMessage(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SendClientMessage(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SendClientMessage(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SendClientMessage(playerid, COLOR_GLOBAL, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
	    PlayerData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SendClientMessage(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SendClientMessage(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");

	if(PlayerData[playerid][aMeStatus] == 0)
	{
	    PlayerData[playerid][aMeStatus] =1;

		format(string, sizeof(string), "* %s %s", GetRPName(playerid), message);
		PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);
		return 1;
	}
	else
	{
		format(string, sizeof(string), "* %s %s", GetRPName(playerid), message);
		UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);
		return 1;
	}

}

CMD:ado(playerid, params[])
{
	new message[100], string[180];
	if(sscanf(params, "s[100]", message))
	{
		SendClientMessage(playerid, COLOR_GREY2, "Usage: /ado [action/off]");
  		SendClientMessage(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SendClientMessage(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SendClientMessage(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SendClientMessage(playerid, COLOR_GLOBAL, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
	    PlayerData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SendClientMessage(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SendClientMessage(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");
	if(PlayerData[playerid][aMeStatus] == 0)
	{
        PlayerData[playerid][aMeStatus] = 1;

		format(string, sizeof(string), "* %s (( %s ))", message, GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);

		PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
		return 1;
	}
	else
	{
		format(string, sizeof(string), "* %s (( %s ))", message, GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, string);

		UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
		return 1;
	}
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /do [describe]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "*%.*s...", MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s (( %s ))", params, GetRPName(playerid));
	}

	SetPlayerBubbleText(playerid, 20.0, COLOR_PURPLE, "* %s (( %s ))", params, GetRPName(playerid));
	return 1;
}

CMD:stats(playerid, params[])
{

	ShowDialogToPlayer(playerid, DIALOG_STATS);
	//DisplayStats(playerid);
	return 1;
}


CMD:networth(playerid, params[])
{
	PrintNetWorthPlayer(playerid);
	return 1;
}

PrintNetWorthPlayer(playerid)
{
	new others = 0,
	assets = 0,
	pricevehicle = 0,
	pricehouse = 0,
	pricebiz = 0,
	priceland = 0,
	pricegarage = 0;
	new totalwealth = PlayerData[playerid][pCash] + PlayerData[playerid][pBank];

 	foreach(new i : Vehicle)
	{
	    if(PlayerData[playerid][pID] == VehicleInfo[i][vOwnerID])
	    {
            assets += VehicleInfo[i][vPrice];
            pricevehicle += VehicleInfo[i][vPrice];
		}
	}
    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && PlayerData[playerid][pID] == HouseInfo[i][hOwnerID])
        {
            assets += HouseInfo[i][hPrice];
            pricehouse += HouseInfo[i][hPrice];
		}
	}
 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && PlayerData[playerid][pID] == BusinessInfo[i][bOwnerID])
        {
            assets += BusinessInfo[i][bPrice];
            pricebiz += BusinessInfo[i][bPrice];
		}
	}
    foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && PlayerData[playerid][pID] == LandInfo[i][lOwnerID])
	    {
            others += LandInfo[i][lPrice];
            priceland += LandInfo[i][lPrice];
		}
	}
	foreach(new i : Garage)
	{
        if(GarageInfo[i][gExists] && PlayerData[playerid][pID] == GarageInfo[i][gOwnerID])
        {
            others += GarageInfo[i][gPrice];
            pricegarage += GarageInfo[i][gPrice];
		}
	}
	new total = totalwealth + assets;
	new total2 = total + others;

    SendClientMessage(playerid, 0x7514F6FF, "__________ Net Worth __________");
	SendClientMessageEx(playerid, COLOR_GREY2, "Cash: +{FF6347}%s", FormatNumber(PlayerData[playerid][pCash]));
    SendClientMessageEx(playerid, COLOR_GREY2, "Bank: +{FF6347}%s", FormatNumber(PlayerData[playerid][pBank]));
    SendClientMessageEx(playerid, COLOR_GREY2, "Assets: +{ff6347}%s", FormatNumber(assets));

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            SendClientMessageEx(playerid, COLOR_GREY2, "- House: +{FF6347}%s", FormatNumber(pricehouse));
            break;
		}
	}
	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
            SendClientMessageEx(playerid, COLOR_GREY2, "- Business: +{FF6347}%s", FormatNumber(pricebiz));
            break;
		}
	}
 	foreach(new i : Vehicle)
    {
	    if(PlayerData[playerid][pID] == VehicleInfo[i][vOwnerID])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "- Vehicle: +{FF6347}%s", FormatNumber(pricevehicle));
	        break;
		}
	}
    SendClientMessageEx(playerid, COLOR_GREY2, "Others: +{FF6347}%s", FormatNumber(others));
    foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && IsLandOwner(playerid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "- Land: +{FF6347}%s", FormatNumber(priceland));
	        break;
		}
	}
    foreach(new i : Garage)
	{
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
            SendClientMessageEx(playerid, COLOR_GREY2, "- Garage: +{FF6347}%s", FormatNumber(pricegarage));
            break;
		}
	}

	SendClientMessage(playerid, COLOR_GREEN, "_______________________________");
	SendClientMessageEx(playerid, COLOR_GREEN, "Total Wealth: %s", FormatNumber(total2));
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}

CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /(l)ow [text]");
	}

//	SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "(Quietly) %s", params);
	format(string, sizeof(string), "%s quietly: %s", GetRPName(playerid), params);
	SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

	return 1;
}




CMD:w(playerid, params[])
{
	return callcmd::whisper(playerid, params);
}

CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't whisper to yourself.");
	}
	if(PlayerData[targetid][pToggleWhisper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has disabled incoming whispers.");
	}

	SendClientMessageEx(targetid, COLOR_YELLOW, "* Whisper from %s: %s *", GetRPName(playerid), text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "* Whisper to %s: %s *", GetRPName(targetid), text);
	if(PlayerData[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s whispers: %s", GetRPName(playerid), text);
			}
		}
	}

	if(PlayerData[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SendClientMessage(targetid, COLOR_WHITE, "* You can use '/rw [message]' to reply to this whisper.");
	}

	PlayerData[targetid][pWhisperFrom] = playerid;
	return 1;
}
CMD:pm(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(pm) [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't pm to yourself.");
	}
	/*if(PlayerData[playerid][pHours] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to play at least 3 hours+ to use this command");
	}*/
	if(PlayerData[targetid][pTogglePM])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has disabled incoming private messages.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}
	SendClientMessageEx(targetid, COLOR_GREEN, "(( PM from %s: %s ))", GetRPName(playerid), text);
	SendClientMessageEx(playerid, COLOR_GREEN, "(( PM to %s: %s ))", GetRPName(targetid), text);

	if(PlayerData[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SendClientMessage(targetid, COLOR_WHITE, "* You can use '/rpm [message]' to reply to this private message.");
	}

	PlayerData[targetid][pWhisperFrom] = playerid;
	return 1;
}

CMD:rpm(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rpm [text]");
	}
	if(PlayerData[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't been private messaged by anyone since you joined the server.");
	}
	if(PlayerData[PlayerData[playerid][pWhisperFrom]][pTogglePM])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has disabled incoming private messages.");
	}
	SendClientMessageEx(PlayerData[playerid][pWhisperFrom], COLOR_GREEN, "(( PM from %s: %s ))", GetRPName(playerid), params);
	SendClientMessageEx(playerid, COLOR_GREEN, "(( PM to %s: %s ))", GetRPName(PlayerData[playerid][pWhisperFrom]), params);
	return 1;
}
CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rw [text]");
	}
	if(PlayerData[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, PlayerData[playerid][pWhisperFrom], 5.0) && (!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be near that player to whisper them.");
	}

	SendClientMessageEx(PlayerData[playerid][pWhisperFrom], COLOR_YELLOW, "* Whisper from %s: %s *", GetRPName(playerid), params);
	SendClientMessageEx(playerid, COLOR_YELLOW, "* Whisper to %s: %s *", GetRPName(PlayerData[playerid][pWhisperFrom]), params);
	return 1;
}
CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no lights which can be turned on.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
	    ShowActionBubble(playerid, "* %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
	    ShowActionBubble(playerid, "* %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no hood.");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in the passenger seat.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
	    ShowActionBubble(playerid, "* %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
	    ShowActionBubble(playerid, "* %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	return callcmd::boot(playerid, params);
}

CMD:boot(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no boot.");
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in the passenger seat.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
	    ShowActionBubble(playerid, "* %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
	    ShowActionBubble(playerid, "* %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:resetupgrades(playerid, params[])
{
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /resetupgrades [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command resets all of your upgrades and give you back %i upgrade points.", (PlayerData[playerid][pLevel] - 1) * 2);
	    return 1;
	}
	if(PlayerData[playerid][pLevel] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't level 2+.");
	}
	if(PlayerData[playerid][pInventoryUpgrade] == 0 && PlayerData[playerid][pTraderUpgrade] == 0 && PlayerData[playerid][pAddictUpgrade] == 0 && PlayerData[playerid][pAssetUpgrade] == 0 && PlayerData[playerid][pLaborUpgrade] == 0 && PlayerData[playerid][pSpawnHealth] == 50.0 && PlayerData[playerid][pSpawnArmor] == 0.0 && PlayerData[playerid][pUpgradePoints] == (PlayerData[playerid][pLevel] - 1) * 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't spent any upgrade points on upgrades. Therefore you can't reset them.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i houses at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}
	if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i businesses at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}
    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i garages at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
 	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptResetUpgrades", "i", playerid);
	return 1;
}

CMD:upgrades(playerid, params[])
{
	return callcmd::myupgrades(playerid);
}

CMD:levelup(playerid)
{
	new
		exp = (PlayerData[playerid][pLevel] * 4),
		string[64];

	if(PlayerData[playerid][pEXP] < exp)
	{
	    return 0;
	}
	if(PlayerData[playerid][pPassport])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active passport. You can't level up at the moment.");
	}

	PlayerData[playerid][pEXP] -= exp;
	PlayerData[playerid][pLevel]++;
	PlayerData[playerid][pUpgradePoints] += 2;

	if(PlayerData[playerid][pLevel] == 3 && PlayerData[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}
	if(PlayerData[playerid][pLevel] >= 5)
	{
	    AwardAchievement(playerid, "Five stars");
	}
	if(PlayerData[playerid][pLevel] >= 10)
	{
	    AwardAchievement(playerid, "Top tier");
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", PlayerData[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET exp = exp - %i, level = level + 1, upgradepoints = upgradepoints + 2 WHERE uid = %i", exp, PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_GREEN, "You have moved up to level %i", PlayerData[playerid][pLevel]);
	SendClientMessageEx(playerid, COLOR_GREEN, "You now have %i upgrade points. Use /upgrade to learn more.", PlayerData[playerid][pUpgradePoints]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:myupgrades(playerid)
{
	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s's upgrades (%i points available) _____", GetRPName(playerid), PlayerData[playerid][pUpgradePoints]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Shealth: %.0f/100]{C8C8C8} You spawn with %.1f health at the hospital after death.", PlayerData[playerid][pSpawnHealth], PlayerData[playerid][pSpawnHealth]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Sarmor: %.0f/100]{C8C8C8} You spawn with %.1f armor at the hospital after death.", PlayerData[playerid][pSpawnArmor], PlayerData[playerid][pSpawnArmor]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Inventory: %i/5]{C8C8C8} This upgrade increases the capacity for your items. [/inv]", PlayerData[playerid][pInventoryUpgrade]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Trader: %i/3]{C8C8C8} You save an extra %i percent on all items purchased in businesses.", PlayerData[playerid][pTraderUpgrade], PlayerData[playerid][pTraderUpgrade] * 10);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Addict: %i/3]{C8C8C8} You gain an extra %.1f health and armor when using drugs.", PlayerData[playerid][pAddictUpgrade], PlayerData[playerid][pAddictUpgrade] * 5.0);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Asset: %i/4]{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", PlayerData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
    SendClientMessageEx(playerid, COLOR_YELLOW, "[Labor: %i/5]{C8C8C8} You earn an extra %i percent cash to your paycheck when working.", PlayerData[playerid][pLaborUpgrade], PlayerData[playerid][pLaborUpgrade] * 2);
	return 1;
}

CMD:obscurent(playerid, params[])
{
	new status;

	if(PlayerData[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /obscurent [0/1]");
	}

	if(!status) {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has disabled nametags obfuscation.", GetRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has enabled nametags obfuscation.", GetRPName(playerid));
	}

	antiNT = status;
	return 1;
}
CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no fuel left in this vehicle.");
	}
	if(PlayerData[playerid][pRefuel] == vehicleid)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    GetVehicleHealth(vehicleid, health);

	    if(health <= 300.0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The engine is totalled and cannot be started until it's repaired.");
	    }

//	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
	    SetTimerEx("VehEngine", 500, false, "i", playerid);
	    ShowActionBubble(playerid, "* %s twists the key in the ignition...", GetRPName(playerid));
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s twists the key in the ignition...", GetRPName(playerid));
	}
	else
	{
//	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    SetTimerEx("VehEngine", 500, false, "i", playerid);
	    ShowActionBubble(playerid, "* %s twists the key in the ignition...", GetRPName(playerid));
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s twists the key in the ignition...", GetRPName(playerid));
	}

	return 1;
}
func VehEngine(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		ShowActionBubble(playerid, "* %s's engine was turned on (( %s )).", GetVehicleName(vehicleid), GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s's engine was turned on (( %s )).", GetVehicleName(vehicleid), GetRPName(playerid));
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
		ShowActionBubble(playerid, "* %s's engine was turned off (( %s )).", GetVehicleName(vehicleid), GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s's engine was turned off (( %s )).", GetVehicleName(vehicleid), GetRPName(playerid));

	}
	return 1;
}

CMD:setforsale(playerid, params[])
{
	new askingprice, forsale[264], vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}

	if(VehicleInfo[vehicleid][vForSale]) return SendClientMessage(playerid, COLOR_GREY, "This vehicle is already for sale.");
    if(!PlayerData[playerid][pPhone]) return SendClientMessage(playerid, COLOR_GREY, "You don't have any phone setup.");

	if(sscanf(params, "i", askingprice)) return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setforsale [price]");
	if(askingprice < 1 || askingprice > 50000000) return SendClientMessage(playerid, COLOR_GREY, "Price must be between $1 and $50,000,000.");

	VehicleInfo[vehicleid][vForSale] = true;
	VehicleInfo[vehicleid][vForSalePrice] = askingprice;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET forsale = 1, forsaleprice = %i WHERE id = %i",  askingprice, VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

    format(forsale, sizeof(forsale), "FOR SALE\n%s - %s\nPh: %i.", GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vForSalePrice]), PlayerData[playerid][pPhone]);
    VehicleInfo[vehicleid][vForSaleLabel] = CreateDynamic3DTextLabel(forsale, COLOR_GREY2, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 1, -1, 0, -1, 30.0);

	SendClientMessageEx(playerid, COLOR_WHITE, "You have set your %s for sale with an asking price of $%s.", GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vForSalePrice]));
	return 1;
}

CMD:cancelforsale(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}

	if(!VehicleInfo[vehicleid][vForSale]) return SendClientMessage(playerid, COLOR_GREY, "This vehicle is not for sale.");

	VehicleInfo[vehicleid][vForSale] = false;
	VehicleInfo[vehicleid][vForSalePrice] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET forsale = 0, forsaleprice = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DestroyDynamic3DTextLabel(VehicleInfo[vehicleid][vForSaleLabel]);

	SendClientMessageEx(playerid, COLOR_WHITE, "You have cancelled the sale of your %s.", GetVehicleName(vehicleid));
	return true;
}

CMD:addpayphone(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (GetClosestPayphone(playerid) != -1)
	{
	    return SendErrorMessage(playerid, "There is another payphone nearby.");
	}
	else
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:angle,
			id = -1;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 2.0 * floatsin(-angle, degrees);
		y += 2.0 * floatcos(-angle, degrees);

		id = AddPayphone(x, y, z, angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

		if (id == -1)
		{
		    return SendErrorMessage(playerid, "There are no available payphone slots.");
		}
		else
		{
		    EditDynamicObjectEx(playerid, EDIT_TYPE_PAYPHONE, Payphones[id][phObject], id);
		    SendInfoMessage(playerid, "You have added payphone %i (/editpayphone).", id);
		}
	}
	return 1;
}

CMD:gotopayphone(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
	    return SendSyntaxMessage(playerid, "/gotopayphone (payphone ID)");
	}
	else if (!IsValidPayphoneID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid payphone ID.");
	}
	else
	{
	    TeleportToCoords(playerid, Payphones[id][phX], Payphones[id][phY], Payphones[id][phZ], Payphones[id][phA], Payphones[id][phInterior], Payphones[id][phWorld]);
	    SendInfoMessage(playerid, "You have teleported to payphone %i.", id);
	}
	return 1;
}
CMD:setdamages(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 10)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else
	{
	    ShowWeaponDamageEditMenu(playerid);
	}
	return 1;
}
CMD:editpayphone(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
		return SendSyntaxMessage(playerid, "/editpayphone (payphone ID)");
	}
	else if (!IsValidPayphoneID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid payphone ID.");
	}
	else
	{
    	EditDynamicObjectEx(playerid, EDIT_TYPE_PAYPHONE, Payphones[id][phObject], id);
		SendInfoMessage(playerid, "Click on the disk icon to save changes.");
	}
	return 1;
}

CMD:deletepayphone(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
	    return SendSyntaxMessage(playerid, "/deletepayphone (payphone ID)");
	}
	else if (!IsValidPayphoneID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid payphone ID.");
	}
	else
	{
		if (Payphones[id][phCaller] != INVALID_PLAYER_ID)
		{
		    HangupCall(Payphones[id][phCaller]);
	    }

	    DestroyDynamic3DTextLabel(Payphones[id][phText]);
	    DestroyDynamicObject(Payphones[id][phObject]);

	    format(queryBuffer, sizeof(queryBuffer), "DELETE FROM rp_payphones WHERE `phID` = %i", Payphones[id][phID]);
	    mysql_tquery(connectionID, queryBuffer);

		Payphones[id][phExists] = 0;
        SendInfoMessage(playerid, "You have deleted payphone %i.", id);
	}
	return 1;
}
CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SendClientMessage(playerid, COLOR_GREY, "You can only create graffiti points outside interiors.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully created graffiti ID: %d.", id);

	return 1;
}

CMD:editgangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Nearest(playerid);

	if(id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of an Gang Spray Tag point.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	return 1;
}
CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "/destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You are not near any graffiti point.");
    if (IsSprayingInProgress(id))
    {
        return SendClientMessage(playerid, COLOR_GREY, "There is another player spraying at this point already.");
	}
	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerData[playerid][pGangRank] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 5 to tag a wall");
	}
	if(PlayerData[playerid][pSpraycans] <= 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
	}

	Dialog_Show(playerid, Graffiti_Type, DIALOG_STYLE_LIST, "Graffiti Style", "Default Gang Tags\nCustom Text", "Select", "Close");

	return 1;
}
CMD:tip(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] > 5)
	{
		if(isnull(params)) return SCM(playerid, COLOR_WHITE, "USAGE: /tip [message]");
		SendClientMessageToAllEx(COLOR_WHITE, "{33CCFF}Athena: {d3d3d3}%s", params);
	}
	return 1;
}
CMD:impoundedit(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR || PlayerData[playerid][pFactionMod] >= 1)
	{
		new string[128], choice[32], id, amount;
		if(sscanf(params, "s[32]dD", choice, id, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /impoundedit [name] [id] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, Delete");
			return 1;
		}

		if(id >= MAX_IMPOUNDPOINTS)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Impound Points ID!");
			return 1;
		}

		if(strcmp(choice, "position", true) == 0)
		{
			GetPlayerPos(playerid, ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ]);
			ImpoundPoints[id][impoundInt] = GetPlayerInterior(playerid);
			ImpoundPoints[id][impoundVW] = GetPlayerVirtualWorld(playerid);
			format(string, sizeof(string), "You have changed the position on impound Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			DestroyDynamic3DTextLabel(ImpoundPoints[id][impoundTextID]);
			format(string, sizeof(string), "Impound Yard #%d\nType /impound to impound a vehicle", id);
			ImpoundPoints[id][impoundTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ]+0.6, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ImpoundPoints[id][impoundVW], ImpoundPoints[id][impoundInt], -1);
			SaveImpoundPoint(id);

			return 1;
		}
		else if(strcmp(choice, "delete", true) == 0)
		{
			if(ImpoundPoints[id][impoundPosX] == 0)
			{
				format(string, sizeof(string), "Impound Point #%d does not exist.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				return 1;
			}
			DestroyDynamic3DTextLabel(ImpoundPoints[id][impoundTextID]);
			ImpoundPoints[id][impoundPosX] = 0.0;
			ImpoundPoints[id][impoundPosY] = 0.0;
			ImpoundPoints[id][impoundPosZ] = 0.0;
			ImpoundPoints[id][impoundVW] = 0;
			ImpoundPoints[id][impoundInt] = 0;
			SaveImpoundPoint(id);
			format(string, sizeof(string), "You have deleted Impound Point #%d.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:impoundstatus(playerid, params[])
{
	new id;
	if(sscanf(params, "i", id))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /impoundstatus [id]");
		return 1;
	}
	if (PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Impound Point Status (ID: %d) ___________|", id);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "[Position] X: %f | Y: %f | Z: %f | VW: %d | Int: %d", ImpoundPoints[id][impoundPosX], ImpoundPoints[id][impoundPosY], ImpoundPoints[id][impoundPosZ], ImpoundPoints[id][impoundVW], ImpoundPoints[id][impoundInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:impoundnext(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available Impound Point...");
		for(new x = 0; x < MAX_IMPOUNDPOINTS; x++)
		{
			if(ImpoundPoints[x][impoundPosX] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}/*
CMD:ame(playerid, params[])
{
    new activewep = GetPVarInt(playerid, "activesling");
	new message[100], string[128];
	if(sscanf(params, "s[100]", message))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ame [action]");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Set the action to OFF to remove the label.");
		return 1;
	}
	if(activewep > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You have a weapon slung around your back, you can't use /ame.");
	    return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
	    PlayerData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 100) return SendClientMessageEx(playerid, COLOR_GREY, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SendClientMessageEx(playerid, COLOR_GREY, "  The action is too short, please increase the length.");
	if(PlayerData[playerid][aMeStatus] == 0)
	{
	    PlayerData[playerid][aMeStatus] =1;

		format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), message);
		PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	else
	{
		format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), message);
		UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
}
CMD:sling(playerid, params[])
{
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }

	new string[128], weaponchoice[32];
	if(sscanf(params, "s[32]", weaponchoice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sling [weapon]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Avaliable options: spas12, shotgun, mp5, ak47, m4, sniper, rifle");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before slinging another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	new activewep;
	activewep = GetPVarInt(playerid, "activesling");

	if(activewep > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You already have a weapon slung around your back.");
	    return 1;
	}

	new weapon, ammo;
	if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][3] == 25 && PlayerData[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your Shotgun around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][3];
			ammo = PlayerData[playerid][pGunsAmmo][3];
			format(string,sizeof(string), "* %s slings their Shotgun around their back, securing it to their body.", GetRPName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

			if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has a shotgun slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has a shotgun slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][3] == 27 && PlayerData[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your SPAS12 around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][3];
			ammo = PlayerData[playerid][pGunsAmmo][3];
			format(string,sizeof(string), "* %s slings their Combat Shotgun around their back, securing it to their body.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has a combat shotgun slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has a combat shotgun slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][4] == 29 && PlayerData[playerid][pAGuns][4] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your MP5 around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][4];
			ammo = PlayerData[playerid][pGunsAmmo][4];
			format(string,sizeof(string), "* %s slings their MP5 around their back, securing it to their body.", GetRPName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has an MP5 slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has an MP5 slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][5] == 30 && PlayerData[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your AK-47 around your back.");
			weapon = PlayerData[playerid][pWeapons][5];
			ammo = PlayerData[playerid][pGunsAmmo][5];
			format(string,sizeof(string), "* %s slings their AK-47 around their back, securing it to their body.", GetRPName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has an AK-47 slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has an AK-47 slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][5] == 31 && PlayerData[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your M4 around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][5];
			ammo = PlayerData[playerid][pGunsAmmo][5];
			format(string,sizeof(string), "* %s slings their M4 around their back, securing it to their body.", GetRPName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has an M4 slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has an M4 slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][6] == 33 && PlayerData[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your rifle around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][6];
			ammo = PlayerData[playerid][pGunsAmmo][6];
			format(string,sizeof(string), "* %s slings their rifle around their back, securing it to their body.", GetRPName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has a rifle slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has a rifle slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerData[playerid][pWeapons][6] == 34 && PlayerData[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have slung your sniper rifle around your back. (use /unsling to retrieve the gun)");
			weapon = PlayerData[playerid][pWeapons][6];
			ammo = PlayerData[playerid][pGunsAmmo][6];
			format(string,sizeof(string), "* %s slings their sniper rifle around their back, securing it to their body.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);

            if(PlayerData[playerid][aMeStatus] == 0)
			{
				format(string,sizeof(string),"Has a sniper slung around their back (( %s ))",GetRPName(playerid));
				PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
				PlayerData[playerid][aMeStatus] =1;
			}
			else
			{
			    format(string,sizeof(string),"Has a sniper slung around their back (( %s ))",GetRPName(playerid));
				UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
			}
		}
	}
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
	SetPVarInt(playerid, "activesling", weapon);
	SetPVarInt(playerid, "activeslingammo", ammo);
	RemovePlayerWeapon(playerid, weapon);
	return 1;
}

CMD:unsling(playerid, params[])
{
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		new
			szMessage[59];

		format(szMessage, sizeof(szMessage), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }

	new activewep, ammo;
	activewep = GetPVarInt(playerid, "activesling");
	ammo = GetPVarInt(playerid, "activeslingammo");

	new weaponchoice[128];
	if(sscanf(params, "s[128]", weaponchoice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unsling [emote]");
		return 1;
	}

	if(activewep > 0)
	{
		new
			szWeapon[16],
			szMessage[128];

		GetWeaponName(activewep, szWeapon, sizeof(szWeapon));
		GivePlayerWeaponEx(playerid, activewep, true);

		if(isnull(weaponchoice))
		{
			format(szMessage, sizeof(szMessage), "You have unslung the %s from your back.", szWeapon);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "* %s unslings a %s from their back.", GetRPName(playerid), szWeapon);
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "activesling");
			DeletePVar(playerid, "activeslingammo");
		}
		else
		{
			format(szMessage, sizeof(szMessage), "You have unslung the %s from your back.", szWeapon);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "* %s %s", GetRPName(playerid), weaponchoice);
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "activesling");
			DeletePVar(playerid, "activeslingammo");
		}

		DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
		PlayerData[playerid][aMeStatus] =0;
	}
	return 1;
}
CMD:ado(playerid, params[])
{
	new activewep = GetPVarInt(playerid, "activesling");
	new message[100], string[180];
	if(sscanf(params, "s[100]", message))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ado [action]");
		SendClientMessageEx(playerid, COLOR_GREY, "NOTE: Set the action to OFF to remove the label.");
		return 1;
	}
	if(activewep > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You have a weapon slung around your back, you can't use /ado.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(PlayerData[playerid][aMeID]);
	    PlayerData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 100) return SendClientMessageEx(playerid, COLOR_GREY, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SendClientMessageEx(playerid, COLOR_GREY, "  The action is too short, please increase the length.");
	if(PlayerData[playerid][aMeStatus] == 0)
	{
        PlayerData[playerid][aMeStatus] =1;

		format(string, sizeof(string), "* %s (( %s ))", message, GetRPName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		PlayerData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.7, 20.0, playerid);
		return 1;
	}
	else
	{
		format(string, sizeof(string), "* %s (( %s ))", message, GetRPName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		UpdateDynamic3DTextLabelText(PlayerData[playerid][aMeID], COLOR_PURPLE, string);
		return 1;
	}
}
*/
CMD:masked(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Masked Players:");

		foreach (new i : Player)
		{
			if (PlayerData[i][pMaskOn] > 0)
			{
				SendInfoMessage(playerid, "%s (ID: %i)", GetPlayerNameEx(i), i);
			}
		}
	}
	return 1;
}

CMD:buymask(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid);
	if(businessid == -1)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You must be in a clothing store to purchase a mask.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_CLOTHES)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You must be in a clothing store to purchase a mask.");
	}
	if(PlayerData[playerid][pCash] < 1000)	return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough money to purchase a mask.");

	PlayerData[playerid][pMaskID] = random(10000) + 63919;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `users` SET `mask_id` = %i WHERE `uid` = %i", PlayerData[playerid][pMaskID], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -1000);
	BusinessInfo[businessid][bCash] += 1000;
	SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased a mask, use /mask to wear it and /mask again to unwear it.");
	return 1;
}
CMD:mask(playerid, params[])
{
	if(PlayerData[playerid][pMaskID] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a mask.");
	}
	if(PlayerData[playerid][pMaskOn] == 0)
	{
		PlayerData[playerid][pMaskOn] = 1;
		SetPlayerSpecialTag(playerid, TAG_MASK);
		callcmd::me(playerid, "takes out a mask as he wears it.");
	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
					if(IsPlayerConnected(i))
					{
							ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
			}
	}
	else {
		PlayerData[playerid][pMaskOn] = 0;
		SetPlayerSpecialTag(playerid, TAG_NONE);
		callcmd::me(playerid, "takes off his mask as he put it in his pocket.");
	 	for(new i = 0; i < MAX_PLAYERS; i++)
			{
					if(IsPlayerConnected(i))
					{
							ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
			}
	}
	return 1;
}
/*CMD:mask(playerid, params[])
{
	new name[MAX_PLAYER_NAME];
	new string[42];

	if(PlayerData[playerid][pMaskID] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a mask.");
	}
	if(PlayerData[playerid][pMaskOn] == 0)
	{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
					if(IsPlayerConnected(i))
					{
							ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
			}
			PlayerData[playerid][pMaskOn] = 1;
			SetPlayerAttachedObject(playerid, 1, 19037, 2, 10, 4.7, 0.0, 90, 90, 0);
			callcmd::me(playerid, "takes out a mask as he wears it.");
	}
	else if(PlayerData[playerid][pMaskOn] == 1)
	{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
					if(IsPlayerConnected(i))
					{
							ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
			}
			PlayerData[playerid][pMaskOn] = 0;
			RemovePlayerAttachedObject(playerid, 1);
			callcmd::me(playerid, "takes off his mask as he put it in his pocket.");
	}
	return 1;
}*/

CMD:jetpackall(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] > 5)
	{
	    foreach(new i : Player)
		{
		    PlayerData[i][pJetpack] = 1;
			SetPlayerSpecialAction(i, SPECIAL_ACTION_USEJETPACK);
			GameTextForPlayer(i, "~g~Jetpack", 3000, 3);
		}
	}
	return 1;
}


CMD:helmet(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PlayerData[playerid][pHelmet] == 1)
	{
		if (HelmetEnabled[playerid] == 1)
		{
		    HelmetEnabled[playerid] = 0;
			ShowActionBubble(playerid, "{FF8000}* {C2A2DA}%s reaches for their helmet and takes it off.", GetPlayerNameEx(playerid));
			RemovePlayerAttachedObject(playerid, 3);
		}
		else if (HelmetEnabled[playerid] == 0)
		{
			if(IsanewBike(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    HelmetEnabled[playerid] = 1;
				ShowActionBubble(playerid, "{FF8000}* {C2A2DA}%s reaches for their helmet and puts it on.", GetPlayerNameEx(playerid));
				SetPlayerAttachedObject(playerid, 3, GetPlayerHelmet(playerid), 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
			}
			else return SendClientMessage(playerid, COLOR_GREY, "You must be in a bike to use this command");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You dont have a helmet, buy one from a tool shop.");
	return 1;
}
//CMD:mmhelp(playerid, params[]) return callcmd::graphichelp(playerid, params);
CMD:graphichelp(playerid, params[])
{
	if(PlayerData[playerid][pGraphic] > 0)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "____________________________________________");
		if(PlayerData[playerid][pGraphic] == GRAPHICRANK_REGULAR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*1* Graphics Designer: /(g)raphic(c)hat /designers");
		}
		else if(PlayerData[playerid][pGraphic] == GRAPHICRANK_SENIOR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*2* Video Editor: /(g)raphic(c)hat /designers");
		}
		else if(PlayerData[playerid][pGraphic] == GRAPHICRANK_MANAGER)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*3* Graphic Manager: /(g)raphic(c)hat /designers /makedesigner");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this commands");
	}
	return 1;
}

CMD:graphicchat(playerid, params[])
{
	if(PlayerData[playerid][pGraphic] >= 1)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			if(PlayerData[playerid][pGraphic] == GRAPHICRANK_REGULAR) str = "Graphics Designer";
			else if(PlayerData[playerid][pGraphic] == GRAPHICRANK_SENIOR) str = "Video Editor";
			else if(PlayerData[playerid][pGraphic] == GRAPHICRANK_MANAGER) str = "Graphic Manager";

			format(str, sizeof(str), "* %s %s: %s *", str, GetRPName(playerid), msg);
			SendGraphicMessage(0xFA58ACFF, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(g)raphic(c)hat [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:makedesigner(playerid, params[])
{
	if(PlayerData[playerid][pGraphic] < GRAPHICRANK_MANAGER && PlayerData[playerid][pAdmin] < MANAGEMENT) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new id, rank[24], str[128];
	if(sscanf(params, "us[24]", id, rank))
	{
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /makedesigner [playerid] [rank]");
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} 'None' 'Regular' 'Editor' or 'Manager'");
	}
	else
	{
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "{FF0000}Error:{FFFFFF} That player isn't connected.");
		if(strcmp(rank, "none", true) == 0 || strcmp(rank, "regular", true) == 0 || strcmp(rank, "editor", true) == 0 || strcmp(rank, "manager", true) == 0)
		{
			if(strcmp(rank, "none", true) == 0)
			{
                SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has removed %s's status as a Designer.", GetRPName(playerid), GetRPName(id));
				SendClientMessage(id, COLOR_AQUA, "You are no longer a Designer.");
				PlayerData[id][pGraphic] = GRAPHICRANK_NONE;
				format(str, sizeof(str), "You removed %s from the Designer team.", GetRPName(id));
				SendClientMessage(playerid, COLOR_AQUA, str);
			//	if(PlayerData[playerid][pLevel] >= 2)PlayerData[id][pTag] = NTAG_PLAYER;
			//	else PlayerData[id][pTag] = NTAG_NEWBIE;
				return 1;
			}
			if(strcmp(rank, "regular", true) == 0)
			{
			//	PlayerData[id][pTag] = NTAG_GRAPHIC;
				PlayerData[id][pGraphic] = GRAPHICRANK_REGULAR;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetRPName(id), rank, GetRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "editor", true) == 0)
			{
			//	PlayerData[id][pTag] = NTAG_GRAPHIC;
				PlayerData[id][pGraphic] = GRAPHICRANK_SENIOR;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetRPName(id), rank, GetRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "manager", true) == 0)
			{
			//	PlayerData[id][pTag] = NTAG_MANAGERGRAPHIC;
				PlayerData[id][pGraphic] = GRAPHICRANK_MANAGER;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetRPName(id), rank, GetRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Invalid rank specified.");
	}
	return 1;
}

CMD:ap(playerid, params[])
{
	if(PlayerData[playerid][pAdminPersonnel] || PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "* [AP]{FFFFFF} %s: %s *", GetRPName(playerid), msg);
			SendAPMessage(COLOR_AQUA, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(a)dmin(p)ersonnel [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}
CMD:dga(playerid, params[])
{
	if(PlayerData[playerid][pGameAffairs] >= 1 || PlayerData[playerid][pAdmin] >= STAFF_MANAGER)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "* [DGA]{FFFFFF} %s: %s *", GetRPName(playerid), msg);
			SendDGAMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:wd(playerid, params[])
{
	if(PlayerData[playerid][pWebDev] >= 1 || PlayerData[playerid][pAdmin] >= STAFF_MANAGER)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "* [DGA]{FFFFFF} %s: %s *", GetRPName(playerid), msg);
			SendWDMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:fm(playerid, params[])
{
    if(PlayerData[playerid][pFactionMod] || PlayerData[playerid][pGameAffairs] || PlayerData[playerid][pAdmin] >= STAFF_MANAGER)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "* [FM]{FFFFFF} %s: %s *", GetRPName(playerid), msg);
			SendFMMessage(COLOR_BLUE, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(f)action(m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}
CMD:gm(playerid, params[])
{
    if(PlayerData[playerid][pGangMod] || PlayerData[playerid][pGameAffairs] || PlayerData[playerid][pAdmin] >= STAFF_MANAGER)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "* [GM]{FFFFFF} %s: %s *", GetRPName(playerid), msg);
			SendGMMessage(COLOR_GREEN, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(g)ang (m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:testfaction(playerid, params[])
{
	new
		szDialogStr[264],
		iCount;

	while(iCount < MAX_FACTIONS) {
		if(FactionInfo[iCount][fName])
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) %s{FFFFFF}", szDialogStr, iCount+1, FactionInfo[iCount][fName]);

		else
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) (empty)", szDialogStr, iCount+1);

		++iCount;
	}
	Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_LIST, "Factions", szDialogStr, "Close", "");
	return 1;
}
CMD:windows(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be inside a vehicle to use this command.");
	}
	if(PlayerData[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
    if(!VehicleHasWindows(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle does not have any windows.");
	}
	new driver, passenger, backleft, backright;
	GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
	SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), !driver, !passenger, !backleft, !backright);
	if(CarWindows[vehicleid] == 0)
	{
	    CarWindows[vehicleid] = 1;
	    SendProximityMessage(playerid, 20.0, 0xFFA500FF, "*{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));

 	}
	else
	{
	    CarWindows[vehicleid] = 0;
        SendProximityMessage(playerid, 20.0, 0xFFA500FF, "*{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}


CMD:loaditem(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);
	if(PlayerData[playerid][pBugFix] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not handling any item.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no boot.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
		return SendClientMessage(playerid, COLOR_GREY, "The vehicle trunk is not open");
	}
	PlayerData[playerid][pCP] = CHECKPOINT_HOUSEROB;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerCheckpoint(playerid, 1596.5035,-1552.3578,13.5879, 5.0);
	return 1;
}

CMD:respawnvipcars(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR)
	{
		for(new i = 0; i < sizeof(VIPVehicles); i++)
		{
			if(!IsVehicleOccupied(VIPVehicles[i]))
			{
				SetVehicleVirtualWorld(VIPVehicles[i], 0);
				LinkVehicleToInterior(VIPVehicles[i], 0);
				SetVehicleToRespawn(VIPVehicles[i]);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You have respawned all unoccupied Donator Vehicles.");
	}
	return 1;
}
CMD:selldynamicsmanagement(playerid, params[])
{
	new houses, garages, businesses;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists])
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has sold all properties.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "* You have sell %i houses, %i garages and %i businesses.", houses, garages, businesses);
	return 1;
}

CMD:samphelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GLOBAL, "_____________________[ SA:MP 0.3.7 R2 CLIENT ]_________________________");
	SendClientMessageEx(playerid, COLOR_GREY, "** CLIENT ** /interior /save /headmove /timestamp /dl");
	SendClientMessageEx(playerid, COLOR_GREY, "** CLIENT ** /pagesize /rs /fpslimit");
	return 1;
}

CMD:togglecam(playerid, params[])
{
	if(GetPVarInt(playerid,"used") == 1)
	{
		SetPVarInt(playerid,"used",0);
		SetCameraBehindPlayer(playerid);
		DestroyPlayerObject(playerid,pObj[playerid]);
	}
	return 1;
}

CMD:window(playerid, params[])
{
//	new string[128];
    if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
        if(GetPlayerInterior(playerid) == 1)
		{
            new
                Float: fSpecPos[6];

            GetPlayerPos(playerid, fSpecPos[0], fSpecPos[1], fSpecPos[2]);
            GetPlayerFacingAngle(playerid, fSpecPos[3]);
            GetPlayerHealth(playerid, fSpecPos[4]);
            GetPlayerArmour(playerid, fSpecPos[5]);

            SetPVarFloat(playerid, "air_Xpos", fSpecPos[0]);
            SetPVarFloat(playerid, "air_Ypos", fSpecPos[1]);
            SetPVarFloat(playerid, "air_Zpos", fSpecPos[2]);
            SetPVarFloat(playerid, "air_Rpos", fSpecPos[3]);
            SetPVarFloat(playerid, "air_HP", fSpecPos[4]);
            SetPVarFloat(playerid, "air_Arm", fSpecPos[5]);

            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerSpectating(playerid, 1);
            PlayerSpectateVehicle(playerid, InsideShamal[playerid]);

            ShowActionBubble(playerid, "* %s glances out the window.", GetRPName(playerid));
          //  ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else TogglePlayerSpectating(playerid, 0);
    }
    return 1;
}
CMD:removegunlicense(playerid, params[])
{
	new targetid;
	if(iscop(playerid))
	{

		if(sscanf(params, "d", targetid))
		{
			return SendClientMessage(playerid, COLOR_GREY, "Usage: /removegunlicense [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		PlayerData[targetid][pGunLicense] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gunlicense = %d WHERE uid = %i", PlayerData[targetid][pGunLicense], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_AQUA, "You've set %s's gun license to %d", GetRPName(targetid), PlayerData[targetid][pGunLicense]);
		SendClientMessageEx(targetid, COLOR_AQUA, "Officer %s has revoked your gun license", GetRPName(playerid));

	}
	else SCM(playerid, COLOR_GREY, "You are not authorized to use this command");
	return 1;
}
CMD:givegunlicense(playerid, params[])
{
	new targetid;

	if(iscop(playerid))
	{
		if(sscanf(params, "d", targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Usage: /givegunlicense [playerid]");
 		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		PlayerData[targetid][pGunLicense] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gunlicense = %d WHERE uid = %i", PlayerData[targetid][pGunLicense], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_AQUA, "You've set %s's gun license to %d", GetRPName(targetid), PlayerData[targetid][pGunLicense]);
		SendClientMessageEx(targetid, COLOR_AQUA, "Officer %s has approved your gun license request", GetRPName(playerid));

	}
	else SCM(playerid, COLOR_GREY, "You are not authorized to use this command");
	return 1;
}
CMD:vradar(playerid, params[])
{

	if(!iscop(playerid))
	    return SendClientMessageEx(playerid, COLOR_GREY, "You are not a law enforcement officer!");
	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, 0xFF0000FF, "You cannot use a dashboard radar outside of a vehicle.");

	switch (CarRadars[playerid])
	{
		case 0: // player has not deployed dashboard radar
		{
			CarRadars[playerid] = 1;
			PlayerTextDrawShow(playerid, _crTextTarget[playerid]);
			PlayerTextDrawShow(playerid, _crTextSpeed[playerid]);
			PlayerTextDrawShow(playerid, _crTickets[playerid]);

			SendClientMessageEx(playerid, COLOR_WHITE, "You are now using your dashboard radar.");
			SetPVarInt(playerid, "_lastTicketWarning", 0);
		}

		case 1..2: // dashboard radar has been deployed
		{
			CarRadars[playerid] = 0;
			PlayerTextDrawHide(playerid, _crTextTarget[playerid]);
			PlayerTextDrawHide(playerid, _crTextSpeed[playerid]);
			PlayerTextDrawHide(playerid, _crTickets[playerid]);

			SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer using your dashboard radar.");
			DeletePVar(playerid, "_lastTicketWarning");
		}
	}

	return 1;
}

CMD:forceweather(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	autoWeather();
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced the weather to change.", GetRPName(playerid));
	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && seatbelt[playerid] == 0)
	{
        seatbelt[playerid] = 1;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 7, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            ShowActionBubble(playerid, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            ShowActionBubble(playerid, "* %s reaches for their seatbelt, and buckles it up.", GetRPName(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && seatbelt[playerid] == 1)
	{
        seatbelt[playerid] = 0;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 7);
            ShowActionBubble(playerid, "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            ShowActionBubble(playerid, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendClientMessage(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

    new stext[4];
    if(seatbelt[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
	{
        ShowActionBubble(playerid, "* %s looks at %s, checking to see if they are wearing a helmet.", GetRPName(playerid),GetRPName(giveplayerid));
        SendClientMessageEx(playerid,COLOR_WHITE, "%s's helmet is currently %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	ShowActionBubble(playerid, "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetRPName(playerid),GetRPName(giveplayerid));
    	SendClientMessageEx(playerid,COLOR_WHITE, "%s's seat belt is currently %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
    if(seatbelt[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have your seatbelt on.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Your seatbelt is off.");
	}
	return 1;
}
CMD:vcode(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerData[playerid][pDonator] < 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You need donator subscription to access use this command.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /vcode [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "* The label has been removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SendClientMessage(playerid, COLOR_WHITE, "* Car text attached. '/vcode none' to detach the Car text.");
	}

	return 1;
}

CMD:tlaws(playerid, params[]) {
	SendClientMessage(playerid, COLOR_LIGHTRED, "Traffic Laws");
	SendClientMessage(playerid, COLOR_GLOBAL, "Drive on the RIGHT side of the road at all times.");
	SendClientMessage(playerid, COLOR_GLOBAL, "Yield to emergency vehicles.");
	SendClientMessage(playerid, COLOR_GLOBAL, "Move over and slow down for stopped emergency vehicles.");
	SendClientMessage(playerid, COLOR_GLOBAL, "Turn your headlights on at night (/car lights).");
	SendClientMessage(playerid, COLOR_GLOBAL, "Wear your seatbelt or helmet (/sb).");
	SendClientMessage(playerid, COLOR_GLOBAL, "Drive at speeds that are posted in /speedlaws");
	SendClientMessage(playerid, COLOR_GLOBAL, "Traffic lights are synced RED=STOP YELLOW=SLOW DOWN GREEN=GO");
	SendClientMessage(playerid, COLOR_GLOBAL, "Only follow traffic lights above a junction. (Marked with a solid white line)");
	SendClientMessage(playerid, COLOR_GLOBAL, "Remain at a safe distance from other vehicles when driving, atleast 3 car lengths");
	SendClientMessage(playerid, COLOR_GLOBAL, "Pedistrians always have the right of way, regardless of the situation.");
	SendClientMessage(playerid, COLOR_GLOBAL, "Drive how you would in real life, dont be a moron.");
	SendClientMessage(playerid, COLOR_GLOBAL, "If you fail at driving you will be jailed or banned.");
	return 1;
}

CMD:speedlaws(playerid, params[]) {
	SendClientMessage(playerid, COLOR_RED, "Speed Enforcement Laws");
	SendClientMessage(playerid, COLOR_GLOBAL, "50mph in Cities");
	SendClientMessage(playerid, COLOR_GLOBAL, "70mph on the County roads");
	SendClientMessage(playerid, COLOR_GLOBAL, "90mph on the Highways and Interstates");
	SendClientMessage(playerid, COLOR_GLOBAL, "Box trucks cannot exceed 50MPH.");
	SendClientMessage(playerid, COLOR_GLOBAL, "Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.");
	SendClientMessage(playerid, COLOR_GLOBAL, "[ THERE ARE POLICE AND SPEED CAMERAS THAT ENFORCE THESE LAWS ]");
	return 1;
}
//Reward play (ToiletDuck)
CMD:rewards(playerid)
{
	new string[2300];
	//strcat(string, "\t\t\t{FFA500}"#SERVER_NAME" Auto Playing Hours Reward System");
    strcat(string, "\n\n{FF00FF}Information:{FFFFFF}");
//    strcat(string, "\nHave you heard this System before? well I could say it is pretty Unique!\nYou can receive a Decent Rewards for Actively Playing in the Server.");
    strcat(string, "\nYou will receive these rewards automatically after completing the playing hours!");
    strcat(string, "\n\n_______________________________________________________________");
    strcat(string, "\n\n  {FFA500}Playing Hours:\tRewards:{FFFFFF}");
    strcat(string, "\n  8 Playing Hours\t10 First Aid Kit and 1 Rim Kit");
    strcat(string, "\n  25 Playing Hours\t 15 Tokens");
    strcat(string, "\n  48 Playing Hours\t5 Upgrade Points and 1 Exp points");
    strcat(string, "\n  60 Playing Hours\t50g Narcotig Drugs and 50,000 Materials");
    strcat(string, "\n  85 Playing Hours\t$100,000 Cash and 2 Exp points");
    strcat(string, "\n  100 Playing Hours\t 20 Tokens");
    strcat(string, "\n  120 Playing Hours\t7 Days Emerald VIP");
//    strcat(string, "\n  180 Playing Hours\t1 Car Voucher");
    strcat(string, "\n  260 Playing Hours\t2 Exp Tokens, 2 Rim Kits and 15 Firstaid Kit");
    strcat(string, "\n  300 Playing Hours\t7 Days Emerald VIP, 1 Car, 1 Rim Kit and 3 Exp");
    strcat(string, "\n_______________________________________________________________");
//    strcat(string, "\n\nWorried how will you receive your rewards? Well nothing to worry about! You will automatically Receive your Rewards :)");
    strcat(string, "\n\nEnjoy the game and Stay Active! Have fun - Prospect Roleplay");
    Dialog_Show(playerid, 0 , DIALOG_STYLE_MSGBOX, "Automatic Reward - Playing Hours", string, "Close", "");
    return 1;
}


CMD:cw(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), string[180];

	if(IsAMotorBike(vehicleid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in a bike.");
	}

	foreach(new i : Player)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInVehicle(i, vehicleid))
		    {
            	if(isnull(params))
				{
				    return SendClientMessage(playerid, COLOR_WHITE, "Usage: /cw [in vehicle text]");
				}
				format(string, sizeof(string), "%s whispers: %s", GetRPName(playerid), params);
				SendProximityFadeMessage(i, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
		}
	}
	return 1;
}

CMD:unloadtrailer(playerid, params[])
{
	if(PlayerTruckJob[playerid][pTDActive] == 1)
	{
		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
		    if(PlayerTruckJob[playerid][pTDTrailer] == GetVehicleTrailer(GetPlayerVehicleID(playerid)))
		    {
			    new DestDepot = PlayerTruckJob[playerid][pTDDestDepot];
			    if(IsPlayerInRangeOfPoint(playerid, 20.0, TruckDepotInfo[DestDepot][pTDPosX], TruckDepotInfo[DestDepot][pTDPosY], TruckDepotInfo[DestDepot][pTDPosZ]))
			    {
			        // Send to unload, wait 10 seconds, freeze them
			        SetTimerEx("UnloadTruckJob", 10000, 0, "i", playerid);
			        TogglePlayerControllable(playerid, 0);

			        // Give them the waiting message
			        GameTextForPlayer(playerid, "~w~Unloading Trailer, please wait...",10000,3);
			    }
			    else
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "  You are not at the Delivery Unloading Point!");
			    }
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "  This trailer is not your delivery trailer!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  There is no trailer attached to your truck!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You are not on a truck delivery!");
	}
	return 1;
}

CMD:deliveryinfo(playerid, params[])
{
	if(PlayerTruckJob[playerid][pTDActive] == 1)
	{
		new Float:DeliveryKm, string[128], str[1024];
	    if(PlayerTruckJob[playerid][pTDLegal] == 1)
	    {
	        // Work out the Distance in KM Between Depot's
            new Float:PosXa, Float:PosYa, Float:PosZa;
            new Float:DPosXa, Float:DPosYa, Float:DPosZa;
            GetPlayerPos(playerid, PosXa, PosYa, PosZa);
			DPosXa = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosX];
			DPosYa = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosY];
			DPosZa = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosZ];
			DeliveryKm = GetDistanceBetweenPoints(PosXa, PosYa, PosZa, DPosXa, DPosYa, DPosZa);
			DeliveryKm = floatdiv(DeliveryKm, 100);

            format(string,sizeof(string),"Delivery Destination: %s\n", TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDName]);
            strcat(str, string);
            format(string,sizeof(string),"Delivery Goods: %s\n", LegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDesc]);
            strcat(str, string);
            format(string,sizeof(string),"Total Distance: %.2f Km\n", PlayerTruckJob[playerid][pTDDistance]);
            strcat(str, string);
            format(string,sizeof(string),"Estimated Distance Remaining: %.2f Km\n\n", DeliveryKm);
            strcat(str, string);
            strcat(str, "{FF0000}A marker has been set to the Delivery Location on your GPS.\n");
            strcat(str, "{FFFFFF}Deliver the goods with minimal damage and do not get caught speeding.\n\n");
            strcat(str, "Use /unloadtrailer to unload your goods when you have reached the destination.");
            Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Delivery Information", str, "Ok", "Cancel");

            SetPlayerCheckpoint(playerid, DPosXa, DPosYa, DPosZa, 5.0);
            PlayerData[playerid][pCP] = CHECKPOINT_TRUCKDELIVERY;
	    }
	    else
	    {
	        // Work out the Distance in KM Between Depot's
            new Float:PosXs, Float:PosYs, Float:PosZs;
            new Float:DPosXs, Float:DPosYs, Float:DPosZs;
            GetPlayerPos(playerid, PosXs, PosYs, PosZs);
			DPosXs = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosX];
			DPosYs = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosY];
			DPosZs = TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDPosZ];
			DeliveryKm = GetDistanceBetweenPoints(PosXs, PosYs, PosZs, DPosXs, DPosYs, DPosZs);
			DeliveryKm = floatdiv(DeliveryKm, 100);

            format(string,sizeof(string),"Delivery Destination: %s\n", TruckDepotInfo[PlayerTruckJob[playerid][pTDDestDepot]][pTDName]);
            strcat(str, string);
            format(string,sizeof(string),"Delivery Goods: %s\n", IllegalTruckJobInfo[PlayerTruckJob[playerid][pTDJobID]][pTJDesc]);
            strcat(str, string);
            format(string,sizeof(string),"Total Distance: %.2f Km\n", PlayerTruckJob[playerid][pTDDistance]);
            strcat(str, string);
            format(string,sizeof(string),"Estimated Distance Remaining: %.2f Km\n\n", DeliveryKm);
            strcat(str, string);
            strcat(str, "{FF0000}A marker has been set to the Delivery Location on your GPS.\n");
            strcat(str, "{FFFFFF}Deliver the goods with minimal damage and do not get caught speeding.\n\n");
            strcat(str, "Use /unloadtrailer to unload your goods when you have reached the destination.");
            Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Delivery Information", str, "Ok", "Cancel");

            SetPlayerCheckpoint(playerid, DPosXs, DPosYs, DPosZs, 5.0);
            PlayerData[playerid][pCP] = CHECKPOINT_TRUCKDELIVERY;
	    }
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You are not current on a truck delivery!");
	}
	return 1;
}
CMD:detach(playerid, params[])
{
	#pragma unused params

	new veh = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in a vehicle to do this.");
	if(!IsTrailerAttachedToVehicle(veh)) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have a trailer attached to your vehicle.");

	DetachTrailerFromVehicle(veh);
	SendClientMessageEx(playerid, COLOR_GREY, "Your trailer has been detached from your vehicle.");

	return 1;
}
CMD:viewjobsaaa(playerid, params[])
{
	return SendClientMessage(playerid, COLOR_GREY, "This command has been temporary disabled due to one unexpected bug");
}
CMD:cancelcdl(playerid, params[])
{
   // new lostrand = random(10000);
	ClearTruckJob(playerid);
	SendClientMessageEx(playerid, COLOR_RED, " * You have canceled the Trucking Delivery.");
//	format(string, sizeof(string), " * Canceling this delivery has cost you $%d.", lostrand);
//	SendClientMessageEx(playerid, COLOR_RED, string);
//	GivePlayerCash(playerid, -lostrand);
	PlayerData[playerid][pCP] = CHECKPOINT_NONE;
}
CMD:viewjobs(playerid, params[])
{
	if(PlayerTruckJob[playerid][pTDActive] == 0)
	{
		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		{
			for(new i=0; i<MAX_TRUCKDEPOTS; i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 20.0, TruckDepotInfo[i][pTDPosX], TruckDepotInfo[i][pTDPosY], TruckDepotInfo[i][pTDPosZ]))
			    {
			        if(PlayerData[playerid][pTruckingLevel] >= TruckDepotInfo[i][pTDLevel])
			        {
				        new L1, L2, L3, IL1, IL2, IL3;

					    L1 = random(MAX_TRUCKJOBS);
					    L2 = random(MAX_TRUCKJOBS);
					    L3 = random(MAX_TRUCKJOBS);
					    IL1 = random(MAX_TRUCKJOBS);
					    IL2 = random(MAX_TRUCKJOBS);
					    IL3 = random(MAX_TRUCKJOBS);
				        new string[256], str[1024];
				        format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {00FF00}(LEGAL)\n", LegalTruckJobInfo[L1][pTJDesc], TruckDepotInfo[LegalTruckJobInfo[L1][pTJDestDepot]][pTDName]);
						strcat(str, string);
						format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {00FF00}(LEGAL)\n", LegalTruckJobInfo[L2][pTJDesc], TruckDepotInfo[LegalTruckJobInfo[L2][pTJDestDepot]][pTDName]);
						strcat(str, string);
						format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {00FF00}(LEGAL)\n", LegalTruckJobInfo[L3][pTJDesc], TruckDepotInfo[LegalTruckJobInfo[L3][pTJDestDepot]][pTDName]);
						strcat(str, string);
						format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {FF0000}(ILLEGAL)\n", IllegalTruckJobInfo[IL1][pTJDesc], TruckDepotInfo[IllegalTruckJobInfo[IL1][pTJDestDepot]][pTDName]);
						strcat(str, string);
						format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {FF0000}(ILLEGAL)\n", IllegalTruckJobInfo[IL2][pTJDesc], TruckDepotInfo[IllegalTruckJobInfo[IL2][pTJDestDepot]][pTDName]);
						strcat(str, string);
						format(string,sizeof(string), "{FFFFFF}Deliver %s to %s {FF0000}(ILLEGAL)\n", IllegalTruckJobInfo[IL3][pTJDesc], TruckDepotInfo[IllegalTruckJobInfo[IL3][pTJDestDepot]][pTDName]);
						strcat(str, string);

						format(string,sizeof(string), "{FFFFFF}%s", TruckDepotInfo[i][pTDName]);
						Dialog_Show(playerid, DIALOG_SHOW_TRUCKJOBS, DIALOG_STYLE_LIST, string, str, "Take Job", "Cancel");

						PlayerData[playerid][pLegalTruckJob1] = L1;
						PlayerData[playerid][pLegalTruckJob2] = L2;
						PlayerData[playerid][pLegalTruckJob3] = L3;
						PlayerData[playerid][pIllegalTruckJob1] = IL1;
						PlayerData[playerid][pIllegalTruckJob2] = IL2;
						PlayerData[playerid][pIllegalTruckJob3] = IL3;
						return 1;
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "  Your trucking level is too low to deliver for this truck depot!");
					    return 1;
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, "  You are not at a truck depot information icon!");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "  You need to attach a Trailer to your truck first!");
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  You are already on a current truck delivery. If you wish to cancel, use /cancelcdl!");
	}
	return 1;
}

CMD:cancelorder(playerid, params[])
{
    if(PlayerTruckJob[playerid][pTDActive] == 0)
	{
	    PlayerData[playerid][pLegalTruckJob1] = -1;
		PlayerData[playerid][pLegalTruckJob2] = -1;
		PlayerData[playerid][pLegalTruckJob3] = -1;
		PlayerData[playerid][pIllegalTruckJob1] = -1;
	    PlayerData[playerid][pIllegalTruckJob2] = -1;
		PlayerData[playerid][pIllegalTruckJob3] = -1;
		PlayerTruckJob[playerid][pTDActive] = -1;
		PlayerTruckJob[playerid][pTDLegal] = -1;
		PlayerTruckJob[playerid][pTDJobID] = -1;
		PlayerTruckJob[playerid][pTDDestDepot] = -1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You're not even delivering an order");
	}
}
CMD:truckhelp(playerid, params[])
{
	new str[3000];
	strcat(str, "{FFFFFF}You first need to purchase your own Commercial Truck from the Car Lot underneath Mulholland Intersection\n");
	strcat(str, "Then you must have a Commercial Drivers License, which is available from the Trucking Depot in Blueberry.\n");
	strcat(str, "Once you have these 2 things, you can visit the nearest Truck Depot / Storage to find a trucking job.\n");
	strcat(str, "Attach a trailer to your truck at one of these places and then use the commands listed below to do deliveries in the truck.\n\n");

	strcat(str, "You will notice that each Trucking Depot has a certain Trucking Level. You must have this Trucking Level in order\n");
	strcat(str, "to do trucking jobs from this Depot. After each delivery, you gain a certain amount of Trucking XP, which goes towards\n");
	strcat(str, "the XP needed to advance to the next Trucking Level.\n\n");

	strcat(str, "COMMANDS: /viewjobs /unloadtrailer /deliveryinfo /finddepot /detach");
	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Trucking Help", str, "Ok", "Cancel");
	return 1;
}
CMD:finddepot(playerid, params[])
{
	new level;
	if(sscanf(params, "i", level))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /finddepot [level]");
	    return 1;
	}
	new closest = GetClosestTruckDepot(playerid, level);
	if(closest == -1)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "  There are no trucking depots for this level.");
	}
	else
	{
		SetPlayerCheckpoint(playerid, TruckDepotInfo[closest][pTDPosX],TruckDepotInfo[closest][pTDPosY],TruckDepotInfo[closest][pTDPosZ], 5.0);
		SendClientMessageEx(playerid, COLOR_YELLOW, " * A checkpoint has been added to your GPS to the nearest truck depot for this level selected.");
		PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	}
	return 1;
}
CMD:speakerphone(playerid, params[])
{
    if(PlayerData[playerid][pPhone] != 0)
	{
        if(PlayerData[playerid][pSpeakerPhone] == 1)
		{
            PlayerData[playerid][pSpeakerPhone] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
        }
        else
		{
            PlayerData[playerid][pSpeakerPhone] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone.");
    }
    return 1;
}
//----------------------------------------------------------


CMD:arrest(playerid, params[])
{
	new targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /arrest [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't arrest yourself.");
	}
	if(!PlayerData[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed.");
	}
	if(!PlayerData[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't arrest a player with no active charges. /charge to add them.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = PlayerData[targetid][pWantedLevel] * 5;
	        fine = PlayerData[targetid][pWantedLevel] * 1000;

	        if(PlayerData[targetid][pDonator] > 0)
			{
	            SendClientMessageEx(targetid, COLOR_VIP, "Donator Perk: Your %i minutes of jail time has been reduced by 50 percent to %i minutes.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }

		    PlayerData[targetid][pJailType] = 3;
    		PlayerData[targetid][pJailTime] = minutes * 60;
			PlayerData[targetid][pWantedLevel] = 0;
			PlayerData[targetid][pArrested]++;

		    ResetPlayerWeaponsEx(targetid);
			ResetPlayer(targetid);
			TogglePlayerControllable(targetid, 1);

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = 0, arrested = %i WHERE uid = %i", PlayerData[targetid][pArrested], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `criminals` SET `served` = 1 WHERE `player` = '%e';", GetPlayerNameEx(targetid));
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			SendClientMessageToAllEx(COLOR_LIGHTRED, "<< %s %s has completed their arrest. %s has been sent to jail for %i days. >>", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
			//SendFactionMessage(PlayerData[playerid][pFaction], COLOR_ROYALBLUE, "* HQ: %s %s has arrested %s for %i minutes, fine: $%i.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes, fine);
    		SendClientMessageEx(targetid, COLOR_AQUA, "* You've been arrested for %i minutes, fine: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any arrest points.");
    return 1;
}

CMD:releasecartest(playerid, params[])
{
//	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.1653, 175.8127, 1008.3828))
//	    return SendErrorMessage(playerid, "You must be at city hall to release a vehicle.");

	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_VEHICLES; i ++)
	if(IsVehicleOwner(playerid, i))
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, vehicleNames[VehicleInfo[i][vModel] - 400], FormatNumber(VehicleInfo[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "You don't have any impounded vehicles.");

	else Dialog_Show(playerid, DIALOG_RELEASECAR, DIALOG_STYLE_LIST, "Release Vehicle", string, "Select", "Cancel");
	return 1;
}
CMD:testdmv1(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM `vehicles` WHERE `ownerid` = '%i' AND `carimpounded` = '1'", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_RELEASECAR, playerid);
	return 1;
}

CMD:releasecar(playerid, params[])
{
//	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.1653, 175.8127, 1008.3828))
//	    return SendErrorMessage(playerid, "You must be at city hall to release a vehicle.");

	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_VEHICLES; i ++)
	if(IsVehicleOwner(playerid, i) && VehicleInfo[i][carImpounded] == 1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, vehicleNames[VehicleInfo[i][vModel] - 400], FormatNumber(VehicleInfo[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "You don't have any impounded vehicles.");

	else Dialog_Show(playerid, DIALOG_RELEASECAR, DIALOG_STYLE_LIST, "Release Vehicle", string, "Select", "Cancel");
	return 1;
}
CMD:createimpound(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

    if (PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "You can only create impound lots outside interiors.");

	GetPlayerPos(playerid, x, y, z);

	id = Impound_Create(x, y, z);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for impound lots.");

	SendInfoMessage(playerid, "You have successfully created impound lot ID: %d.", id);
	return 1;
}

CMD:destroyimpound(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessageEx(playerid, COLOR_GREY, "/destroyimpound [impound id]");

	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	Impound_Delete(id);
	SendInfoMessage(playerid, "You have successfully destroyed impound lot ID: %d.", id);
	return 1;
}
CMD:impound(playerid, params[])
{
	new
		price,
		id = Impound_Nearest(playerid),
		vehicleida = GetPlayerVehicleID(playerid);

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "You must be a police officer.");

    if (sscanf(params, "d", price))
        return SendClientMessage(playerid, COLOR_GREY, "/impound [price]");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "The price can't be above $1,000 or below $1.");

	if (GetVehicleModel(vehicleida) != 525)
	    return SendErrorMessage(playerid, "You are not driving a tow truck.");

	if (id == -1)
	    return SendErrorMessage(playerid, "You are not in range of any impound lot.");

	if (!GetVehicleTrailer(vehicleida))
	    return SendErrorMessage(playerid, "There is no vehicle hooked.");

 	new	vehicleid = GetVehicleTrailer(vehicleid);

	if (vehicleid == -1)
	    return SendErrorMessage(playerid, "You can't tow this vehicle.");

	if(VehicleInfo[vehicleid][carImpounded] == 1)
	{
	    return SendErrorMessage(playerid, "This vehicle is already impounded.");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}
    if(!VehicleInfo[vehicleid][vOwnerID])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can only impound player's owned vehicles.");
	}
	VehicleInfo[vehicleid][carImpounded] = 1;
	VehicleInfo[vehicleid][carImpoundPrice] = price;

	AddToTaxVault(price);

 	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, carimpounded = %i, carimpoundprice = 1 WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][carImpounded], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_AQUA, "RADIO: %s has impounded a %s for %s.", GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(price));
 	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
    DespawnVehicle(vehicleid);
	return 1;
}
CMD:editimpound(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendClientMessageEx(playerid, COLOR_GREY, "/editimpound [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} location, release");
		return 1;
	}
	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		ImpoundData[id][impoundLot][0] = x;
		ImpoundData[id][impoundLot][1] = y;
		ImpoundData[id][impoundLot][2] = z;

		Impound_Refresh(id);
		Impound_Save(id);

		SendAdminMessage(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of impound ID: %d.", GetRPName(playerid), id);
	}
	else if (!strcmp(type, "release", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z,
			Float:angle;

	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		ImpoundData[id][impoundRelease][0] = x;
		ImpoundData[id][impoundRelease][1] = y;
		ImpoundData[id][impoundRelease][2] = z;
		ImpoundData[id][impoundRelease][3] = angle;

		Impound_Save(id);
		SendAdminMessage(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the release point of impound ID: %d.", GetRPName(playerid), id);
	}
	return 1;
}

CMD:editdealercars(playerid, params[])
{
	new company;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", company))
	{
		return SendSyntaxMessage(playerid, "/editdealercars (business ID)");
	}
	else if (!IsValidCompanyID(company))
	{
		return SendErrorMessage(playerid, "You have specified an invalid company.");
	}
	else if (BusinessInfo[company][bType] != BUSINESS_DEALERSHIP)
	{
		return SendErrorMessage(playerid, "You can only add dealership cars to dealerships.");
	}
	else
	{
		ShowDealershipEditMenu(playerid, company);
	}
	return 1;
}
CMD:furniture(playerid, params[])
{
	new id = GetInsideHouse(playerid);
	if(id == -1)
	{
		id = GetFurnitureHouse(playerid);
	}
    if (!IsHouseOwner(playerid, id) && PlayerData[playerid][pFurniturePerms] != id)
	{
		return SendErrorMessage(playerid, "You don't have permissions to furnish this house.");
	}
    else
    {
        PlayerData[playerid][pHouse] = id;
	    Dialog_Show(playerid, HouseFurniture, DIALOG_STYLE_LIST, "{FFFFFF}Manage Furniture", "Purchase\nAdjustments", "Select", "Cancel");
	}
	return 1;
}
CMD:testfurn(playerid, params[])
{
	SelectObject(playerid);
	return 1;
}
CMD:edit(playerid, params[])
{
	new
		furniture;

	if (PlayerData[playerid][pHouseEdit] == -1 || !HouseInfo[PlayerData[playerid][pHouseEdit]][hEdit])
	{
	    return SendErrorMessage(playerid, "You are not editing furniture.");
	}
	else if (sscanf(params, "i", furniture))
	{
	    return SendSyntaxMessage(playerid, "/edit (furniture ID)");
	}
	else if (!IsValidFurnitureID(furniture))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid furniture ID.");
	}
	else if (Furniture[furniture][fHouseID] != HouseInfo[PlayerData[playerid][pHouseEdit]][hID])
	{
	    return SendErrorMessage(playerid, "The specified ID belongs to another house.");
	}
	else if (PlayerData[playerid][pEdit] == EDIT_TYPE_PREVIEW)
	{
	    return SendErrorMessage(playerid, "You can't edit furniture while previewing.");
	}
	else
	{
	    SetPVarInt(playerid, "FurnID", furniture);
	    Dialog_Show(playerid, FurnEditConfirm, DIALOG_STYLE_LIST, "Furniture Edit", "Edit Position\nEdit Texture\nDuplicate Object\nDelete Object", "Select", "Cancel");
		SendInfoMessage(playerid, "You are now editing ID: %i. Click the disk icon to save changes.", furniture);
	}
	return 1;
}

CMD:edittexture(playerid, params[])
{
	new
		furniture;

	if (PlayerData[playerid][pHouseEdit] == -1 || !HouseInfo[PlayerData[playerid][pHouseEdit]][hEdit])
	{
	    return SendErrorMessage(playerid, "You are not editing furniture.");
	}
	else if (sscanf(params, "i", furniture))
	{
	    return SendSyntaxMessage(playerid, "/edit (furniture ID)");
	}
	else if (!IsValidFurnitureID(furniture))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid furniture ID.");
	}
	else if (Furniture[furniture][fHouseID] != HouseInfo[PlayerData[playerid][pHouseEdit]][hID])
	{
	    return SendErrorMessage(playerid, "The specified ID belongs to another house.");
	}
	else if (PlayerData[playerid][pEdit] == EDIT_TYPE_PREVIEW)
	{
	    return SendErrorMessage(playerid, "You can't edit furniture while previewing.");
	}
	else
	{

		SendInfoMessage(playerid, "You are now editing ID: %i. Click the disk icon to save changes.", furniture);
	}
	return 1;
}

CMD:delete(playerid, params[])
{
	new
		furniture;

	if (PlayerData[playerid][pHouseEdit] == -1 || !HouseInfo[PlayerData[playerid][pHouseEdit]][hEdit])
	{
	    return SendErrorMessage(playerid, "You are not editing furniture.");
	}
	else if (sscanf(params, "i", furniture))
	{
	    return SendSyntaxMessage(playerid, "/delete (furniture ID)");
	}
	else if (!IsValidFurnitureID(furniture))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid furniture ID.");
	}
	else if (Furniture[furniture][fHouseID] != HouseInfo[PlayerData[playerid][pHouseEdit]][hID])
	{
	    return SendErrorMessage(playerid, "The specified ID belongs to another house.");
	}
	else
	{
		if (PlayerData[playerid][pEdit] == EDIT_TYPE_FURNITURE)
		{
			CancelObjectEdit(playerid);
		}
		DeleteFurniture(furniture);
		SendInfoMessage(playerid, "You are deleted furniture ID: %i.", furniture);
	}
	return 1;
}
EditDynamicObjectEx(playerid, type, objectid, extraid = -1)
{
	PlayerData[playerid][pEdit] = type;
	PlayerData[playerid][pEditID] = extraid;

	return EditDynamicObject(playerid, objectid);
}

CancelObjectEdit(playerid)
{
    PlayerData[playerid][pEdit] = EDIT_TYPE_NONE;
	PlayerData[playerid][pEditID] = -1;

	return CancelEdit(playerid);
}
CMD:cancel(playerid, params[])
{
	if (PlayerData[playerid][pHouseEdit] == -1 || !HouseInfo[PlayerData[playerid][pHouseEdit]][hEdit])
	{
	    return SendErrorMessage(playerid, "You are not editing furniture.");
	}
	else
	{
	    SetFurnitureEditMode(PlayerData[playerid][pHouseEdit], false);

	    PlayerData[playerid][pHouseEdit] = -1;
	    SendInfoMessage(playerid, "You are no longer editing furniture.");
	}
	return 1;
}
CMD:setstyle(playerid, params[])
{
	new pickid;
	if(!PlayerData[playerid][pDonator])
		return SendClientMessage(playerid, COLOR_ADM, "ACCESS DENIED:{FFFFFF} You aren't a donator.");

	if(sscanf(params, "i", pickid)){
		SendClientMessage(playerid, COLOR_WHITE, "Chat Styles: 0 1 2 3 4");
		SendClientMessage(playerid, COLOR_WHITE, "Chat Styles: 5 6 7");
		SendClientMessage(playerid, COLOR_GREEN, "USAGE: /setstyle 2 [StyleID]");
		return true;
	}

	if(pickid != -1 && pickid < 0 || pickid > 7)
		return SendClientMessage(playerid, COLOR_ADM, "You specified an invalid chat.");

	PlayerData[playerid][pChatstyle] = pickid;
	SavePlayerVariables(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "Enjoy your new chatstyle!");
	return 1;
}
CMD:doublexp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{
	    SetRewardPlay(true);
	    SetDoubleXP(true);
		SendClientMessageToAllEx(COLOR_AQUA, "* %s enabled happy hours. You will now get random gifts and double xp for playing in the server.", GetRPName(playerid));
	}
	return 1;
}

CMD:enddoublexp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{
	    SetRewardPlay(false);
	    SetDoubleXP(false);
	}
	return 1;
}

/*CMD:fakechat420(playerid,params[]) // gonna keep it secret for now
{
   new target;
   new ftext[128];
   new string[256];
   new tcolor;
   new Lname[MAX_PLAYER_NAME];
   if(sscanf(params,"us[128]",target,ftext)) return SendClientMessage(playerid, 0xFF0000FF, "Usage: /fakechat [playerid] [text]");
   GetPlayerName(target,Lname,sizeof(Lname));
   format(string,sizeof(string),"{FFA500}(( %s Level 5 Player %s: %s ))", GETRPName, Lname, ftext);
   SendClientMessageToAll(tcolor,string);
   SendClientMessage(playerid, 0xFF0000, "Fake chat successfully sent!");
   return 1;
}*/
CMD:lockserver(playerid, params[])
{
	new str[128];
	if(PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{
		new pass[24];
		if(sscanf(params, "s[24]", pass)) {
			SendClientMessage(playerid, COLOR_GREY, "Note: use /lockserver 0 to unlock the server.");
			return SendClientMessage(playerid, COLOR_GREY, "Usage: /lockserver [new pass]");
		}

		format(str, sizeof(str), "Server password set to %s", pass);
		SendClientMessage(playerid, COLOR_GREY, str);
		format(str, sizeof(str), "password %s", pass);
		SendRconCommand(str);
	}
	return 1;
}
CMD:help(playerid, params[])
{
	return Dialog_Show(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "{F7A763}Help", "Account\nAnimations\nBusiness\nBanking\nDonator\nFaction\nGeneral\nGang\nGarage\nHouse\nJob\nLand\nPlanting\nVehicle", "Select", "Close");
}

CMD:jobhelp(playerid, params[])
{
	if(PlayerData[playerid][pJob] == JOB_NONE && PlayerData[playerid][pSecondJob] == JOB_NONE)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job to view.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "__________________ Job Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "** JOB HELP ** type a command for more information.");

	switch(PlayerData[playerid][pJob])
	{
		//case JOB_NONE: SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
		case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /getpizza, /cancelcp.");
		case JOB_COURIER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /load, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /fish, /myfish, /sellfish.");
		case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /smugglemats, /sellgun.");
		case JOB_MECHANIC: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /buycomps, /repair, /refill, /nos, /hyd, /takecall.");
		case JOB_MINER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /mine, /cancelcp.");
		case JOB_SWEEPER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /startsweeping, /stopsweeping.");
		case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /setfare, /takecall.");
        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
        case JOB_LAWYER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /defend, /free, /wanted.");
        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /find.");
        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /garbage");
        case JOB_FARMER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /harvest");
 	}

 	if(PlayerData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerData[playerid][pSecondJob])
		{
			//case JOB_NONE: SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
			case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /getpizza.");
			case JOB_COURIER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /load, /deliver.");
			case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /fish, /myfish, /sellfish.");
			case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /smugglemats, /sellgun.");
			case JOB_MECHANIC: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /buycomps, /repair, /refill, /nos, /hyd.");
			case JOB_MINER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /mine.");
			case JOB_SWEEPER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /startsweeping, /stopsweeping.");
			case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /setfare.");
	        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /find.");
	        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_GREY, "** JOB ** /garbage");
	 	}
	}

	return 1;
}

CMD:vehiclehelp(playerid)
{
    SendClientMessage(playerid, COLOR_SERVERDEF, "Vehicle:{C8C8C8} /lights /hood /boot /buy /carstorage /park /lock /findcar, /setforsale, /cancelforsale");
    SendClientMessage(playerid, COLOR_SERVERDEF, "Vehicle:{C8C8C8} /vstash /neon /unmod /colorcar /paintcar /upgradevehicle /sellcar /sellmycar");
    SendClientMessage(playerid, COLOR_SERVERDEF, "Vehicle:{C8C8C8} /givekeys /takekeys /setradio /paytickets /carinfo /gascan /breakin");
    return 1;
}

CMD:bankhelp(playerid)
{
    SendClientMessage(playerid, COLOR_SERVERDEF, "Banking:{c8c8c8} /withdraw /deposit /wiretransfer /balance /robbank /robinvite /bombvault /robbers");
	return 1;
}

CMD:viphelp(playerid)
{
	if(!PlayerData[playerid][pDonator])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a donator.");
	}
    SendClientMessage(playerid, COLOR_WHITE, "{A020F0}Donator:{C8C8C8} /(v)ip /vipinfo /viptag /vipcolor /vipinvite /vipnumber /vipmusic.");
	if(PlayerData[playerid][pDonator] > 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "{A020F0}Donator:{C8C8C8} /repair /nos /hyd /viprimkit /vcode");
	}
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_SERVERDEF, "_____________ Members Online _____________");
    new string[128], color = FactionInfo[PlayerData[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && !PlayerData[i][pAdminHide])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s{FFFFFF}", i, FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], color >>> 8, GetRPName(i));
			if(PlayerData[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Division: %s", string, FactionDivisions[PlayerData[i][pFaction]][PlayerData[i][pDivision]]);
			}
			if(PlayerData[i][pFactionLeader])
			{
			    format(string, sizeof(string), "%s | {06FF00}Leader{FFFFFF}", string);
			}
			if(FactionInfo[PlayerData[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "| Total Patients: %i | Total Fires: %i", string, PlayerData[i][pTotalPatients], PlayerData[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerData[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d secs)", string, PlayerData[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}

    SendClientMessage(playerid, COLOR_SERVERDEF, "_____________ Members Online _____________");
	new string[128], color = GangInfo[PlayerData[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(PlayerData[i][pGang] == PlayerData[playerid][pGang] && !PlayerData[i][pAdminHide])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s{FFFFFF}", PlayerData[i][pGangRank], GangRanks[PlayerData[i][pGang]][PlayerData[i][pGangRank]], color >>> 8, GetRPName(i));
            if(PlayerData[i][pCrew] >= 0)
			{
			    format(string, sizeof(string), "%s | Crew: %s", string, GangCrews[PlayerData[i][pGang]][PlayerData[i][pCrew]]);
			}
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerData[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d secs)", string, PlayerData[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}
CMD:members(playerid, params[])
{
	if(PlayerData[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(PlayerData[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}

/* wtf is this crap
CMD:fmembers(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Members Online _____");

    foreach(new i : Player)
    {
        if(PlayerData[i][pFaction] == PlayerData[playerid][pFaction])
        {
            if(FactionInfo[PlayerData[i][pFaction]][fType] == FACTION_MEDIC)
            {
                if(PlayerData[i][pDivision] == -1)
                {
	                if(PlayerData[i][pFactionLeader])
    	            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - (Total Patients: %i) - (Total Fires: %i) {00AA00}(Leaderflags)", i, FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i), PlayerData[i][pTotalPatients], PlayerData[i][pTotalFires]);
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - (Total Patients: %i) - (Total Fires: %i)", i, FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i), PlayerData[i][pTotalPatients], PlayerData[i][pTotalFires]);
				}
				else
				{
					if(PlayerData[i][pFactionLeader])
    	            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s - (Total Patients: %i) - (Total Fires: %i) {00AA00}(Leaderflags)", i, FactionDivisions[PlayerData[i][pFaction]][PlayerData[i][pDivision]], FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i), PlayerData[i][pTotalPatients], PlayerData[i][pTotalFires]);
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s - (Total Patients: %i) - (Total Fires: %i)", i, FactionDivisions[PlayerData[i][pFaction]][PlayerData[i][pDivision]], FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i), PlayerData[i][pTotalPatients], PlayerData[i][pTotalFires]);
				}

			}
			else
			{
			    if(PlayerData[i][pDivision] == -1)
			    {
			        if(PlayerData[i][pFactionLeader])
    		            SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s {00AA00}(Leaderflags)", i, FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i));
					else
	        		    SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s", i, FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i));
				}
				else
				{
			        if(PlayerData[i][pFactionLeader])
    	    	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s {00AA00}(Leaderflags)", i, FactionDivisions[PlayerData[i][pFaction]][PlayerData[i][pDivision]], FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i));
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s", i, FactionDivisions[PlayerData[i][pFaction]][PlayerData[i][pDivision]], FactionRanks[PlayerData[i][pFaction]][PlayerData[i][pFactionRank]], GetRPName(i));
				}
			}
		}
    }

	return 1;
}*/

CMD:factionhelp(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
	}
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "** FACTION HELP ** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /fc /d /(r)adio /div /faction /division /locker /showbadge /(m)egaphone");

	switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /gate /door /cell /tazer /cuff /uncuff /drag /detain /charge /arrest");
	        SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /wanted /frisk /take /ticket /gov /ram /deploy /undeploy /undeployall /backup /swat");
	        SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /mdc /clearwanted /siren /badge /vticket /vfrisk /vtake /seizeplant /mir /fpark");

			if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /listcallers /trackcall /cells /passport /callsign /bug /listbugs /tog bugged");
			else
			    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /listcallers /trackcall /cells /claim /callsign /fpark");
		}
		case FACTION_MEDIC:
		{
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /heal /drag /stretcher /deliverpt /getpt /listpt /injuries /deploy /undeploy /undeployall");
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /badge /gov /backup /listcallers /trackcall /callsign /fpark");
		}
		case FACTION_NEWS:
		{
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /news /live /endlive /liveban /badge /addeposit /adwithdraw /fpark");
		}
		case FACTION_GOVERNMENT:
		{
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /gov /settax /factionpay /tazer /cuff /uncuff /detain /taxdeposit /taxwithdraw /fpark");
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /backup /badge");
		}
		case FACTION_HITMAN:
		{
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /contracts /takehit /profile /passport /plantbomb /pickupbomb /detonate");
		    SendClientMessage(playerid, COLOR_GREY, "** FACTION ** /hfind, /noknife, /hm /fpark");
		}
	}

	return 1;
}

CMD:ganghelp(playerid, params[])
{
	if(PlayerData[playerid][pGang] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a gang member.");
	}

    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "** GANG HELP ** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "** GANG ** /f /gang /gstash /gbackup /bandana /capture /claim /reclaim /turfinfo /points");
    SendClientMessage(playerid, COLOR_GREY, "** GANG ** /gbuyvehicle /gpark /gfindcar /grespawncars /gsellcar /gunmod /lock, /endalliance, /gspray");
    SendClientMessage(playerid, COLOR_GREY, "** CREW ** /managecrew /crew");
	return 1;
}

CMD:landhelp(playerid)
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "Land:{C8C8C8} /buyland /lock /door /landinfo /land /sellmyland /sellland /droplandkeys");
    SendClientMessage(playerid, COLOR_SERVERDEF, "Land:{C8C8C8} '/toggle lands' to show or hide lands on your mini-map.");
    return 1;
}

CMD:planthelp(playerid)
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "Planting:{C8C8C8} /plantweed /plantinfo /pickplant /seizeplant");
    return 1;
}

CMD:o(playerid, params[])
{
	return callcmd::ooc(playerid, params);
}

CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(o)oc [global OOC]");
	}
	if(!enabledOOC && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The global OOC channel is disabled at the moment.");
	}
	if(PlayerData[playerid][pToggleOOC])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the OOC chat as you have it toggled.");
	}
	if((!isnull(PlayerData[playerid][pCustomTitle]) && strcmp(PlayerData[playerid][pCustomTitle], "None", true) != 0) && PlayerData[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerData[playerid][pCustomTColor] == -1 || PlayerData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFFFFF} %s", color >>> 8, PlayerData[playerid][pCustomTitle], GetRPName(playerid));
	} else if(PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pAdminHide] == 0) {
		format(string, sizeof(string), "%s{FFFFFF} %s", GetAdminRank2(playerid), GetRPName(playerid));
    } else if(PlayerData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "{FF69B5}Former Admin{FFFFFF} %s", GetRPName(playerid));
	} else if(PlayerData[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "{D909D9}%s{FFFFFF} %s", GetVIPRank(PlayerData[playerid][pDonator]), GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!PlayerData[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

CMD:newb(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}
CMD:na(playerid, params[]) return callcmd::nanswer(playerid, params);
CMD:nanswer(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= HELPER)
	{
	    new giveplayerid, string[300], answer[128], question[128];
		if(sscanf(params, "us[128]", giveplayerid, answer)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nanswer (playerid) (answer)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* Staff %s has answered your Question", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_AQUA, string);
		GetPVarString(giveplayerid, "Question", question, sizeof(question));
		foreach(new n: Player)
		{
		    if(!PlayerData[n][pToggleNewbie])
		    {
			    format(string, sizeof(string), "Question: %s: %s", GetRPName(giveplayerid), question);
			    SendClientMessageEx(n, COLOR_NEWBIE, string);
			    if(PlayerData[playerid][pAdmin] < HELPER)
			    {
					format(string, sizeof(string), "Answer: %s: %s", GetRPName(playerid), answer);
					PlayerData[playerid][pNewbies] ++;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET newbies = %i WHERE uid = %i", PlayerData[playerid][pNewbies], PlayerData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				if(PlayerData[playerid][pAdmin] < 1) format(string, sizeof(string), "Answer: %s: %s", GetRPName(playerid), answer);
				if(PlayerData[playerid][pAdmin] >= MODERATOR) format(string, sizeof(string), "Answer: %s: %s", GetRPName(playerid), answer);
				SendClientMessageEx(n, COLOR_NEWBIE, string);
			}
		}
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_AQUA, "You're not a Staff member!");
	return 1;

}
CMD:tn(playerid, params[]) return callcmd::trashnewb(playerid, params);
CMD:trashnewb(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= HELPER)
	{
	    new giveplayerid, string[128], reason[128];
		if(sscanf(params, "us[128]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trashnewb (playerid) (text)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* Staff %s has trashed your question. Reason: %s", GetRPName(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_AQUA, string);
		format(string, sizeof(string), "* %s has trashed %s question. Reason: %s", GetRPName(playerid),GetRPName(giveplayerid), reason);
		SendQuestionToStaff(COLOR_AQUA, string);
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_AQUA, "You're not a Staff member!");
	return 1;
}
CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The newbie channel is disabled at the moment.");
	}
	if(PlayerData[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(gettime() - PlayerData[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerData[playerid][pLastNewbie]));
	}
	if(PlayerData[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the newbie chat as you have it toggled.");
	}
//	ShowDialogToPlayer(playerid, DIALOG_NEWBIE);
	SendNewbieChatMessage(playerid, params);
//	ShowPlayerDialog(playerid, SEND_NEWBIE, DIALOG_STYLE_INPUT, "Ask Newbie Question", "Please input your question\nPlease bare in mind only script/server related questions will be answered.", "Send", "Cancel");
	PlayerData[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", PlayerData[playerid][pNewbies], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:level(playerid, params[])
{
	new count, color;

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /level [level]");
	}

	if(IsNumeric(params))
	{
	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pLevel] == strval(params))
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00)
		        	color = 0xAAAAAAFF;

				SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, GetPlayerNameEx(i), PlayerData[i][pLevel], GetPlayerPing(i));
				count++;
			}
		}
		if(!count)
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "There are no level %s players online.", params);
		}
   	}
   	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Please use a numerical value!");
	}

	return 1;
}

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", targetid, color >>> 8, name, PlayerData[targetid][pLevel], GetPlayerPing(targetid));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, name, PlayerData[i][pLevel], GetPlayerPing(i));
	            count++;
			}
		}

		if(!count)
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}

CMD:pay(playerid, params[])
{
	new targetid, amount;

	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pay [playerid] [amount]");
	}
	if(gettime() - PlayerData[playerid][pLastPay] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Please wait three seconds between each transaction.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't pay yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}
	if(amount > PlayerData[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much.");
	}
	if(amount > 1000 && PlayerData[playerid][pLevel] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only pay up to $1,000 at a time as a level 1.");
	}
	if(amount > 100000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are only allowed to pay up to $100,000 at a time.");
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerData[playerid][pLastPay] = gettime();

	GivePlayerCash(playerid, -amount);
	GivePlayerCash(targetid, amount);

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

	ShowActionBubble(playerid, "* %s takes out %s and gives it to %s.", GetRPName(playerid), FormatNumber(amount), GetRPName(targetid));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID], GetPlayerIP(targetid));

    SendClientMessageEx(targetid, COLOR_AQUA, "You have been given {00AA00}%s{33CCFF} by %s.", FormatNumber(amount), GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given {FF6347}%s{33CCFF} to %s.", FormatNumber(amount), GetRPName(targetid));

	if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has given %s to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: GasCan, Seeds, Ephedrine, FirstAid, Bodykits, Rimkits, Diamonds");
	    return 1;
	}

	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You must be holding the weapon you're willing to give away.");
	    }
	    if(PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't sell this weapon as you don't have it.");
		}
	    if(PlayerData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player already has a weapon in that slot.");
	    }
	    if(PlayerData[targetid][pHours] < 2 || PlayerData[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerData[playerid][pFaction] >= 0 && PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can only give away weapons to your own faction members.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from inside a vehicle.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to players inside a vehicle.");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't give weapons as your health is below 60.");
		}
	    GivePlayerWeaponEx(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you their %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s your %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));

	    ShowActionBubble(playerid, "* %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pMaterials] + amount > GetPlayerCapacity(targetid, CAPACITY_MATERIALS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more materials.");
		}

		PlayerData[playerid][pMaterials] -= amount;
		PlayerData[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[targetid][pMaterials], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i materials.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some materials to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [weed] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pWeed] + amount > GetPlayerCapacity(targetid, CAPACITY_WEED))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more weed.");
		}

		PlayerData[playerid][pWeed] -= amount;
		PlayerData[targetid][pWeed] += amount;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[targetid][pWeed], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of weed.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of weed to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some weed to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of weed to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [cocaine] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pCocaine] + amount > GetPlayerCapacity(targetid, CAPACITY_COCAINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more cocaine.");
		}
		PlayerData[playerid][pCocaine] -= amount;
		PlayerData[targetid][pCocaine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[targetid][pCocaine], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of cocaine.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of cocaine to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some cocaine to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of cocaine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pMeth] + amount > GetPlayerCapacity(targetid, CAPACITY_METH))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more meth.");
		}
		PlayerData[playerid][pMeth] -= amount;
		PlayerData[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[targetid][pMeth], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some meth to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pPainkillers] + amount > GetPlayerCapacity(targetid, CAPACITY_PAINKILLERS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more painkillers.");
		}

		PlayerData[playerid][pPainkillers] -= amount;
		PlayerData[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[targetid][pPainkillers], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some painkillers to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pCigars])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerData[playerid][pCigars] -= amount;
		PlayerData[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = %i WHERE uid = %i", PlayerData[playerid][pCigars], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = %i WHERE uid = %i", PlayerData[targetid][pCigars], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some cigars to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pSpraycans])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerData[playerid][pSpraycans] -= amount;
		PlayerData[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[targetid][pSpraycans], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some spraycans to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pGasCan])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerData[playerid][pGasCan] -= amount;
		PlayerData[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gascan = %i WHERE uid = %i", PlayerData[playerid][pGasCan], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gascan = %i WHERE uid = %i", PlayerData[targetid][pGasCan], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some gasoline to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pSeeds] + amount > GetPlayerCapacity(targetid, CAPACITY_SEEDS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more seeds.");
		}

		PlayerData[playerid][pSeeds] -= amount;
		PlayerData[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", PlayerData[playerid][pSeeds], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", PlayerData[targetid][pSeeds], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some seeds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pEphedrine] + amount > GetPlayerCapacity(targetid, CAPACITY_EPHEDRINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more ephedrine.");
		}

		PlayerData[playerid][pEphedrine] -= amount;
		PlayerData[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", PlayerData[playerid][pEphedrine], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", PlayerData[targetid][pEphedrine], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some ephedrine to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [firstaid] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pFirstAid])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pFirstAid] + amount > 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more first aid kits.");
		}

		PlayerData[playerid][pFirstAid] -= amount;
		PlayerData[targetid][pFirstAid] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET firstaid = %i WHERE uid = %i", PlayerData[playerid][pFirstAid], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET firstaid = %i WHERE uid = %i", PlayerData[targetid][pFirstAid], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i first aid kits.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i first aid kits to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some first aid kits to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i first aid kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [bodykits] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pBodykits])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pBodykits] + amount > 10)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more bodykits.");
		}

		PlayerData[playerid][pBodykits] -= amount;
		PlayerData[targetid][pBodykits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bodykits = %i WHERE uid = %i", PlayerData[playerid][pBodykits], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bodykits = %i WHERE uid = %i", PlayerData[targetid][pBodykits], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i bodywork kits.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i bodywork kits to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some bodywork kits to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i bodywork kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [rimkits] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pRimkits])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pRimkits] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more rimkits.");
		}

		PlayerData[playerid][pRimkits] -= amount;
		PlayerData[targetid][pRimkits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rimkits = %i WHERE uid = %i", PlayerData[playerid][pRimkits], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rimkits = %i WHERE uid = %i", PlayerData[targetid][pRimkits], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i rimkits.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i rimkits to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some rimkits to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i rimkits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerData[targetid][pDiamonds] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more diamonds.");
		}

		PlayerData[playerid][pDiamonds] -= amount;
		PlayerData[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET diamonds = %i WHERE uid = %i", PlayerData[playerid][pDiamonds], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET diamonds = %i WHERE uid = %i", PlayerData[targetid][pDiamonds], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetRPName(targetid));

		ShowActionBubble(playerid, "* %s gives some rimkits to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}

	return 1;
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerData[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerData[playerid][pLastSell]));
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(PlayerData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player already has a weapon in that slot.");
	    }
	    if(PlayerData[targetid][pHours] < 2 || PlayerData[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerData[playerid][pFaction] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons from inside a vehicle.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to players inside a vehicle.");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons as your health is below 60.");
		}

        PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_WEAPON;
		PlayerData[targetid][pSellExtra] = weaponid;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you their %s for $%i. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %s for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_MATERIALS;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i materials for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i materials for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "weed", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [weed] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_WEED;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i grams of weed for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i grams of weed for $%i.", GetRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "cocaine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [cocaine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_COCAINE;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i grams of cocaine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i grams of cocaine for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_METH;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i grams of meth for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i grams of meth for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_PAINKILLERS;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i painkillers for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i painkillers for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_SEEDS;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i seeds for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i seeds for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerData[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerData[playerid][pLastSell] = gettime();
		PlayerData[targetid][pSellOffer] = playerid;
		PlayerData[targetid][pSellType] = ITEM_EPHEDRINE;
		PlayerData[targetid][pSellExtra] = amount;
		PlayerData[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s your %i grams of ephedrine for $%i.", GetRPName(targetid), amount, price);
	}

	return 1;
}


CMD:customaccent(playerid, params[])
{
	if(isnull(params))
	{
		return SendClientMessage(playerid, COLOR_GREY, "/customaccent [accent]");
	}
	strcpy(PlayerData[playerid][pAccent], params, 16);
	SendClientMessageEx(playerid, COLOR_WHITE, "You set your accent to '%s'.", PlayerData[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET accent = '%e' WHERE uid = %i", PlayerData[playerid][pAccent], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}
CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accent [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (0) None - (1) English - (2) American - (3) British - (4) Chinese - (5) Korean - (6) Japanese - (7) Asian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (8) Canadian - (9) Australian - (10) Southern - (11) Russian - (12) Ukrainian - (13) German - (14) French");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (15) Portguese - (16) Polish - (17) Estonian - (18) Latvian - (19) Dutch - (20) Jamaican - (21) Turkish");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (22) Mexican - (23) Spanish - (24) Arabic - (25) Israeli - (26) Romanian - (27) Italian - (28) Gangsta");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (29) Greek - (30) Serbian - (31) Balkin - (32) Danish - (33) Scottish - (34) Irish - (35) Indian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (36) Norwegian - (37) Swedish - (38) Finnish - (39) Hungarian - (40) Bulgarian - (41) Pakistani");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (42) Cuban - (43) Slavic - (44) Indonesian - (45) Filipino - (46) Hawaiian - (47) Somalian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (48) Armenian - (49) Persian - (50) Vietnamese - (51) Slovenian - (52) Kiwi - (53) Brazilian - (54) Georgian");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(PlayerData[playerid][pAccent], "None", 16);
		case 1: strcpy(PlayerData[playerid][pAccent], "English", 16);
		case 2: strcpy(PlayerData[playerid][pAccent], "American", 16);
		case 3: strcpy(PlayerData[playerid][pAccent], "British", 16);
		case 4: strcpy(PlayerData[playerid][pAccent], "Chinese", 16);
		case 5: strcpy(PlayerData[playerid][pAccent], "Korean", 16);
		case 6: strcpy(PlayerData[playerid][pAccent], "Japanese", 16);
		case 7: strcpy(PlayerData[playerid][pAccent], "Asian", 16);
		case 8: strcpy(PlayerData[playerid][pAccent], "Canadian", 16);
		case 9: strcpy(PlayerData[playerid][pAccent], "Australian", 16);
		case 10: strcpy(PlayerData[playerid][pAccent], "Southern", 16);
		case 11: strcpy(PlayerData[playerid][pAccent], "Russian", 16);
		case 12: strcpy(PlayerData[playerid][pAccent], "Ukrainian", 16);
		case 13: strcpy(PlayerData[playerid][pAccent], "German", 16);
		case 14: strcpy(PlayerData[playerid][pAccent], "French", 16);
		case 15: strcpy(PlayerData[playerid][pAccent], "Portuguese", 16);
		case 16: strcpy(PlayerData[playerid][pAccent], "Polish", 16);
		case 17: strcpy(PlayerData[playerid][pAccent], "Estonian", 16);
		case 18: strcpy(PlayerData[playerid][pAccent], "Latvian", 16);
		case 19: strcpy(PlayerData[playerid][pAccent], "Dutch", 16);
		case 20: strcpy(PlayerData[playerid][pAccent], "Jamaican", 16);
		case 21: strcpy(PlayerData[playerid][pAccent], "Turkish", 16);
		case 22: strcpy(PlayerData[playerid][pAccent], "Mexican", 16);
		case 23: strcpy(PlayerData[playerid][pAccent], "Spanish", 16);
		case 24: strcpy(PlayerData[playerid][pAccent], "Arabic", 16);
		case 25: strcpy(PlayerData[playerid][pAccent], "Israeli", 16);
		case 26: strcpy(PlayerData[playerid][pAccent], "Romanian", 16);
		case 27: strcpy(PlayerData[playerid][pAccent], "Italian", 16);
		case 28: strcpy(PlayerData[playerid][pAccent], "Gangsta", 16);
		case 29: strcpy(PlayerData[playerid][pAccent], "Greek", 16);
		case 30: strcpy(PlayerData[playerid][pAccent], "Serbian", 16);
		case 31: strcpy(PlayerData[playerid][pAccent], "Balkin", 16);
		case 32: strcpy(PlayerData[playerid][pAccent], "Danish", 16);
		case 33: strcpy(PlayerData[playerid][pAccent], "Scottish", 16);
		case 34: strcpy(PlayerData[playerid][pAccent], "Irish", 16);
		case 35: strcpy(PlayerData[playerid][pAccent], "Indian", 16);
		case 36: strcpy(PlayerData[playerid][pAccent], "Norwegian", 16);
		case 37: strcpy(PlayerData[playerid][pAccent], "Swedish", 16);
		case 38: strcpy(PlayerData[playerid][pAccent], "Finnish", 16);
		case 39: strcpy(PlayerData[playerid][pAccent], "Hungarian", 16);
		case 40: strcpy(PlayerData[playerid][pAccent], "Bulgarian", 16);
		case 41: strcpy(PlayerData[playerid][pAccent], "Pakistani", 16);
		case 42: strcpy(PlayerData[playerid][pAccent], "Cuban", 16);
		case 43: strcpy(PlayerData[playerid][pAccent], "Slavic", 16);
		case 44: strcpy(PlayerData[playerid][pAccent], "Indonesian", 16);
		case 45: strcpy(PlayerData[playerid][pAccent], "Filipino", 16);
		case 46: strcpy(PlayerData[playerid][pAccent], "Hawaiian", 16);
		case 47: strcpy(PlayerData[playerid][pAccent], "Somalian", 16);
		case 48: strcpy(PlayerData[playerid][pAccent], "Armenian", 16);
		case 49: strcpy(PlayerData[playerid][pAccent], "Persian", 16);
		case 50: strcpy(PlayerData[playerid][pAccent], "Vietnamese", 16);
		case 51: strcpy(PlayerData[playerid][pAccent], "Slovenian", 16);
		case 52: strcpy(PlayerData[playerid][pAccent], "Kiwi", 16);
		case 53: strcpy(PlayerData[playerid][pAccent], "Brazilian", 16);
		case 54: strcpy(PlayerData[playerid][pAccent], "Georgian", 16);
		default: SendClientMessage(playerid, COLOR_GREY, "Invalid accent. Valid types range from 0 to 53.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You set your accent to '%s'.", PlayerData[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET accent = '%e' WHERE uid = %i", PlayerData[playerid][pAccent], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "* %s rolls a dice which lands on the number %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "* %s flips a coin which lands on %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "~y~%s %02d, %i~n~~g~|~w~%02d:%02d:%02d~g~|", string, date[2], date[0], date[3], date[4], date[5]);

	if(PlayerData[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s~n~~w~Jail Time: ~y~%i seconds", string, PlayerData[playerid][pJailTime]);
	}

	GameTextForPlayer(playerid, string, 5000, 1);
	SendClientMessageEx(playerid, COLOR_WHITE, "* Paychecks occur at every hour. The next paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /report [playerid (optional)] [text]");
	}
	if(PlayerData[playerid][pAdmin] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot report as you are an administrator. Use admin chat.");
	}
	if(!enabledReports)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report channel is disabled at the moment.");
	}
	if(PlayerData[playerid][pReportMuted])
	{
	    if(PlayerData[playerid][pReportMuted] > 1000) {
     		return SendClientMessageEx(playerid, COLOR_GREY, "You are indefinitely muted from submitting reports. /unmute to unmute yourself.");
		} else {
			return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerData[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerData[playerid][pLastReport] < 50)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerData[playerid][pLastReport]));
	}
	if(PlayerData[playerid][pActiveReport] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SendClientMessage(playerid, COLOR_GREY, "The report queue is currently full. Please try again later.");
	}

	SendClientMessage(playerid, COLOR_GREY, "Thank you for reporting, an admin will view it shortly, please be patient.");
	return 1;
}

CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /helpme [help request]");
	}
	if(PlayerData[playerid][pAdmin] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are a staff member and therefore can't use this command.");
	}
	if(PlayerData[playerid][pHelpMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from submitting help requests.");
	}
	if(gettime() - PlayerData[playerid][pLastRequest] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerData[playerid][pLastRequest]));
	}

	strcpy(PlayerData[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "* Help Request from %s[%i]: %s *", GetRPName(playerid), playerid, params);

	PlayerData[playerid][pLastRequest] = gettime();
	SendClientMessage(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
	return 1;
}

CMD:accept(playerid, params[])
{
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = PlayerData[playerid][pHouseOffer],
		    houseid = PlayerData[playerid][pHouseOffered],
		    price = PlayerData[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this house.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's house offer and paid %s for their house.", GetRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your house offer and paid %s for your house.", GetRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid));

	    PlayerData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = PlayerData[playerid][pGarageOffer],
		    garageid = PlayerData[playerid][pGarageOffered],
		    price = PlayerData[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this garage.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's garage offer and paid %s for their garage.", GetRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your garage offer and paid %s for your garage.", GetRPName(playerid), FormatNumber(price));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid));

	    PlayerData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = PlayerData[playerid][pBizOffer],
		    businessid = PlayerData[playerid][pBizOffered],
		    price = PlayerData[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this business.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's business offer and paid %s for their %s.", GetRPName(offeredby), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your business offer and paid %s for your %s.", GetRPName(playerid), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid));

	    PlayerData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "land", true))
	{
		new
		    offeredby = PlayerData[playerid][pLandOffer],
		    landid = PlayerData[playerid][pLandOffered],
		    price = PlayerData[playerid][pLandPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a land.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsLandOwner(offeredby, landid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this land.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's land.");
	    }

	    SetLandOwner(landid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's land offer and paid %s for their land.", GetRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your land offer and paid %s for your land.", GetRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their land (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerIP(offeredby), LandInfo[landid][lID], price, GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid));

	    PlayerData[playerid][pLandOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(PlayerData[playerid][pAcceptedEMS]) && !PlayerData[PlayerData[playerid][pAcceptedEMS]][pAFK])
		{
			return SendClientMessage(playerid, COLOR_GREY, "There is a medic online and on-the way to rescue you.");
		}
	    if(!PlayerData[playerid][pInjured])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not injured and can't accept your death.");
	    }

	    SendClientMessage(playerid, COLOR_GREY, "You have given up and accepted your fate.");

	    SetPlayerHealth(playerid, 0.0);
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = PlayerData[playerid][pCarOffer],
		    vehicleid = PlayerData[playerid][pCarOffered],
		    price = PlayerData[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this vehicle.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's vehicle.");
	    }
	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    	}

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
     	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicleEx", "iiii", playerid, offeredby, vehicleid, price);

	    PlayerData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = PlayerData[playerid][pFactionOffer],
		    factionid = PlayerData[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invites to a faction.");
	    }
	    if(PlayerData[offeredby][pFaction] != factionid || !PlayerData[offeredby][pFactionLeader])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is no longer allowed to invite you.");
	    }

	    SetPlayerFaction(playerid, factionid, 0);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's faction offer to join {00AA00}%s{33CCFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your faction offer and is now apart of your faction.", GetRPName(playerid));

		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerNameEx(playerid), PlayerData[playerid][pID], FactionInfo[factionid][fName], factionid);
	    PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = PlayerData[playerid][pGangOffer],
		    gangid = PlayerData[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invites to a gang.");
	    }
	    if(PlayerData[offeredby][pGang] != gangid || PlayerData[offeredby][pGangRank] < 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is no longer allowed to invite you.");
	    }

	    PlayerData[playerid][pGang] = gangid;
	    PlayerData[playerid][pGangRank] = 0;
	    PlayerData[playerid][pCrew] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = %i, gangrank = 0, crew = -1, gangname = '%e' WHERE uid = %i", gangid, GangInfo[gangid][gName], PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's gang offer to join {00AA00}%s{33CCFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s accepted your gang offer and is now apart of your gang.", GetRPName(playerid));
	    if(gacooldown)
	    {
	        GangInfo[gangid][gInvCooldown] = gacooldown;
	    	SendClientMessageEx(offeredby, COLOR_GREEN, "A invite cooldown has been placed on your gang. You cannot invite anyone for the next %i minutes!", GangInfo[gangid][gInvCooldown]);
        }
		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[gangid][gName], gangid);
	    PlayerData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = PlayerData[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
	    PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = PlayerData[playerid][pTicketOffer],
		    price = PlayerData[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a ticket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to pay this ticket.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have paid the %s ticket written by %s.", FormatNumber(price), GetRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has paid the %s ticket which was written to them.", GetRPName(playerid), FormatNumber(price));
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);
		new query[516], year, month, day, hour, minute, second;
		getdate(year, month, day);
		gettime(hour,minute,second);
		new datum[64], timel[64];
		format(timel, sizeof(timel), "%d:%d:%d", hour, minute, second);
	 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
		format(query, sizeof(query), "INSERT INTO `tickets`(`player`, `officer`, `time`, `date`, `amount`) VALUES ('%s','%s','%s','%s',%d)",
	    GetPlayerNameEx(playerid), GetPlayerNameEx(offeredby),
		timel,datum, price);
		mysql_tquery(connectionID, query);
	    PlayerData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = PlayerData[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerData[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetPlayerNameEx(playerid), PlayerData[playerid][pID]);

		PlayerData[playerid][pLiveBroadcast] = offeredby;
		PlayerData[offeredby][pLiveBroadcast] = playerid;
  		PlayerData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = PlayerData[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(PlayerData[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

        AwardAchievement(playerid, "Meeting people");
        AwardAchievement(offeredby, "Meeting people");

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's handshake offer.", GetRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted your handshake offer.", GetRPName(playerid));

  		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = PlayerData[playerid][pSellOffer],
		    type = PlayerData[playerid][pSellType],
		    amount = PlayerData[playerid][pSellExtra],
		    price = PlayerData[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = PlayerData[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GivePlayerWeaponEx(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %s's %s for %s.", GetRPName(offeredby), GetWeaponNameEx(weaponid), FormatNumber(price));
				SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), FormatNumber(price));
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(PlayerData[offeredby][pMaterials] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pMaterials] += amount;
			    PlayerData[offeredby][pMaterials] -= amount;
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[offeredby][pMaterials], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i materials from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i materials for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(PlayerData[offeredby][pWeed] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pWeed] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

				AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pWeed] += amount;
			    PlayerData[offeredby][pWeed] -= amount;
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[offeredby][pWeed], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i grams of weed from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i grams of weed for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of weed to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(PlayerData[offeredby][pCocaine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pCocaine] += amount;
			    PlayerData[offeredby][pCocaine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[offeredby][pCocaine], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i grams of cocaine from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i grams of cocaine for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of cocaine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(PlayerData[offeredby][pMeth] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pMeth] += amount;
			    PlayerData[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[offeredby][pMeth], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i grams of meth from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i grams of meth for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(PlayerData[offeredby][pPainkillers] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
				if(PlayerData[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pPainkillers] += amount;
			    PlayerData[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[offeredby][pPainkillers], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i painkillers from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i painkillers for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(PlayerData[offeredby][pSeeds] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pSeeds] += amount;
			    PlayerData[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", PlayerData[playerid][pSeeds], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", PlayerData[offeredby][pSeeds], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i seeds from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i seeds for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(PlayerData[offeredby][pEphedrine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerData[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerData[playerid][pEphedrine] += amount;
			    PlayerData[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", PlayerData[playerid][pEphedrine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", PlayerData[offeredby][pEphedrine], PlayerData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i grams of ephedrine from %s for %s.", amount, GetRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has purchased your %i grams of ephedrine for %s.", GetRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerData[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(PlayerData[playerid][pSellOffer] == INVALID_PLAYER_ID || PlayerData[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a weapon.");
	    }
	    if(PlayerData[playerid][pCash] < PlayerData[playerid][pSellPrice])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(PlayerData[playerid][pSellOffer], playerid, PlayerData[playerid][pSellExtra], PlayerData[playerid][pSellPrice]);
		PlayerData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = PlayerData[playerid][pDefendOffer],
			price = PlayerData[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerData[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept the offer.");
	    }
	    if(!PlayerData[playerid][pWantedLevel])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		PlayerData[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = wantedlevel - 1 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's offer to reduce your wanted level for %s.", GetRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted your offer to reduce their wanted level for %s.", GetRPName(playerid), FormatNumber(price));

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    PlayerData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = PlayerData[playerid][pDiceOffer],
			amount = PlayerData[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerData[playerid][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept this bet.");
	    }
	    if(PlayerData[offeredby][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player can't afford to accept this bet.");
	    }

		new
			rand[2];

		if(PlayerData[playerid][pDiceRigged])
		{
		    rand[0] = 4 + random(3);
		    rand[1] = random(3) + 1;
		}
		else
		{
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[0] = random(6) + 1;
			}
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[1] = random(6) + 1;
			}
		}

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "* %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "* %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{

		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SendClientMessageEx(offeredby, COLOR_AQUA, "* You have won $%s from your dice bet with %s.", FormatNumber(amount), GetRPName(playerid));
		    SendClientMessageEx(playerid, COLOR_RED, "* You have lost $%s from your dice bet with %s.", FormatNumber(amount), GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetRPName(offeredby), PlayerData[offeredby][pID], GetRPName(playerid), PlayerData[playerid][pID], amount);
		}
		else if(rand[0] == rand[1])
		{
			SendClientMessageEx(offeredby, COLOR_AQUA, "* The bet of %s was a tie. You kept your money as a result!", FormatNumber(amount));
		    SendClientMessageEx(playerid, COLOR_AQUA, "* The bet of %s was a tie. You kept your money as a result!", FormatNumber(amount));
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SendClientMessageEx(playerid, COLOR_AQUA, "* You have won $%s from your dice bet with %s.", FormatNumber(amount), GetRPName(offeredby));
		    SendClientMessageEx(offeredby, COLOR_RED, "* You have lost $%s from your dice bet with %s.", FormatNumber(amount), GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetRPName(playerid), PlayerData[playerid][pID], GetRPName(offeredby), PlayerData[offeredby][pID], amount);
		}

	    PlayerData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = PlayerData[playerid][pInviteOffer],
			houseid = PlayerData[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invitations to a house.");
	    }

		PlayerData[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's invitation to their house.", GetRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted your invitation to your house.", GetRPName(playerid));

	    PlayerData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = PlayerData[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's bank robbery invitation.", GetRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted your bank robbery invitation.", GetRPName(playerid));

	    PlayerData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "duel", true))
	{
	    new offeredby = PlayerData[playerid][pDuelOffer], entranceid = GetInsideEntrance(playerid);

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers to duel.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in a duel arena.");
		}
		if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are already participating in a duel at the moment.");
		}
		if(PlayerData[offeredby][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is in a duel at the moment.");
		}

		foreach(new i : Player)
		{
		    if(GetInsideEntrance(i) == entranceid && PlayerData[i][pDueling] != INVALID_PLAYER_ID)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is a duel in progress already. Wait until the current one has ended.");
		    }
		}

		SavePlayerVariables(playerid);
		SavePlayerVariables(offeredby);

		ResetPlayerWeapons(playerid);
		ResetPlayerWeapons(offeredby);

		SetPlayerPos(playerid, 1370.3395, -15.4556, 1000.9219);
		SetPlayerPos(offeredby, 1414.4841, -15.1239, 1000.9253);
		SetPlayerFacingAngle(playerid, 270.0000);
		SetPlayerFacingAngle(offeredby, 90.0000);

		SetPlayerInterior(playerid, 1);
		SetPlayerInterior(offeredby, 1);
		SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eWorld]);
		SetPlayerVirtualWorld(offeredby, EntranceInfo[entranceid][eWorld]);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		SetPlayerHealth(offeredby, 100.0);
		SetPlayerArmour(offeredby, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		GivePlayerWeaponEx(offeredby, 24, true);
		GivePlayerWeaponEx(offeredby, 27, true);
		GivePlayerWeaponEx(offeredby, 29, true);
		GivePlayerWeaponEx(offeredby, 31, true);
		GivePlayerWeaponEx(offeredby, 34, true);

		GameTextForPlayer(playerid, "~r~Duel time!", 3000, 3);
		GameTextForPlayer(offeredby, "~r~Duel time!", 3000, 3);

		PlayerData[playerid][pDueling] = offeredby;
		PlayerData[offeredby][pDueling] = playerid;

	    SendClientMessageEx(offeredby, COLOR_AQUA, "* %s has accepted the duel offer.", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's duel offer.", GetRPName(offeredby));

	    PlayerData[playerid][pDuelOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = PlayerData[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't accept offers from yourself.");
		}

		new gangid = PlayerData[playerid][pGang], allyid = PlayerData[offeredby][pGang];

	    SendClientMessageEx(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		PlayerData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has formed an alliance with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = PlayerData[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at a restaurant to commence a wedding.");
		}
		if(PlayerData[playerid][pCash] < 25000 || PlayerData[offeredby][pCash] < 25000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You both need to have $25,000 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -25000);
		GivePlayerCash(offeredby, -25000);
		BusinessInfo[id][bCash] += 50000;

		SendClientMessageToAllEx(COLOR_WHITE, "Lovebirds %s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));

		PlayerData[playerid][pMarriedTo] = PlayerData[offeredby][pID];
		PlayerData[offeredby][pMarriedTo] = PlayerData[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = %i WHERE uid = %i", PlayerData[playerid][pMarriedTo], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = %i WHERE uid = %i", PlayerData[offeredby][pMarriedTo], PlayerData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerData[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(PlayerData[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		PlayerData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = PlayerData[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(PlayerData[playerid][pMarriedTo] == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't even married ya naab.");
		}
		if(PlayerData[playerid][pMarriedTo] != PlayerData[offeredby][pID])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That isn't the person you're married to.");
		}

		PlayerData[playerid][pMarriedTo] = -1;
		PlayerData[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = -1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = -1 WHERE uid = %i", PlayerData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerData[playerid][pMarriedName], "None", MAX_PLAYER_NAME);
		strcpy(PlayerData[offeredby][pMarriedName], "None", MAX_PLAYER_NAME);

		PlayerData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accept [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: House, Garage, Business, Land, Death, Vest, Vehicle, Faction, Gang, Ticket, Live, Marriage");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, Duel, Alliance");
	}

	return 1;
}
CMD:togtp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < MANAGEMENT)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command");
	}
    if(!PlayerData[playerid][pToggleTP])
    {
		PlayerData[playerid][pToggleTP] = 1;
	}
	else
	{
		PlayerData[playerid][pToggleTP] = 0;
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /e [Management chat]");
	}
	if(PlayerData[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerData[i][pAdmin] > 5) && !PlayerData[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0xA077BFFF, "* [%s] %s: %s *", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ha [head admin chat]");
	}
	if(PlayerData[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerData[i][pAdmin] > 4) && !PlayerData[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0x5C80FFFF, "* [%s] %s: %s *", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /a [admin chat]");
	}
	if(PlayerData[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the admin chat as you have it toggled.");
	}
    params[0] = toupper(params[0]);
	foreach(new i : Player)
	{
	    if((PlayerData[i][pAdmin] > 1 || PlayerData[i][pDeveloper]) && !PlayerData[i][pToggleAdmin])
	    {
			new adminname[24];
			strcpy(adminname, GetRPName(playerid));
			if(PlayerData[playerid][pUndercover][0])
			{
			    if(strcmp(PlayerData[playerid][pAdminName], "None", true))
			    {
			    	strcpy(adminname, PlayerData[playerid][pAdminName]);
				}
			}
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_YELLOW, "* [%s %s{FFFF00}] %s: %.*s... *", GetAdminDivision(playerid), GetAdminRank2(playerid), adminname, MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_YELLOW, "* [%s %s{FFFF00}] %s: ...%s *", GetAdminDivision(playerid), GetAdminRank2(playerid), adminname, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_YELLOW, "* [%s %s{FFFF00}] %s: %s *", GetAdminDivision(playerid), GetAdminRank2(playerid), adminname, params);
			}
		}
	}
	return 1;
}

CMD:fa(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pFormerAdmin])
    {
    	return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fa [Former Admin chat]");
	}
	if(PlayerData[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the Former Admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerData[i][pAdmin] > 0 || PlayerData[i][pFormerAdmin]) && !PlayerData[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_RETIRED, "* [%s] %s: %.*s... *", GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_RETIRED, "* [%s] %s: ...%s *", GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_RETIRED, "* [%s] %s: %s *", GetAdminRank(playerid), GetRPName(playerid), params);
			}
		}
	}
	return 1;
}

new const randFirstname[][] = {
	"Alex", "Blake", "Hayden", "Devin", "Jane", "John", "Austin", "Richy", "Richard", "Alexander",
	"Salem", "Daisy", "Janey", "Casey", "Orlando", "Jake", "Kevin", "Faze", "India", "Vene", "Demorgan", "Jazzy", "Dori", "Jess", "Linda",
	"Dave", "Jessica", "Masey", "Rose", "Romeo", "Juliet", "Ben", "Lenny", "Kayle", "Emily", "Tori", "Michael", "Mike", "Mikey", "Christian", "Josh", "Travis",
	"Dulles", "William", "Stephen", "Peter", "Quin", "Raze", "Morgan", "Oliver", "Madison", "Mark", "Robin", "Tyler", "Sophie", "Sophia", "Brianna", "Azure", "Steely", "Lee",
	"Ray", "Harry", "Ralph", "Anthony", "Alan", "Shawn", "Kanye", "Kane", "Stephanie", "Kimmy", "Kim" "Fox", "Bob", "Adore", "Lexi", "Rex", "Hex", "Xav", "Wally", "Stone", "Kate", "Katie", "Patrick", "James", "Thomas", "Hank",
	"George", "David", "Dori", "Dante", "Jordan", "Arnold" };
new const randLastname[][] = {
	"Craig", "Jones", "Johnson", "Kennedy", "Hinson", "Doe", "Silva", "Nigeria", "Branche", "Erickson", "Defolt", "Morgan",
	"Stalovsky", "Box", "Wards", "Sanders", "Williams", "Trump", "Nixon", "Jackson", "Houston", "Hilfiger", "Gucci", "Washington", "Clinton",
	"Cromwell", "Prime", "Connor", "ONeil", "Rose", "Ginger", "Dodge", "McKing", "Guerreo", "Jackson", "Cartel", "Devil", "Rolex", "Street", "Molintino",
	"Martin", "Stone", "Henderson", "Brady", "Wilkinson" }; // keep adding names if u want

getRandomRPName()
{
	new rand[2], name[60];
	rand[0] = random(sizeof(randFirstname));
	rand[1] = random(sizeof(randLastname));

	if(strcmp(randFirstname[rand[0]], randLastname[rand[1]], true) != 0)
	{
	    format(name, sizeof(name), "%s_%s", randFirstname[rand[0]], randLastname[rand[1]]);
		if(strlen(name) < MAX_PLAYER_NAME)
   		{
		    return name;
   		}
	}
 	return getRandomRPName();
}

forward OnUndercover(playerid, tog, name[], level, Float:hp, Float:armor);
public OnUndercover(playerid, tog, name[], level, Float:hp, Float:armor)
{
	if(tog)
	{
		if(cache_get_row_count(connectionID))
		{
		    SendClientMessage(playerid, COLOR_GREY, "The name specified is taken already.");
		}
		else
		{
		    Log_Write("log_admin", "(undercover) %s (uid: %i) changed their name to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], name);
			SendClientMessageEx(playerid, COLOR_WHITE, "* You changed your name from %s to %s.", GetRPName(playerid), name);
			PlayerData[playerid][pUndercover][0] = 1;
			PlayerData[playerid][pUndercover][1] = PlayerData[playerid][pLevel];
			PlayerData[playerid][pUndercoverHP] = PlayerData[playerid][pHealth];
			PlayerData[playerid][pUndercoverAR] = PlayerData[playerid][pArmor];
			PlayerData[playerid][pLevel] = level;
			SetPlayerHealth(playerid, hp);
			SetScriptArmour(playerid, armor);
			SetPlayerName(playerid, name);
			PlayerData[playerid][pAdminHide] = 1;
	    	SendClientMessage(playerid, COLOR_AQUA, "You are now hidden in /admins and your admin rank no longer shows in /a, /g or /o.");
		}
	}
	else
	{
	    SetPlayerName(playerid, PlayerData[playerid][pUsername]);
		PlayerData[playerid][pUndercover][0] = 0;
		PlayerData[playerid][pLevel] = PlayerData[playerid][pUndercover][1];
		SetPlayerHealth(playerid, PlayerData[playerid][pUndercoverHP]);
		SetScriptArmour(playerid, PlayerData[playerid][pUndercoverAR]);
		PlayerData[playerid][pAdminHide] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer hidden as an administrator.");
	}
	return 1;
}

CMD:undercover(playerid, params[])
{
	new name[MAX_PLAYER_NAME], level, Float:ar;
	if(PlayerData[playerid][pAdmin] >= STAFF_MANAGER && !PlayerData[playerid][pAdminDuty])
	{
		if(sscanf(params, "s[24]", name))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /undercover [name | random | off]");
		}
	    if(PlayerData[playerid][pUndercover][0])
	    {
     		OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
     		SendClientMessageEx(playerid, COLOR_WHITE, "* You are no longer undercover.", GetRPName(playerid), name);
	    }
	    else if(!strcmp(name, "random", true)) {
			strcpy(name, getRandomRPName());
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else if(strfind(name, "_") != -1) {
		    //format(name, MAX_PLAYER_NAME, params);
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /undercover [Firstname_Lastname | random]");
		}

	}
	else SendClientMessage(playerid, COLOR_GREY, "Not Authorized / You need to be off duty to use this command.");
	return 1;
}


CMD:sh(playerid, params[])
{
	return callcmd::staffhelp(playerid, params);
}

CMD:shelp(playerid, params[])
{
	return callcmd::staffhelp(playerid, params);
}

CMD:staffhelp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(PlayerData[playerid][pAdmin] >= HELPER)
	{
		Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper", "Select", "Close");
	}
	if(PlayerData[playerid][pAdmin] >= MODERATOR)
	{
		Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator", "Select", "Close");
	}
	if(PlayerData[playerid][pAdmin] >= ADMINISTRATOR)
	{
	    Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator\nAdministrator", "Select", "Close");
	}
	if(PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR)
	{
		Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator\nAdministrator\nSenior Administrator", "Select", "Close");
	}
	if(PlayerData[playerid][pAdmin] >= LEAD_ADMINISTRATOR)
	{
	   Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator\nAdministrator\nSenior Administrator\nLead Administrator", "Select", "Close");
	}
    if(PlayerData[playerid][pAdmin] >= STAFF_MANAGER)
	{
	    Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator\nAdministrator\nSenior Administrator\nLead Administrator\nStaff Manager", "Select", "Close");
	}
	if(PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{
		Dialog_Show(playerid, DIALOG_STAFFHELP, DIALOG_STYLE_LIST, "{F7A763}Staff Help", "Helper\nModerator\nAdministrator\nSenior Administrator\nLead Administrator\nStaff Manager\nManagement", "Select", "Close");
	}

	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "__________ Pending Reports __________");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "[Report ID:{ff0000} %i{afafaf}] %s[%i] reports: %s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "* Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has sent report %i to newbie chat.", GetRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to the newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has sent report %i to helpers.", GetRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to all helpers online.", GetRPName(playerid));

    strcpy(PlayerData[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "* Help Request from %s[%i]: %s *", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	PlayerData[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}
	if(PlayerData[playerid][pActiveReport] >= 0)
	{
		callcmd::cr(playerid, params);
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s %s has accepted report %i from %s.", GetAdmCmdRank(playerid), GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can use /rr to speak with the reporter and /cr to close the report.");
		SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
		SendClientMessage(ReportInfo[reportid][rReporter], COLOR_GREEN, "You can use /rr to reply to the admin handling your report.");

		PlayerData[playerid][pActiveReport] = reportid;
		PlayerData[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s %s has accepted your report and is now reviewing it.",GetAdmCmdRank(playerid), GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	PlayerData[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET reports = %i WHERE uid = %i", PlayerData[playerid][pReports], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s, reason: %s", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "* %s has trashed your report, reason: %s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nro [reportid]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at www.prospectrp.net for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nao [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ic(playerid, params[])
{
	new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ic [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for being an IC issue");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s as it is an in-character issue.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it is an in-character issue.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nor [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s as their request for a revive is invalid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/phone > call > 911)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /post [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has trashed report %i from %s as it needs to be handled on the forums.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at www.prospectrp.net in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}


CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:er(playerid, params[])
{
	return callcmd::cr(playerid, params);
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:rr(playerid, params[])
{
	new reportid = PlayerData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "* Player %s (ID %i): %s *", GetRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "* Reply to %s (ID %i): %s *", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "* Admin %s (ID %i): %s *", GetRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "* Reply to %s (ID %i): %s *", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = PlayerData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "* Player %s has closed the report. *", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "* Administrator %s has closed the report. *", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerData[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerData[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has silently kicked %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, false);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(minutes < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes specified cannot be below zero.");
	}

    PlayerData[targetid][pJailType] = 1;
    PlayerData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was jailed for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "* You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (FPS: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), PlayerData[targetid][pFPS], NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
    new string[500];
    foreach(new i : Player)
    {
        if(PlayerData[i][pAdmin] > 1 && !PlayerData[i][pUndercover][0])
        {
            new admin_info[150];
            format(admin_info, sizeof(admin_info), "{FFFFFF} %s(%i) %s %s", PlayerData[i][pUsername], i, GetAdminRank2(i), (PlayerData[i][pAFK]) ? ("{FF0000}(AFK)") : (""));
            strcat(string, admin_info);
            strcat(string, "\n");
        }
    }
	if (string[1])
    	Dialog_Show(playerid, 1, DIALOG_STYLE_LIST, "{F7A763}Administrators", string, "Select", "Close");
	else
		SendClientMessage(playerid, COLOR_GREY, "There are currently no online administrators.");
    return 1;
}
CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!PlayerData[playerid][pAdmin] && PlayerData[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /checknewbies [playerid]");
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Level %i Player %s has used newbie {00FF00}%s times.", PlayerData[targetid][pLevel], GetRPName(targetid), FormatNumber(PlayerData[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid, params[])
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "_________ Helpers Online _________");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pAdmin] > 0 && !PlayerData[i][pPassport] && !PlayerData[i][pUndercover][0])
	    {
	        if(PlayerData[playerid][pAdmin] > 0)
	            SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetAdminRank(i), GetRPName(i), FormatNumber(PlayerData[i][pHelpRequests], 0), FormatNumber(PlayerData[i][pNewbies], 0));
	        else
				SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s", i, GetAdminRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", PlayerData[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s flagged %s's account for '%s'.", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, "#TABLE_USERS" b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeflag [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListFlagsForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:hhcheck(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hhcheck [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pHHCheck])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already being checked for health hacks.");
	}
	if(gettime() - PlayerData[playerid][pLastUpdate] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't initiate this check on a tabbed player.");
	}

	GetPlayerHealth(targetid, PlayerData[targetid][pHealth]);

	PlayerData[targetid][pHHCheck] = 1;
	PlayerData[targetid][pHHTime] = 5;
	PlayerData[targetid][pHHRounded] = GetPlayerHealthEx(targetid);
	PlayerData[targetid][pHHCount] = 0;

	SetPlayerHealth(targetid, random(100) + 1);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has started the health hack check on %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:spec(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SendClientMessageEx(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(PlayerData[playerid][pSpectating]), PlayerData[playerid][pSpectating]);
	    PlayerData[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
    	if(PlayerData[playerid][pAdmin] == 1)
		{
		    PlayerData[playerid][pTogglePhone] = 0;
		}
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerData[playerid][pAdmin] == 1)
	{
	    PlayerData[playerid][pTogglePhone] = 1;
	}
	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	RefreshPlayerTextdraws(playerid);

	PlayerData[playerid][pSpectating] = targetid;
	SendClientMessageEx(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(PlayerData[playerid][pSpectating]), PlayerData[playerid][pSpectating]);
	return 1;
}


CMD:allhunt(playerid, params[])
{
	new targetid, weaponid;
	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid, weaponid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /allhunt [targetid] [weapon (0 for wepset)]");
	}
	if(PlayerData[targetid][pHours] < 2 || PlayerData[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	}
	if(weaponid == 38 && PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The minigun was disabled due to abuse.");
	}
	SavePlayerVariables(targetid);
	ResetPlayerWeapons(targetid);
	if(weaponid != 0 && (1 <= weaponid <= 46))
	{
		GivePlayerWeaponEx(weaponid, weaponid, true);
	}
	else
	{
        GivePlayerWeaponEx(targetid, 24, true);
        GivePlayerWeaponEx(targetid, 27, true);
        GivePlayerWeaponEx(targetid, 29, true);
        GivePlayerWeaponEx(targetid, 31, true);
        GivePlayerWeaponEx(targetid, 34, true);
	}
    PlayerData[targetid][pJoinedEvent] = 1;
    PlayerData[targetid][pHunted] = 1;

    foreach(new i : Player)
    {
        if(PlayerData[i][pLogged] && GetPlayerInterior(i) == GetPlayerInterior(targetid))
        {
    		SetPlayerMarkerForPlayer(i, targetid, COLOR_RETIRED);
		}
	}
	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s has made %s a hunted. Kill them to win a prize!", GetRPName(playerid), GetRPName(targetid));
	return 1;
}
CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(PlayerData[playerid][pAdmin] >= MODERATOR)
	    {
			SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quiz [option]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of Options: Create, End, Edit, Answer");
		}
		else
		{
		    //SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quiz answer [text]");
		    strcpy(option, "answer");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(PlayerData[playerid][pAdmin] < MODERATOR) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(PlayerData[playerid][pAdmin] < MODERATOR) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SendClientMessageToAllEx(COLOR_RETIRED, "The quiz was ended by %s, answer: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(PlayerData[playerid][pAdmin] < MODERATOR) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s changed the quiz answer to %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /quiz edit [answer]");
		}
	}
	else if(!strcmp(option, "answer", true))
	{
		if(isnull(quizAnswer))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There is no active quiz!");
		}
		if(!isnull(param))
		{
			if(!strcmp(quizAnswer, param, true))
			{
				SendClientMessageToAllEx(COLOR_RETIRED, "%s has answered the quiz correctly. answer: %s", GetRPName(playerid), quizAnswer);
		    	quizQuestion[0] = EOS;
	        	quizAnswer[0] = EOS;
			}
			else
			{
		    	SendClientMessage(playerid, COLOR_GREY, "Sorry bud, that ain't the right answer.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /quiz answer [answer]");
		}
	}
	return 1;
}
CMD:forcedeleteobject(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= STAFF_MANAGER || PlayerData[playerid][pDeveloper])
    {
        new mode[32];
        if(sscanf(params, "s[32]", mode))
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcedeleteobject [enable/disable]");
		if(!strcmp(mode, "enable", true))
		{
		    PlayerData[playerid][pDeleteMode] = 1;
		}
        else if(!strcmp(mode, "disable", true))
		{
		    PlayerData[playerid][pDeleteMode] = 0;
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcedeleteobject [enable/disable]");
		}
		SendClientMessageEx(playerid, COLOR_GREY, "Object deletetion mode was %sd (%i)", mode, PlayerData[playerid][pDeleteMode]);
	}
	return 1;
}

CMD:fockick(playerid, params[])
{
    new name[MAX_PLAYER_NAME], tname[MAX_PLAYER_NAME], string[128], reason[64], target;
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR) return SendClientMessage(playerid, -1,"You are not an administrator"); // Replace this with your variable which is responsible for saving the admin's level.
    if(sscanf(params,"us[64]", target, reason)) return SendClientMessage(playerid, -1,"SYNTAX: /fkick [targetid] [reason]");
    if(!IsPlayerConnected(target)) return SendClientMessage(playerid, -1,"There's no active player with this ID.");
    GetPlayerName(playerid, name, sizeof(name));
    GetPlayerName(target, tname, sizeof(tname));
    format(string, sizeof(string),"AdmWarn: %s has kicked %s from the server, reason: %s", name, tname, reason);
    SendClientMessageToAll(-1, string);
    return 1;
}
CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

	Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	PlayerData[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason, PlayerData[targetid][pWarnings]);

	if(PlayerData[targetid][pWarnings] < 3)
	{
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was warned by %s %s, reason: %s", GetRPName(targetid), GetAdmCmdRank(playerid),  GetRPName(playerid), reason);
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s %s has warned you, reason: %s", GetAdmCmdRank(playerid),  GetRPName(playerid), reason);
	}
	else
	{
	    PlayerData[targetid][pWarnings] = 0;

	    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was banned by %s, reason: %s (3/3 warnings)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

CMD:check(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	DisplayStats(targetid, playerid);
	return 1;
}

CMD:checkinv(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be slapped.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was slapped by %s %s.", GetRPName(targetid), GetAdmCmdRank(playerid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:upgrade(playerid, params[])
{
    ShowDialogToPlayer(playerid, DIALOG_NEWUPGRADE);
/*	if(isnull(params))
	{
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /upgrade [option] (%i points available)", PlayerData[playerid][pUpgradePoints]);
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Inventory, Addict, Trader, Asset, Labor, SpawnHealth, SpawnArmor");
		return 1;
	}



 	else if(!strcmp(params, "asset", true))
	{
	    if(PlayerData[playerid][pAssetUpgrade] >= 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your asset skill is already upgraded to its maximum level of 4.");
		}

		PlayerData[playerid][pAssetUpgrade]++;
		PlayerData[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET assetupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pAssetUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", PlayerData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
 	else if(!strcmp(params, "labor", true))
	{
	    if(PlayerData[playerid][pLaborUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your labor skill is already upgraded to its maximum level of 5.");
		}

		PlayerData[playerid][pLaborUpgrade]++;
		PlayerData[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET laborupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerData[playerid][pLaborUpgrade], PlayerData[playerid][pUpgradePoints], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your labor skill to level %i/5. You now earn %i percent more extra cash when you work.", PlayerData[playerid][pLaborUpgrade], PlayerData[playerid][pLaborUpgrade] * 2);
	}
*/
	return 1;
}

CMD:charity(playerid, params[])
{
	new option[10], param[64];

	if(PlayerData[playerid][pLevel] < 5)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot donate to charity if you're under level 5.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charity [info | health | armor | song]");
	}
	if(!strcmp(option, "info", true))
	{
	    SendClientMessage(playerid, COLOR_SERVERDEF, "_______ Charity _______");
		SendClientMessage(playerid, COLOR_GREY3, "If you have at least $1,000 on hand you can donate to charity.");
		SendClientMessage(playerid, COLOR_GREY3, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "You can also donate to globally play a song of your choice using '{FFD700}/charity song{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SendClientMessageEx(playerid, COLOR_AQUA, "* %s has been donated to charity so far.", FormatNumber(gCharity));
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(PlayerData[playerid][pCash] < 150000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need at least $150,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerData[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SendClientMessageToAllEx(COLOR_SERVERDEF, "Charity: %s has generously donated $150,000 to heal everyone to 150 health!", GetRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(PlayerData[playerid][pCash] < 200000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need at least $200,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerData[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SendClientMessageToAllEx(COLOR_SERVERDEF, "Charity: %s has generously donated $200,000 to give full armor to everyone!", GetRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
  	else if(!strcmp(option, "song", true))
	{
	 	if(isnull(param))
 		{
		 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charity [song] [songfolder/name.mp3]");
		}
		if(PlayerData[playerid][pCash] < 25000)
		{
  			return SendClientMessage(playerid, COLOR_GREY, "You need at least $25,000 on hand for this option.");
		}
		if(gettime() - gLastMusic < 300)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Music can only be played globally every 5 minutes.");
		}

		new
		    url[144];

		format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, param);

		foreach(new i : Player)
		{
		    if(!PlayerData[i][pToggleMusic] && PlayerData[i][pStreamType] == MUSIC_NONE)
		    {
				PlayAudioStreamForPlayer(i, url);
			}
		}
		gLastMusic = gettime();

		gCharity += 25000;
		AddToTaxVault(25000);

		SendClientMessageToAllEx(COLOR_SERVERDEF, "Charity: %s has generously donated $25,000 to play %s for the entire server!", GetRPName(playerid), param);
		GivePlayerCash(playerid, -25000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > PlayerData[playerid][pCash])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
		if(amount > 100000)
		{
		    SendClientMessageToAllEx(COLOR_SERVERDEF, "Charity: %s has generously donated %s to charity!", GetRPName(playerid), FormatNumber(amount));
		}
	}

	return 1;
}

CMD:music(playerid, params[])
{
 	SendClientMessage(playerid, COLOR_SERVERDEF, "_____________________ List of Music _____________________");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SendClientMessage(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	PlayerData[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gplay [songfolder/name.mp3]");
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!PlayerData[i][pToggleMusic] && PlayerData[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, url);
			SendClientMessageEx(i, COLOR_LIGHTRED, "ADMIN: %s has started the global playback of %s.", GetRPName(playerid), params);
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR && !PlayerData[playerid][pDJ])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gplayurl [link]");
	}
	if(strfind(params, ".php", true) != -1)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "No .php links allowed!");
	}
    foreach(new i : Player)
	{
	    if(!PlayerData[i][pToggleMusic] && PlayerData[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, params);
			SendClientMessageEx(i, COLOR_LIGHTRED, "ADMIN: %s has started the global playback of a custom URL.", GetRPName(playerid));
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}
CMD:makedj(playerid, params[])
{
	new targetid, rank;
	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR && PlayerData[playerid][pDJ] != 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command");
	}
	if(sscanf(params, "dd", targetid, rank))
	{
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /makedj [playerid] [rank]");
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} 0 = None, 1 = DJ, 2 = Leader DJ");
	}
	if(!(0 <= rank <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank specified.");
	}
	if(PlayerData[targetid][pLogged])
	{
	    if(rank == 0)
	    {
        	(playerid, COLOR_AQUA, "You've removed %s's DJ rank", GetRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "Your DJ rank was removed by %s", GetRPName(playerid));
			PlayerData[targetid][pDJ] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET dj = %i WHERE uid = %i", PlayerData[targetid][pDJ], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a rank %d DJ", GetRPName(targetid), rank);
			SendClientMessageEx(targetid, COLOR_AQUA, "You have been made rank %d DJ by %s", rank, GetRPName(playerid));
			PlayerData[targetid][pDJ] = rank;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET dj = %i WHERE uid = %i", PlayerData[targetid][pDJ], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	return 1;
}
CMD:gstop(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR && !PlayerData[playerid][pDJ])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

    foreach(new i: Player)
	{
	    if(!PlayerData[i][pToggleMusic] && PlayerData[i][pStreamType] == MUSIC_NONE)
	    {
		    StopAudioStreamForPlayer(i);
			SendClientMessageEx(i, COLOR_LIGHTRED, "ADMIN: %s has stopped all active audio streams.", GetRPName(playerid));
		}
	}

	return 1;
}
CMD:sdm(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sdm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	PlayerData[targetid][pDMWarnings]++;

	if(PlayerData[targetid][pDMWarnings] < 3)
	{
	    new minutes = PlayerData[targetid][pDMWarnings] * 30;

	    PlayerData[targetid][pJailType] = 2;
    	PlayerData[targetid][pJailTime] = PlayerData[targetid][pDMWarnings] * 1800;
    	PlayerData[targetid][pWeaponRestricted] = PlayerData[targetid][pDMWarnings] * 4;

		ResetPlayer(targetid);
		ResetPlayerWeapons(targetid);
		SetPlayerInJail(targetid);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was DM Warned & Prisoned for %i minutes by an Admin, reason: DM (%i/3)", GetRPName(targetid), minutes, PlayerData[targetid][pDMWarnings]);
		GetPlayerName(playerid, PlayerData[targetid][pPrisonedBy], MAX_PLAYER_NAME);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", PlayerData[targetid][pPrisonedBy], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerData[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SendClientMessageEx(targetid, COLOR_WHITE, "You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SendClientMessageEx(targetid, COLOR_WHITE, "Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerData[targetid][pWeaponRestricted], PlayerData[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) silent prisoned %s (uid: %i) for %i minutes, reason: SDM [/sdm]", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: Silent DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
		PlayerData[targetid][pDMWarnings] = 0;

		BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (3/3 warnings)");
		SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was banned by an Admin, reason: DM (3/3 warnings)", GetRPName(targetid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerData[targetid][pJailType], PlayerData[targetid][pJailTime], PlayerData[targetid][pDMWarnings], PlayerData[targetid][pWeaponRestricted], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:dm(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	PlayerData[targetid][pDMWarnings]++;

	if(PlayerData[targetid][pDMWarnings] < 3)
	{
	    new minutes = PlayerData[targetid][pDMWarnings] * 30;

	    PlayerData[targetid][pJailType] = 2;
    	PlayerData[targetid][pJailTime] = PlayerData[targetid][pDMWarnings] * 1800;
    	PlayerData[targetid][pWeaponRestricted] = PlayerData[targetid][pDMWarnings] * 4;

		ResetPlayer(targetid);
		ResetPlayerWeapons(targetid);
		SetPlayerInJail(targetid);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was DM Warned & Prisoned for %i minutes by %s, reason: DM (%i/3)", GetRPName(targetid), minutes, GetRPName(playerid), PlayerData[targetid][pDMWarnings]);
		GetPlayerName(playerid, PlayerData[targetid][pPrisonedBy], MAX_PLAYER_NAME);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", PlayerData[targetid][pPrisonedBy], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerData[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SendClientMessageEx(targetid, COLOR_WHITE, "You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SendClientMessageEx(targetid, COLOR_WHITE, "Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerData[targetid][pWeaponRestricted], PlayerData[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
		PlayerData[targetid][pDMWarnings] = 0;

		BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (3/3 warnings)");
		SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was banned by %s, reason: DM (3/3 warnings)", GetRPName(targetid), GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerData[targetid][pJailType], PlayerData[targetid][pJailTime], PlayerData[targetid][pDMWarnings], PlayerData[targetid][pWeaponRestricted], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:cleardm(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= STAFF_MANAGER || PlayerData[playerid][pAdminDuty])
	{
	    ClearDeathList(playerid);
	    SendClientMessage(playerid, COLOR_WHITE, "Death messages cleared.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are either not authorized to use this command or not on admin duty.");
	}

	return 1;
}

ClearDeathList(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
		SendDeathMessageToPlayer(playerid, 1001, 1001, 255);
	}
	return 1;
}
CMD:aduty(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty])
	{
	    if(PlayerData[playerid][pUndercover][0])
		{
            OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
		}


	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);

		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 0.0);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s is now on admin duty.", GetRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "You are now on admin duty. Your stats will not be saved until you're off duty.");

        PlayerData[playerid][pAdminDuty] = 1;
        PlayerData[playerid][pTogglePhone] = 1;
        if(strcmp(PlayerData[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, PlayerData[playerid][pAdminName]);
		}
	}
	else
	{
		new savecheck = 0;

		if(PlayerData[playerid][pPaycheck] > 1)
		{
		    savecheck = PlayerData[playerid][pPaycheck];
		}
  		if(PlayerData[playerid][pNoDamage])
	    {
	        PlayerData[playerid][pNoDamage] = 0;
	        SendClientMessage(playerid, COLOR_GREY, "Your god mode was turned off.");
	    }

		ClearDeathList(playerid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM "#TABLE_USERS" WHERE uid = %i", PlayerData[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
		PlayerData[playerid][pPaycheck] = savecheck;
	}

	return 1;
}

CMD:setadminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME], targetid;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ds[24]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setadminname [targetid] [name]");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(PlayerData[targetid][pAdminName], name, MAX_PLAYER_NAME);

	if(PlayerData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminname = '%e' WHERE uid = %i", name, PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s changed %s's administrator name to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /getip [playerid]");
	}
	if(PlayerData[playerid][pAdmin] < MANAGEMENT && PlayerData[targetid][pAdmin] > 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command on another administrator");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

 //   SendClientMessageEx(playerid, COLOR_WHITE, "%s: {FF3300}%s {FFFFFF}| {1975FF}%s {33CC00}| %s", GetRPName(targetid), country, isp, city);

	SendClientMessageEx(playerid, COLOR_WHITE, "* %s[%i]'s IP: %s *", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM "#TABLE_USERS" WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM "#TABLE_USERS" WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}

CMD:listjailed(playerid, params[])
{
	new type[14];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "______ Jailed Players ______");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pJailType] > 0)
	    {
	        switch(PlayerData[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetRPName(i), type, PlayerData[i][pJailTime]);
		}
	}

	return 1;
}

CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pJailType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not in OOC prison.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "* %s was prisoned by %s, reason: %s (%i seconds left.) *", GetRPName(targetid), PlayerData[targetid][pPrisonedBy], PlayerData[targetid][pPrisonReason], PlayerData[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced %s to relog.", GetRPName(playerid), GetRPName(targetid));
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);

	PlayerData[targetid][pLogged] = 0;
	CallLocalFunction("OnPlayerRequestClass", "ii", targetid, 0);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(PlayerData[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Ti nuk je i autorizuar p?r t? p?rdorur k?t? komand?.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SendSyntaxMessage(playerid, " /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Ai lojtar nuk ?sht? n? server.");
	}
	if(!(0 <= skinid <= 311) && !(25000 <= skinid <= 25165))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher admin level than you. You can't change their skin.");
	}

	SetScriptSkin(targetid, skinid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetPlayerNameEx(targetid), skinid);
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /revive [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not injured.");
	}

	PlayerData[targetid][pInjured] = 0;

	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);

	SendClientMessage(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	if(PlayerData[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SendClientMessageEx(PlayerData[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    PlayerData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has revived %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pHospital])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not in hospital.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s ejected %s from the hospital.", GetRPName(playerid), GetRPName(targetid));

	PlayerData[targetid][pHospitalTime] = 1;
	SendClientMessage(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

CMD:goto(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerData[targetid][pToggleTP] == 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Target id has togged teleports");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /goto [playerid/location]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Dealership, VIP, Paintball, DMV, Casino, Spawn, Allsaints, Casino");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Los Santos.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
    }
    else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1310.2343,-1395.1676,13.2596, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to VIP lounge.");
	}
	else if(!strcmp(params, "paintball", true))
    {
        TeleportToCoords(playerid, 1286.2870,-1349.8572,13.5689, 315.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Paintball.");
	}
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to DMV.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1603.5885,-1170.0281,24.0781, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Casino.");
	}
	else if(!strcmp(params, "spawn", true))
	{
	    TeleportToCoords(playerid, 1723.4384, -1380.0234, 13.5469, 270.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Spawn.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    TeleportToCoords(playerid, 1189.5807, -1301.7474, 13.5584, 180.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Allsaints.");
	}
	else if(!strcmp(params, "county", true))
	{
	    TeleportToCoords(playerid, 1999.4670, -1448.2010, 13.5601, 315.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to County.");
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!IsPlayerSpawned(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(playerid, targetid);
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s %s has teleported to your position.", GetAdmCmdRank(playerid), GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to %s's position.", GetRPName(targetid));
	}

	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
    if(PlayerData[targetid][pPaintball] > 0 && PlayerData[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport an admin who has a higher admin level than you.");
	}
	/*if(PlayerData[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the event.");
	}*/

	TeleportToPlayer(targetid, playerid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported %s to your position.", GetRPName(targetid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid, driverid;

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
	}
    if((driverid = GetVehicleDriver(vehicleid)) != INVALID_PLAYER_ID && PlayerData[driverid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport the vehicle of an admin who has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	Dialog_Show(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

    PlayerData[playerid][pJetpack] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(playerid, "~g~Jetpack", 3000, 3);

	switch(random(4))
	{
	    case 0: SendClientMessage(playerid, COLOR_WHITE, "* Random Fact: The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SendClientMessage(playerid, COLOR_WHITE, "* Random Fact: You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SendClientMessage(playerid, COLOR_WHITE, "* Random Fact: You probably don't need this anyway. All you admins seem to do is airbreak around the map.");
	    case 3: SendClientMessage(playerid, COLOR_WHITE, "* Random Fact: You probably aren't reading this anyway. Fuck you.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [location]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Dealership, VIP, Paintball, DMV, Casino");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerData[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is in jail so you can't teleport them.");
	}
	if(PlayerData[targetid][pPaintball] > 0 && PlayerData[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerData[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the event.");
	}
	if(PlayerData[playerid][pAdmin] < MODERATOR && isnull(PlayerData[targetid][pHelpRequest]) && PlayerData[playerid][pAcceptedHelp] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport an admin who has a higher admin level than you.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grove Street.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grove Street.", GetRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Unity Station.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Unity Station.", GetRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Market.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Market.", GetRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1024.2438, -1553.4551, 13.5691, 90.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the VIP lounge.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the VIP lounge.", GetRPName(playerid));
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 1286.2870,-1349.8572,13.5689, 315.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Paintball.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Paintball.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1022.5992, -1122.8069, 23.8710, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(PlayerData[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The target specified is disconnected.");
		}
		if(!IsPlayerSpawned(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The target specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(targetid, sendtargetid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetRPName(targetid), GetRPName(sendtargetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetRPName(playerid), GetRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(PlayerData[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetRPName(targetid), vehicleid);
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetRPName(playerid), vehicleid);
	}

	return 1;
}

CMD:listen(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerData[playerid][pListen])
	{
		PlayerData[playerid][pListen] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		PlayerData[playerid][pListen] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:jail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /jail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerData[targetid][pJailType] = 1;
    PlayerData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was jailed for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "* You have been admin jailed for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is muted from reports.");
	}

	PlayerData[targetid][pReportWarns]++;

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "* %s issued you a report warning, reason: %s (%i/3)", GetRPName(playerid), reason, PlayerData[targetid][pReportWarns]);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was given a report warning by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);

	if(PlayerData[targetid][pReportWarns] >= 3)
	{
	    PlayerData[targetid][pReportMuted] = 12;
	    SendClientMessage(targetid, COLOR_LIGHTRED, "* You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not muted from reports.");
	}

	PlayerData[targetid][pReportWarns] = 0;
	PlayerData[targetid][pReportMuted] = 0;

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from reports by %s.", GetRPName(targetid), GetRPName(playerid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "Your report mute has been lifted by %s. Your report warnings were reset.", GetRPName(playerid));
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < HELPER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerData[targetid][pNewbieMuted])
	{
	    PlayerData[targetid][pNewbieMuted] = 1;
		PlayerData[targetid][pNewbieMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was muted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from newbie chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[targetid][pNewbieMuted] = 0;
		PlayerData[targetid][pNewbieMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from newbie chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < HELPER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerData[targetid][pHelpMuted])
	{
	    PlayerData[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was muted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from help requests by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from help requests by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerData[targetid][pAdMuted])
	{
	    PlayerData[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was muted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from advertisements by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from advertisements by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerData[targetid][pGlobalMuted])
	{
	    PlayerData[targetid][pGlobalMuted] = 1;
	    PlayerData[targetid][pGlobalMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was muted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from global chat by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[targetid][pGlobalMuted] = 0;
	    PlayerData[targetid][pGlobalMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from global chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerData[targetid][pReportMuted])
	{
	    PlayerData[targetid][pReportMuted] = 99999;
        PlayerData[targetid][pReportMuteTime] = gettime() + 14400;

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was muted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from submitting reports by %s.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[targetid][pReportMuted] = 0;
		PlayerData[targetid][pReportMuteTime] = 0;

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was unmuted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from submitting reports by %s.", GetRPName(playerid));
	}

	return 1;
}
CMD:nextweather(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not a news reporter.");
	}
	if(nextWeather == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sunny Skies");
	}
	if(nextWeather == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Moderate Sunny");
	}
	if(nextWeather == 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sunny");
	}
	if(nextWeather == 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Cloudy");
	}
	if(nextWeather == 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sunny Skies");
	}
	if(nextWeather == 6)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 7)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Cloudy");
	}
	if(nextWeather == 8)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Rainy");
	}
	if(nextWeather == 9)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Foggy");
	}
	if(nextWeather == 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sunny Skies");
	}
	if(nextWeather == 11)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Cloudy");
	}
	if(nextWeather == 13)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 14)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sunny Skies");
	}
	if(nextWeather == 15)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Cloudy");
	}
	if(nextWeather == 16)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Rainy");
	}
	if(nextWeather == 17)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 18)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Extra Sunny");
	}
	if(nextWeather == 19)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Sandstorm");
	}
	if(nextWeather == 20)
	{
		SendClientMessage(playerid, COLOR_GREY, "Weather Forecast for the next hour, {FFFFFF}Foggy(greenish)");
	}
	return 1;
}
CMD:freeze(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	TogglePlayerControllable(targetid, 0);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was frozen by %s.", GetRPName(targetid), GetRPName(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(PlayerData[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		PlayerData[targetid][pTazedTime] = 0;
	}

	PlayerData[targetid][pTied] = 0;
	TogglePlayerControllable(targetid, 1);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s was unfrozen by %s.", GetRPName(targetid), GetRPName(playerid));
	return 1;
}

CMD:skiptut(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skiptut [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pTutorial])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player isn't currently watching the tutorial.");
	}

	SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you out of the tutorial.", GetRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s forced %s out of the tutorial.", GetRPName(playerid), GetRPName(targetid));
	KillTimer(PlayerData[targetid][pTutorialTimer]);
	TutorialTimer(targetid, 11);
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ %s's Weapons _______", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
		{

			if(!PlayerHasWeapon(targetid, weapon, true)) {
		        SendClientMessageEx(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SendClientMessageEx(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

 	ResetPlayerWeaponsEx(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has disarmed %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
/*	if(PlayerData[targetid][pLevel] > 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is level 3 or above and doesn't need a free namechange.");
	} */
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	Dialog_Show(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}


CMD:odm(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /odm [username]");
	}
    if(IsPlayerOnline(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /dm instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, ip, adminlevel, dmwarnings FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineDM", "is", playerid, name);
	return 1;
}

CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerData[targetid][pJailType] = 2;
    PlayerData[targetid][pJailTime] = minutes * 60;

	ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, PlayerData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(PlayerData[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "* You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not jailed.");
	}

	PlayerData[targetid][pJailTime] = 1;
	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was released from jail/prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was fined %s by %s, reason: %s", GetRPName(targetid), FormatNumber(amount), GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The percentage value must be between 1 and 100.");
	}

	new amount = ((PlayerData[targetid][pCash] + PlayerData[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was fined %s by %s, reason: %s", GetRPName(targetid), FormatNumber(amount), GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sethp [playerid] [amount]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(amount < 1.0 && PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this to an admin with a higher level than you.");
	}

	SetPlayerHealth(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i: Vehicle)
	{
 		vehicleFuel[i] = 100;
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s refilled all vehicles to maximum fuel.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /refilldrug [seeds | cocaine | ephedrine]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has refilled the seeds in the drug den.", GetRPName(playerid));
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    gCocaineStock = 500;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has refilled the cocaine in the crack house.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has refilled the ephedrine in the drug den.", GetRPName(playerid));
	}

	return 1;
}

CMD:togooc(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s enabled the OOC channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s disabled the OOC channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "* Administrator %s enabled the newbie channel.", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "* Administrator %s disabled the newbie channel.", GetRPName(playerid));
	}
	return 1;
}
CMD:god(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= STAFF_MANAGER || PlayerData[playerid][pAdminDuty])
	{
		if(!PlayerData[playerid][pNoDamage])
		{
			PlayerData[playerid][pNoDamage] = 1;
			SendClientMessage(playerid, COLOR_GREY, "You are now in GODMODE, you will no longer take damage from ANYTHING.");
		}
		else
		{
		    PlayerData[playerid][pNoDamage] = 0;
		    SendClientMessage(playerid, COLOR_GREY, "You've turned off GODMODE, you will now take damage normally.");
		}
	    return 1;
	}
	return 0;
}

CMD:togglobal(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s enabled the global channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s disabled the global channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has enabled the report channel.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has disabled the report channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehicles", "ii", playerid, targetid);
	return 1;
}


CMD:removepveh(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepveh [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or not owned by any player.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}

	ResetVehicleObjects(vehicleid);

	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s spawned a %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_WHITE, "%s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, vip, Float:x, Float:y, Float:z, Float:a, plate[32];

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iiiiI(0)", vehicleid, gangid, type, delay, vip))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /savevehicle [vehicleid] [gangid (-1 = none)] [faction type] [respawn delay (seconds)] [vip level (optional)]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 7))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(!(0 <= vip <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

    SendClientMessageEx(playerid, COLOR_WHITE, "%s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	format(plate, 32, "%c%c%c %i", Random('A', 'Z'), Random('A', 'Z'), Random('A', 'Z'), Random(100, 999));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, plate, color1, color2, gangid, factiontype, vippackage, respawndelay, interior, world) VALUES(%i, '%f', '%f', '%f', '%f', '%s', %i, %i, %i, %i, %i, %i, %i, %i)",
		GetVehicleModel(vehicleid), x, y, z, a, plate, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, vip, delay, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value, Float:value2;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Spawn, Price, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Gang, Faction, Job, VIP, Respawndelay, Siren, Rank, Type");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    /*if(VehicleInfo[vehicleid][vFactionType] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't set the spawn of a faction vehicle indoors.");
	    }*/

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "* You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);


	}
	else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	    Log_Write("log_admin", "%s (uid: %i) has edited vehicle id %d price to $%d", GetPlayerNameEx(playerid), vehicleid, value);

	}

	else if(!strcmp(option, "mileage", true))
	{
		if(sscanf(param, "i", value2))
		{
		    return SendSyntaxMessage(playerid, " /editvehicle [vehicleid] [mileage] [value]");
		}

		VehicleInfo[vehicleid][vMileage] = value2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mileage = %.2f WHERE id = %i", VehicleInfo[vehicleid][vMileage], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(value2 == 0)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** Ju keni ristartuar kilometrazhin e vetures %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** Ju keni edituar kilometrazhin e vetures %s (ID %i) n? (%i) KM.", GetVehicleName(vehicleid), vehicleid, value);
	}

	else if(!strcmp(option, "type", true))
	{
	    if(VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on a not player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [type] [0/1]");
		}

		VehicleInfo[vehicleid][vType] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET type = %i WHERE id = %i", VehicleInfo[vehicleid][vType], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the type of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}

    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "impound", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		new paintjobid;
		if(sscanf(param, "i", paintjobid))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [impound] [-1 to reset]");
		    return 1;
		}

		VehicleInfo[vehicleid][carImpounded] = paintjobid;
		VehicleInfo[vehicleid][carImpoundPrice] = -1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE `vehicles` SET `carImpounded` = '%i', `carImpoundPrice` = '100' WHERE `id` = '%i'", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [neon] [color]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid color.");
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [job] [type]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (-1) None (0) Pizzaman (1) Courier (2) Fisherman (3) Weapon Dealer (4) Mechanic");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (5) Miner (6) Sweeper (7) Taxi Driver (8) Drug Dealer (9) Lawyer (10) Detective (11) Thief");
			return 1;
		}
		if(!(-1 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
	else if(!strcmp(option, "vip", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [vip] [level (0-3)]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		VehicleInfo[vehicleid][vVIP] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET vippackage = %i WHERE id = %i", VehicleInfo[vehicleid][vVIP], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the VIP restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the VIP restriction of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetVIPRank(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "siren", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] == FACTION_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on faction vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [siren] [1/0]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET siren = %i WHERE id = %i", value, id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the siren of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "rank", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [rank] [rank(0-12)]");
		}
		if(!(0 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

		VehicleInfo[vehicleid][vRank] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET rank = %i WHERE id = %i", VehicleInfo[vehicleid][vRank], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the rank restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the rank restriction of %s (ID %i) to %i (%i).", GetVehicleName(vehicleid), vehicleid, VehicleInfo[vehicleid][vRank], value);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:vehicleinfo(playerid, params[])
{
	new vehicleid, neon[12], gang[32], Float:health;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vehicleinfo [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	if(VehicleInfo[vehicleid][vGang] >= 0)
	{
		strcat(gang, GangInfo[VehicleInfo[vehicleid][vGang]][gName]);
	}
	else
	{
	    gang = "None";
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ %s Stats _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Owner: %s - Value: %s - Tickets: %s - License Plate: %s", VehicleInfo[vehicleid][vOwner], FormatNumber(VehicleInfo[vehicleid][vPrice]), FormatNumber(VehicleInfo[vehicleid][vTickets]), VehicleInfo[vehicleid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Trunk Level: %i/3 - Alarm Level: %i/3 - Health: %.1f - Fuel: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Gang: %s - Faction: %s - Rank: %i - Job Type: %s - Respawn Delay: %i seconds", gang, factionTypes[VehicleInfo[vehicleid][vFactionType]], VehicleInfo[vehicleid][vRank], GetJobName(VehicleInfo[vehicleid][vJob]), VehicleInfo[vehicleid][vRespawnDelay]);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has no active charges to clear.");
	}

	PlayerData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_WHITE, "Your crimes were cleared by %s.", GetRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has cleared %s's crimes and wanted level.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pDMWarnings] && !PlayerData[targetid][pWeaponRestricted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been punished for DM recently.");
	}

	PlayerData[targetid][pDMWarnings]--;
	PlayerData[targetid][pWeaponRestricted] = 0;

	if(PlayerData[targetid][pJailType] == 2)
	{
	    PlayerData[targetid][pJailType] = 0;
		PlayerData[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SendClientMessageEx(targetid, COLOR_AQUA, "* Your DM punishment has been reversed by %s.", GetRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reversed %s's DM punishment.", GetRPName(playerid), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", PlayerData[targetid][pDMWarnings], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SendClientMessage(playerid, COLOR_GREY, "Admin vehicle destroyed.");
	}

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(adminVehicle{i})
	    {
	        if(IsValidDynamicObject(vehicleSiren[i]))
			{
			    DestroyDynamicObject(vehicleSiren[i]);
			    vehicleSiren[i] = INVALID_OBJECT_ID;
			}

	        DestroyVehicleEx(i);
	        adminVehicle{i} = false;
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s destroyed all admin spawned vehicles.", GetRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /respawncars [job | faction | nearby | all]");
	}
	if(!strcmp(option, "job", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((pizzaVehicles[0] <= i <= pizzaVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[6]) || (sweeperVehicles[0] <= i <= sweeperVehicles[3]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (garbageVehicles[0] <= i <= garbageVehicles[5]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s respawned all unoccupied job vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /respawncars [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(1 <= type <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction type.");
		}

		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s respawned all unoccupied {F7A763}%s{FF6347} vehicles.", GetRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s respawned all unoccupied vehicles in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s respawned all unoccupied vehicles.", GetRPName(playerid));
	}

	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid style.");
	}
	if(style == 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_GREY, "Vehicle fixed.");
	return 1;
}

CMD:cc( playerid, params[], help) {

	if( PlayerData[ playerid ][ pAdmin ] >= 1)
	{
		for( new j; j < 96; j++ ) {
			SendClientMessageToAllEx( -1, " " );
		}
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: Chat was cleared by admin %s.", GetPlayerNameEx(playerid));
	}
	return 1;
}
CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerData[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);

			    if(GetPlayerArmourEx(i) < 25.0)
			    {
				    SetScriptArmour(i, 25.0);
				}
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:freezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerData[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, false);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerData[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, true);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}

CMD:reviverange(playerid, params[])
{
	new Float:radius;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reviverange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius) && PlayerData[i][pInjured])
		{
			PlayerData[i][pInjured] = 0;
			if(PlayerData[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
			    SendClientMessageEx(PlayerData[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(i));
			    PlayerData[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);

		    SendClientMessage(i, COLOR_WHITE, "An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}
CMD:damages(playerid, params[])
{
	new playerb;

	if(sscanf(params, "u", playerb))return SendClientMessage(playerid, COLOR_ADM, "USAGE:{FFFFFF} /damages [playerid/PartofName]");
	if(!IsPlayerConnected(playerb))return SendClientMessage(playerid, COLOR_ADM, "ERROR:{FFFFFF} You have specified an invalid player.");
	if(PlayerData[playerid][pAdminDuty])
	{
		ReturnDamagesAdmin(playerb, playerid);
	}
	else{

		if(!IsPlayerInRangeOfPlayer(playerid, playerb, 5.0)) return SendClientMessage(playerid, COLOR_ADM, "ERROR:{FFFFFF} You must be closer to that player.");
		ReturnDamages(playerb, playerid);
	}
	return true;
}
CMD:adamages(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", PlayerData[targetid][pID], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	gLastAd = 0;
	SendClientMessage(playerid, COLOR_GREY, "Advertisement timer reset.");
	return 1;
}


CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
 	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerData[targetid][pAdminDuty] && strcmp(PlayerData[targetid][pAdminName], "None", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
	SendClientMessageEx(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}
CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(PlayerData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{33CCFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{33CCFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessage(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Deathmatch{33CCFF}.");
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Team Deathmatch{33CCFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Race{33CCFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Other{33CCFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	    }
	    if(!(0 <= weaponid <= 46))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [skin] [red/blue] [skinid]");
			}
			if(!(1 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{33CCFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{33CCFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [skin] [skinid (0 = reset)]");
			}
			if(!(1 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SendClientMessageEx(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} crackshooting in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} quickswapping in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} healing in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [ready] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a DM event, use /joinevent to join!", GetRPName(playerid));
	    	case 2: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a TDM event, use /joinevent to join!", GetRPName(playerid));
	    	case 3: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetRPName(playerid));
	    	case 4: SendClientMessageToAllEx(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetRPName(playerid));
	    }

	    SendClientMessage(playerid, COLOR_WHITE, "Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event has been locked by %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event was unlocked by %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(PlayerData[i][pJoinedEvent])
				SendClientMessage(i, COLOR_AQUA, "The event has started. Good luck!");
			else
			    SendClientMessage(i, COLOR_AQUA, "The event has started. Better luck next time!");
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SendClientMessage(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(PlayerData[i][pJoinedEvent])
		    {
				PlayerData[i][pEventTeam] = teamid;

				SetTimerEx("teamBalance", 300+random(500), false, "ii", playerid, teamid);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(PlayerData[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(PlayerData[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SendClientMessageEx(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{33CCFF} team.", GetRPName(playerid), (PlayerData[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SendClientMessage(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SendClientMessageToAllEx(COLOR_AQUA, "The event was ended by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128], targetid;

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oban [username] [reason]");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
    if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(PlayerData[playerid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are in jail and therefore cannot participate in an event.");
	}
	if(PlayerData[playerid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The event is locked. Better luck next time!");
	}
	if(PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are playing paintball.");
	}
	if(PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are in a duel.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event at the moment.");
	}
    if((PlayerData[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!PlayerData[playerid][pJoinedEvent] || PlayerData[playerid][pHunted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerData[i][pJoinedEvent])
	    {
	        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	PlayerData[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR && !PlayerData[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR && !PlayerData[playerid][pBanAppealer] && !PlayerData[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, "#TABLE_USERS" b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has unbanned IP '%s'.", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128], targetid;

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR && !PlayerData[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /banip [ip address] [reason (optional)]");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(!IsAnIP(ip))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:lockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked, adminlevel FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unlockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unlockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerData[targetid][pJailType] = 2;
    PlayerData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was prisoned for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "* You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerData[i][pAdminDuty] && !PlayerData[i][pJoinedEvent] && !PlayerData[i][pPaintball] && PlayerData[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetPlayerHealth(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s set everyone's health to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerData[i][pAdminDuty] && !PlayerData[i][pJoinedEvent] && !PlayerData[i][pPaintball] && PlayerData[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetScriptArmour(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s set everyone's armor to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:fws(playerid, params[])
{
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerData[playerid][pAdmin] >= SENIOR_ADMINISTRATOR)
	{
		new targetid, reason[64];
		if(sscanf(params, "uds[64]", targetid, reason))
		{
			SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /fws [playerid] [reason]");
			return 1;
		}
		GivePlayerWeaponEx(targetid, 24);
		GivePlayerWeaponEx(targetid, 25);
		GivePlayerWeaponEx(targetid, 24);
		GivePlayerWeaponEx(targetid, 30);
		GivePlayerWeaponEx(targetid, 34);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s gave a full weapon set to %s, reaason %s.", GetRPName(playerid), GetRPName(targetid), reason);
		SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from %s.", GetRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}


CMD:healup(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
		 return SendClientMessage(playerid, COLOR_GREY, "You are not a {D909D9}Donator.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 3090.76, 221.60, 1053.48))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in the {D909D9}Donator{afafaf} Lounge");
	}
	SetScriptArmour(playerid, 100);
	SetPlayerHealth(playerid, 100);
	return 1;
}
CMD:getboombox(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not a {D909D9}Donator.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1826.1705,-1307.7985,1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Donator{Afafaf} Lounge.");
	}
    if(!strcmp(params, "confirm", true))
	{
		PlayerData[playerid][pBoombox] = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have earned a free {D909D9}Donator{FFFFFF} boombox.");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET boombox = 1 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}


CMD:vweapons(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not a {D909D9}Donator.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0,  1826.1705, -1307.7985, 1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Donator{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 12);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	GivePlayerWeaponEx(playerid, 27);
	GivePlayerWeaponEx(playerid, 31);
	GivePlayerWeaponEx(playerid, 34);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your donator weapons.");
 	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givegun [playerid] [weaponid]");
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
        SendClientMessage(playerid, COLOR_SYNTAX, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
        SendClientMessage(playerid, COLOR_SYNTAX, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
        SendClientMessage(playerid, COLOR_SYNTAX, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
        SendClientMessage(playerid, COLOR_SYNTAX, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
        SendClientMessage(playerid, COLOR_SYNTAX, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
        SendClientMessage(playerid, COLOR_SYNTAX, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
        SendClientMessage(playerid, COLOR_SYNTAX, "_______________________________________");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pHours] < 2 || PlayerData[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon.");
	}

	if(weaponid == 38 && PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The minigun was disabled due to abuse.");
	}

											//ammo
	GivePlayerWeaponEx(targetid, weaponid); // true = pgunsammo

	SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}%s{33CCFF} from %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given a %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_givegun", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SendClientMessageToAllEx(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [option]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Gender, Age, Cash, Bank, Level, Respect, UpgradePoints, Hours, Warnings");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: SpawnHealth, SpawnArmor, FightStyle, Accent, Tokens, Phone, Crimes, Arrested");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: WantedLevel, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, WalkieTalkie");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, LaborUpgrade");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: MP3Player, Job, MuriaticAcid, BakingSoda, Components, Watch, GPS, GasCan");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: DMWarnings, WeaponRestricted, CourierSkill, FishingSkill, WeaponSkill");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: MechanicSkill, LawyerSkill, SmugglerSkill, DetectiveSkill, ThiefSkill");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Bombs, FirstAid, PoliceScanner, Bodykits, Rimkits, Diamonds, Marriage, Skates");
	    return 1;
	}

	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gender] [male | female | shemale]");
		}
		if(!strcmp(param, "male", true))
		{
		    PlayerData[targetid][pGender] = 1;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Male.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gender = 1 WHERE uid = %i", PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    PlayerData[targetid][pGender] = 2;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Female.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gender = 2 WHERE uid = %i", PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "shemale", true))
		{
		    PlayerData[targetid][pGender] = 3;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Shemale.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gender = 3 WHERE uid = %i", PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}

	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 128.");
		}

		PlayerData[targetid][pAge] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's age to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET age = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cash] [value]");
		}

		PlayerData[targetid][pCash] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cash to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cash = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bank] [value]");
		}

		PlayerData[targetid][pBank] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bank money to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [level] [value]");
		}

		PlayerData[targetid][pLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET level = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [respect] [value]");
		}

		PlayerData[targetid][pEXP] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's XP to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET exp = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "upgradepoints", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [upgradepoints] [value]");
		}

		PlayerData[targetid][pUpgradePoints] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's upgrade points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET upgradepoints = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [hours] [value]");
		}

		PlayerData[targetid][pHours] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET hours = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 3.");
		}

		PlayerData[targetid][pWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET warnings = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spawnhealth] [value]");
		}

		PlayerData[targetid][pSpawnHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn health to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spawnhealth = '%f' WHERE uid = %i", amount, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spawnarmor] [value]");
		}

		PlayerData[targetid][pSpawnArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn armor to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spawnarmor = '%f' WHERE uid = %i", amount, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [fightstyle] [option]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Normal.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Boxing.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kung Fu.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kneehead.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Grabkick.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    PlayerData[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Elbow.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fightstyle = %i WHERE uid = %i", PlayerData[targetid][pFightStyle], PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [accent] [text]");
		}

		strcpy(PlayerData[targetid][pAccent], accent, 16);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's accent to '%s'.", GetRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET accent = '%e' WHERE uid = %i", accent, PlayerData[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "tokens", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [tokens] [value]");
		}

		PlayerData[targetid][pCookies] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's tokens to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cookies = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [phone] [number]");
		}
		if(value == 911)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
		}

		if(value == 0)
		{
		    PlayerData[targetid][pPhone] = 0;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phone number to 0.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phone = 0 WHERE uid = %i", PlayerData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE phone = %i", value);
			mysql_tquery(connectionID, queryBuffer, "OnAdminSetPhoneNumber", "iii", playerid, targetid, value);
			return 1;
		}
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [crimes] [value]");
		}

		PlayerData[targetid][pCrimes] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's commited crimes to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET crimes = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [arrested] [value]");
		}

		PlayerData[targetid][pArrested] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's arrested count to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET arrested = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 6.");
		}

		PlayerData[targetid][pWantedLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's wanted level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [materials] [value]");
		}

		PlayerData[targetid][pMaterials] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's materials to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weed] [value]");
		}

		PlayerData[targetid][pWeed] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weed to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cocaine] [value]");
		}

		PlayerData[targetid][pCocaine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cocaine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [meth] [value]");
		}

		PlayerData[targetid][pMeth] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's meth to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [painkillers] [value]");
		}

		PlayerData[targetid][pPainkillers] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's painkillers to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cigars] [value]");
		}

		PlayerData[targetid][pCigars] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cigars to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "walkietalkie", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [walkietalkie] [0/1]");
		}

		PlayerData[targetid][pWalkieTalkie] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's walkie talkie to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET walkietalkie = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [channel] [value]");
		}

		PlayerData[targetid][pChannel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's radio channel to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET channel = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spraycans] [value]");
		}

		PlayerData[targetid][pSpraycans] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spraycans to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && PlayerData[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		PlayerData[targetid][pBoombox] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's boombox to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET boombox = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [phonebook] [0/1]");
		}

		PlayerData[targetid][pPhonebook] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phonebook to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET phonebook = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [paycheck] [value]");
		}

		PlayerData[targetid][pPaycheck] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's paycheck to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET paycheck = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [carlicense] [0/1]");
		}

		PlayerData[targetid][pCarLicense] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's car license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET carlicense = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [seeds] [value]");
		}

		PlayerData[targetid][pSeeds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's seeds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [ephedrine] [value]");
		}

		PlayerData[targetid][pEphedrine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's ephedrine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [job] [value (-1 = none)]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (0) Pizzaman (1) Courier (2) Fisherman (3) Weapon Dealer (4) Mechanic (5) Miner");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (6) Sweeper (7) Taxi Driver (10) Drug Dealer (11) Lawyer (12) Detective (13) Thief (14) Garbage Man (15) Farmer");
			return 1;
		}
		if(!(-1 <= value <= 14))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid job.");
		}

		PlayerData[targetid][pJob] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET job = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "inventoryupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [inventoryupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerData[targetid][pInventoryUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's inventory upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET inventoryupgrade = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "addictupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [addictupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 3.");
		}

		PlayerData[targetid][pAddictUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's addict upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET addictupgrade = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "traderupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [traderupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 3.");
		}

		PlayerData[targetid][pTraderUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's trader upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET traderupgrade = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "assetupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [assetupgrade] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 4.");
		}

		PlayerData[targetid][pAssetUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's asset upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET assetupgrade = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "laborupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [laborupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerData[targetid][pLaborUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's labor upgrade to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET laborupgrade = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [mp3player] [0/1]");
		}

		PlayerData[targetid][pMP3Player] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's MP3 player to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET mp3player = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [muriaticacid] [value]");
		}

		PlayerData[targetid][pMuriaticAcid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's muriatic acid to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET muriaticacid = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bakingsoda] [value]");
		}

		PlayerData[targetid][pBakingSoda] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's baking soda to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bakingsoda = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 4.");
		}

		PlayerData[targetid][pDMWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's DM warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET dmwarnings = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weaponrestricted] [hours]");
		}

		PlayerData[targetid][pWeaponRestricted] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weaponrestricted = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "components", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [components] [value]");
		}

		PlayerData[targetid][pComponents] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's components to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [watch] [0/1]");
		}

		PlayerData[targetid][pWatch] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's watch to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET watch = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gps] [0/1]");
		}

		PlayerData[targetid][pGPS] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's GPS to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gps = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gascan] [value]");
		}

		PlayerData[targetid][pGasCan] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gas can to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gascan = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "smugglerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [smugglerskill] [value]");
		}

		PlayerData[targetid][pSmugglerSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's courier skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET smugglerskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "courierskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [courierskill] [value]");
		}

		PlayerData[targetid][pCourierSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's courier skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET courierskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [fishingskill] [value]");
		}

		PlayerData[targetid][pFishingSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fishing skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishingskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weaponskill] [value]");
		}

		PlayerData[targetid][pWeaponSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weapon skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weaponskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "mechanicskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [mechanicskill] [value]");
		}

		PlayerData[targetid][pMechanicSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's mechanic skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET mechanicskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [lawyerskill] [value]");
		}

		PlayerData[targetid][pLawyerSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's lawyer skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET lawyerskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [detectiveskill] [value]");
		}

		PlayerData[targetid][pDetectiveSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's detective skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET detectiveskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "thiefskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [thiefskill] [value]");
		}

		PlayerData[targetid][pThiefSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's thief skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET thiefskill = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bombs", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bombs] [value]");
		}

		PlayerData[targetid][pBombs] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bombs to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bombs = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [firstaid] [value]");
		}

		PlayerData[targetid][pFirstAid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's first aid kits to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET firstaid = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "policescanner", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [policescanner] [0/1]");
		}

		PlayerData[targetid][pPoliceScanner] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's police scanner to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET policescanner = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bodykits] [value]");
		}

		PlayerData[targetid][pBodykits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bodykits to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bodykits = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [rimkits] [value]");
		}

		PlayerData[targetid][pRimkits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's rimkits to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rimkits = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		PlayerData[targetid][pDiamonds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET diamonds = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			PlayerData[targetid][pMarriedTo] = PlayerData[value][pID];
			strcpy(PlayerData[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetRPName(targetid), GetRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = %i WHERE uid = %i", PlayerData[value][pID], PlayerData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			PlayerData[targetid][pMarriedTo] = -1;
			strcpy(PlayerData[targetid][pMarriedName], "None", MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET marriedto = -1 WHERE uid = %i",  PlayerData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [skates] [1/0]");
		}
		else
		{
			PlayerData[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's skates to %i.", GetRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rollerskates = %i WHERE uid = %i", value, PlayerData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else
	{
	    return 1;
	}

	Log_Write("log_setstat", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], option, param);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s set %s's %s to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), option, param);
	return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, amount;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givemoney [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	GivePlayerCash(targetid, amount);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given %s to %s.", GetRPName(playerid), FormatNumber(amount), GetRPName(targetid));
	Log_Write("log_givemoney", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	return 1;
}

CMD:givetoken(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /givetoken [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	/*if(PlayerData[targetid][pCookies] > 500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has 400 tokens!");
	}*/

 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given a {089DCE}token{FF6347} to %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
 	SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been awarded a {089DCE}token{FF6347} by %s for %s", GetRPName(playerid), reason);
 	PlayerData[targetid][pCookies]++;
 	if(PlayerData[targetid][pCookies] >= 5)
 	{
        	AwardAchievement(targetid, "Token Seeker");
 	}
  	Log_Write("log_givecookie", "%s (uid: %i) has given a token to %s (uid: %i) for reason %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);
	return 1;
}

CMD:givetokenall(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pLogged])
		{
		    if(PlayerData[i][pCookies] > 500)
			{
				continue;
			}
		    PlayerData[i][pCookies]++;

		    if(PlayerData[i][pCookies] >= 5)
		    {
		        AwardAchievement(i, "Token Seeker");
			}
		}
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s has given a {089DCE}token{FF6347} to every player online.", GetRPName(playerid));
	Log_Write("log_givecookie", "%s (uid: %i) has given a token to every player online", GetPlayerNameEx(playerid), PlayerData[playerid][pID]);

	return 1;
}
CMD:osetvip(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level, time;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR) // HEAD ADMIN+ ONLY
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]iI(0)", username, level, time))
	{
		SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /osetvip [username] [level(0-1)] [days]");
		SendClientMessage(playerid, COLOR_GREY3, "List of ranks: (0) None (1) Donator");
		return 1;
	}
	if(!(0 <= level <= 3))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 1.");
	}
	if(!(1 <= time <= 365))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "The amount of days must range from 1 to 365.");
	}
	if(IsPlayerOnline(username))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /setvip instead.");
	}
	if(level == 0)
	{
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's donator subscription.", GetRPName(playerid), username);
		time = 0;
	}
	else if(time >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given {A028AD}%s{FF6347} subscription to %s for %i months.", GetRPName(playerid), GetVIPRank(level), username, time / 30);
		time = gettime() + (time * 86400);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given {A028AD}%s{FF6347} subscription to %s for %i days.", GetRPName(playerid), GetVIPRank(level), username, time);
		time = gettime() + (time * 86400);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE username = '%e'", level, time, username);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:setvip(playerid, params[])
{
	new targetid, rank, days, drugs, weed, cocaine, meth, painkillers, seeds;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiii", targetid, rank, days))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setvip [playerid] [rank] [days]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of ranks: (1) Donator");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of days must range from 1 to 365.");
	}

	weed = GetPlayerCapacity(playerid, CAPACITY_WEED);
	cocaine = GetPlayerCapacity(playerid, CAPACITY_COCAINE);
	meth = GetPlayerCapacity(playerid, CAPACITY_METH);
    painkillers = GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS);
    seeds = GetPlayerCapacity(playerid, CAPACITY_SEEDS);

	if(drugs)
	{
	    PlayerData[targetid][pWeed] = weed;
	    PlayerData[targetid][pCocaine] = cocaine;
	    PlayerData[targetid][pMeth] = meth;
	    PlayerData[targetid][pPainkillers] = painkillers;
	    PlayerData[targetid][pSeeds] = seeds;
	    PlayerData[targetid][pBoombox] = 1;
	    PlayerData[targetid][pMP3Player] = 1;
	    SendClientMessageEx(targetid, COLOR_VIP, "%s %s has given you a full load of drugs with your %s subscription", GetAdminRank(playerid), GetRPName(playerid), GetVIPRank(rank));
	}


	PlayerData[targetid][pDonator] = rank;
	PlayerData[targetid][pVIPTime] = gettime() + (days * 86400);
	PlayerData[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vippackage = %i, viptime = %i, vipcooldown = 0, weed = %i, cocaine = %i, meth = %i, painkillers = %i, seeds = %i WHERE uid = %i", PlayerData[targetid][pDonator], PlayerData[targetid][pVIPTime], PlayerData[targetid][pWeed], PlayerData[targetid][pCocaine], PlayerData[targetid][pMeth], PlayerData[targetid][pPainkillers], PlayerData[targetid][pSeeds], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given {D909D9}%s{FF6347} subscription to %s for %i months.", GetRPName(playerid), GetVIPRank(rank), GetRPName(targetid), days / 30);
		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has given you {D909D9}%s{33CCFF} subscription for %i months.", GetRPName(playerid), GetVIPRank(rank), days / 30);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given {D909D9}%s{FF6347} subscription to %s for %i days.", GetRPName(playerid), GetVIPRank(rank), GetRPName(targetid), days);
		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has given you {D909D9}%s{33CCFF} subscription for %i days.", GetRPName(playerid), GetVIPRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) %s subscription for %i days.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], GetVIPRank(rank), days);
	return 1;
}

CMD:removevip(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!PlayerData[targetid][pDonator])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't have donator subscription which you can remove.");
	}



	Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s subscription.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], GetVIPRank(PlayerData[targetid][pDonator]));

	PlayerData[targetid][pDonator] = 0;
	PlayerData[targetid][pVIPTime] = 0;
	PlayerData[targetid][pVIPColor] = 0;
    PlayerData[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vippackage = 0, viptime = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was rangebanned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}


CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /createhouse [type (1-%i)]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "House slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, World, Type, Owner, Price, RentPrice, Level, Locked, Delivery");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the entrance of house %i.", houseid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the exit of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerData[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the owner of house %i to %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the lock state of house %i to %i.", houseid, locked);
	}
	 else if(!strcmp(option, "delivery", true))
	{
	    new delivery;

	    if(sscanf(param, "i", delivery) || !(0 <= delivery <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hDelivery] = delivery;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET delivery = %i WHERE id = %i", HouseInfo[houseid][hDelivery], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the ability to be to delivered of house %i to %i.", houseid, delivery);
	}
 	return 1;
}



CMD:removehouse(playerid, params[])
{
	new houseid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}


	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
//	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

 	Iter_Remove(House, houseid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed house id %i", GetPlayerNameEx(playerid), houseid);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_______ Nearest Items _______");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of land ID %i.", id);
	}
	if((id = GetNearbyPoint(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of point ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = Graffiti_Nearest(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of graffiti ID %i.", id);
	}
	if((id = GetNearbyLocker(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of locker ID %i.", id);
	}
	if((id = GetNearbyLocation(playerid, 20.0)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of (location) %s [%i].", LocationInfo[id][locName], id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of atm ID %i", id);
	}

	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	else if (isnull(params))
	{
		SendSyntaxMessage(playerid, "/dynamichelp (type)");
		SendClientMessage(playerid, COLOR_GREY, "Types: house, businesses, entrances, atms, lands, factions, gangs");
		SendClientMessage(playerid, COLOR_GREY, "Types: locations, points, turfs, fires, lockers, payphones, gangtags");
		return 1;
	}
	else if (!strcmp(params, "house", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "HOUSES:{DDDDDD} /createhouse, /edithouse, /removehouse, /gotohouse, /asellhouse, /removefurniture.");
	}
	else if (!strcmp(params, "garages", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "GARAGES:{DDDDDD} /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
	}
    else if (!strcmp(params, "businesses", true))
    {
		SendClientMessage(playerid, COLOR_GREEN, "BUSINESSES:{DDDDDD} /createbiz, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	}
	else if (!strcmp(params, "entrances", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "ENTRANCES:{DDDDDD} /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	}
	else if (!strcmp(params, "lands", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "LANDS:{DDDDDD} /createland, /landcancel, /removeland, /gotoland, /asellland, /removelandobjects.");
    }
	else if (!strcmp(params, "factions", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "FACTIONS:{DDDDDD} /createfaction, /editfaction, /removefaction, /switchfaction, /purgefaction.");
    }
	else if (!strcmp(params, "gangs", true))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "GANGS:{DDDDDD} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /caplimit, /setcooldown.");
    }
	else if (!strcmp(params, "points", true))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "POINTS:{DDDDDD} /createpoint, /editpoint, /removepoint, /gotopoint.");
    }
	else if (!strcmp(params, "turfs", true))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "TURFS:{DDDDDD} /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
    }
	else if (!strcmp(params, "fires", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "FIRES:{DDDDDD} /randomfire, /killfire, /spawnfire.");
    }
	else if (!strcmp(params, "lockers", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "LOCKERS:{DDDDDD} /createlocker, /editlocker, /removelocker.");
    }
	else if (!strcmp(params, "locations", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "LOCATIONS:{DDDDDD} /createlocation, /editlocation, /removelocation.");
    }
	else if (!strcmp(params, "atms", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "ATMS:{DDDDDD} /createatm, /gotoatm, /editatm, /deleteatm.");
    }
	else if (!strcmp(params, "gangtags", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Gang Tags:{DDDDDD} /creategangtag, /destroygangtag");
    }
	else if (!strcmp(params, "payphones", true))
	{
		SendClientMessage(playerid, COLOR_GREEN, "Payphones:{FFFFFF} /addpayphone, /gotopayphone, /editpayphone, /deletepayphone.");
    }
	return 1;
}
CMD:myassets(playerid)
{

	if(!PlayerData[playerid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not logged in yet.");
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s's Assets _____", GetRPName(playerid));

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {33CC33}House{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]), (gettime() - HouseInfo[i][hTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {FFD700}Business{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), (gettime() - BusinessInfo[i][bTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {004CFF}Garage{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]), (gettime() - GarageInfo[i][gTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && IsLandOwner(playerid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {33CCFF}Land{C8C8C8} | ID: %i | Location: %s", i, GetZoneName(LandInfo[i][lHeightX], LandInfo[i][lHeightY], LandInfo[i][lHeightZ]));
		}
	}

	return 1;
}
CMD:listassets(playerid, params[])
{
	new targetid;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listassets [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s's Assets _____", GetRPName(targetid));

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsHouseOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {33CC33}House{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]), (gettime() - HouseInfo[i][hTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsBusinessOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {FFD700}Business{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), (gettime() - BusinessInfo[i][bTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsGarageOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {004CFF}Garage{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]), (gettime() - GarageInfo[i][gTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && IsLandOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* {33CCFF}Land{C8C8C8} | ID: %i | Location: %s", i, GetZoneName(LandInfo[i][lHeightX], LandInfo[i][lHeightY], LandInfo[i][lHeightZ]));
		}
	}

	return 1;
}
CMD:buyhousealarm(playerid, params[])
{
	foreach(new i : House)
	{
		if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
		{
			if(HouseInfo[i][hAlarm] != 1 && PlayerData[playerid][pCash] > 100000)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You have bought an house alarm for $25,000");
			    GivePlayerCash(playerid, -25000);
			    HouseInfo[i][hAlarm] = 1;
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET alarm = %i, where id = %i", HouseInfo[i][hAlarm], HouseInfo[i][hID]);
			    mysql_tquery(connectionID, queryBuffer);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You already own a house alarm or don't have enough cash on-hand to cover the cost.");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You don't own a house.");
	}
	return 1;
}
CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have admin sold house %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have admin sold business %i.", businessid);
	return 1;
}

CMD:asellland(playerid, params[])
{
	new landid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have admin sold land %i.", landid);
	return 1;
}

CMD:enter(playerid, params[])
{
	if(PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1286.2870,-1349.8572,13.5689))
	{
		if(PlayerData[playerid][pAcceptedHelp])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can not enter the paintball arena while on helper duty!");
	    }
	    if(PlayerData[playerid][pWeaponRestricted] > 0)
    	{
        	return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join paintball.");
    	}
	    ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:exit(playerid, params[])
{
    if(PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(PlayerData[playerid][pPaintball] > 0)
	{
 		foreach(new i : Player)
		{
		    if(PlayerData[playerid][pPaintball] == PlayerData[i][pPaintball])
	    	{
	        	SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has left the paintball arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		PlayerData[playerid][pPaintball] = 0;
		PlayerData[playerid][pPaintballTeam] = -1;
		GangZoneHideForPlayer(playerid, zone_paintball[0]);
		GangZoneHideForPlayer(playerid, zone_paintball[1]);
		SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
 		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
		SetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
		SetScriptArmour(playerid, PlayerData[playerid][pArmor]);
		SetPlayerTeam(playerid, 1);
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no house in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house already has an owner.");
	}
	if(PlayerData[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s to make this house yours! /househelp for a list of commands.", FormatNumber(HouseInfo[houseid][hPrice]));
	Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || PlayerData[playerid][pRentingHouse] == HouseInfo[houseid][hID] || PlayerData[playerid][pFurniturePerms] == houseid))
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    if(!(IsLandOwner(playerid, landid) || PlayerData[playerid][pLandPerms] == landid))
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission from the land owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || PlayerData[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == PlayerData[playerid][pGang])))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			ShowActionBubble(playerid, "* %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			ShowActionBubble(playerid, "* %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || PlayerData[playerid][pRentingHouse] == HouseInfo[id][hID] || PlayerData[playerid][pHouseKeys] == id))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
			ShowActionBubble(playerid, "* %s locks their house door.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
			ShowActionBubble(playerid, "* %s unlocks their house door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
			ShowActionBubble(playerid, "* %s locks their garage door.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
			ShowActionBubble(playerid, "* %s unlocks their garage door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			ShowActionBubble(playerid, "* %s locks their business door.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
			ShowActionBubble(playerid, "* %s unlocks their business door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SendClientMessage(playerid, COLOR_GREY, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
				ShowActionBubble(playerid, "* %s locks their entrance door.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
				ShowActionBubble(playerid, "* %s unlocks their entrance door.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not close to anything which you can lock.");

	return 1;
}

CMD:alock(playerid, params[])
{
	new id;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID)
	{
	    if(!VehicleInfo[id][vLocked])
	    {
			VehicleInfo[id][vLocked] = 1;
			GameTextForPlayer(playerid, "~r~Vehicle locked", 3000, 6);
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
			GameTextForPlayer(playerid, "~g~Vehicle unlocked", 3000, 6);
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;
			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
		}
		else
		{
			HouseInfo[id][hLocked] = 0;
			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;
			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
		}
		else
		{
			GarageInfo[id][gLocked] = 0;
			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;
			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;
			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    if(!EntranceInfo[id][eLocked])
	    {
			EntranceInfo[id][eLocked] = 1;
			GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
		}
		else
		{
			EntranceInfo[id][eLocked] = 0;
			GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
		}

        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "** HOUSE HELP ** type a command for more information.");
    SendClientMessage(playerid, COLOR_GREY, "** HOUSE ** /buyhouse /lock /stash /furniture /upgradehouse /sellhouse /sellmyhouse");
	SendClientMessage(playerid, COLOR_GREY, "** HOUSE ** /door /renthouse /unrent /setrent /tenants /evict /evictall /houseinfo");
	SendClientMessage(playerid, COLOR_GREY, "** HOUSE ** /houseinvite /hlights /installhousealarm (/iha), /uninstallhousealarm (/uha)");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [balance | deposit | withdraw]");
	    }
	    if(PlayerData[playerid][pAdminDuty])
	    {
			return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
		}
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Stash Balance ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", HouseInfo[houseid][hWeed], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCocaine], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_SERVERDEF, "______ Stash Weapons ______");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Materials, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %s at your house's level.", FormatNumber(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH)));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %s in your house stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerData[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [weed] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hWeed] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of weed at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    PlayerData[playerid][pWeed] -= value;
			    HouseInfo[houseid][hWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of weed in your house stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [cocaine] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCocaine] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of cocaine at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerData[playerid][pCocaine] -= value;
			    HouseInfo[houseid][hCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of cocaine in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    PlayerData[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerData[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Law enforcement is prohibited from storing weapons.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "Your house stash has no more slots available for weapons.");
			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Weed, Cocaine, Meth, Painkillers, Weapon");

	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %s from your house stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerData[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [weed] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerData[playerid][pWeed] += value;
			    HouseInfo[houseid][hWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of weed from your house stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [cocaine] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerData[playerid][pCocaine] += value;
			    HouseInfo[houseid][hCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of cocaine from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerData[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerData[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_GREY, "The slot specified contains no weapon which you can take.");
				}
				if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
				}

				GivePlayerWeaponEx(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradehouse [level/interior]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 25000) + 25000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your house is already at the maximum level possible.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradehouse [level] [confirm]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(PlayerData[playerid][pCash] < cost)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cash.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
		}

		SendClientMessageEx(playerid, COLOR_GREEN, "Your tenant and furniture capacity were also both increased to %i/%i.", GetHouseTenantCapacity(houseid), GetHouseFurnitureCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	else if(!strcmp(option, "interior", true))
	{
	    static interiors[sizeof(houseInteriors) * 64];

	    if(isnull(interiors))
	    {
	        interiors = "#\tClass\tPrice";

	  		for(new i = 0; i < sizeof(houseInteriors); i ++)
			{
			    format(interiors, sizeof(interiors), "%s\n%i\t%s\t{00AA00}$%i{FFFFFF}", interiors, i + 1, houseInteriors[i][intClass], houseInteriors[i][intPrice]);
			}
		}

		Dialog_Show(playerid, DIALOG_HOUSEINTERIORS, DIALOG_STYLE_TABLIST_HEADERS, "Choose an interior to preview.", interiors, "Preview", "Cancel");
	}

	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellhouse [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerData[targetid][pHouseOffer] = playerid;
	PlayerData[targetid][pHouseOffered] = houseid;
	PlayerData[targetid][pHousePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you their house for %s (/accept house).", GetRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s to buy your house for %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmyhouse [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your house back to the state. You will receive %s back.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your house to the state and received %s back.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM "#TABLE_USERS" WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}
CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 10.");
	}
	if(PlayerData[playerid][pAdminPersonnel] && level > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Level cannot be higher than your admin level.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin] && level < PlayerData[targetid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be demoted.");
	}

	if(level <= 1 && PlayerData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerData[targetid][pUsername]);

		PlayerData[targetid][pAdminDuty] = 0;
    }

    PlayerData[targetid][pAdmin] = level;
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminlevel = %i WHERE uid = %i", level, PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
		PlayerData[playerid][pDeveloper] = 0;
		PlayerData[playerid][pFactionMod] = 0;
		PlayerData[playerid][pWebDev] = 0;
		PlayerData[playerid][pBanAppealer] = 0;
		PlayerData[playerid][pGangMod] = 0;
		PlayerData[playerid][pHelperManager] = 0;
		PlayerData[playerid][pDynamicAdmin] = 0;
		PlayerData[playerid][pAdminPersonnel] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET removeddate = '%s' scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", GetDate(), PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET addeddate = '%s' WHERE uid = %i", GetDate(), PlayerData[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's admin level to {FF6347}%s{33CCFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your admin level to {FF6347}%s{33CCFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_makeadmin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], level);
	return 1;
}
CMD:maketempadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 }
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /maketempadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 10.");
	}
	if(PlayerData[playerid][pAdminPersonnel] && level > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Level cannot be higher than your admin level.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin] && level < PlayerData[targetid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be demoted.");
	}

	if(level <= 1 && PlayerData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerData[targetid][pUsername]);

		PlayerData[targetid][pAdminDuty] = 0;
    }

    PlayerData[targetid][pAdmin] = level;
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	if(level == 0)
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
		PlayerData[playerid][pDeveloper] = 0;
		PlayerData[playerid][pFactionMod] = 0;
		PlayerData[playerid][pWebDev] = 0;
		PlayerData[playerid][pBanAppealer] = 0;
		PlayerData[playerid][pGangMod] = 0;
		PlayerData[playerid][pHelperManager] = 0;
		PlayerData[playerid][pDynamicAdmin] = 0;
		PlayerData[playerid][pAdminPersonnel] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET removeddate = '%s' scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", GetDate(), PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET addeddate = '%s' WHERE uid = %i", GetDate(), PlayerData[playerid][pID]);
        mysql_tquery(connectionID, queryBuffer);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's admin level to {FF6347}%s{33CCFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your admin level to {FF6347}%s{33CCFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_makeadmin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], level);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerData[playerid][pAdmin] < MANAGEMENT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 9))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 9.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /makeadmin instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM "#TABLE_USERS" WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:ganglogs(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, date, description FROM `log_gang` WHERE id = %d LIMIT 15", PlayerData[playerid][pGang]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANGLOGS, playerid);
	return 1;
}
CMD:oadmins(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pAdminPersonnel] && !PlayerData[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM "#TABLE_USERS" WHERE adminlevel > 0 ORDER BY adminlevel DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:ovips(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, vippackage, viptime FROM "#TABLE_USERS" WHERE vippackage > 0 ORDER BY vippackage DESC", "OnQueryFinished", "ii", THREAD_LIST_VIPS, playerid);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has sold all inactive properties.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "* You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:inactivecheck(playerid, params[])
{
    new houses, garages, businesses;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : House) if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
		houses++;
	foreach(new i : Garage) if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
		garages++;
	foreach(new i : Business) if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
		businesses++;

	SendClientMessageEx(playerid, COLOR_WHITE, "* There are currently %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}
CMD:setcooldown(playerid, params[])
{
    new option[12], amount;
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && PlayerData[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /setcooldown [ganginvite] [minutes]");
	}
	if(!strcmp(option, "ganginvite", true))
	{
	    if(-1 > amount > gacooldown)
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above -1 and less then %i", gacooldown);
	    }
	    gacooldown = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the invite cooldown for gangs to %i.", GetRPName(playerid), amount);
	}
	return 1;
}
CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && PlayerData[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the max active turf claim limit for gangs to %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the max active point cap limit for gangs to %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}
CMD:setmotd(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
		TextDrawDestroy(Textdraw2);
		//TextDrawDestroy(Textdraw3);
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "* You have reset the Global MOTD text.");
	    	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the Global MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "* You have changed the Global MOTD text to '%s'.", gServerMOTD);
	    	SendAdminMessage(COLOR_YELLOW, "ADMIN: %s has set the Global MOTD to '%s'", GetRPName(playerid), gServerMOTD);
			LoadServerMOTD();

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				TextDrawShowForPlayer(i, Textdraw2);
				//TextDrawShowForPlayer(i, Textdraw3);
			}
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "* You have reset the Admin MOTD text.");
      		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the Admin MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "* You have changed the Admin MOTD text to '%s'.", adminMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the Admin MOTD to '%s'", GetRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "* You have reset the Helper MOTD text.");
	    	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the Helper MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "* You have changed the Helper MOTD text to '%s'.", helperMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the Helper MOTD to '%s'", GetRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

/*CMD:setmotd(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setmotd [text ('none' to reset)]");
	}
	if(strfind(params, "|") != -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may not include the '|' character in the MOTD.");
	}

	if(!strcmp(params, "none", true))
	{
	    gServerMOTD[0] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "You have reset the MOTD text.");
	}
	else
	{
	    strcpy(gServerMOTD, params, 128);
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the MOTD text to '%s'.", gServerMOTD);
	}

	SaveServerInfo();
	return 1;
}*/

CMD:makeformeradmin(playerid, params[])
{
	new targetid, status;
	if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makeformeradmin [playerid] [status (0/1)]");
		return 1;
	}
    PlayerData[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET FormerAdmin = %i WHERE uid = %i", PlayerData[targetid][pFormerAdmin], PlayerData[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    if(status)
    {
        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}Former Admin{33CCFF}.", GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}Former Admin{33CCFF}.", GetRPName(playerid));
	}
	else
    {
        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}Former Admin{33CCFF} status.", GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}Former Admin{33CCFF} status.", GetRPName(playerid));
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstaff [playerid] [option] [status (0/1)]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: FactionMod, GangMod, BanAppealer, AdminPersonnel, PublicRelations, GameAffairs");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: DynamicAdmin, Scripter, ComplaintMod, HumanResources, BusinessMod");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerData[targetid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Target player must be an administrator!");
	}
	if(!strcmp(option, "businessmod", true))
	{
	    PlayerData[targetid][pWebDev] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET webdev = %i WHERE uid = %i", PlayerData[targetid][pWebDev], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a business moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a business moderator.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}business moderator{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}business moderator{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's business moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) business moderator status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}business moderator{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}business moderator{33CCFF} status.", GetRPName(playerid));
		}
	}

	if(!strcmp(option, "factionmod", true))
	{
	    PlayerData[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET factionmod = %i WHERE uid = %i", PlayerData[targetid][pFactionMod], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a faction moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a faction moderator.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}faction moderator{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}faction moderator{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's faction moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) faction moderator status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}faction moderator{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}faction moderator{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gangmod", true))
	{
	    PlayerData[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gangmod = %i WHERE uid = %i", PlayerData[targetid][pGangMod], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a gang moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a gang moderator.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}gang moderator{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}gang moderator{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's gang moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) gang moderator status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}gang moderator{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}gang moderator{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "banappealer", true))
	{
	    PlayerData[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET banappealer = %i WHERE uid = %i", PlayerData[targetid][pBanAppealer], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a ban appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}ban appealer{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}ban appealer{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's ban appealer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}ban appealer{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}ban appealer{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "scripter", true))
	{
	    if(PlayerData[playerid][pAdmin] < MANAGEMENT) return SendClientMessage(playerid, COLOR_GREY, "You must be a community manager to set someone as a scripter.");
	    PlayerData[targetid][pDeveloper] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET scripter = %i WHERE uid = %i", PlayerData[targetid][pDeveloper], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a developer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a developer.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}developer{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}developer{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's developer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) developer status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}developer{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}developer{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "publicrelations", true))
	{
	    PlayerData[targetid][pHelperManager] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET helpermanager = %i WHERE uid = %i", PlayerData[targetid][pHelperManager], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a Public Relations.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Public Relations.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}Public Relations{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}Public Relations{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's Public Relations status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Public Relations status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}Public Relations{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}PR{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "dynamicadmin", true))
	{
	    PlayerData[targetid][pDynamicAdmin] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET dynamicadmin = %i WHERE uid = %i", PlayerData[targetid][pDynamicAdmin], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a dynamic admin.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a dynamic admin.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}dynamic admin{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}dynamic admin{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's dynamic admin status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) dynamic admin status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}dynamic admin{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}dynamic admin{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "adminpersonnel", true))
	{
	    if(PlayerData[playerid][pAdmin] < MANAGEMENT) return SendClientMessage(playerid, COLOR_GREY, "You must be a community manager to set someone as AP.");
	    PlayerData[targetid][pAdminPersonnel] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminpersonnel = %i WHERE uid = %i", PlayerData[targetid][pAdminPersonnel], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s admin personnel.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) admin perosnnel.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s {FF6347}admin personnel{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you {FF6347}admin personnel{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's admin personnel status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) admin personnel status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}admin personnel{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}admin personnel{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gameaffairs", true))
	{
	    PlayerData[targetid][pGameAffairs] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gameaffairs = %i WHERE uid = %i", PlayerData[targetid][pGameAffairs], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a part of the department of game affairs.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a part of the department of game affairs.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a part of the department of {FF6347}game affairs{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a part of the department of{FF6347}game affairs{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's game affairs status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) game affairs status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}game affairs{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}game affairs{33CCFF} status.", GetRPName(playerid));
		}
	}
    else if(!strcmp(option, "humanresources", true))
	{
	    PlayerData[targetid][pHumanResources] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET humanresources = %i WHERE uid = %i", PlayerData[targetid][pHumanResources], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a part of the human resources.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a part of the human resources.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a part of the {FF6347}human resources{33CCFF}.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a part of the {FF6347}human resources{33CCFF}.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's human resources status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) human resources status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}human resources{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}human resources{33CCFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "complaintmod", true))
	{
	    PlayerData[targetid][pComplaintMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET complaintmod = %i WHERE uid = %i", PlayerData[targetid][pComplaintMod], PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a complaint moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a complaint moderator status.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}complaint moderator{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}complaint moderator{33CCFF} status.", GetRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s's complaint moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) complaint moderator.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}complaint moderator{33CCFF} status.", GetRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}complaint moderator{33CCFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}
/*CMD:renamecmd(playerid, params[])
{
    new cmd[64], newcmd[64];
    if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, newcmd))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /renamecmd [old] [new] (64 chars)");
	}
	if(PC_CommandExists(cmd))
	{
	 	PC_RenameCommand(cmd, newcmd);
	 	SendClientMessageEx(playerid, COLOR_AQUA, "You've renamed command %s to %s.", cmd, newcmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s renamed /%s to /%s", GetRPName(playerid), cmd, newcmd);
	}
	return 1;
}

CMD:createalias(playerid, params[])
{
	new cmd[64], alias[64];
	if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, alias))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createalias [cmd] [newcmd] (64 chars)");
	}
	if(PC_CommandExists(cmd))
	{
     	PC_RegAlias(cmd, alias);
     	SendClientMessageEx(playerid, COLOR_AQUA, "You've created alias %s for %s.", alias, cmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s created a alias for /%s (/%s)", GetRPName(playerid), cmd, alias);
	}
	return 1;
}
CMD:deletecmd(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(param, "s[64]s[64]", oldcmd, "confirm"))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deletecmd [name] [confirm]");
	}
	if(PC_CommandExists(oldcmd))
	{
		PC_DeleteCommand(oldcmd);
	}
}*/
CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* Change text for slot %i changed to '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player needs to be at least a level 2 administrator.");
	}
	if(PlayerData[targetid][pAdmin] > PlayerData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!PlayerData[targetid][pAdminDuty])
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you to be on admin duty.", GetRPName(playerid));
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you to be off admin duty.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Help Requests _____");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerData[i][pHelpRequest]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* %s[%i] asks: %s", GetRPName(i), i, PlayerData[i][pHelpRequest]);
		}
	}

	SendClientMessage(playerid, COLOR_AQUA, "* Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SendClientMessage(playerid, COLOR_AQUA, "* Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to leave the paintball arena first.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accepthelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerData[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}


	if(!PlayerData[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);
	//SetScriptArmour(playerid, 0.0);

	PlayerData[playerid][pHelpRequests]++;
	PlayerData[playerid][pAcceptedHelp] = 1;
	PlayerData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET helprequests = %i WHERE uid = %i", PlayerData[playerid][pHelpRequests], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has accepted %s's help request.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You accepted %s's help request and were sent to their position. /return to go back.", GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_GREEN, "%s has accepted your help request. They are now assisting you.", GetRPName(playerid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerData[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

	PlayerData[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has denied %s's help request.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You denied %s's help request.", GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "* %s has denied your help request.", GetRPName(playerid));
	return 1;
}

CMD:sta(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sta [playerid] (Sends /helpme to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerData[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, PlayerData[targetid][pHelpRequest]);
    PlayerData[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has sent %s's help request to all online admins.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You sent %s's help request to all online admins.", GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}

CMD:return(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't accepted any help requests.");
	}



	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	SetScriptArmour(playerid, PlayerData[playerid][pArmor]);

	SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);
	SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SendClientMessage(playerid, COLOR_WHITE, "You were returned to your previous position.");
    PlayerData[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /answerhelp [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerData[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

	PlayerData[playerid][pHelpRequests]++;
	PlayerData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET helprequests = %i WHERE uid = %i", PlayerData[playerid][pHelpRequests], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SendClientMessageEx(targetid, COLOR_YELLOW, "* Answer from %s: %.*s... *", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SendClientMessageEx(targetid, COLOR_YELLOW, "* Answer from %s: ...%s *", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_YELLOW, "* Answer from %s: %s *", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:hc(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hc [helper chat]");
	}
	if(PlayerData[playerid][pToggleHelper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the helper chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
		if(PlayerData[i][pAdmin] > 0)
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "* %s %s: %.*s... *", GetStaffRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "* %s %s: ...%s *", GetStaffRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "* %s %s: %s *", GetStaffRank(playerid), GetRPName(playerid), params);
			}
			return 1;
		}
		/*if(PlayerData[playerid][pAdmin] > 0 && !PlayerData[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "* %s %s: %.*s... *", GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "* %s %s: ...%s *", GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "* %s %s: %s *", GetAdminRank(playerid), GetRPName(playerid), params);
			}
			return 1;
		}*/
	}
	return 1;
}

CMD:activity(playerid, params[])
{
	new type[16];

	SendClientMessage(playerid, COLOR_SERVERDEF, "_______ My Properties _______");

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

	        if((gettime() - HouseInfo[i][hTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as {FF6347}Inactive{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as {00AA00}Active{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
		}
	}

 	foreach(new i : Garage)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
	        if((gettime() - GarageInfo[i][gTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as {FF6347}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as {00AA00}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
		}
	}

 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
	        if((gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as {FF6347}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as {00AA00}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "* Your properties become inactive if you don't enter them for 30+ days.");
	return 1;
}

CMD:hlights(playerid, params[])
{
	new option, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", option) || !(0 <= option <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hlights [lights (1/0)]");
	}
	if(option)
	{
	    SendClientMessage(playerid, COLOR_AQUA, "* You've turned on the lights to this house.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_AQUA, "* You've turned off the lights to this house.");
	}
	HouseInfo[houseid][hLights] = option;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET lights = %i WHERE id = %i", option, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);
	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        if(HouseInfo[houseid][hLights] == 1)
	        {
	            TextDrawHideForPlayer(i, houseLights);
	        }
	        else
	        {
	            TextDrawShowForPlayer(i, houseLights);
			}
	    }
	}

	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no house in range. You must be near a house.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house's owner has chosen to disable renting for this house.");
	}
	if(PlayerData[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);

 	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!PlayerData[playerid][pRentingHouse])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rentinghouse = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerData[playerid][pRentingHouse] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM "#TABLE_USERS" WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(PlayerData[i][pLogged] && PlayerData[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            PlayerData[i][pRentingHouse] = 0;
            SendClientMessage(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessage(playerid, COLOR_WHITE, "You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself to your own home.");
	}

	PlayerData[targetid][pInviteOffer] = playerid;
	PlayerData[targetid][pInviteHouse] = houseid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has offered you an invitation to their house in %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s an invitation to your house.", GetRPName(targetid));
	return 1;
}
CMD:givehousekeys(playerid, params[])
{
	new targetid, houseid = GetInsideHouse(playerid), option;
	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in your house");
	}
	if(sscanf(params, "di", targetid, option))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Usage: /givehousekeys [playerid] [0/1]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	switch(option)
	{
		case 0:
		{
		    PlayerData[targetid][pHouseKeys] = -1;
		    SendClientMessageEx(playerid, COLOR_GREY, "You have taken %s's house keys", GetRPName(targetid));
		}
		case 1:
		{
			PlayerData[targetid][pHouseKeys] = houseid;
			SendClientMessageEx(playerid, COLOR_GREY, "You have given %s a copy of your house keys", GetRPName(targetid));
		}
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SendClientMessage(playerid, COLOR_GREY, "Invalid size. Valid sizes range from Small, Medium and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

  		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SendClientMessage(playerid, COLOR_GREY, "Garage slots are currently full. Ask developers to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, Type, Owner, Price, Locked, Freeze");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [freeze] [0/1]");
		}

		GarageInfo[garageid][gFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET freeze = %i WHERE id = %i", GarageInfo[garageid][gFreeze], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've enabled freeze & object loading for entrance %i.", garageid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've disabled freeze & object loading for entrance %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerData[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the owner of garage %i to %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;
    Iter_Remove(Garage, garageid);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid)
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "Garage:{C8C8C8} /buygarage /lock /upgradegarage /sellgarage /sellmygarage /garageinfo");
	SendClientMessage(playerid, COLOR_SERVERDEF, "Garage:{C8C8C8} /repair /refuel");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This garage already has an owner.");
	}
	if(PlayerData[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s to make this garage yours! /garagehelp for a list of commands.", FormatNumber(GarageInfo[garageid][gPrice]));
    Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradegarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "The next garage size available is %s and costs %s to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], FormatNumber(garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]));
		return 1;
	}
	if(PlayerData[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade your garage.");
	}

	foreach(new i: Vehicle)
	{
	    if(IsVehicleInGarage(i, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i AND interior > 0 AND world = %i", PlayerData[playerid][pID], GarageInfo[garageid][gWorld]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerUpgradeGarage", "ii", playerid, garageid);
	return 1;
}

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellgarage [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerData[targetid][pGarageOffer] = playerid;
	PlayerData[targetid][pGarageOffered] = garageid;
	PlayerData[targetid][pGaragePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you their garage for %s (/accept garage).", GetRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s to buy your garage for %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmygarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your garage back to the state. You will receive %s back.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your garage to the state and received %s back.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ Garage ID %i _______", garageid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Value: %s - Size: %s - Location: %s - Active: %s - Locked: %s", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}
CMD:createdealership(playerid, params[])
{
	new type = 9, Float:x, Float:y, Float:z, Float:a;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin] && !PlayerData[playerid][pWebDev])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a business in range. Find somewhere else to create this one.");
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], type, bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin] && !PlayerData[playerid][pWebDev])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createbiz [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin] && !PlayerData[playerid][pWebDev])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked, Vehspawn");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "vehspawn", true))
	{
		GetPlayerPos(playerid, BusinessInfo[businessid][cVehicle][0], BusinessInfo[businessid][cVehicle][1], BusinessInfo[businessid][cVehicle][2]);
		GetPlayerFacingAngle(playerid, BusinessInfo[businessid][cVehicle][3]);
		format(queryBuffer, sizeof(queryBuffer), "UPDATE `businesses` SET `cVehicleX` = %.4f, `cVehicleY` = %.4f, `cVehicleZ` = %.4f, `cVehicleA` = %.4f WHERE id = %i",
		BusinessInfo[businessid][cVehicle][0],BusinessInfo[businessid][cVehicle][1],BusinessInfo[businessid][cVehicle][2],BusinessInfo[businessid][cVehicle][3], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
		SendAdminMessage(COLOR_RED, "Admin: %s has edited the vehicle spawn of business %i.", GetRPName(playerid), businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the exit of business %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    PlayerData[playerid][pSelected] = businessid;
	    Dialog_Show(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
        ClearProducts(businessid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerData[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the owner of business %i to %s.", businessid, GetRPName(targetid));
		Log_Write("log_property", "%s (uid: %i) has edited business id owner to (id: %s).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid));

	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the entry fee of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the products amount of business %i to %i.", businessid, amount);
	}
	else if(!strcmp(option, "materials", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [materials] [value]");
		}

		BusinessInfo[businessid][bMaterials] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the materials amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin] && !PlayerData[playerid][pWebDev])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

    ClearProducts(businessid);
	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;
	Iter_Remove(Business, businessid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed business id %i.", GetRPName(playerid), businessid);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR && !PlayerData[playerid][pWebDev])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "** BUSINESS HELP ** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "** BUSINESS ** /buybiz /lock /bwithdraw /bdeposit /entryfee /sellbiz /sellmybiz /bizinfo");
	SendClientMessage(playerid, COLOR_GREY, "** BUSINESS ** /bdepositmats /bwithdrawmats /bname");
	return 1;
}

/*CMD:buybiz(playerid, params[])
{
	return SendClientMessage(playerid, COLOR_GREY, "This command has been disabled, if you want to buy a business you must request it on our forums");
}*/

CMD:buybiz(playerid, params[])
{
	new businessid;
	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This business already has an owner.");
	}
	if(PlayerData[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bwithdraw [amount] (%s available)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %s from the business vault. There is now %s remaining.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bdeposit [amount] (%s available)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > PlayerData[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %s in the business vault. There is now %s available.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bwithdrawmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command can only be used in tool shops.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bwithdrawmats [amount] (%i available)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bMaterials])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerData[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	BusinessInfo[businessid][bMaterials] -= amount;
	PlayerData[playerid][pMaterials] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %i materials from the business vault. There is now %i remaining.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:bdepositmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command can only be used in tool shops.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bdepositmats [amount] (%i available)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > PlayerData[playerid][pMaterials])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	BusinessInfo[businessid][bMaterials] += amount;
	PlayerData[playerid][pMaterials] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited %i materials in the business vault. There is now %i available.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellbiz [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerData[targetid][pBizOffer] = playerid;
	PlayerData[targetid][pBizOffered] = businessid;
	PlayerData[targetid][pBizPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you their business for %s (/accept business).", GetRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s to buy your business for %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmybiz [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your business back to the state. You will receive %s back.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your business to the state and received %s back.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ Business ID %i _______", businessid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Value: %s - Type: %s - Location: %s - Active: %s - Status: %s", FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Vault: %s - Entry Fee: %s - Products: %i - Materials: %i", FormatNumber(BusinessInfo[businessid][bCash]), FormatNumber(BusinessInfo[businessid][bEntryFee]), BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	switch(BusinessInfo[businessid][bType])
			{
				case BUSINESS_GYM, BUSINESS_BARCLUB: {
					if(sscanf(params, "i", amount))
					{
						return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /entryfee [amount]");
					}
					if(amount < 0 || amount > 500)
					{
						return SendClientMessage(playerid, COLOR_GREY, "The entry fee can't be below $0 or above $500.");
					}
					BusinessInfo[businessid][bEntryFee] = amount;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
					SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the entry fee to $%i.", amount);
				}
				default:
				   return SendClientMessage(playerid, COLOR_GREY, "You cannot set entry fee for this business type.");
			}
	return 1; 

}
CMD:iha(playerid, params[])
{
	return callcmd::installhousealarm(playerid, params);
}
CMD:installhousealarm(playerid, params[])
{
	new houseid = GetInsideHouse(playerid);
	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(HouseInfo[houseid][hAlarm] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house has an installed alarm system already");
	}
	if(PlayerData[playerid][pHouseAlarm] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a house alarm, you can buy one from a tool shop");
	}
	PlayerData[playerid][pHouseAlarm] = 0;
	HouseInfo[houseid][hAlarm] = 1;
	SendClientMessage(playerid, COLOR_YELLOW, "You've sucessfully installed your house alarm, now it's legal protected by the Police.");
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET alarm = %i WHERE id = %i", HouseInfo[houseid][hAlarm], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET housealarm = %i WHERE uid = %i", PlayerData[playerid][pHouseAlarm], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:uha(playerid, params[])
{
	return callcmd::uninstallhousealarm(playerid, params);
}
CMD:uninstallhousealarm(playerid, params[])
{
	new houseid = GetInsideHouse(playerid);
	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(HouseInfo[houseid][hAlarm] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house doesn't have an installed alarm system.");
	}

	PlayerData[playerid][pHouseAlarm] += 1;
	HouseInfo[houseid][hAlarm] = 0;
	SendClientMessage(playerid, COLOR_YELLOW, "You've sucessfully uninstalled your house alarm, now it's not anymore protected by the Police.");
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET alarm = %i WHERE id = %i", HouseInfo[houseid][hAlarm], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET housealarm = %i WHERE uid = %i", PlayerData[playerid][pHouseAlarm], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:buy(playerid, params[])
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SCM( playerid, COLOR_GREY, "You cant purchase from a vehicle." );
	if(IsPlayerAtFoodPlace(playerid))
	{
    	return ShowDialogToPlayer(playerid, DIALOG_FOOD);
	}
	new businessid = GetInsideBusiness(playerid), title[64];

	if(businessid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any business where you can buy stuff.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock.");
   	}

	format(title, sizeof(title), "%s's %s [%i products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_DEALERSHIP:
	    {
	        ShowDealershipPreviewMenu(playerid, businessid);
		}
	    case BUSINESS_STORE:
	    {
	        Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Mobile phone ($600)\nWalkie talkie ($300)\nCigars ($500)\nSpraycans ($100)\nCamera ($200)\nMP3 player ($50)\nFishing rod ($50)\nFish bait ($300)\nMuriatic acid ($300)\nBaking soda ($30)\nPocket watch ($600)\nGPS system ($150)\nGasoline can ($70)\nRope ($40)\nBoombox ($300)\nBlindfold rag($30)", "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "9mm pistol ($15000)\nShotgun ($25000)\nRifle ($40000)\nLight armor ($15000)\nMedium Armor($25000)", "Select", "Cancel");
		}
		case BUSINESS_CLOTHES:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Clothes ($1000)\nGlasses ($500)\nBandanas & masks ($375)\nHats & caps ($240)\nMisc clothing ($500)", "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Normal (Free)\nBoxing ($4725)\nKung Fu ($7650)\nKneehead ($9275)\nGrabkick ($1250)\nElbow ($2950)", "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Water ($10)\nSprunk ($30)\nFrench fries ($40)\nHamburger ($40)\nCheeseburger ($50)\nMac & cheese ($60)\nClub sandwich ($70)\nFish & chips ($80)\nPan pizza ($110)", "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Water ($10)\nSprunk ($30)\nBeer ($45)\nWine ($300)\nWhiskey ($500)", "Select", "Cancel");
		}
		case BUSINESS_TOOLSHOP:
		{
		    Dialog_Show(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST_HEADERS, title, "Item\tCost\nFirst aid kit\t1000 materials\nBody repair kit\t10000 materials\nPolice scanner\t5000 materials\nRimkit\t4000 materials\nHelmet\t500 materials\nHouse Alarm\t2500 materials\nAuto Vehicle CMD\t4500 materials\nCrowbar\t2500 Materials", "Select", "Cancel");
		}

	}

	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid);
	if((PlayerData[playerid][pDonator] == 0) && (businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any advertisement business.");
	}
	if(PlayerData[playerid][pAdMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from submitting advertisements. /report for an unmute.");
	}

	if(!PlayerData[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(PlayerData[playerid][pTogglePhone] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can not /ad while your phone is turned off");
	}
	if(PlayerData[playerid][pHours] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to play at least 2 hours in order to post an advertisement.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Advertisements can only be posted every 30 seconds.");
	}
	if(PlayerData[playerid][pJailTime] > 0) {
		SendClientMessage(playerid, COLOR_GREY, "You can't use advertisements while in jail.");
	}
	ShowDialogToPlayer(playerid, DIALOG_ADNEW);
 	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessageEx(playerid, COLOR_AQUA, "* Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no position in the slot selected.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	SetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);
	SetPlayerInterior(playerid, MarkedPositions[playerid][slot][mInterior]);
	SetPlayerVirtualWorld(playerid, MarkedPositions[playerid][slot][mWorld]);
	SetCameraBehindPlayer(playerid);

	return 1;
}

CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Entrance slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Exterior, Interior, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Faction, Gang, VIP, Vehicles, Freeze, Label, Password, Type, MapIcon, Color");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	if(!strcmp(option, "exterior", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the exterior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the interior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the name of entrance %i to '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerData[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the owner of entrance %i to %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the faction type of entrance %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

	    if(sscanf(param, "i", gangid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [gang] [gangid]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		EntranceInfo[entranceid][eGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET gang = %i WHERE id = %i", EntranceInfo[entranceid][eGang], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've reset the gang of entrance %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the gang of entrance %i to %s (%i).", entranceid, GangInfo[gangid][gName], gangid);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [vip] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of ranks: (0) None (1) Donator ");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SendClientMessage(playerid, COLOR_GREY, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the VIP rank of entrance %i to {D909D9}%s{33CCFF} (%i).", entranceid, GetVIPRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the password of entrance %i to '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [type] [type id]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Duel Arena (2) Repair");
	        return 1;
		}
		if(!(0 <= type <= 2))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

        EntranceInfo[entranceid][eType] = type;

		if(type == 1)
		{
		    EntranceInfo[entranceid][eIntX] = 1419.6472;
			EntranceInfo[entranceid][eIntY] = 4.0132;
			EntranceInfo[entranceid][eIntZ] = 1002.3906;
			EntranceInfo[entranceid][eIntA] = 90.0000;
			EntranceInfo[entranceid][eInterior] = 1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, type = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET type = %i WHERE id = %i", EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You've set the special type for entrance %i to %i.", entranceid, type);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid map icon.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the map icon of entrance %i to %i.", entranceid, type);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have set the {%06x}color{33CCFF} of entrance ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removeentrance(playerid, params[])
{
	new entranceid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;
	Iter_Remove(Entrance, entranceid);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:angle(playerid, params[])
{
	new Float:a;
	GetPlayerFacingAngle(playerid, a);
	SendClientMessageEx(playerid, COLOR_WHITE, "Your facing angle is {00aa00}%f.", a);
	return 1;
}
CMD:join(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	        if(PlayerData[playerid][pJob] != JOB_NONE)
	        {
	            if(PlayerData[playerid][pDonator] >= 2)
	        	{
	        	    if(PlayerData[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SendClientMessage(playerid, COLOR_GREY, "You have two jobs already. Please quit one of them before getting another one.");
	        	    }
	        	    if(PlayerData[playerid][pJob] == i)
	        	    {
	        	        return SendClientMessage(playerid, COLOR_GREY, "You have this job already.");
	        	    }
	        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET secondjob = %i WHERE uid = %i", i, PlayerData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
                    ApplyActorAnimation(jobLocations[i][jobActor], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
					PlayerData[playerid][pSecondJob] = i;
					SendClientMessageEx(playerid, COLOR_WHITE, "You are now a {FF0000}%s{ffffff}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
	            }
	            else
	            {
	            	SendClientMessage(playerid, COLOR_GREY, "You have a job already. Please quit your current job before getting another one.");
				}

				return 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET job = %i WHERE uid = %i", i, PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
          //  ApplyActorAnimation(jobLocations[i][jobActor], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
			PlayerData[playerid][pJob] = i;
			SendClientMessageEx(playerid, COLOR_WHITE, "You are now a {ffff00}%s{ffffff}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
            return 1;

		}

	}
	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any job icon.");
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new slot;

	if(PlayerData[playerid][pDonator] > 0 && sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quitjob [1/2]");
	}

	if((PlayerData[playerid][pDonator] < 2) && slot == 1)
	{
	    if(PlayerData[playerid][pJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET job = -1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have quit your job as a {00AA00}%s{33CCFF}.", GetJobName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = JOB_NONE;
		RemovePlayerFromVehicle(playerid);
	}
	else if(slot == 2 && PlayerData[playerid][pDonator] > 0)
	{
	    if(PlayerData[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have a job in this slot which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET secondjob = -1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have quit your secondary job as a {00AA00}%s{33CCFF}.", GetJobName(PlayerData[playerid][pSecondJob]));
		PlayerData[playerid][pSecondJob] = JOB_NONE;
		RemovePlayerFromVehicle(playerid);
	}

	return 1;
}

CMD:getpizza(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_PIZZAMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Pizzaman.");
	}
	if(PlayerData[playerid][pPizzaCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before you can load another pizza.", PlayerData[playerid][pPizzaCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 448)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a pizza bike.");
	}
	/*if(PlayerData[playerid][pPizzas] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have pizzas already. Deliver them first.");
	}*/
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_PIZZAMAN][jobX], jobLocations[JOB_PIZZAMAN][jobY], jobLocations[JOB_PIZZAMAN][jobZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be closer to the job icon at the pizza stacks.");
	}
	if((houseid = GetRandomHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There are no houses in the server to deliver pizza to. Ask an admin to set them up.");
	}

	PlayerData[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    PlayerData[playerid][pPizzas] = 1;
	PlayerData[playerid][pLastPizza] = gettime();
    PlayerData[playerid][pPizzaTime] = 0;
    PlayerData[playerid][pPizzaCooldown] = 60;
    PlayerData[playerid][pCP] = CHECKPOINT_PIZZA;
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You loaded your bike with a hot and ready pizza. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	return 1;
}

CMD:load(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	if(PlayerData[playerid][pCourierCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before you can load another delivery.", PlayerData[playerid][pCourierCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Mule or a Boxville.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1766.9261,-2048.9807,13.8355))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the loading dock.");
	}
	if(PlayerData[playerid][pShipment] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have a shipment loaded already. You need to deliver it first.");
	}

	Dialog_Show(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery supplies\nAmmunition\nClothing items\nFood & drinks\nBeverages\nTools & equipment", "Select", "Cancel");
	return 1;
}

CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Mule or a Boxville.");
	}
	if(PlayerData[playerid][pShipment] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no shipment loaded which you can deliver.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != PlayerData[playerid][pShipment])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of a business which accepts this type of load.");
	}

	if(gettime() - PlayerData[playerid][pLastLoad] < 20 && PlayerData[playerid][pAdmin] < MODERATOR && !PlayerData[playerid][pKicked])
    {
        PlayerData[playerid][pACWarns]++;

        if(PlayerData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - PlayerData[playerid][pLastLoad]);
		}
		else
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER: %s was autobanned by %s, reason: Teleport delivering", GetRPName(playerid), SERVER_ANTICHEAT);
		    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 5) + 5;

	if(PlayerData[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 470;
  	} else if(PlayerData[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 525;
    } else if(PlayerData[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 545;
  	} else if(PlayerData[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 490;
 	} else if(PlayerData[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 440;
	} else if(PlayerData[playerid][pShipment] == BUSINESS_TOOLSHOP) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 560;
	}

	amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

    if(PlayerData[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerData[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have earned {00AA00}$%i{33CCFF} for delivering %i products.", amount, products);
	GivePlayerCash(playerid, amount);

	BusinessInfo[businessid][bProducts] += products;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pCourierCooldown] = 120;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}
CMD:skill(playerid, params[])
{
	ShowDialogToPlayer(playerid, DIALOG_SKILL);
}
CMD:skillss(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skill [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Courier, Fishing, WeaponDealer, Mechanic, DrugSmuggler, Lawyer, Detective, Thief");
	    return 1;
	}
	if(!strcmp(params, "courier", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your courier skill level is %i/5.", GetJobLevel(playerid, JOB_COURIER));

	    if(GetJobLevel(playerid, JOB_COURIER) < 5)
	    {
	        if(PlayerData[playerid][pCourierSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 50 - PlayerData[playerid][pCourierSkill]);
	        } else if(PlayerData[playerid][pCourierSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 100 - PlayerData[playerid][pCourierSkill]);
	        } else if(PlayerData[playerid][pCourierSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 200 - PlayerData[playerid][pCourierSkill]);
            } else if(PlayerData[playerid][pCourierSkill] < 350) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 350 - PlayerData[playerid][pCourierSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "fishing", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your fishing skill level is %i/5.", GetJobLevel(playerid, JOB_FISHERMAN));

	    if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	    {
	        if(PlayerData[playerid][pFishingSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 50 - PlayerData[playerid][pFishingSkill]);
	        } else if(PlayerData[playerid][pFishingSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 100 - PlayerData[playerid][pFishingSkill]);
	        } else if(PlayerData[playerid][pFishingSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 200 - PlayerData[playerid][pFishingSkill]);
            } else if(PlayerData[playerid][pFishingSkill] < 350) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 350 - PlayerData[playerid][pFishingSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "weapondealer", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your weapons dealer skill level is %i/5.", GetJobLevel(playerid, JOB_WEAPONDEALER));

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5)
	    {
	        if(PlayerData[playerid][pWeaponSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 50 - PlayerData[playerid][pWeaponSkill]);
	        } else if(PlayerData[playerid][pWeaponSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 100 - PlayerData[playerid][pWeaponSkill]);
	        } else if(PlayerData[playerid][pWeaponSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 200 - PlayerData[playerid][pWeaponSkill]);
            } else if(PlayerData[playerid][pWeaponSkill] < 500) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 500 - PlayerData[playerid][pWeaponSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your mechanic skill level is %i/5.", GetJobLevel(playerid, JOB_MECHANIC));

	    if(GetJobLevel(playerid, JOB_MECHANIC) < 5)
	    {
	        if(PlayerData[playerid][pMechanicSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 25 - PlayerData[playerid][pMechanicSkill]);
	        } else if(PlayerData[playerid][pMechanicSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 50 - PlayerData[playerid][pMechanicSkill]);
	        } else if(PlayerData[playerid][pMechanicSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 100 - PlayerData[playerid][pMechanicSkill]);
            } else if(PlayerData[playerid][pMechanicSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 200 - PlayerData[playerid][pMechanicSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "drugsmuggler", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your drug smuggler skill level is %i/5.", GetJobLevel(playerid, JOB_DRUGDEALER));

	    if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    {
	        if(PlayerData[playerid][pSmugglerSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 25 - PlayerData[playerid][pSmugglerSkill]);
	        } else if(PlayerData[playerid][pSmugglerSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 50 - PlayerData[playerid][pSmugglerSkill]);
	        } else if(PlayerData[playerid][pSmugglerSkill] < 75) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 75 - PlayerData[playerid][pSmugglerSkill]);
            } else if(PlayerData[playerid][pSmugglerSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 100 - PlayerData[playerid][pSmugglerSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your lawyer skill level is %i/5.", GetJobLevel(playerid, JOB_LAWYER));

	    if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	    {
	        if(PlayerData[playerid][pLawyerSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 25 - PlayerData[playerid][pLawyerSkill]);
	        } else if(PlayerData[playerid][pLawyerSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 50 - PlayerData[playerid][pLawyerSkill]);
	        } else if(PlayerData[playerid][pLawyerSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 100 - PlayerData[playerid][pLawyerSkill]);
            } else if(PlayerData[playerid][pLawyerSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 200 - PlayerData[playerid][pLawyerSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "detective", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your detective skill level is %i/5.", GetJobLevel(playerid, JOB_DETECTIVE));

	    if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
	    {
	        if(PlayerData[playerid][pDetectiveSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 50 - PlayerData[playerid][pDetectiveSkill]);
	        } else if(PlayerData[playerid][pDetectiveSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 100 - PlayerData[playerid][pDetectiveSkill]);
	        } else if(PlayerData[playerid][pDetectiveSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 200 - PlayerData[playerid][pDetectiveSkill]);
            } else if(PlayerData[playerid][pDetectiveSkill] < 400) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 400 - PlayerData[playerid][pDetectiveSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skill [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Courier, Fishing, WeaponDealer, Mechanic, DrugSmuggler, Lawyer, Detective, Thief");
	}

	return 1;
}
CMD:fish(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}
	if(!PlayerData[playerid][pFishingRod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(PlayerData[playerid][pFishTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(PlayerData[playerid][pFishWeight] >= 1500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have too much fish and can't fish any longer.");
	}
	if(IsABoat(GetPlayerVehicleID(playerid)))
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "You are not close to anywhere where you can fish.");
	}
	else if(!IsPlayerAtFishingPlace(playerid) && GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}

	ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0, 1);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	ShowActionBubble(playerid, "* %s reels the line of their fishing rod into the water.", GetRPName(playerid));
	PlayerData[playerid][pFishTime] = 6;

	if(PlayerData[playerid][pFishingBait] > 0)
	{
	    PlayerData[playerid][pFishingBait]--;
	    PlayerData[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishingbait = fishingbait - 1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		//SendClientMessage(playerid, COLOR_AQUA, "* You used one fish bait. Your odds of catching a bigger fish are increased!");
	}
	else
	{
	    PlayerData[playerid][pUsedBait] = 0;
	}

	return 1;
}


CMD:sellfish(playerid, params[])
{
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any Supermarket business.");
	}
	if(!PlayerData[playerid][pFishWeight])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no fish which you can sell.");
	}

	new amount = (PlayerData[playerid][pFishWeight] * 1) + random(300)+50;

    if(PlayerData[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerData[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "* You earned {00AA00}$%i{33CCFF} for selling %i kg of fish.", amount, PlayerData[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET fishweight = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerData[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_______ My Fish _______");
	SendClientMessageEx(playerid, COLOR_GREY2, "You have %i/1500 kg of fish in your inventory.", PlayerData[playerid][pFishWeight]);
	return 1;
}

/*CMD:smugglemats(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any materials pickup.");
	}
	if(PlayerData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerData[playerid][pCash] < 150)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need at least $300 in cash to smuggle materials.");
	}
    if(PlayerData[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerData[playerid][pCP] = CHECKPOINT_MATS;
	PlayerData[playerid][pSmuggleTime] = gettime();
	PlayerData[playerid][pDedication] = 1;

	GivePlayerCash(playerid, -150);
	SendClientMessage(playerid, COLOR_AQUA, "* You paid $150 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 75);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		PlayerData[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 75);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		PlayerData[playerid][pSmuggleMats] = 2;
	}

	return 1;
}*/

CMD:smugglemats(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467) && !IsPlayerInRangeOfPoint(playerid, 20.0, 714.5344, -1565.1694, 1.7680) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2112.3240,-2432.8130,13.5469))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any materials pickup.");
	}
	if(PlayerData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerData[playerid][pCash] < 50)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need at least $50 in cash to smuggle materials.");
	}
    if(PlayerData[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerData[playerid][pCP] = CHECKPOINT_MATS;
	PlayerData[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -150);
	SendClientMessage(playerid, COLOR_AQUA, "* You paid $150 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 25);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		PlayerData[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 25);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		PlayerData[playerid][pSmuggleMats] = 2;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 714.5344, -1565.1694, 1.76807))
	{
 		//AddPointMoney(POINT_MATPICKUP2, 25);
		SetPlayerCheckpoint(playerid, 29.0318,-1399.3555,1.7680, 20.0);
		PlayerData[playerid][pSmuggleMats] = 3;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2112.3240, -2432.8130, 13.5469))
	{
		// get random checkpoint
		new rand = random(5);
		switch(rand)
		{
		    case 0: { SetPlayerCheckpoint(playerid, -1368.1206,-203.7393,14.1484, 30.0); }
		    case 1: { SetPlayerCheckpoint(playerid, 310.8307,2033.6459,17.6406, 30.0); }
		    case 2: { SetPlayerCheckpoint(playerid, 401.2192,2502.6482,16.4844, 30.0); }
		    case 3: { SetPlayerCheckpoint(playerid, 1582.8756,1356.8186,10.8556, 30.0); }
		    case 4: { SetPlayerCheckpoint(playerid, 1574.8552,1505.5690,10.8361, 30.0); }
		}
		PlayerData[playerid][pSmuggleMats] = 4;
	}

	return 1;
}

CMD:getmats(playerid, params[])
{
	return callcmd::smugglemats(playerid, params);
}

CMD:sellgun(playerid, params[])
{
	new targetid, weapon[10], price;

    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER) && PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons from within a vehicle.");
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ Weapons Crafting _______");

		if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 1) {
		    SendClientMessage(playerid, COLOR_WHITE, "Level 1: Bat [50], Shovel [50], Golfclub [50], Poolcue [50]");
			SendClientMessage(playerid, COLOR_WHITE, "Level 1: Katana [50], Dildo [50], Flowers [50], Cane [50]");
			SendClientMessage(playerid, COLOR_WHITE, "Level 1: 9mm [100], Sdpistol [150], Shotgun [200]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 2) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 2: MP5 [1000], Deagle [2000]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 3) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 3: Uzi [500], Tec9 [500], Rifle [1000]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 4) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 4: Ak47 [3500], M4 [4500]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 5 || PlayerData[playerid][pDonator] > 0) {
		    if(PlayerData[playerid][pDonator] > 0) {
		        SendClientMessage(playerid, COLOR_VIP, "(VIP){FFFFFF} Level 5: Spas12 [5000], Sniper [5000]");
			} else {
				SendClientMessage(playerid, COLOR_WHITE, "Level 5: Spas12 [7500], Sniper [7500]");
			}
		}

		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellgun [playerid] [name] [price]");
		return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerData[targetid][pHours] < 2 || PlayerData[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(gettime() - PlayerData[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerData[playerid][pLastSell]));
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 5;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a baseball bat for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 6;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a shovel for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a shovel for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 2;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a golf club for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a golf club for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 7;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a pool cue for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a pool cue for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 8;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a katana for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a katana for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "dildo", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 10))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 10);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 10;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a dildo for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a dildo for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "flowers", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 14))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 14);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 14;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you flowers for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s flowers for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(PlayerData[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 15;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a cane for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a cane for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(PlayerData[playerid][pMaterials] < 100)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerData[playerid][pLastSell] = gettime();
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 22;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a 9mm for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a 9mm for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(PlayerData[playerid][pMaterials] < 150)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 23;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a silenced pistol for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(PlayerData[playerid][pMaterials] < 200)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 25;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a shotgun for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a shotgun for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 1000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 29;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you an MP5 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s an MP5 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "deagle", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 2000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 24);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 24;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a Desert Eagle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a Desert Eagle for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "uzi", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 28))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 28);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 28;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a Micro Uzi for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a Micro Uzi for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 32;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a Tec-9 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "ak47", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 3500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 30))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 30);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 30;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you an AK-47 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s an AK-47 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "m4", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < 4500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 31))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 31);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 31;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you an M4 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s an M4 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "spas12", true))
	{
	    new cost;

	    if(PlayerData[playerid][pDonator] > 0)
			cost = 5000;
		else
	        cost = 7500;

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5 && PlayerData[playerid][pDonator] < 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < cost)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 27))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 27);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 27;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a SPAS-12 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a SPAS-12 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sniper", true))
	{
	    new cost;

	    if(PlayerData[playerid][pDonator] > 0)
			cost = 5000;
		else
	        cost = 7500;

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5 && PlayerData[playerid][pDonator] < 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerData[playerid][pMaterials] < cost)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 34))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 34);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerData[targetid][pSellOffer] = playerid;
   			PlayerData[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerData[targetid][pSellExtra] = 34;
   			PlayerData[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered to sell you a sniper rifle or $%i. (/accept weapon)", GetRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to sell %s a sniper rifle for $%i.", GetRPName(targetid), price);
		}
	}

	return 1;
}

CMD:buycomps(playerid, params[])
{
	new amount, price, cost = 1200 - (GetJobLevel(playerid, JOB_MECHANIC) * 200);

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1952.1062,-1558.4139,13.7161))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the component shop.");
	}
	if(sscanf(params, "i", amount))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buycomps [amount]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "You are paying $%i per component at your current skill level.", cost);
		return 1;
	}
	if(!(1 <= amount <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range between 1 and 10.");
	}
	if(PlayerData[playerid][pComponents] + amount > 50)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 50 components.");
	}

	price = amount * cost;

	if(PlayerData[playerid][pCash] < price)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford to purchase %i components for $%i.", amount, price);
	}
	else
	{
	    PlayerData[playerid][pComponents] += amount;

		GivePlayerCash(playerid, -price);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have purchased %i components for $%i.", amount, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must either be a mechanic, or a donator to use this command.");
	}
	if(GetInsideGarage(playerid) >= 0)
	{
	    if(gettime() - PlayerData[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerData[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
			PlayerData[playerid][pLastRepair] = gettime();
			SetVehicleHealth(vehicleid, 1000.0);

			ShowActionBubble(playerid, "* %s repairs the vehicle.", GetRPName(playerid));
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		}
	}
    else if(PlayerHasJob(playerid, JOB_MECHANIC) && PlayerData[playerid][pDonator] < 1)
	{
		if(PlayerData[playerid][pDonator] < 1 && PlayerData[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
		}
		if(gettime() - PlayerData[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerData[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
			PlayerData[playerid][pComponents]--;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

			PlayerData[playerid][pLastRepair] = gettime();
			SetVehicleHealth(vehicleid, 1000.0);

			if(GetJobLevel(playerid, JOB_MECHANIC) == 5)
			{
			    RepairVehicle(vehicleid);
			    SendClientMessage(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You have repaired this vehicle to maximum health.");
			}

			ShowActionBubble(playerid, "* %s repairs the vehicle.", GetRPName(playerid));

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			IncreaseJobSkill(playerid, JOB_MECHANIC);
		}
	}
 	else if(PlayerData[playerid][pDonator] > 0)
	{
		if(PlayerData[playerid][pDonator] < 1 && !PlayerData[playerid][pComponents])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
		}
		if(gettime() - PlayerData[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerData[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
 			SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You repaired this vehicle free of charge.");

			PlayerData[playerid][pLastRepair] = gettime();

			SetVehicleHealth(vehicleid, 1000.0);
			ShowActionBubble(playerid, "* %s repairs the vehicle.", GetRPName(playerid));

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			IncreaseJobSkill(playerid, JOB_MECHANIC);
		}
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(!PlayerData[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(gettime() - PlayerData[playerid][pLastRefuel] < 20)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only refuel a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerData[playerid][pLastRefuel]));
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be refueled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be refueled.");
	}

	if(vehicleFuel[vehicleid] + 10 >= 100)
	{
		vehicleFuel[vehicleid] = 100;
	}
	else
	{
	    vehicleFuel[vehicleid] += 10;
	}

	PlayerData[playerid][pComponents]--;
	PlayerData[playerid][pLastRefuel] = gettime();

	ShowActionBubble(playerid, "* %s pours some gasoline to the vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_MECHANIC);
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerData[playerid][pDonator] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerData[playerid][pDonator] == 0 && !PlayerData[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle can't be modified with nitrous.");
    }
	if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) != 1010 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1009)) != 1009 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1008)) != 1008)
	{
		if(PlayerData[playerid][pDonator] < 1)
		{
			PlayerData[playerid][pComponents]--;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
	    	SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You added nitrous to this vehicle free of charge.");
		}

		AddVehicleComponent(vehicleid, 1009);

		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		ShowActionBubble(playerid, "* %s attaches a 2x NOS Canister on the engine feed.", GetRPName(playerid));
	}
	else {
	    SendClientMessage(playerid, COLOR_GREY, "This vehicle has nos already");
	}
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerData[playerid][pDonator] != 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerData[playerid][pMechanicSkill] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 2 mechanic to use this command.");
	}
	if(PlayerData[playerid][pDonator] == 0 && !PlayerData[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}

	if(PlayerData[playerid][pDonator] < 1)
	{
		PlayerData[playerid][pComponents]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
    	SendClientMessage(playerid, COLOR_VIP, "Donator Perk: You added hydraulics to this vehicle free of charge.");
	}

	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	ShowActionBubble(playerid, "* %s attaches a set of hydraulics to the vehicle.", GetRPName(playerid));
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be in a tow truck to use this command.");
	}
 	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(PlayerData[playerid][pMechanicSkill] < 3 && !IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 3 mechanic to use this command.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            ShowActionBubble(playerid, "* %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            ShowActionBubble(playerid, "* %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SendClientMessage(playerid, COLOR_GREY, "There is no vehicle in range that you can tow.");
    }
    return 1;
}
stock IsRefuelableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);
	switch (modelid)
	{
		case 481, 509, 510: return 0; // Bikes
	}
	return 1;
}
CMD:stoptow(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	ShowActionBubble(playerid, "* %s lowers their tow hook, detaching it from the vehicle.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid) && GetInsideGarage(playerid) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be at a gas station or inside of a garage.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The fuel tank in this vehicle is already full.");
	}
	if(PlayerData[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}
	if (!IsRefuelableVehicle(vehicleid)) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle does not need fuel.");
	if(PlayerData[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -PlayerData[playerid][pRefuelAmount]);
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
        SendClientMessageEx(playerid, COLOR_AQUA, "* You've refilled your vehicle's gas tank for $%i.", PlayerData[playerid][pRefuelAmount]);

        PlayerData[playerid][pRefuel] = INVALID_VEHICLE_ID;
        PlayerData[playerid][pRefuelAmount] = 0;
	}
	else
	{
		PlayerData[playerid][pRefuel] = vehicleid;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, 0);
		PlayerData[playerid][pRefuelAmount] = 0;

		ShowActionBubble(playerid, "* %s begins to refuel their vehicle's gas tank.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /withdraw [amount] ($%i available)", PlayerData[playerid][pBank]);
	}
	if(amount < 1 || amount > PlayerData[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	PlayerData[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[playerid][pBank], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have withdrawn {00AA00}%s{33CCFF} from your bank account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerData[playerid][pBank]));
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deposit [amount]");
	}
	if(amount < 1 || amount > PlayerData[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerData[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[playerid][pBank], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have deposited {00AA00}%s{33CCFF} into your bank account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerData[playerid][pBank]));
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(PlayerData[playerid][pLevel] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wiretransfer [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or hasn't logged in yet.");
	}
	if(amount < 1 || amount > PlayerData[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't transfer funds to yourself.");
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerData[targetid][pBank] += amount;
	PlayerData[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[playerid][pBank], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bank = %i WHERE uid = %i", PlayerData[targetid][pBank], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have transferred {00AA00}%s{33CCFF} to %s. Your new balance is %s.", FormatNumber(amount), GetRPName(targetid), FormatNumber(PlayerData[playerid][pBank]));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has transferred {00AA00}%s{33CCFF} to your bank account.", GetRPName(playerid), FormatNumber(amount));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), PlayerData[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), PlayerData[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred %s to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "Your bank account balance is $%i.", PlayerData[playerid][pBank]);
	return 1;
}


CMD:rtold(playerid, params[])
{
	return callcmd::rsmsold(playerid, params);
}

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

CMD:rsmsold(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rsms [text]");
	}
	if(PlayerData[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't received a text by anyone since you joined the server.");
	}
    if(PlayerData[PlayerData[playerid][pTextFrom]][pJailType] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
    }
    if(PlayerData[PlayerData[playerid][pTextFrom]][pTogglePhone])
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	PlayerData[PlayerData[playerid][pTextFrom]][pTextFrom] = playerid;
	ShowActionBubble(playerid, "* %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SendClientMessageEx(PlayerData[playerid][pTextFrom], COLOR_YELLOW, "* SMS from %s: %s, Ph: %i *", GetRPName(playerid), params, PlayerData[playerid][pPhone]);
    SendClientMessageEx(playerid, COLOR_YELLOW, "* SMS to %s: %s, Ph: %i *", GetRPName(PlayerData[playerid][pTextFrom]), params, PlayerData[PlayerData[playerid][pTextFrom]][pPhone]);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}

CMD:told(playerid, params[])
{
	return callcmd::smsold(playerid, params);
}

CMD:smsold(playerid, params[])
{
	new number, msg[128];

	if(sscanf(params, "is[128]", number, msg))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sms [number] [message]");
	}
	if(!PlayerData[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerData[playerid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == PlayerData[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pPhone] == number)
	    {
	        if(PlayerData[i][pJailType] > 0)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerData[i][pTogglePhone])
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
			}

			ShowActionBubble(playerid, "* %s takes out his cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SendClientMessageEx(i, COLOR_YELLOW, "* SMS from %s: %.*s..., Ph: %i *", GetRPName(playerid), MAX_SPLIT_LENGTH, msg, PlayerData[playerid][pPhone]);
			    SendClientMessageEx(i, COLOR_YELLOW, "* SMS from %s: ...%s, Ph: %i *", GetRPName(playerid), msg[MAX_SPLIT_LENGTH], PlayerData[playerid][pPhone]);

			    SendClientMessageEx(playerid, COLOR_YELLOW, "* SMS to %s: %.*s..., Ph: %i *", GetRPName(i), MAX_SPLIT_LENGTH, msg, PlayerData[i][pPhone]);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "* SMS to %s: ...%s, Ph: %i *", GetRPName(i), msg[MAX_SPLIT_LENGTH], PlayerData[i][pPhone]);
			}
			else
			{
		        SendClientMessageEx(i, COLOR_YELLOW, "* SMS from %s: %s, Ph: %i *", GetRPName(playerid), msg, PlayerData[playerid][pPhone]);
		        SendClientMessageEx(playerid, COLOR_YELLOW, "* SMS to %s: %s, Ph: %i *", GetRPName(i), msg, PlayerData[i][pPhone]);
			}

			if(PlayerData[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SendClientMessage(i, COLOR_WHITE, "* You can use '/rsms [message]' to reply to this text message.");
			}

			PlayerData[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM "#TABLE_USERS" WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}

CMD:texts(playerid, params[])
{
    if(!PlayerData[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a cellphone and therefore can't use this command.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", PlayerData[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}
CMD:hangup(playerid, params[])
{
	if (!PlayerData[playerid][pCalling])
	{
		return SendErrorMessage(playerid, "There are no calls to hangup.");
	}
	else
	{
		HangupCall(playerid);
		SendInfoMessage(playerid, "You have ended the call.");
	}
	return 1;
}
CMD:phone(playerid, params[])
{
	if (!PlayerData[playerid][pPhone])
		return SendErrorMessage(playerid, "You don't have any phone setup.");

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pMiningTime] > 0 || PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pLootTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use phone at this moment.");
	}
	OpenPhone(playerid);
	ShowActionBubble(playerid, "* %s takes out their phone.", GetRPName(playerid));
	return 1;
}
CMD:answer(playerid, params[])
{
	if (!IsCallIncoming(playerid) && !IsPlayerNearRingingPayphone(playerid))
	{
		return SendErrorMessage(playerid, "There are no incoming calls to answer.");
	}
	else
	{
		new payphone = GetClosestPayphone(playerid);

		if (IsValidPayphoneID(payphone) && Payphones[payphone][phCaller] != INVALID_PLAYER_ID)
		{
			PlayerData[playerid][pCalling] = 2;
			PlayerData[playerid][pCaller] = Payphones[payphone][phCaller];

			PlayerData[Payphones[payphone][phCaller]][pCalling] = 2;
			PlayerData[Payphones[payphone][phCaller]][pCaller] = playerid;

			PlayerPlaySound(Payphones[payphone][phCaller], 20601, 0.0, 0.0, 0.0);
			AssignPayphone(playerid, payphone);

			SendInfoMessage(playerid, "You have answered the call. Use /hangup to hang up.");
			SendInfoMessage(PlayerData[playerid][pCaller], "The other line has picked up the call. Use /hangup to hang up.");
		}
		else
		{
			PlayerData[playerid][pCalling] = 2;
			PlayerData[PlayerData[playerid][pCaller]][pCalling] = 2;

			SendInfoMessage(playerid, "You have answered the call from %s. Use /hangup to hang up.", GetRPName(PlayerData[playerid][pCaller]));
			SendInfoMessage(PlayerData[playerid][pCaller], "The other line has picked up the call. Use /hangup to hang up.");
		}

		SetPlayerCellphoneAction(playerid, true);
		PlayerPlaySound(playerid, 20601, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new nam1[64], payphone = GetClosestPayphone(playerid);

	if (!PlayerData[playerid][pPhone] && payphone == -1)
	{
		return SendErrorMessage(playerid, "You don't have any phone setup.");
	}
	else if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}
	else if (PlayerData[playerid][pTogglePhone] && payphone == -1)
	{
		return SendErrorMessage(playerid, "Your phone is turned off. Use /phone to turn it on.");
	}
	else if (sscanf(params, "s[64]", nam1))
	{
		SendSyntaxMessage(playerid, "/call [number/contact name]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Special numbers: 911, 6324(mechanic), 8294(taxi)");
		return 1;
	}
	else
	{
		if(IsNumeric(nam1) && strval(nam1) > 0)
		{
			new tmpNumber = strval(nam1);
		    CallNumber(playerid, tmpNumber, payphone);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT Contact, Number FROM `rp_contacts` WHERE Contact LIKE '%%%e%%'", nam1);
			mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "d", playerid);
		}
	}
	return 1;
}

forward SendWarningMessage(playerid);
public SendWarningMessage(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	for(new e = 0; e < MAX_FACTIONS; e++)
	{
	    if(FactionInfo[e][fType] == FACTION_POLICE || FactionInfo[e][fType] == FACTION_FEDERAL || FactionInfo[e][fType] == FACTION_ARMY)
	    {
			SendFactionMessage(e, COLOR_YELLOW, "WARNING: A illegal delivering truck has been spoted at %s.", GetZoneName(x, y, z));
		}
	}
	return 1;
}


CMD:tog(playerid, params[])
{
	return callcmd::settings(playerid, params);
}
CMD:toggle(playerid, params[])
{
	return callcmd::settings(playerid, params);
}
RefreshPlayerTextdraws(playerid)
{
	if(!PlayerData[playerid][pToggleTextdraws])
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{

		    TextDrawHideForPlayer(playerid, TimeTD);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][0]);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][4]);
		}
		else
		{
	    	if(PlayerData[playerid][pWatch] && PlayerData[playerid][pWatchOn])
		    {
		        TextDrawShowForPlayer(playerid, TimeTD);
	    	}
		    if(PlayerData[playerid][pGPS] && PlayerData[playerid][pGPSOn])
		    {
	    	    PlayerTextDrawShow(playerid, PlayerData[playerid][pText][0]);
			}
			if(!PlayerData[playerid][pToggleHUD])
			{
	        	PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
	        	PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);
			}
		}
	}
}
CMD:settings(playerid, params[])
{
	if(PlayerData[playerid][pLogged])
	{
		ShowDialogToPlayer(playerid, DIALOG_SETTINGS);
	}
	return 1;
}

/*CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(tog)gle [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang, PM, Points, Turfs");
	    return 1;
	}
	if(!strcmp(params, "textdraws", true))
	{
	    if(!PlayerData[playerid][pToggleTextdraws])
	    {
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][0]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][1]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][2]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][4]);



	        TextDrawHideForPlayer(playerid, TimeTD);

	        PlayerData[playerid][pToggleTextdraws] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	       // if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
	       // {
	          //  PlayerTextDrawShow(playerid, PlayerData[playerid][pText][1]);
	          //  PlayerTextDrawShow(playerid, PlayerData[playerid][pText][2]);
	       // }
	        if(PlayerData[playerid][pGPSOn])
	        {
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][0]);
	        }
	        if(PlayerData[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerData[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);
	        }


	        PlayerData[playerid][pToggleTextdraws] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!PlayerData[playerid][pToggleOOC])
	    {
	        PlayerData[playerid][pToggleOOC] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleOOC] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "points", true))
	{
	    if(!PlayerData[playerid][pTogglePoints])
	    {
	        PlayerData[playerid][pTogglePoints] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Points toggled. You will no longer see any point messages.");
	    }
	    else
	    {
	        PlayerData[playerid][pTogglePoints] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Points enabled. You will now see point messages.");
	    }
	}
	else if(!strcmp(params, "turfs", true))
	{
	    if(!PlayerData[playerid][pToggleTurfs])
	    {
	        PlayerData[playerid][pToggleTurfs] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Turfs toggled. You will no longer see any turf messages.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleTurfs] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Turfs enabled. You will now see turf messages.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerData[playerid][pToggleGlobal])
	    {
	        PlayerData[playerid][pToggleGlobal] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleGlobal] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PlayerData[playerid][pTogglePhone])
	    {
	        if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You can't do this while in a call.");
	        }

	        PlayerData[playerid][pTogglePhone] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        PlayerData[playerid][pTogglePhone] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(!PlayerData[playerid][pToggleWhisper])
	    {
	        PlayerData[playerid][pToggleWhisper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Whispers toggled. You will no longer receive any whispers from players.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleWhisper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Whispers enabled. You will now receive whispers from players again.");
	    }
	}
	else if(!strcmp(params, "pm", true))
	{
	    if(!PlayerData[playerid][pTogglePM])
	    {
	        PlayerData[playerid][pTogglePM] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "PM toggled. You will no longer receive any private message from players.");
	    }
	    else
	    {
	        PlayerData[playerid][pTogglePM] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "PM enabled. You will now receive private message from players again.");
	    }
	}
	else if(!strcmp(params, "bugged", true))
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
			return SendClientMessage(playerid, COLOR_GREY, "You must be a federal agent to use the bug channel.");

	    if(!PlayerData[playerid][pToggleBug])
	    {
	        PlayerData[playerid][pToggleBug] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Bug channel toggled. You will no longer receive any recordings from bugged players.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleBug] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Bug channel enabled. You will now receive recordings from bugged players again.");
		}
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!PlayerData[playerid][pAdmin] && !PlayerData[playerid][pDeveloper] && !PlayerData[playerid][pFormerAdmin])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to toggle this feature.");
		}

	    if(!PlayerData[playerid][pToggleAdmin])
	    {
	        PlayerData[playerid][pToggleAdmin] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleAdmin] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "reports", true))
	{
	    if(PlayerData[playerid][pAdmin] < 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to toggle this feature.");
		}

	    if(!PlayerData[playerid][pToggleReports])
	    {
	        PlayerData[playerid][pToggleReports] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Reports toggled. You will no longer see any incoming reports.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleReports] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Reports enabled. You will now see incoming reports again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!PlayerData[playerid][pHelper])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!PlayerData[playerid][pToggleHelper])
	    {
	        PlayerData[playerid][pToggleHelper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleHelper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerData[playerid][pToggleNewbie])
	    {
	        PlayerData[playerid][pToggleNewbie] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleNewbie] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "walkietalkie", true))
	{
	    if(!PlayerData[playerid][pWalkieTalkie])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
		}

	    if(!PlayerData[playerid][pToggleWT])
	    {
	        PlayerData[playerid][pToggleWT] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie toggled. You will no longer receive any messages on your walkie talkie.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleWT] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie enabled. You will now receive messages on your walkie talkie again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(PlayerData[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!PlayerData[playerid][pToggleRadio])
	    {
	        PlayerData[playerid][pToggleRadio] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleRadio] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!PlayerData[playerid][pToggleMusic])
	    {
	        PlayerData[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleMusic] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!PlayerData[playerid][pDonator])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a donator and therefore cannot toggle this feature.");
		}

	    if(!PlayerData[playerid][pToggleVIP])
	    {
	        PlayerData[playerid][pToggleVIP] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleVIP] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(PlayerData[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!PlayerData[playerid][pToggleFaction])
	    {
	        PlayerData[playerid][pToggleFaction] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleFaction] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(PlayerData[playerid][pGang] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!PlayerData[playerid][pToggleGang])
	    {
	        PlayerData[playerid][pToggleGang] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleGang] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!PlayerData[playerid][pToggleNews])
	    {
	        PlayerData[playerid][pToggleNews] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleNews] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "lands", true))
	{
	    callcmd::lands(playerid, "\1");
	}
	else if(!strcmp(params, "turfs", true))
	{
	    callcmd::turfs(playerid, "\1");
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!PlayerData[playerid][pToggleCam])
	    {
	        PlayerData[playerid][pToggleCam] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
	    }
	    else
	    {
	        PlayerData[playerid][pToggleCam] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!PlayerData[playerid][pToggleHUD])
	    {
	        PlayerData[playerid][pToggleHUD] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerData[playerid][pText][4]);

	    }
	    else
	    {
	        PlayerData[playerid][pToggleHUD] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, PlayerData[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, PlayerData[playerid][pText][4]);
	    }
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(tog)gle [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang");
	}

	return 1;
}*/
CMD:locate(playerid, params[])
{
	if(isnull(params))
	{
	    return ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	}
	else
	{
	    LocateMethod(playerid, params);
	}
	return 1;
}
CMD:findjob(playerid, params[])
{
	return Dialog_Show(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "GPS - Select Destination", "Pizzaman\nCourier\nFisherman\nWeapon Dealer\nMechanic\nMiner\nSweeper\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nThief\nGarbage Man\nFarmer", "Select", "Close");
}
LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_GREY, "Null Error - failed to locate properly - contact a developer.");
	    return 1;
	}
	if(!strcmp(params, "dmv", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1219.2590, -1812.1093, 16.5938, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of DMV.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_DEALERSHIP);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest supermarket to you.");

	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 154.2223, -1946.3030, 5.1920, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the boat dealership.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the aircraft dealership.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1465.1348, -1010.5063, 26.8438, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the bank.");
	}
	else if(!strcmp(params, "paintball", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1286.2870,-1349.8572,13.5689, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of paintball.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1022.5992, -1122.8069, 23.8710, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the casino.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1015.6364, -1550.5270, 14.8594, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the VIP lounge.");
	}
	else if(!strcmp(params, "smuggledrugs", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 52.0937, -292.2513, 1.7001, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the drug smuggling spot.");
	}
	else if(!strcmp(params, "matpickup1", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1421.6913, -1318.4719, 13.5547, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the 1st materials pickup.");
	}
    else if(!strcmp(params, "matpickup2", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2393.4885, -2008.5726, 13.3467, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the 2nd materials pickup.");
	}
	else if(!strcmp(params, "matfactory1", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the 1st materials factory.");
	}
    else if(!strcmp(params, "matfactory2", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the 2nd materials factory.");
	}
	else if(!strcmp(params, "heisenbergs", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -65.0972, -1574.3820, 2.6107, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of Heisenberg's meth cooking trailer.");
	}
	else if(!strcmp(params, "aiportdepot", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2112.3240, -2432.8130, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of LSI Materials Depot.");
	}
	else if(!strcmp(params, "marinadepot", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 714.5344, -1565.1694, 1.7680, 3.0);
        SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of Marina materials depot.");
	}
	else if(!strcmp(params, "pizzaman", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_PIZZAMAN][jobX], jobLocations[JOB_PIZZAMAN][jobY], jobLocations[JOB_PIZZAMAN][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Pizzaman job.");
	}
	else if(!strcmp(params, "courier", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_COURIER][jobX], jobLocations[JOB_COURIER][jobY], jobLocations[JOB_COURIER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Courier job.");
	}
	else if(!strcmp(params, "fisherman", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FISHERMAN][jobX], jobLocations[JOB_FISHERMAN][jobY], jobLocations[JOB_FISHERMAN][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Fisherman job.");
	}
	else if(!strcmp(params, "weapondealer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_WEAPONDEALER][jobX], jobLocations[JOB_WEAPONDEALER][jobY], jobLocations[JOB_WEAPONDEALER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Weapons Dealer job.");
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MECHANIC][jobX], jobLocations[JOB_MECHANIC][jobY], jobLocations[JOB_MECHANIC][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Mechanic job.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Miner job.");
	}
    else if(!strcmp(params, "sweeper", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_SWEEPER][jobX], jobLocations[JOB_SWEEPER][jobY], jobLocations[JOB_SWEEPER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Sweeper job.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Taxi Driver job.");
	}
	else if(!strcmp(params, "drugdealer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DRUGDEALER][jobX], jobLocations[JOB_DRUGDEALER][jobY], jobLocations[JOB_DRUGDEALER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Drug Dealer job.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Lawyer job.");
	}
	else if(!strcmp(params, "detective", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1554.8918, -1675.6486, 16.1953, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Detective job.");
	}
	else if(!strcmp(params, "thief", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1577.1469, -1475.1631, 14.2195, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Thief job.");
	}
	else if(!strcmp(params, "garbageman", true)) //here
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2441.6909, -2115.9131, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Garbage man job.");
	}
	else if(!strcmp(params, "farmer", true))
	{
	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -366.3515, -1412.8286, 25.7266, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the Farmer job.");
	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest supermarket to you.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest gun shop to you.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest clothes shop to you.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest gym to you.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest restaurant to you.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest club/bar to you.");
	}
	else if(!strcmp(params, "toolshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_TOOLSHOP);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There are no businesses of this type to be found.");
	    }

	    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Checkpoint marked at the location of the closest tool shop to you.");
	}

 	else
	{
	    for(new x = 0; x < MAX_LOCATIONS; x++)
		{
			if(!strcmp(params, LocationInfo[x][locName], true))
			{
		    	PlayerData[playerid][pCP] = CHECKPOINT_MISC;
		    	SetPlayerCheckpoint(playerid, LocationInfo[x][locPosX], LocationInfo[x][locPosY], LocationInfo[x][locPosZ], 3.0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "* Checkpoint marked at the location of %s", LocationInfo[x][locName]);
		    	break;
			}
   			if(x == MAX_LOCATIONS - 1)
		    {
      			SendClientMessageEx(playerid, COLOR_SYNTAX, "Unable to locate '%s'. Contact an administrator!", params);
      			break;
		    }
		}
	    /*SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /locate [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Business Types: Supermarket, GunShop, ClothesShop, Gym, Restaurant, AdAgency, Club, ToolShop");
	    SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: DMV, Bank, Paintball, Casino, VIP, Smuggledrugs, MatPickup1, MatPickup2");
		SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: Dealership, AirDealer, BoatDealer, MatFactory1, MatFactory2, Heisenbergs");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: Pizzaman, Courier, Fisherman, WeaponDealer, Mechanic, Miner, Sweeper");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: TaxiDriver, DrugDealer, Lawyer, Detective, Thief");*/

	}
	return 1;
}

CMD:ccp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:kcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:killcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:killcheckpoint(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:cancelcp(playerid, params[])
{
	CancelActiveCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerData[targetid][pAdmin] >= 5 && PlayerData[playerid][pAdmin] < MANAGEMENT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to check that player's AFK status.");
	}

	if(PlayerData[targetid][pAFK])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s has been marked as Away from keyboard for %i minutes.", GetRPName(targetid), PlayerData[targetid][pAFKTime] / 60);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* %s is currently not marked as Away from keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_______ Away from Keyboard _______");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pAdmin] >= MANAGEMENT && PlayerData[playerid][pAdmin] < MANAGEMENT)
	        continue;

	    if(PlayerData[i][pAFK])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Time: %i seconds", i, GetRPName(i), PlayerData[i][pAFKTime]);
		}
	}

	return 1;
}

CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
	    {
			ShowDialogToPlayer(playerid, DIALOG_ATM);
	        return 1;
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
	    ShowDialogToPlayer(playerid, DIALOG_ATM);
     	return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any ATM machines.");
	return 1;
}

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fixplayerid [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SendClientMessage(playerid, COLOR_SYNTAX, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "* Player ID %i has been fixed.", targetid);
	return 1;
}

/*CMD:showrcon(playerid, params[])
{
	if(!PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	new
		rcon_password[128];
	GetServerVarAsString("rcon_password", rcon_password, sizeof(rcon_password));
	SendClientMessageEx(playerid, COLOR_WHITE, "* RCON Password: %s", rcon_password);
	return 1;
}*/

CMD:disablevpn(playerid, params[])
{
	new status;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /disablevpn [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has disabled joining with VPN.", GetRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has enabled joining with VPN.", GetRPName(playerid));
	}

	gDisabledVPN = status;
	return 1;
}



CMD:anticheat(playerid, params[])
{
	new status;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /anticheat [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has enabled the server anticheat.", GetRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has disabled the server anticheat.", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}
CMD:anims(playerid)
{
	return callcmd::animhelp(playerid);
}
CMD:animhelp(playerid)
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "Anims:{C8C8C8} /dance, /wave, /point, /salute, /laugh, /cry, /deal, /sit, /lay, /fall, /handsup.");
	SendClientMessage(playerid, COLOR_SERVERDEF, "Anims:{C8C8C8} /tired, /cower, /crack, /injured, /fishing, /reload, /aim, /bomb, /checktime.");
	SendClientMessage(playerid, COLOR_SERVERDEF, "Anims:{C8C8C8} /dodge, /stop, /scratch, /what, /wash, /come, /hitch, /cpr, /slapass, /drunk.");
	SendClientMessage(playerid, COLOR_SERVERDEF, "Anims: {C8C8C8}/vomit, /fucku, /taichi, /shifty, /smoke, /chat, /lean, /wank, /crossarms.");
	SendClientMessage(playerid, COLOR_SERVERDEF, "Anims:{C8C8C8} /ghands, /rap, /dj, /walk, /fuckme, /bj, /kiss, /piss, /robman, /eat, /stopanim.");
	return 1;
}

CMD:dance(playerid, params[])
{
	new count, animname[32], animlib[32];

	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1..4: SetPlayerSpecialAction(playerid, (SPECIAL_ACTION_DANCE1 + (strval(params) - 1)));
		case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0);
        case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0);
		case 12: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0);
		case 13: ApplyAnimationEx(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 0, 0);
		case 14: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dance [1-14]");
	}

	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
		{
		    GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

			if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
			{
			    count++;
			}
	    }
	}

	if(count >= 5)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
			{
		    	GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

				if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
				{
				    AwardAchievement(i, "Flash mob");
	            }
	        }
		}
	}

	return 1;
}

CMD:wave(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wave [1-3]");
	}

	return 1;
}

CMD:point(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "panic_point", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /point [1-2]");
	}

	return 1;
}

CMD:salute(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:cry(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:deal(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:sit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0);
	    case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 0, 0, 0, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
     	case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0);
       	case 8: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0);
       	case 9: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_Eat1", 4.1, 1, 0, 0, 0, 0);
       	case 10: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sit [1-10]");
	}

	return 1;
}

CMD:camera(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "CAMERA", "camcrch_comeon", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "CAMERA", "camcrch_idleloop", 4.1, 1, 0, 0, 0, 0);
	    case 3: ApplyAnimationEx(playerid, "CAMERA", "camcrch_stay", 4.1, 0, 0, 0, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "CAMERA", "camcrch_to_camstnd", 4.1, 1, 0, 0, 0, 0);
	    case 5: ApplyAnimationEx(playerid, "CAMERA", "camstnd_comeon", 4.1, 0, 0, 0, 1, 0);
     	case 6: ApplyAnimationEx(playerid, "CAMERA", "camstnd_idleloop", 4.1, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimationEx(playerid, "CAMERA", "camstnd_lkabt", 4.1, 1, 0, 0, 0, 0);
       	case 8: ApplyAnimationEx(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 1, 0, 0, 0, 0);
       	case 9: ApplyAnimationEx(playerid, "CAMERA", "piccrch_in", 4.1, 1, 0, 0, 0, 0);
       	case 10: ApplyAnimationEx(playerid, "CAMERA", "piccrch_out", 4.1, 0, 0, 0, 1, 0);
       	case 11: ApplyAnimationEx(playerid, "CAMERA", "piccrch_take", 4.1, 1, 0, 0, 0, 0);
       	case 12: ApplyAnimationEx(playerid, "CAMERA", "picstnd_in", 4.1, 1, 0, 0, 0, 0);
       	case 13: ApplyAnimationEx(playerid, "CAMERA", "picstnd_out", 4.1, 1, 0, 0, 0, 0);
       	case 14: ApplyAnimationEx(playerid, "CAMERA", "picstnd_take", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: {ffffff}/camera [1-14]");
	}

	return 1;
}

CMD:lay(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lay [1-3]");
	}

	return 1;
}

CMD:fall(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0);
	    case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 0);
	    case 6: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fall [1-6]");
	}

	return 1;
}

CMD:handsup(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "SHP_HandsUp_Scr", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:tired(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tired [1-2]");
	}

	return 1;
}

CMD:hide(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cover(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cower(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0);
        case 4: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crack [1-4]");
	}

	return 1;
}

CMD:injured(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /injured [1-2]");
	}

	return 1;
}

CMD:fishing(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:reload(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reload [1-4]");
	}

	return 1;
}

CMD:aim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SHOP", "ROB_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /aim [1-2]");
	}

	return 1;
}

CMD:bomb(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:checktime(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:dodge(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DODGE", "Crush_Jump", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stop(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "endchat_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:scratch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Scratchballs_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:what(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:wash(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:come(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "WUZI", "Wuzi_follow", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Hiker_Pose", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:cpr(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:slapass(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:drunk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:vomit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:fucku(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:taichi(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:shifty(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:smoke(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /smoke [1-2]");
	}

	return 1;
}

CMD:chat(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /chat [1-9]");
	}

	return 1;
}

CMD:lean(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lean [1-2]");
	}

	return 1;
}

CMD:wank(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:traffic(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /traffic [1-2]");
	}

	return 1;
}

CMD:rap(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_B_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_LOOP", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rap [1-3]");
	}

	return 1;
}

CMD:dj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dj [1-4]");
	}

	return 1;
}

CMD:crossarms(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crossarms [1-3]");
	}

	return 1;
}

CMD:ghands(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ghands [1-10]");
	}

	return 1;
}

CMD:walk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "PED", "WALK_shuffle", 4.1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimationEx(playerid, "PED", "WALK_Wuzi", 4.1, 1, 1, 1, 1, 1);
		case 11: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1);
		case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1);
		case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1);
		case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1);
		case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walkpro", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /walk [1-15]");
	}

	return 1;
}

CMD:fuckme(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEW", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEP", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "SNM", "SPANKINGW", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "SNM", "SPANKINGP", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SNM", "SPANKEDW", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SNM", "SPANKEDP", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDW", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDP", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fuckme [1-8]");
	}

	return 1;
}

CMD:bj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 1, 1, 1, 0);
		case 9: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 1, 1, 1, 0);
		case 12: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /bj [1-12]");
	}

	return 1;
}

CMD:kiss(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

    ApplyAnimationEx(playerid, "KISSING", "Playa_Kiss_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:piss(playerid, params[])
{
    if(!PlayerUseAnims(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:robman(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

    ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /eat [1-3]");
	}

	return 1;
}

CMD:stopani(playerid, params[])
{
	return callcmd::stopanim(playerid, params);
}

CMD:stopanim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use this command at this moment.");
	}

    PlayerData[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SendClientMessage(playerid, COLOR_GREY, "Animations cleared.");
    return 1;
}

CMD:gmx(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < MANAGEMENT && !PlayerData[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params)) return SCM(playerid, COLOR_GREY, "USAGE: /gmx [confirm] restart the server");
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gmx [confirm]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command save all player accounts and restarts the server.");

		if(gGMX)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You have already called for a server restart. You can't cancel it.");
		}

		gGMX = 1;

		foreach(new i : Player)
		{
		    if(i != playerid)
		    {
		        if(PlayerData[i][pAdminDuty])
				{
		    	    callcmd::aduty(i, "");
				}
				PlayerData[i][pHurt] = 0;
		    	TogglePlayerControllable(i, 0);
		    	SendClientMessageEx(i, COLOR_AQUA, "* %s has initated a server restart. You have been frozen.", GetRPName(playerid));
			}

			SavePlayerVariables(i);
			GameTextForPlayer(i, "~w~Restarting server...", 100000, 3);
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "* The server will restart once all accounts have been saved.");
	return 1;
}

CMD:changepass(playerid, params[])
{
	Dialog_Show(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "{D3D3D3}Change password", "Please change your password for security purposes\nEnter your new password below:", "Submit", "Cancel");
	return 1;
}

CMD:tokenshop(playerid, params[])
{
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2264.5752,-1721.3241,13.5441))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the Token shop.");
	}
	if(PlayerData[playerid][pHurt] - 40 > 0)
	{
        return SendClientMessageEx(playerid, COLOR_GREY, "You are too hurt to use this command. Please wait %i seconds before trying again.", (PlayerData[playerid][pHurt] - 40));
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

    strcat(string, "\nDiamond\tExchange your 1 diamond for 50 tokens.\t{F7A763}1 diamond{FFFFFF}");
	//strcat(string, "\nShoutout\tBroadcast your message of choice globally.\t{F7A763}3 tokens{FFFFFF}");
	strcat(string, "\nJail Time\tReduce your IC jailtime by 50 percent.\t{00AA00}5 tokens{FFFFFF}");
	strcat(string, "\nRespect\tGives you 4 XP.\t{00AA00}8 tokens{FFFFFF}");
//strcat(string, "\nWeather\tOne time use: change weather globally.\t{F7A763}10 tokens{FFFFFF}");
//	strcat(string, "\nMaterials\tGives you 20000 materials.\t{F7A763}10 tokens{FFFFFF}");
///	strcat(string, "\nWeapons\tGives you a full weapon set.\t{F7A763}10 tokens{FFFFFF}");
	strcat(string, "\nMaterials\tGives you 10000 materials.\t{00AA00}10 tokens{FFFFFF}");
	strcat(string, "\nWeapons\tGives you a full weapon set.\t{00AA00}20 tokens{FFFFFF}");
	strcat(string, "\nNumber\tChoose a phone number of your choice.\t{00AA00}25 tokens{FFFFFF}");
	strcat(string, "\nJob\tChoose a job to 1x level up.\t{00AA00}30 tokens{FFFFFF}");
	strcat(string, "\nDouble XP\tAwards you with 8 hours of double XP.\t{00AA00}40 tokens{FFFFFF}");
	strcat(string, "\nDonator\t1 month Donator subscription\t{00AA00}100 tokens{FFFFFF}");
	strcat(string, "\nVehicle\tFree vehicle ticket under $200k value.\t{00AA00}50 tokens{FFFFFF}");

	format(title, sizeof(title), "{F7A763}Token shop{afafaf} (You have %i tokens.)", PlayerData[playerid][pCookies]);
	Dialog_Show(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");

	return 1;
}


CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64], title[64], count;

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s{FFFFFF}", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }

	        count++;
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot{FFFFFF}", string, i + 1);
		}
	}

	format(title, sizeof(title), "My clothing items (%i/%i slots)", count, MAX_PLAYER_CLOTHING);
	Dialog_Show(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, title, string, "Select", "Cancel");
	return 1;
}
CMD:wat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
}

CMD:dat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}
}
CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.2953, -117.4508, 1035.1719))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the desk in the Licensing department.");
	}
	if(PlayerData[playerid][pCarLicense])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have your drivers license already.");
	}
	if(PlayerData[playerid][pDrivingTest])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already taking your drivers test.");
	}
	if(PlayerData[playerid][pCash] < 400)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need $400 to pay the licensing fee if you pass the test.");
	}

	SendClientMessage(playerid, COLOR_WHITE, "* You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SendClientMessage(playerid, COLOR_WHITE, "* Once you have passed the test, you will receive your license and pay a $500 licensing fee.");

	PlayerData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pDrivingTest] = 1;
	PlayerData[playerid][pTestCP] = 0;
	return 1;
}

CMD:spawncar(playerid, params[])
{
	//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
	//mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_VEHICLES, playerid);
	SendClientMessage(playerid, COLOR_WHITE, "This command was removed. /carstorage if you wish to spawn your car now.");
	return 1;
}
CMD:testdmv(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, carImpounded, carImpoundPrice FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_RELEASECAR, playerid);
	return 1;
}

CMD:carstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, tickets, carImpounded FROM vehicles WHERE ownerid = %i", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:vstorage(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't park this vehicle as it doesn't belong to you.");
	}

	ShowActionBubble(playerid, "* %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
 	SendClientMessageEx(playerid, COLOR_AQUA, "You have parked your {00AA00}%s{33CCFF} which will spawn in this spot from now on.", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't give keys to yourself.");
	}
	if(PlayerData[targetid][pVehicleKeys] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has keys to your vehicle.");
	}

	PlayerData[targetid][pVehicleKeys] = vehicleid;

	ShowActionBubble(playerid, "* %s gives %s the keys to their %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you the keys to their {00AA00}%s{33CCFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s the keys to your {00AA00}%s{33CCFF}.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't take keys from yourself.");
	}
	if(PlayerData[targetid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't have the keys to your vehicle.");
	}

	PlayerData[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	ShowActionBubble(playerid, "* %s takes back the keys to their %s from %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken back the keys to their {00AA00}%s{33CCFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have taken back the keys to your {00AA00}%s{33CCFF} from %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:despawncar(playerid, params[])
{
 	/*new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tModel\tLocation";

 	foreach(new i: Vehicle)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    Dialog_Show(playerid, DIALOG_DESPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to despawn.", string, "Select", "Cancel");
	}*/

	SendClientMessage(playerid, COLOR_WHITE, "This command was removed. /carstorage if you wish to despawn your car now.");
	return 1;
}

CMD:findcar(playerid, params[])
{
    new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tModel\tLocation";

 	foreach(new i: Vehicle)
 	{
 	    if(VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    Dialog_Show(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(!IsAtDealership(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not in range of any dealership");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [trunk | neon | alarm | plate]");
	}

	if(!strcmp(option, "trunk", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [trunk] [confirm]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Your vehicle's trunk level is at %i/3. Upgrading your trunk will cost you $10,000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle's trunk is already at its maximum level.");
		}
		if(PlayerData[playerid][pCash] < 10000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to upgrade your trunk.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		GivePlayerCash(playerid, -10000);
		GameTextForPlayer(playerid, "~r~-$10000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You have paid $10,000 for trunk level %i/3. '/vstash balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) upgraded the trunk of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [neon] [color] (costs $30,000)");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of colors: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(PlayerData[playerid][pCash] < 30000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least $30,000 to upgrade your neon.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't support neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for red neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for blue neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for green neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for yellow neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for pink neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for white neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "alarm", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "* Level 1: Alarm sound effects and notification to owner. {FFD700}($15,000)");
            SendClientMessage(playerid, COLOR_WHITE, "* Level 2: Alarm sound effects and notification to owner and online LEO. {FFD700}($30,000)");
            SendClientMessage(playerid, COLOR_WHITE, "* Level 3: Alarm alarm effects and notification to owner and blip for online LEO. {FFD700}($60,000)");
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [alarm] [level]");
	        return 1;
		}
		if(!(1 <= level <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		switch(level)
		{
		    case 1:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 1)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerData[playerid][pCash] < 15000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -15000);
		        GameTextForPlayer(playerid, "~r~-$15000", 5000, 1);

		        SendClientMessage(playerid, COLOR_GREEN, "You have paid $15,000 to install a level 1 alarm on your vehicle.");
		        Log_Write("log_property", "%s (uid: %i) purchased a level 1 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
            case 2:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 2)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerData[playerid][pCash] < 30000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 2;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 2 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -30000);
		        GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 to install a level 2 alarm on your vehicle.");
				Log_Write("log_property", "%s (uid: %i) purchased a level 1 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
			case 3:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 3)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerData[playerid][pCash] < 60000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 3;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 3 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -60000);
		        GameTextForPlayer(playerid, "~r~-$60000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "You have paid $60,000 to install a level 3 alarm on your vehicle.");
				Log_Write("log_property", "%s (uid: %i) purchased a level 3 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
		}
	}
	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    ShowActionBubble(playerid, "* %s presses a button to activate their neon tubes.", GetRPName(playerid));
	    //SendClientMessage(playerid, COLOR_AQUA, "* Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    ShowActionBubble(playerid, "* %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	    //SendClientMessage(playerid, COLOR_AQUA, "* Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:vstash(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 5; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Stash Balance ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_SERVERDEF, "______ Stash Weapons ______");

            	for(new i = 0; i < 5; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Materials, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %s at its level.", FormatNumber(GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH)));
    			}

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %s in your vehicle stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerData[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %i materials in your vehicle stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [weed] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vWeed] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of weed at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    PlayerData[playerid][pWeed] -= value;
			    VehicleInfo[vehicleid][vWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of weed in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [cocaine] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCocaine] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of cocaine at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerData[playerid][pCocaine] -= value;
			    VehicleInfo[vehicleid][vCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of cocaine in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    PlayerData[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %ig of meth in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerData[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerData[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored %i painkillers in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Law enforcement is prohibited from storing weapons.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_AQUA, "* You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "This vehicle has no more slots available for weapons.");
			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
	    	{
	        	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %s from your vehicle stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerData[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = %i WHERE uid = %i", PlayerData[playerid][pMaterials], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %i materials from your vehicle stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [weed] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerData[playerid][pWeed] += value;
			    VehicleInfo[vehicleid][vWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of weed from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [cocaine] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerData[playerid][pCocaine] += value;
			    VehicleInfo[vehicleid][vCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of cocaine from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerData[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %ig of meth from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerData[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerData[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken %i painkillers from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /vstash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_GREY, "The slot specified contains no weapon which you can take.");
				}
                if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
				}

				GivePlayerWeaponEx(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle of yours.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "* Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "* All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "* Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:gunlicense(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1561.3698,-1674.1140,2110.5364))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the Los Santos Police Department.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This will cost 500$ to start the quiz, want to proceed? use /gunlicense confirm.");
	}

	if(!strcmp(params, "confirm", true))
		{
			GivePlayerCash(playerid, -500);
			Dialog_Show(playerid, DIALOG_GUNQUIZ, DIALOG_STYLE_LIST, "Question 1", "Option 1\nOption 2\nOption 3\nOption 4", "Select", "Cancel");
		}
	return 1;
}

CMD:gunmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vGang] != PlayerData[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to your gang.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gunmod [color | paintjob | mods]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "* Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "* Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "* All vehicle modifications have been removed.");
	}

	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;


	if(sscanf(params, "ii", color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && !PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you, therefore you can't respray it.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pMechanicSkill] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 5 mechanic to paint cars you dont own.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The color specified must range between 0 and 255.");
	}

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(!IsVehicleOwner(playerid, vehicleid))
		{
			return SendClientMessage(playerid, COLOR_GREY, "You are not vehicle owner.");
		}
		if(PlayerData[playerid][pSpraycans] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
		}
		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerData[playerid][pSpraycans]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i spraycans left.", PlayerData[playerid][pSpraycans]);
		ChangeVehicleColor(vehicleid, color1, color2);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    if(PlayerData[playerid][pMechanicSkill] < 5)
	    {
    		if(PlayerData[playerid][pSpraycans] <= 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
			}
			if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
			{
			    VehicleInfo[vehicleid][vColor1] = color1;
			    VehicleInfo[vehicleid][vColor2] = color2;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
			PlayerData[playerid][pSpraycans]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			ShowActionBubble(playerid, "* %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i spraycans left.", PlayerData[playerid][pSpraycans]);
			ChangeVehicleColor(vehicleid, color1, color2);
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			return 1;
		}
		if(PlayerData[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough components for this.");
		}
 		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerData[playerid][pComponents]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s sprays the vehicle to a different color.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i components left.", PlayerData[playerid][pComponents]);
		ChangeVehicleColor(vehicleid, color1, color2);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	    return 1;
	}

	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;

	if(sscanf(params, "i", paintjobid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && !PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you, therefore you can't respray it.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pMechanicSkill] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 5 mechanic to paint cars you dont own.");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(PlayerData[playerid][pSpraycans] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
		}
		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerData[playerid][pSpraycans]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i spraycans left.", PlayerData[playerid][pSpraycans]);
		ChangeVehiclePaintjob(vehicleid, paintjobid);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(PlayerData[playerid][pMechanicSkill] < 5)
		{
			if(PlayerData[playerid][pSpraycans] <= 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
			}
			if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
			{
			    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
			PlayerData[playerid][pSpraycans]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = %i WHERE uid = %i", PlayerData[playerid][pSpraycans], PlayerData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			ShowActionBubble(playerid, "* %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i spraycans left.", PlayerData[playerid][pSpraycans]);
			ChangeVehiclePaintjob(vehicleid, paintjobid);
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			return 1;
		}

		if(PlayerData[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough components for this.");
		}

		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerData[playerid][pComponents]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET components = %i WHERE uid = %i", PlayerData[playerid][pComponents], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s sprays the vehicle to a different color.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "* Vehicle resprayed. You have %i components left.", PlayerData[playerid][pComponents]);
		ChangeVehiclePaintjob(vehicleid, paintjobid);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	    return 1;
	}
	return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}


	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellcar [playerid] [amount]");
	}

	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}
	if(PlayerData[playerid][pCP] == CHECKPOINT_DROPCAR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't sell your vehicle unless you cancel your car delivery. (/killcp)");
	}

	PlayerData[targetid][pCarOffer] = playerid;
	PlayerData[targetid][pCarOffered] = vehicleid;
	PlayerData[targetid][pCarPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you their %s for %s (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s to buy your %s for %s.", GetRPName(targetid), GetVehicleName(vehicleid), FormatNumber(amount));
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti car dealership.");
	}

	new price = percent(GetVehicleValue(vehicleid), 35);

	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmycar [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command permanently deletes your vehicle. You will receive %s back.", FormatNumber(price));
	    return 1;
	}

	GivePlayerCash(playerid, price);

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your %s to the dealership and received %s back.", GetVehicleName(vehicleid), FormatNumber(price));
    Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}

CMD:harvest(playerid, params[])
{
	if(PlayerData[playerid][pJob] != JOB_FARMER && PlayerData[playerid][pSecondJob] != JOB_FARMER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not a Farmer!");
	}
 	if(PlayerData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsAFarmerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		isharvesting[playerid] = 1;
		GameTextForPlayer(playerid, "Proceed to the~n~Checkpoint", 5000, 3);
		SendClientMessage(playerid, COLOR_AQUA, "Follow the checkpoints to harvest the crops.");
		SetPlayerCheckpoint(playerid, -309.0990,-1381.1797,10.7049, 10);
		PlayerData[playerid][pCP] = CHECKPOINT_FARMER;
		Harvesting[playerid] = 1;
 	}
  	else return SendClientMessage(playerid, COLOR_GREY, "FARMER: You must be driving a farming vehicle!");
	return 1;
}

CMD:mine(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Miner.");
	}
	if(PlayerData[playerid][pMiningTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are mining already. Wait until you are done.");
	}
	if(PlayerData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to drop off your current rock first.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the mining area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~w~Mining...", 6000, 3);
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	PlayerData[playerid][pMiningTime] = 6;
	return 1;
}

CMD:startsweeping(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(PlayerData[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are sweeping already. /stopsweeping to stop.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 574)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside a Sweeper.");
	}

	PlayerData[playerid][pSweeping] = 1;
	PlayerData[playerid][pSweepTime] = 30;
	PlayerData[playerid][pSweepEarnings] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "* You are now sweeping. Drive around with your sweeper to earn money towards your paycheck.");
	SendClientMessage(playerid, COLOR_WHITE, "* When you are finished your sweeping shift, use /stopsweeping in order to end your shift.");
	return 1;
}

CMD:stopsweeping(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(!PlayerData[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sweeping right now.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "* You are no longer sweeping. You earned a total of {00AA00}$%i{33CCFF} towards your paycheck during your shift.", PlayerData[playerid][pSweepEarnings]);
    PlayerData[playerid][pSweeping] = 0;
	PlayerData[playerid][pSweepTime] = 0;
	PlayerData[playerid][pSweepEarnings] = 0;
	return 1;
}

CMD:v(playerid, params[])
{
	return callcmd::vip(playerid, params);
}
CMD:viplocker(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You need donator subscription to access this locker.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1826.1705,-1307.7985,1131.7552))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Donator Lounge.");
	}
	else if(PlayerData[playerid][pDonator] > 0)
	{
		Dialog_Show(playerid, DIALOG_BLACKMARKET2, DIALOG_STYLE_LIST, "Donator Locker", "Katana\nDeagle\nMp5\nRifle\nAk47\nM4", "Select", "Cancel");
	}
	return 1;
}
CMD:vip(playerid, params[])
{
	if(!PlayerData[playerid][pDonator] && PlayerData[playerid][pAdmin] > 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(v)ip [vip chat]");
	}
    if(PlayerData[playerid][pToggleVIP])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the donator chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pDonator] > 0 && !PlayerData[i][pToggleVIP] && PlayerData[i][pAdmin] > MODERATOR)
	    {
			SendClientMessageEx(i, COLOR_VIP, "* %s %s: %s *", GetVIPRank(PlayerData[playerid][pDonator]), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:vipcolor(playerid, params[])
{
    if(!PlayerData[playerid][pDonator])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}

	if(!PlayerData[playerid][pVIPColor])
	{
        PlayerData[playerid][pVIPColor] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "* You have enabled the Donator nametag color.");
	}
	else
	{
	    PlayerData[playerid][pVIPColor] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "* You have disabled the Donator nametag color.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!PlayerData[playerid][pDonator])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}
	if((PlayerData[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your donator subscription expires in less than 3 days. You can't do this now.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipinvite [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command grants temporary donator subscription which lasts one hour to a player of your choice.");

	    if(PlayerData[playerid][pVIPCooldown] > gettime()) {
			SendClientMessageEx(playerid, COLOR_SYNTAX, "You can only use this command once every 24 hours. You have %i hours left until you can use it again.", (PlayerData[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SendClientMessage(playerid, COLOR_SYNTAX, "You can only use this command once every 24 hours. You currently have no cooldown for this command.");
		}

		return 1;
	}
	if(PlayerData[playerid][pVIPCooldown] > gettime())
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You have already used this command today. Please wait another %i hours.", (PlayerData[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerData[targetid][pDonator])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has donator subscription.");
	}

	PlayerData[targetid][pDonator] = PlayerData[playerid][pDonator];
	PlayerData[targetid][pVIPTime] = gettime() + 10800;
	PlayerData[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vippackage = %i, viptime = %i WHERE uid = %i", PlayerData[targetid][pDonator], PlayerData[targetid][pVIPTime], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET vipcooldown = %i WHERE uid = %i", PlayerData[playerid][pVIPCooldown], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has given you a temporary three hour {D909D9}%s{33CCFF} donator subscription.", GetRPName(playerid), GetVIPRank(PlayerData[targetid][pDonator]));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have given %s a temporary three hour {D909D9}%s{33CCFF} donator subscription.", GetRPName(targetid), GetVIPRank(PlayerData[targetid][pDonator]));

	Log_Write("log_vip", "%s Donator %s (uid: %i) has given %s (uid: %i) a temporary three hour package.", GetVIPRank(PlayerData[playerid][pDonator]), GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	if(!PlayerData[playerid][pDonator])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "______ Donator Subscription ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Your {D909D9}%s{C8C8C8} subscription expires on %s.", GetVIPRank(PlayerData[playerid][pDonator]), GetDateFromTimestamp(PlayerData[playerid][pVIPTime], 4));

	if(PlayerData[playerid][pVIPCooldown] > gettime())
	{
	    new time = PlayerData[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        SendClientMessageEx(playerid, COLOR_GREY2, "You will be able to use the /vipinvite command again in %i hours.", time / 3600);
		} else {
			SendClientMessageEx(playerid, COLOR_GREY2, "You will be able to use the /vipinvite command again in %i minutes.", time / 60);
	    }
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Your cooldown period for /vipinvite is over and you may use it again.");
	}

	return 1;
}

CMD:vipnumber(playerid, params[])
{
	new number;

	if(!PlayerData[playerid][pDonator])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}
	if(sscanf(params, "i", number))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipnumber [phone number]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command costs $10,000 and changes your phone number to your chosen one.");
	    return 1;
	}
	if(PlayerData[playerid][pCash] < 10000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need at least $10,000 for pay for this.");
	}
	if(number == 0 || number == 911)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Taxi Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setfare [amount]");
	}
	if(!(0 <= amount <= 500))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The fare must range between $0 and $500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in a taxi type vehicle.");
	}
	if(gettime() - PlayerData[playerid][pLastFare] < 50)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerData[playerid][pLastFare]));
	}
	if(amount == 0)
	{
	    if(PlayerData[playerid][pTaxiFare] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The fare is already set to zero.");
	    }

	    PlayerData[playerid][pTaxiFare] = 0;
	    SendClientMessage(playerid, COLOR_YELLOW, "* You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(PlayerData[playerid][pTaxiFare] == amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The fare is already set to this amount.");
	    }
        PlayerData[playerid][pLastFare] = gettime();
	    PlayerData[playerid][pTaxiFare] = amount;
	    SendClientMessageToAllEx(COLOR_YELLOW, "* Taxi driver %s is now on duty, fare: $%i. /call taxi for a ride.", GetRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createfaction [type] [name]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
		return 1;
	}

	if(!strcmp(type, "police", true)) {
	    type_id = FACTION_POLICE;
	} else if(!strcmp(type, "medic", true)) {
	    type_id = FACTION_MEDIC;
	} else if(!strcmp(type, "news", true)) {
	    type_id = FACTION_NEWS;
	} else if(!strcmp(type, "government", true)) {
	    type_id = FACTION_GOVERNMENT;
	} else if(!strcmp(type, "hitman", true)) {
	    type_id = FACTION_HITMAN;
	} else if(!strcmp(type, "federal", true)) {
	    type_id = FACTION_FEDERAL;
	} else if(!strcmp(type, "army", true)) {
		type_id = FACTION_ARMY;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has created a {F7A763}%s{FF6347} faction named '%s'.", GetRPName(playerid), factionTypes[type_id], name);
	        SendClientMessageEx(playerid, COLOR_WHITE, "* This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_GREY, "Faction slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, TurfTokens, Budget");
		return 1;
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the short name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [type] [option]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
			return 1;
		}

		if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "army", true)) {
			type_id = FACTION_ARMY;
		}

		if(type_id == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the type of faction ID %i to %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the {%06x}color{FF6347} of faction ID %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the rank count of faction ID %i to %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Rank Names ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set rank %i's name of faction ID %i to '%s'.", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Faction Skins ______");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}
		if(!(1 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "* You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't set the paychecks for hitman factions.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Rank Paychecks ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}
		if(!(0 <= amount <= 100000))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $0 to $100000.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set rank %i's paycheck of faction ID %i to $%i.", GetRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /switchfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the leader of faction ID %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This option has been removed in favor of the dynamic locker system.");
	    SendClientMessage(playerid, COLOR_WHITE, "Use /dynamichelp for a list of commands related to dynamic lockers.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE || FactionInfo[factionid][fType] != FACTION_FEDERAL || FactionInfo[factionid][fType] != FACTION_ARMY)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the turf tokens of faction ID %i to %i.", GetRPName(playerid), factionid, amount);
	}
	else if(!strcmp(option, "budget", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [budget] [amount (max 100k)]");
		}
		if(amount > 100000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Faction budget cannot be over $100,000!");
		}
		FactionInfo[factionid][fBudget] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET budget = %i WHERE id = %i", FactionInfo[factionid][fBudget], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set %s's faction budget to %i.", GetRPName(playerid), FactionInfo[factionid][fName], amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /purgefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pFaction] == factionid)
	    {
	        SetPlayerFaction(i, -1);
	        SendClientMessageEx(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "No-one", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET leader = 'No-one' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has purged faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	Log_Write("log_faction", "%s (uid: %i) has purged faction %s (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], FactionInfo[factionid][fName], factionid);

	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has deleted faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	Log_Write("log_faction", "%s (uid: %i) has deleted faction %s (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], FactionInfo[factionid][fName], factionid);
	return 1;
}

CMD:switchfaction(playerid, params[])
{
	new targetid, factionid, rankid, leader;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)I(0)", targetid, factionid, rankid, leader))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /switchfaction [playerid] [factionid (-1 = none)] [rank (optional)] [leader (0/1)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(-1 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}

	if(factionid == -1)
	{
        SetPlayerFaction(targetid, -1);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    SetPlayerFaction(targetid, factionid, rankid, leader);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {00AA00}%s{33CCFF} in %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	return 1;
}

CMD:factions(playerid, params[])
{
	new factionlist[300], string[100];

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE faction = %i", i);
	        //mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);

			format(string, sizeof(string), "%s", FactionInfo[i][fName]);
			strcat(factionlist, string);
			strcat(factionlist, "\n");
	    }
	}
	Dialog_Show(playerid, DIALOG_FACTIONS, DIALOG_STYLE_LIST, "{F7A763}Factions", factionlist, "Select", "Close");
	return 1;
}

CMD:setfreq(playerid, params[])
{
	new channel;

	if(!PlayerData[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setfreq [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The channel must range from 0 to 9999999.");
	}

	PlayerData[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET channel = %i WHERE uid = %i", channel, PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "* You have set the channel to 0 and disabled your walkie talkie.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* Channel set to %i, use /wt to broadcast over this channel.", channel);
	}

	return 1;
}

CMD:wt(playerid, params[])
{
    if(!PlayerData[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wt [walkie talkie]");
	}
	if(!PlayerData[playerid][pChannel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your walkie talkie is not tuned into any channel. /channel to set one.");
	}
    if(PlayerData[playerid][pToggleWT])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your walkie talkie as you have it toggled.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use /wt while dead.");
	}
	if(PlayerData[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		if(PlayerData[i][pWalkieTalkie] && PlayerData[i][pChannel] == PlayerData[playerid][pChannel] && !PlayerData[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "* [CH: %i] %s: %.*s... *", PlayerData[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "* [CH: %i] %s: ...%s *", PlayerData[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WALKIETALKIE, "* [CH: %i] %s: %s *", PlayerData[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[WT]: %s", params);
    if(PlayerData[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s says [WT]: %s", GetRPName(playerid), params);
			}
		}
	}
    ShowActionBubble(playerid, "* %s speaks into their walkie talkie.", GetRPName(playerid));
	return 1;
}

CMD:g(playerid, params[])
{
 	new string[64];

 	if(isnull(params))
 	{
     	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /g [global chat]");
	}
	if(!enabledGlobal && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The global channel is disabled at the moment.");
	}
	if(PlayerData[playerid][pGlobalMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(PlayerData[playerid][pToggleGlobal])
 	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the global chat as you have it toggled.");
	}
	if(gettime() - PlayerData[playerid][pLastGlobal] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 3 seconds. Please wait %i more seconds.", 3 - (gettime() - PlayerData[playerid][pLastGlobal]));
	}
	params[0] = toupper(params[0]);
    if((!isnull(PlayerData[playerid][pCustomTitle]) && strcmp(PlayerData[playerid][pCustomTitle], "None", true) != 0) && PlayerData[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerData[playerid][pCustomTColor] == -1 || PlayerData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFA500}", color >>> 8, PlayerData[playerid][pCustomTitle]);
	}
	else if(PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pAdminHide] == 0) {
	  format(string, sizeof(string), "%s{FFA500}", GetAdminRank2(playerid));
	}
	else if(PlayerData[playerid][pFormerAdmin]) {
	    string = "{FF69B5}Former Admin{FFA500}";
	}
	else if(PlayerData[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "{D909D9}%s{FFA500}", GetVIPRank(PlayerData[playerid][pDonator]));
	}
	else if(PlayerData[playerid][pLevel] >= 3) {
	    format(string, sizeof(string), "Level %i Player", PlayerData[playerid][pLevel]);
	}
	else {
	       string = "Newbie";
	}

	foreach(new i : Player)
	{
	  	if(!PlayerData[i][pToggleGlobal])
	  	{
	      	if(strlen(params) > MAX_SPLIT_LENGTH)
	    	{
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %.*s...))", string, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: ...%s ))", string, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
	   		}
	   		else
	   		{
	       		SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %s ))", string, GetRPName(playerid), params);
	   		}
	  	}
 	}

	if(PlayerData[playerid][pAdmin] < MODERATOR)
 	{
 		PlayerData[playerid][pLastGlobal] = gettime();
 	}
 	return 1;
}

CMD:fc(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fc [faction chat]");
	}
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
    if(PlayerData[playerid][pToggleFaction])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the faction chat as you have it toggled.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /fc if you're dead!");
	}
	if(PlayerData[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cant speak in /fc while tied.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && !PlayerData[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %.*s... ))", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: ...%s ))", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
   			{
			    SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %s ))", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:crew(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [crew chat]");
	}
	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerData[playerid][pCrew] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any crew in your gang.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pGang] == PlayerData[playerid][pGang] && PlayerData[i][pCrew] == PlayerData[playerid][pCrew])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: %.*s... *", GangCrews[PlayerData[playerid][pGang]][PlayerData[playerid][pCrew]], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: ...%s *", GangCrews[PlayerData[playerid][pGang]][PlayerData[playerid][pCrew]], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: %s *", GangCrews[PlayerData[playerid][pGang]][PlayerData[playerid][pCrew]], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /div [division chat]");
	}
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerData[playerid][pDivision] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && PlayerData[i][pDivision] == PlayerData[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: %.*s... *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: ...%s *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "* [%s] %s %s: %s *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(r)adio [faction radio]");
	}
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
 	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /r if you're dead!");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /r while tied.");
	}
	foreach(new i : Player)
	{
	    if((PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && !PlayerData[i][pToggleRadio]) || (PlayerData[i][pPoliceScanner] && PlayerData[i][pScannerOn] && IsEmergencyFaction(playerid)))
	    {
	        new color = (FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_OLDSCHOOL);

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    if(PlayerData[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "* %s %s: %.*s... *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "* %s %s: ...%s *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    SendClientMessageEx(i, color, "* [%s] %s %s: %.*s... *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "* [%s] %s %s: ...%s *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
			}
			else
			{
			    if(PlayerData[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "* %s %s: %s *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
				}
				else
				{
				    SendClientMessageEx(i, color, "* [%s] %s %s: %s *", FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
				}
			}

			if((PlayerData[i][pPoliceScanner] && PlayerData[i][pScannerOn]) && random(100) <= 3)
            {
                SendProximityMessage(i, 20.0, COLOR_PURPLE, "* %s's police scanner would shoot a spark and short out.", GetRPName(i));
                SendClientMessage(i, COLOR_GREY2, "Your police scanner shorted out and is now broken.");

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerData[i][pID]);
                mysql_tquery(connectionID, queryBuffer);

            	PlayerData[i][pPoliceScanner] = 0;
            	PlayerData[i][pScannerOn] = 0;
	        }
		}
	}

	SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);

	return 1;
}

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(PlayerData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}

    if(!strcmp(FactionInfo[PlayerData[playerid][pFaction]][fShortName], "None", true))
	{
	    if(PlayerData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerData[playerid][pFaction]][fName], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerData[playerid][pFaction]][fName], FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(PlayerData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerData[playerid][pFaction]][fShortName], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerData[playerid][pFaction]][fShortName], FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_ARMY:
	    {
			foreach(new i : Player)
			{
			    if((PlayerData[i][pPoliceScanner] && PlayerData[i][pScannerOn]) || ((!PlayerData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_ARMY)))
			    {
       				if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			            SendClientMessageEx(i, COLOR_YELLOW, "* %s: %.*s... *", header, MAX_SPLIT_LENGTH, params);
				        SendClientMessageEx(i, COLOR_YELLOW, "* %s: ...%s *", header, params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SendClientMessageEx(i, COLOR_YELLOW, "* %s: %s *", header, params);
					}

					if((PlayerData[i][pPoliceScanner] && PlayerData[i][pScannerOn]) && random(100) <= 3)
		            {
		                SendProximityMessage(i, 20.0, COLOR_PURPLE, "* %s's police scanner would shoot a spark and short out.", GetRPName(i));
		                SendClientMessage(i, COLOR_GREY2, "Your police scanner shorted out and is now broken.");

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerData[i][pID]);
		                mysql_tquery(connectionID, queryBuffer);

		            	PlayerData[i][pPoliceScanner] = 0;
		            	PlayerData[i][pScannerOn] = 0;
					}
				}
			}
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid, params[])
{
	new targetid, option[14], param[128];

	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: MOTD, Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Leadership, Respawncars, Edit");
	    return 1;
	}
	if(!strcmp(option, "motd", true))
	{
        if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessageEx(playerid, COLOR_YELLOW, "* Faction MOTD: %s", FactionInfo[PlayerData[playerid][pFaction]][fMOTD]);
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [motd] [text ('none' to reset)]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "Current MOTD: %s", FactionInfo[PlayerData[playerid][pFaction]][fMOTD]);
		    return 1;
		}

		strcpy(FactionInfo[PlayerData[playerid][pFaction]][fMOTD], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have changed the MOTD for your faction.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET motd = '%e' WHERE id = %i", param, PlayerData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(!strcmp(option, "edit", true))
	{
	    callcmd::factionpay(playerid, "edit");
	}
	else if(!strcmp(option, "invite", true))
	{
		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to invite members to your faction.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pFaction] != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of a faction.");
		}
		if(PlayerData[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		if(PlayerData[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_FEDERAL)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		if(PlayerData[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_NEWS)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		PlayerData[targetid][pFactionOffer] = playerid;
		PlayerData[targetid][pFactionOffered] = PlayerData[playerid][pFaction];

		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has invited you to join {00AA00}%s{33CCFF} (/accept faction).", GetRPName(playerid), FactionInfo[PlayerData[playerid][pFaction]][fName]);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have invited %s to join your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to kick members from your faction.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		/*if(PlayerData[targetid][pFactionRank] > PlayerData[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}*/

		Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], FactionInfo[PlayerData[playerid][pFaction]][fName], PlayerData[playerid][pFaction], FactionRanks[PlayerData[targetid][pFaction]][PlayerData[targetid][pFactionRank]], PlayerData[targetid][pFactionRank]);

		SetPlayerFaction(targetid, -1);
		RemovePlayerFromVehicle(playerid);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetRPName(targetid));
		if(PlayerData[targetid][pSpawnSelect] == 2)
		{
		    PlayerData[targetid][pSpawnSelect] = 0;
		}
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /faction [rank] [playerid] [rankid (0-%i)]", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid >= FactionInfo[PlayerData[playerid][pFaction]][fRankCount])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}
		if(PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		/*if(PlayerData[targetid][pFactionRank] > PlayerData[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}*/

		PlayerData[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET factionrank = %i WHERE uid = %i", rankid, PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your rank to {00AA00}%s{33CCFF} (%i).", GetRPName(playerid), FactionRanks[PlayerData[playerid][pFaction]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's rank to {00AA00}%s{33CCFF} (%i).", GetRPName(targetid), FactionRanks[PlayerData[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], FactionInfo[PlayerData[playerid][pFaction]][fName], PlayerData[playerid][pFaction], FactionRanks[PlayerData[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "leadership", true))
	{
		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [leadership] [playerid]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "This command grants or revokes a fellow faction member's leadership flags.");
		    return 1;
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}

	    if(!PlayerData[targetid][pFactionLeader])
	    {
	        PlayerData[targetid][pFactionLeader] = 1;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s has {00AA00}granted{33CCFF} you the leadership flags to the faction.", GetRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have {00AA00}granted{33CCFF} %s the leadership flags to your faction.", GetRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) granted leadership flags to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
		}
		else
		{
	        PlayerData[targetid][pFactionLeader] = 0;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s has {FF6347}revoked{33CCFF} your leadership flags to the faction.", GetRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have {FF6347}revoked{33CCFF} %s's leadership flags to your faction.", GetRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) revoked leadership flags from %s (uid: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET factionleader = %i WHERE uid = %i", PlayerData[targetid][pFactionLeader], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM "#TABLE_USERS" WHERE faction = %i ORDER BY factionrank DESC", PlayerData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [quit] [confirm]");
	    }

	    SendClientMessageEx(playerid, COLOR_AQUA, "You have quit %s as a {00AA00}%s{33CCFF} (%i).", FactionInfo[PlayerData[playerid][pFaction]][fName], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], PlayerData[playerid][pFactionRank]);
		Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], FactionInfo[PlayerData[playerid][pFaction]][fName], PlayerData[playerid][pFaction], FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], PlayerData[playerid][pFactionRank]);
		SetPlayerFaction(playerid, -1);
		RemovePlayerFromVehicle(playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

  		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM "#TABLE_USERS" WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 2);
		}

		foreach(new i: Vehicle)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[PlayerData[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their faction vehicles.", GetRPName(playerid), playerid);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[PlayerData[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[PlayerData[playerid][pFaction]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "You have created division {FFA763}%s{33CCFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", PlayerData[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_GREY, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerData[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && PlayerData[i][pDivision] == divisionid)
	        {
	            PlayerData[i][pDivision] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{33CCFF} (%i).", FactionDivisions[PlayerData[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[PlayerData[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", PlayerData[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET division = -1 WHERE faction = %i", PlayerData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Divisions List _____");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[PlayerData[playerid][pFaction]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[PlayerData[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerData[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid division ID.");
	    }
	    if(PlayerData[targetid][pDivision] == divisionid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of that division.");
	    }
	    if(PlayerData[targetid][pDivision] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of another division.");
	    }

	    PlayerData[targetid][pDivision] = divisionid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{33CCFF} division.", GetRPName(playerid), FactionDivisions[PlayerData[playerid][pFaction]][divisionid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{33CCFF} division.", GetRPName(targetid), FactionDivisions[PlayerData[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET division = %i WHERE uid = %i", divisionid, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(!PlayerData[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pFaction] != PlayerData[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
	    if(PlayerData[targetid][pDivision] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of any division.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{33CCFF} division.", GetRPName(playerid), FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[targetid][pDivision]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{33CCFF} division.", GetRPName(targetid), FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET division = -1 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerData[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:managecrew(playerid, params[])
{
	new targetid, crewid, option[10], param[32];

	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /managecrew [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [create] [name]");
		}

		for(new i = 0; i < MAX_GANG_CREWS; i ++)
		{
		    if(isnull(GangCrews[PlayerData[playerid][pGang]][i]))
		    {
		        strcpy(GangCrews[PlayerData[playerid][pGang]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "You have created crew {FFA763}%s{33CCFF}. The ID of this crew is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO crews VALUES(%i, %i, '%e')", PlayerData[playerid][pGang], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_GREY, "Your gang can only have up to %i crews.", MAX_GANG_CREWS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "i", crewid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [remove] [crewid]");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerData[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid crew ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerData[i][pGang] == PlayerData[playerid][pGang] && PlayerData[i][pCrew] == crewid)
	        {
	            PlayerData[i][pCrew] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "The crew you were apart of has been deleted by the gang owner.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted crew {F7A763}%s{33CCFF} (%i).", GangCrews[PlayerData[playerid][pGang]][crewid], crewid);
		GangCrews[PlayerData[playerid][pGang]][crewid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM crews WHERE id = %i AND crewid = %i", PlayerData[playerid][pGang], crewid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET crew = -1 WHERE gang = %i", PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Crews List _____");

	    for(new i = 0; i < MAX_GANG_CREWS; i ++)
	    {
	        if(isnull(GangCrews[PlayerData[playerid][pGang]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, GangCrews[PlayerData[playerid][pGang]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, crewid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [assign] [playerid] [crewid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pGang] != PlayerData[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerData[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid crew ID.");
	    }
	    if(PlayerData[targetid][pCrew] == crewid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of that crew.");
	    }
	    if(PlayerData[targetid][pCrew] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of another crew.");
	    }

	    PlayerData[targetid][pCrew] = crewid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{33CCFF} crew.", GetRPName(playerid), GangCrews[PlayerData[playerid][pGang]][crewid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{33CCFF} crew.", GetRPName(targetid), GangCrews[PlayerData[playerid][pGang]][crewid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET crew = %i WHERE uid = %i", crewid, PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pGang] != PlayerData[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
	    if(PlayerData[targetid][pCrew] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of any crew.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{33CCFF} crew.", GetRPName(playerid), GangCrews[PlayerData[playerid][pGang]][PlayerData[targetid][pCrew]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{33CCFF} crew.", GetRPName(targetid), GangCrews[PlayerData[playerid][pGang]][PlayerData[targetid][pCrew]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET crew = -1 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerData[targetid][pCrew] = -1;
	}

	return 1;
}


CMD:cells(playerid, params[])
{
	new status;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_OLDSCHOOL, "* HQ: %s %s has opened all cells in the prison.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
	else
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_OLDSCHOOL, "* HQ: %s %s has closed all cells in the prison.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));

	return 1;
}

CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, cellPositions[i][0], cellPositions[i][1], cellPositions[i][2]))
		{
	        if(!IsLawEnforcement(playerid))
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this cell.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    ShowActionBubble(playerid, "* %s uses their key to open the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    ShowActionBubble(playerid, "* %s uses their key to close the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any prison cells.");
	return 1;
}

CMD:door(playerid, params[])
{
	if(!DoorCheck(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any door which you can open.");
	}

	return 1;
}

CMD:gate(playerid, params[])
{
	if(!GateCheck(playerid))
	{
		//SendClientMessage(playerid, COLOR_GREY, "You are not in range of any gates which you can open.");
	}

	return 1;
}

CMD:locker(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, PlayerData[playerid][pFaction]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any of your faction lockers.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to use the lockers. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        Dialog_Show(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
		}
		case FACTION_MEDIC:
		{
		    Dialog_Show(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    Dialog_Show(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    Dialog_Show(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}

	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showbadge [playerid] [factionid] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't use this faction for your fake badge.");
	    }

	    SendClientMessageEx(targetid, COLOR_WHITE, "* %s is rank %s (%i) in %s. *", GetRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    ShowActionBubble(playerid, "* %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}

	    SendClientMessageEx(targetid, COLOR_WHITE, "* %s is rank %s (%i) in %s. *", GetRPName(playerid), FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], PlayerData[playerid][pFactionRank], FactionInfo[PlayerData[playerid][pFaction]][fName]);
	    ShowActionBubble(playerid, "* %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[])
{
	return callcmd::megaphone(playerid, params);
}

CMD:megaphone(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerData[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to use the megaphone.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s %s:o< %s]", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
	return 1;
}
CMD:hm(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s:o< %s]", GetRPName(playerid), params);
	return 1;
}
CMD:taser(playerid, params[]) return callcmd::tazer(playerid, params);
CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}
    if(PlayerData[playerid][pHurt] && PlayerData[playerid][pTazer] == 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to pull out your tazer. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}
	if(!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
		ShowActionBubble(playerid, "* %s reaches for their tazer.", GetRPName(playerid));
        pTazerReplace{playerid} = PlayerData[playerid][pWeapons][2];
		GivePlayerWeaponEx(playerid, 23);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
	    RemovePlayerWeapon(playerid, 23);
		SetPlayerWeapons(playerid);
        GivePlayerWeaponEx(playerid, pTazerReplace{playerid});
		ShowActionBubble(playerid, "* %s puts their tazer back in their duty belt.", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, PlayerData[playerid][pWeapons][2]);
		}
	}

	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: You have the right to remain silent.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Anything you say can and will be used against you in a court of law.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: You have the right to to an attorney, If you can not afford one, one will be appointed for you.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}
CMD:mir(playerid, params[])
{
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}
CMD:swat(playerid, params[])
{
	if(!PlayerData[playerid][pLogged])return true;

	new factionid = PlayerData[playerid][pFaction];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, factionid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any of your faction lockers.");
	}
	if(!PlayerData[playerid][pDuty])return SendClientMessage(playerid, COLOR_ADM, "ACCESS DENIED:{FFFFFF} You must be on duty before SWATing up.");

	if(PlayerData[playerid][pSWATduty] == true)
	{
	    PlayerData[playerid][pSWATduty] = false;
		SendFactionMessage(factionid, COLOR_FACTIONCHAT, "* HQ: %s %s is now off tactical duty! *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		PlayerData[playerid][pSWATduty] = true;
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
        GivePlayerHealth(playerid, 100);
		SetScriptArmour(playerid, 40);
	}
	else
	{
		SetPlayerSkin(playerid, 285);
		SetScriptArmour(playerid, 200);
		GivePlayerHealth(playerid, 100);
		SendFactionMessage(factionid, COLOR_FACTIONCHAT, "* HQ: %s %s is now ready for tactical duty! *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
		PlayerData[playerid][pSWATduty] = true;
	}
	return true;
}
CMD:cuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't cuff yourself.");
	}
	if(PlayerData[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already handcuffed.");
	}
	if(PlayerData[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't handcuff an injured player.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to cuff anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	new
		bool:canHandcuff;

    if(PlayerData[targetid][pTazedTime] > 0)
		canHandcuff = true;

	if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_HANDSUP)
		canHandcuff = true;

	if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_DUCK)
		canHandcuff = true;

	if(GetPlayerAnimationIndex(targetid) == 1151)
		canHandcuff = true;

	if(GetPlayerAnimationIndex(targetid) == 1150)
		canHandcuff = true;

	if(GetPlayerAnimationIndex(targetid) == 960)
		canHandcuff = true;

	if(GetPlayerAnimationIndex(targetid) == 1701)
		canHandcuff = true;

	if(!canHandcuff)
		return SendClientMessage(playerid, COLOR_ADM, "That player needs to be crouched, have their hands up or be on the floor.");

	PlayerData[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(targetid, 9, 19418,6,-0.031999,0.024000,-0.024000,-7.900000,-32.000011,-72.299987,1.115998,1.322000,1.406000);

	TogglePlayerControllable(targetid, 0);

	ShowActionBubble(playerid, "* %s tightens a pair of handcuffs around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cuffed", 3000, 3);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_TERRORIST && PlayerData[playerid][pAdminDuty] == 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerData[playerid][pAdminDuty] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself.");
	}
	if(!PlayerData[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to uncuff anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	PlayerData[targetid][pCuffed] = 0;
 	PlayerData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);
	RemovePlayerAttachedObject(targetid, 9);
	ShowActionBubble(playerid, "* %s loosens the pair of handcuffs from around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 3);
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drag yourself.");
	}
	if(!PlayerData[targetid][pInjured] && !PlayerData[targetid][pCuffed] && !PlayerData[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured, handcuffed or tied.");
	}
	if(PlayerData[targetid][pInjured] && GetFactionType(playerid) != FACTION_MEDIC)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drag an injured player unless you're a medic.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to drag anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	if(PlayerData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerData[targetid][pDraggedBy] = playerid;
		//TogglePlayerControllable(targetid, 0);
		ShowActionBubble(playerid, "* %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    PlayerData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    //TogglePlayerControllable(targetid, 1);
		ShowActionBubble(playerid, "* %s stops dragging %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && PlayerData[targetid][pCuffed])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't detain yourself.");
	}
	if(!PlayerData[targetid][pCuffed] && !PlayerData[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed or tied.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			PlayerData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			PlayerData[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			ShowActionBubble(playerid, "* %s throws %s into their vehicle.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charge [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't charge yourself.");
	}
	if(PlayerData[targetid][pWantedLevel] >= 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is already at the maximum wanted level (6).");
	}
	if(GetFactionType(targetid) == FACTION_FEDERAL && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_ARMY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in a faction of higher authority and therefore can't be charged.");
	}

	PlayerData[targetid][pWantedLevel]++;
	PlayerData[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerData[targetid][pWantedLevel], PlayerData[targetid][pCrimes], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", PlayerData[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour,minute,second);
	new datum[64], time[64];
	format(time, sizeof(time), "%d:%d:%d", hour, minute, second);
	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
	mysql_real_escape_string(reason, reason);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO `criminals`(`player`, `officer`, `date`, `time`, `crime`, `served`) VALUES ('%s','%s','%e','%s','%s', 0)",
	GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), datum, time, reason);
	mysql_tquery(connectionID, queryBuffer);
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
			SendClientMessageEx(i, COLOR_OLDSCHOOL, "* HQ: %s %s has charged %s with {FF6347}%s{9999FF}. *", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
		}
	}

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "* Officer %s has charged you with %s.", GetRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], reason);
	return 1;
}
CMD:su(playerid, params[])
{
	return callcmd::charge(playerid, params);
}
CMD:bug(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not a federal agent.");
	}
	if(!PlayerData[playerid][pToggleBug])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Enable the bug channel first! (/tog bugged)");
	}
    new
		targetid;

    if(sscanf(params, "u", targetid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bug [playerid]");
	}
    if(PlayerData[targetid][pAdminDuty])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't place bugs on admins.");
	}
	if(PlayerData[targetid][pBugged] == 1)
	{
		PlayerData[targetid][pBugged] = 0;
 		SendClientMessageEx(playerid, COLOR_GREY, "The bug on %s has been disabled.", GetRPName(targetid));
	}
	else if(IsPlayerInRangeOfPlayer(playerid, targetid, 4.0))
	{
		PlayerData[targetid][pBugged] = 1;
    	SendClientMessageEx(playerid, COLOR_GREY ,"You have placed a bug on %s.",GetRPName(targetid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You need to be closer to that person.");
	}
	return 1;
}

CMD:wanted(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && !PlayerHasJob(playerid, JOB_LAWYER))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement or a lawyer.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Wanted Players _____");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pWantedLevel] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Wanted Level: %i", i, GetRPName(i), PlayerData[i][pWantedLevel]);
		}
	}

	return 1;
}

CMD:find(playerid, params[])
{
	new targetid;

    if(!PlayerHasJob(playerid, JOB_DETECTIVE) && GetFactionType(playerid) != FACTION_POLICE &&  GetFactionType(playerid) != FACTION_FEDERAL && GetFactionType(playerid) != FACTION_ARMY)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Detective.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /find [playerid]");
	}
	if(PlayerData[playerid][pDetectiveCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds to use this command again.", PlayerData[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is in an interior. You can't find them at the moment.");
	}
	if(PlayerData[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on an on duty administrator.");
	}
	if(PlayerData[targetid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player's phone is turned off. Therefore you can't find them.");
	}

	switch(GetJobLevel(playerid, JOB_DETECTIVE))
	{
	    case 1:
	    {
	        PlayerData[playerid][pFindTime] = 6;
	        PlayerData[playerid][pDetectiveCooldown] = 120;
		}
		case 2:
	    {
	        PlayerData[playerid][pFindTime] = 8;
	        PlayerData[playerid][pDetectiveCooldown] = 90;
		}
		case 3:
	    {
	        PlayerData[playerid][pFindTime] = 10;
	        PlayerData[playerid][pDetectiveCooldown] = 60;
		}
		case 4:
	    {
	        PlayerData[playerid][pFindTime] = 12;
	        PlayerData[playerid][pDetectiveCooldown] = 30;
		}
		case 5:
	    {
	        PlayerData[playerid][pFindTime] = 14;
	        PlayerData[playerid][pDetectiveCooldown] = 15;
		}
	}

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);

    ShowActionBubble(playerid, "* %s takes out a cellphone and begins to track someone.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "* %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), PlayerData[playerid][pFindTime]);

	IncreaseJobSkill(playerid, JOB_DETECTIVE);
	PlayerData[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
    if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot frisk yourself.");
	}

	if(IsLawEnforcement(playerid))
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    PlayerData[targetid][pFriskOffer] = playerid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "* %s is attempting to frisk you for illegal items. (/accept frisk)", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You have sent a frisk offer to %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /take [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Weed, Cocaine, Meth, Painkillers, CarLicense");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    ShowActionBubble(playerid, "* %s takes away %s's weapons.", GetRPName(playerid), GetRPName(targetid));

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your weapons.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerData[targetid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no weed on them.");
		}

	    ShowActionBubble(playerid, "* %s takes away %s's weed.", GetRPName(playerid), GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of weed.", GetRPName(playerid), PlayerData[targetid][pWeed]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of weed.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pWeed]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[targetid][pWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerData[targetid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no cocaine on them.");
		}

	    ShowActionBubble(playerid, "* %s takes away %s's cocaine.", GetRPName(playerid), GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of cocaine.", GetRPName(playerid), PlayerData[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of cocaine.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pCocaine]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[targetid][pCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerData[targetid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no meth on them.");
		}

	    ShowActionBubble(playerid, "* %s takes away %s's meth.", GetRPName(playerid), GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetRPName(playerid), PlayerData[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerData[targetid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no painkillers on them.");
		}

	    ShowActionBubble(playerid, "* %s takes away %s's painkillers.", GetRPName(playerid), GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetRPName(playerid), PlayerData[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerData[targetid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no driving license on them.");
		}

	    ShowActionBubble(playerid, "* %s takes away %s's drivers license.", GetRPName(playerid), GetRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET carlicense = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerData[targetid][pCarLicense] = 0;
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ticket [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't ticket yourself.");
	}
	if(!(1000 <= amount <= 10000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The ticket amount must range between $1000 and $10000.");
	}

	PlayerData[targetid][pTicketOffer] = playerid;
	PlayerData[targetid][pTicketPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s writes you a %s ticket for %s. (/accept ticket)", GetRPName(playerid), FormatNumber(amount), reason);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered a %s ticket to %s for %s.", FormatNumber(amount), GetRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
 	if(!PlayerData[playerid][pFactionLeader])
 	{
 	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gov [text]");
	}

	switch(FactionInfo[PlayerData[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        if(!PlayerData[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_DOCTOR, "* %s %s: %s", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			PlayerData[playerid][pGovTimer] = 30;
		}
		case FACTION_POLICE:
		{
            if(!PlayerData[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_BLUE, "* %s %s: %s", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			PlayerData[playerid][pGovTimer] = 30;
		}
        case FACTION_GOVERNMENT:
		{
		    if(!PlayerData[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Government News Announcement ____________");

			SendClientMessageToAllEx(COLOR_YELLOW2, "* %s %s: %s", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			PlayerData[playerid][pGovTimer] = 30;
		}
		case FACTION_FEDERAL:
		{
		    if(!PlayerData[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_OLDSCHOOL, "* %s %s: %s", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);
			PlayerData[playerid][pGovTimer] = 30;
		}
		case FACTION_ARMY:
		{
		    if(!PlayerData[playerid][pGovTimer])
	       	 SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_OLDSCHOOL, "* %s %s: %s", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), params);

			PlayerData[playerid][pGovTimer] = 30;
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to use this command.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		ShowActionBubble(playerid, "* %s rams down %s's house door.", GetRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		ShowActionBubble(playerid, "* %s rams down %s's business door.", GetRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		ShowActionBubble(playerid, "* %s rams down %s's garage door.", GetRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deploy [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while being in a vehicle");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_OLDSCHOOL, "* HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_DOCTOR, "* HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}
CMD:undeployall(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(PlayerData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_OLDSCHOOL) : (COLOR_DOCTOR), "* HQ: %s %s has removed all deployed objects.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}
CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(PlayerData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_OLDSCHOOL) : (COLOR_DOCTOR), "* HQ: %s %s has removed a %s in %s.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any deployed objects.");
	return 1;
}

CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot call for backup when you are dead.");
	}
	if(PlayerData[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerData[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(!PlayerData[playerid][pBackup])
	{
        PlayerData[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerData[playerid][pBackup] = 0;
	}


	foreach(new i : Player)
	{
        switch(GetFactionType(i))
		{
            case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY, FACTION_GOVERNMENT:
			{
	    	    if(PlayerData[playerid][pBackup])
	    	    {
	    	        SendClientMessageEx(i, COLOR_OLDSCHOOL, "* HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[PlayerData[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				}
				else
				{
	    	        SendClientMessageEx(i, COLOR_OLDSCHOOL, "* HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
				}
			}
		}
	}

	return 1;
}


CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /clearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't clear yourself.");
	}
	if(!PlayerData[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has no active charges to clear.");
	}

	PlayerData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET wantedlevel = 0 WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	ShowActionBubble(playerid, "* %s calls in dispatch and asks for a warrant removal of %s.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_WHITE, "* Your crimes were cleared by %s.", GetRPName(playerid));
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_OLDSCHOOL, "* HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}
	if(!(1000 <= amount <= 5000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $1000 to $5000.");
	}
	if(VehicleInfo[vehicleid][vTickets] >= 50000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has over $50000 in tickets. You can't add anymore.");
	}

	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ShowActionBubble(playerid, "* %s writes up a %s ticket and attaches it to the %s.", GetRPName(playerid), FormatNumber(amount), GetVehicleName(vehicleid));
	Log_Write("log_faction", "%s (uid: %i) placed a ticket for $%i on %s's (uid: %i) %s (id: %i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	return 1;
}

CMD:siren(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_GREY, "This vehicle cannot have a siren attached to it.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    ShowActionBubble(playerid, "* %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    ShowActionBubble(playerid, "* %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /callsign [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "* Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SendClientMessage(playerid, COLOR_WHITE, "* Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}

    new count;

    for(new i = 0; i < 5; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SendClientMessage(playerid, COLOR_SERVERDEF, "______ Trunk Balance ______");
    SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

	if(count > 0)
	{
		SendClientMessage(playerid, COLOR_SERVERDEF, "______ Trunk Weapons ______");

    	for(new i = 0; i < 5; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	ShowActionBubble(playerid, "* %s prys open the trunk of the %s and takes a look inside.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vtake [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Weed, Cocaine, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;
        VehicleInfo[vehicleid][vWeapons][3] = 0;
        VehicleInfo[vehicleid][vWeapons][4] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0, weapon_4 = 0, weapon_5 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        ShowActionBubble(playerid, "* %s takes the weapons from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessage(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    ShowActionBubble(playerid, "* %s takes the weed from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of weed from the trunk.", VehicleInfo[vehicleid][vWeed]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of weed from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    ShowActionBubble(playerid, "* %s takes the cocaine from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of cocaine from the trunk.", VehicleInfo[vehicleid][vCocaine]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of cocaine from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    ShowActionBubble(playerid, "* %s takes the meth from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    ShowActionBubble(playerid, "* %s takes the painkillers from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't heal yourself.");
	}
	if(PlayerData[targetid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player already has first aid effects.");
	}

	PlayerData[targetid][pReceivingAid] = 1;
	ShowActionBubble(playerid, "* %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SendClientMessageEx(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}

CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerData[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving an ambulance.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        PlayerData[targetid][pVehicleCount] = 0;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			ShowActionBubble(playerid, "* %s places %s on a stretcher in the Ambulance.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}

CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 2000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerData[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured.");
	}

	if(PlayerData[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerData[playerid][pLaborUpgrade]);
	}

    PlayerData[targetid][pInjured] = 0;
	PlayerData[targetid][pDelivered] = 0;
	PlayerData[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773,-2151.7322,13.7483) || IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819,-2166.9712,35.2578) || IsPlayerInRangeOfPoint(playerid, 5.0,  1539.1060,-2167.2058,35.2578))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_FMDHQ);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SendClientMessage(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
    }
	else
	{
		SendClientMessage(targetid, COLOR_DOCTOR, "You have been billed $500 for your stay. You also keep all of your weapons!");
	}

    SetPlayerPos(targetid, -2297.6084,111.1512,-5.3336);//hospitalspawn
	SetPlayerFacingAngle(targetid, 89.7591);
	SetPlayerInterior(targetid, 1);
	SetPlayerVirtualWorld(targetid, PlayerData[targetid][pHospitalType]);
	SetCameraBehindPlayer(targetid);
	ClearAnimations(targetid, 1);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC) || PlayerData[playerid][pHours] > 8)
	{
		GivePlayerCash(targetid, -500);
		GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$500", 5000, 1);
	}

	TogglePlayerControllable(targetid, 1);
	SetPlayerDrunkLevel(targetid, 0);

	SetPlayerHealth(targetid, PlayerData[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, PlayerData[targetid][pSpawnArmor]);
    PlayerData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	GivePlayerCash(playerid, amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned {00AA00}$%i{33CCFF}.", GetRPName(targetid), amount);
	return 1;
}
CMD:listbugs(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a federal agent.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Bugged players:");
	foreach(new i : Player)
	{
		if(PlayerData[i][pBugged])
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Location: %s", GetRPName(i), GetPlayerZoneName(i));
		}
	}
	return 1;
}
CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(PlayerData[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(PlayerData[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(PlayerData[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Location: %s - Medic: %s", GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SendClientMessage(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}
CMD:getpt(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!PlayerData[targetid][pInjured])
		    {
		        SendClientMessage(playerid, COLOR_GREY, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(PlayerData[targetid][pAcceptedEMS]))
			{
				if(PlayerData[targetid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on jailed players.");
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetRPName(playerid), GetRPName(targetid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetRPName(targetid));
				SendClientMessageEx(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				PlayerData[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
                PlayerData[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[])
{
	return callcmd::stretcher(playerid, params);
}
CMD:deliverpt(playerid, params[])
{
	return callcmd::deliverpatient(playerid, params);
}
CMD:movept(playerid, params[])
{
	return callcmd::drag(playerid, params);
}
CMD:injuries(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /news [text]");
	}
	if(PlayerData[playerid][pToggleNews])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't make news broadcasts as you have it toggled.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 582)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use this command from within a news van or news chopper.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerData[i][pToggleNews])
	    {
			SendClientMessageEx(i, COLOR_LIGHTGREEN, "News Reporter %s: %s", GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /live [playerid]");
	}
	if(PlayerData[playerid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(PlayerData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerData[targetid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is banned from live interviews.");
	}
	if(PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is on a phone call at the moment.");
	}

	PlayerData[targetid][pLiveOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you a live interview. (/accept live)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered %s a live interview.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
    if(PlayerData[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not doing a live interview.");
	}

	SendClientMessage(playerid, COLOR_AQUA, "You have ended the live interview.");
	SendClientMessageEx(PlayerData[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetRPName(playerid));

	PlayerData[PlayerData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}

	if(!PlayerData[targetid][pLiveMuted])
	{
		if(PlayerData[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	PlayerData[PlayerData[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	PlayerData[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		PlayerData[targetid][pLiveMuted] = 1;
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    PlayerData[targetid][pLiveMuted] = 0;
		SendClientMessageEx(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settax [rate]");
	}
	if(!(10 <= amount <= 50))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The tax percentage must range from 10 to 50.");
	}

	gTax = amount;
	SaveServerInfo();

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has adjusted the income tax rate to %i percent.", GetRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

	if(!PlayerData[playerid][pFactionLeader] && GetFactionType(playerid) != FACTION_NONE)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a faction leader or part of a faction altogether.");
	}
	if(sscanf(params, "s[5]", "edit"))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /factionpay [edit]");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hitman factions have no federal budget.");
	}

	PlayerData[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:adwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of the news faction.");
	}
    if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /adwithdraw [amount] [reason] ($%i available)", gNewsVault);
	}
	if(amount < 1 || amount > gNewsVault)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	gNewsVault -= amount;
	SaveServerInfo();
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %s from the advertisement vault. The new balance is %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has withdrawn %s from the advertisement vault, reason: %s", GetRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the advertisement vault, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, reason);
	return 1;
}

CMD:addeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of the news faction.");
	}
    if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /addeposit [amount] ($%i available)", gNewsVault);
	}
	if(amount < 1 || amount > PlayerData[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	gNewsVault += amount;
	SaveServerInfo();
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited $%i in the advertisement vault. The new balance is $%i.", amount, gNewsVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the advertisement vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the advertisement vault.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
	return 1;
}


CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
    if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /taxwithdraw [amount] [reason] ($%i available)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have withdrawn %s from the tax vault. The new balance is %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has withdrawn %s from the tax vault, reason: %s", GetRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
    if(PlayerData[playerid][pFactionRank] < FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /taxdeposit [amount] ($%i available)", gVault);
	}
	if(amount < 1 || amount > PlayerData[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have deposited $%i in the tax vault. The new balance is $%i.", amount, gVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the tax vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], amount);
	return 1;
}
CMD:execute(playerid, params[])
{
	if(PlayerData[playerid][pContractTaken])
	{
		if(PlayerData[playerid][pExecute] == 0)
		{
		    PlayerData[playerid][pExecute] = 1;
		}
		else
		{
		    PlayerData[playerid][pExecute] = 0;
		}
	} else SendClientMessage(playerid, COLOR_GREY, "Hey nerd, it wont work, get that fucking hit first!");

	return 1;
}
CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /contract [playerid] [amount] [reason]");
	}
	if(PlayerData[playerid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 5+ to contract players.");
	}
	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are a hitman and therefore can't contract other players.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't contract yourself.");
	}
	if(PlayerData[targetid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only contract level 5+ players.");
	}
	if(!(2500 <= amount <= 500000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $2500 to $500000.");
	}
	if(PlayerData[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerData[targetid][pContracted] + amount > 500000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't have more than $500000 on their head.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SendClientMessageEx(i, COLOR_YELLOW, "* %s has contracted %s for $%i, reason: %s [/contracts]", GetRPName(playerid), GetRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	PlayerData[targetid][pContracted] += amount;
	GetPlayerName(playerid, PlayerData[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET contracted = %i, contractby = '%e' WHERE uid = %i", PlayerData[targetid][pContracted], PlayerData[targetid][pContractBy], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetRPName(targetid), amount, reason);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s placed a contract on %s for $%i, reason: %s", GetRPName(playerid), GetRPName(targetid), amount, reason);
 	Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], amount, reason);
 	return 1;
}
CMD:noknife(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(PlayerData[playerid][pNoKnife])
	{
	    PlayerData[playerid][pNoKnife] = 0;
     	SendClientMessage(playerid, COLOR_AQUA, "You've enabled no knife mode, your armed weapon will never be a knife.");
	}
	else
	{
	    PlayerData[playerid][pNoKnife] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You've disabled no knife mode, your armed weapon can be anything");
	}
	return 1;
}
CMD:hfind(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hfind [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerData[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on an on duty administrator.");
	}

	PlayerData[playerid][pFindTime] = 15;
	PlayerData[playerid][pFindPlayer] = targetid;

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SendClientMessageEx(playerid, COLOR_WHITE, "* %s's location marked on your radar. 15 seconds remain until the marker disappears.", GetRPName(targetid));
	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_______ Pending Contracts _______");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pContracted] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty price: %s | Last contracter: %s", i, GetRPName(i), FormatNumber(PlayerData[i][pContracted]), PlayerData[i][pContractBy]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "* Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been contracted.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has cancelled the contract on %s for $%i.", GetRPName(playerid), GetRPName(targetid), PlayerData[targetid][pContracted]);

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_YELLOW, "* Hitman %s has cancelled the contract on %s for %s. *", GetRPName(playerid), GetRPName(targetid), FormatNumber(PlayerData[targetid][pContracted]));
	}

	PlayerData[targetid][pContracted] = 0;
    strcpy(PlayerData[targetid][pContractBy], "No-one", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET contracted = 0, contractby = 'No-one' WHERE uid = %i", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerData[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been contracted.");
	}
	if(PlayerData[targetid][pCash] + PlayerData[targetid][pBank] < PlayerData[targetid][pContracted] / 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player's total wealth is lower than the contract price. You can't put them in debt.");
	}

	PlayerData[playerid][pContractTaken] = targetid;
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_YELLOW, "* Hitman %s has accepted the contract to kill %s for %s. *", GetRPName(playerid), GetRPName(targetid), FormatNumber(PlayerData[targetid][pContracted]));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the hit. You will receive %s once you have assassinated {00AA00}%s{33CCFF}.", FormatNumber(PlayerData[targetid][pContracted]), GetRPName(targetid));
	return 1;
}

CMD:propose(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2241.9761,-1362.9207,1500.9048))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in church.");
	}
	if(PlayerData[playerid][pCash] < 25000 || PlayerData[targetid][pCash] < 25000)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You both need to have atleast $25,000 to have a wedding.");
	}
	if(PlayerData[playerid][pMarriedTo] != -1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're already married to %s.", PlayerData[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't marry yourself faggot.");
	}
	PlayerData[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $25,000. (/accept marriage)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have sent %s a proposal for marriage.", GetRPName(targetid));
	return 1;
}
CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerData[playerid][pMarriedTo] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't even married.");
	}
	if(PlayerData[playerid][pMarriedTo] != PlayerData[targetid][pID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't married to that person.");
	}
	PlayerData[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has asked you to divorce them (/accept divorce)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have sent %s a request for divorce.", GetRPName(targetid));
	return 1;
}
CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s _____", GetRPName(targetid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Gender: %s", (PlayerData[targetid][pGender] == 2) ? ("Female") : ("Male"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Age: %i years old", PlayerData[targetid][pAge]);

	if(PlayerData[targetid][pFaction] != -1)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[PlayerData[targetid][pFaction]][fName]);
	    SendClientMessageEx(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[PlayerData[targetid][pFaction]][PlayerData[targetid][pFactionRank]], PlayerData[targetid][pFactionRank]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: None");
	}

	if(PlayerData[targetid][pContracted] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Contract: %s", FormatNumber(PlayerData[targetid][pContracted]));
		SendClientMessageEx(playerid, COLOR_GREY2, "Last Contracter: %s", PlayerData[targetid][pContractBy]);
	}

	SendClientMessageEx(playerid, COLOR_GREY2, "Completed Hits: %i", PlayerData[targetid][pCompletedHits]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Failed Hits: %i", PlayerData[targetid][pFailedHits]);
	return 1;
}

CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(PlayerData[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), PlayerData[playerid][pPassportName]);
  		SetScriptSkin(playerid, PlayerData[playerid][pPassportSkin]);
		SendClientMessage(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		PlayerData[playerid][pLevel] = PlayerData[playerid][pPassportLevel];
		PlayerData[playerid][pPhone] = PlayerData[playerid][pPassportPhone];
		PlayerData[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", PlayerData[playerid][pLevel], PlayerData[playerid][pPhone], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your level must range from 1 to 10.");
	}
	if(!(1 <= skinid <= 311))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(PlayerData[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerData[playerid][pBombs])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You don't have any bombs.");
	}
	if(PlayerData[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	PlayerData[playerid][pPlantedBomb] = 1;
	PlayerData[playerid][pBombObject] = CreateDynamicObject(19602, PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	PlayerData[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bombs = %i WHERE uid = %i", PlayerData[playerid][pBombs], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "* Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerData[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(PlayerData[playerid][pBombObject]);

    PlayerData[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerData[playerid][pPlantedBomb] = 0;
	PlayerData[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bombs = %i WHERE uid = %i", PlayerData[playerid][pBombs], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "* You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!PlayerData[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your planted bomb.");
	}

	CreateExplosion(PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(PlayerData[playerid][pBombObject]);

	if(PlayerData[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(PlayerData[playerid][pContractTaken], 10.0, PlayerData[playerid][pBombX], PlayerData[playerid][pBombY], PlayerData[playerid][pBombZ]))
	{
	    SetPlayerHealth(PlayerData[playerid][pContractTaken], 0.0);
	    HandleContract(PlayerData[playerid][pContractTaken], playerid);
	}

    PlayerData[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerData[playerid][pPlantedBomb] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "* You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has saved all player accounts.", GetRPName(playerid));
	return 1;
}

CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no boombox in range.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "You have destroyed {00AA00}%s{33CCFF}'s boombox.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the bank robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}

CMD:resetrobbery(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	ResetRobbery();
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the active bank robbery.", GetRPName(playerid));
	return 1;
}

CMD:addtorobbery(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /addtorobbery [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!RobberyInfo[rPlanning] && !RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no bank robbery in progress.");
	}
    if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "There can't be more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
 	if(IsPlayerInBankRobbery(targetid))
 	{
 	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in the bank robbery.");
   	}

 	AddToBankRobbery(targetid);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has added %s to the bank robbery.", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has added you to the bank robbery.", GetRPName(playerid));
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced a payday for %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a, plate[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);
	format(plate, 32, "%c%c%c %i", Random('A', 'Z'), Random('A', 'Z'), Random('A', 'Z'), Random(100, 999));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, plate, color1, color2, carImpounded) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', '%s', %i, %i, '0')", PlayerData[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, mysql_escaped(plate), color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you your own {00AA00}%s{33CCFF}. /carstorage to spawn it.", GetRPName(playerid), vehicleNames[modelid - 400]);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s their own {00AA00}%s{33CCFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(hours < 1 && PlayerData[targetid][pDoubleXP] - hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't have under 0 hours of double XP.");
	}

	PlayerData[targetid][pDoubleXP] += hours;

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has given %i hours of double XP to %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET doublexp = %i WHERE uid = %i", PlayerData[targetid][pDoubleXP], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has started a random fire in %s.", GetRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SendClientMessage(playerid, COLOR_GREY, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		PlayerData[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SendClientMessageEx(i, COLOR_DOCTOR, "* All units, a fire has been reported in %s. Please head to the beacon on your map. *", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SendClientMessage(playerid, COLOR_GREY, "Fire created!");
		}
	}

	SendClientMessageEx(playerid, COLOR_GREY, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:numberold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /number [playerid]");
	}
	if(!PlayerData[playerid][pPhonebook])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

    ShowActionBubble(playerid, "* %s takes out a cellphone and looks up a number.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Name: %s, Ph: %i", GetRPName(targetid), PlayerData[targetid][pPhone]);
	return 1;
}

/*CMD:phonebook(playerid, params[])
{
	new option[10], param[32];

	if(!PlayerData[playerid][pPhonebook])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a phonebook.");
	}

	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(GetFactionType(playerid) == FACTION_NEWS)
		{
 			SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /phonebook [view | add | remove]");
		}
		else
		{
      		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /phonebook [view]");
			SendClientMessage(playerid, COLOR_GREY3, "Want your number shown in the phonebook? Ask the news team to add it to the directory.");
		}
	    return 1;
	}

	if(!strcmp(option, "view", true))
	{
	    PlayerData[playerid][pPage] = 1;
	    ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
	}
	else if(!strcmp(option, "add", true))
	{
	    new number, name[24];

	    if(GetFactionType(playerid) != FACTION_NEWS)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a news reporter.");
		}
	    if(sscanf(param, "is[24]", number, name))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /phonebook [add] [number] [name]");
		}
		if(number == 0 || number == 911)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT number FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAddToPhonebook", "iis", playerid, number, name);
	}
	else if(!strcmp(option, "remove", true))
	{
	    new number;

    	if(GetFactionType(playerid) != FACTION_NEWS)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a news reporter.");
		}
	    if(sscanf(param, "i", number))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /phonebook [remove] [number]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerRemoveFromPhonebook", "ii", playerid, number);
	}

	return 1;
}*/

CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!PlayerData[playerid][pBoombox])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /boombox [place | pickup | play]");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(PlayerData[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "{FFFF00}Boombox placed by:\n{FF0000}%s{FFFF00}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    PlayerData[playerid][pBoomboxPlaced] = 1;
    	PlayerData[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	PlayerData[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        PlayerData[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		ShowActionBubble(playerid, "* %s places a boombox on the ground.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!PlayerData[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerData[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your boombox.");
		}

		ShowActionBubble(playerid, "* %s picks up their boombox and switches it off.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!PlayerData[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerData[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your boombox.");
		}

    	PlayerData[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:switchspeedo(playerid, params[])
{
	if(!strcmp(params, "kmh", true))
	{
		PlayerData[playerid][pSpeedometer] = 1;
		SendClientMessage(playerid, COLOR_AQUA, "Your speedometer will now display speed as {00AA00}Kilometers per hour{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		PlayerData[playerid][pSpeedometer] = 2;
		SendClientMessage(playerid, COLOR_AQUA, "Your speedometer will now display speed as {00AA00}Miles per hour{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /switchspeedo [kmh/mph]");
	}

	return 1;
}
CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type. Valid types range from 1 to 6.");
	}

	PlayerData[targetid][pShakeOffer] = playerid;
	PlayerData[targetid][pShakeType] = type;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has offered to shake your hand. (/accept handshake)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have sent %s a handshake offer.", GetRPName(targetid));
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be onfoot in order to drop weapons.");
	}
	if(!weaponid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be holding the weapon you're willing to drop.");
	}
	if(PlayerData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell this weapon as you don't have it.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(GetPlayerHealthEx(playerid) < 60)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
 	SetTimerEx("DestroyWeapon", 300000, false, "i", objectid);
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerData[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);



	ShowActionBubble(playerid, "* %s drops their %s on the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have dropped your {00AA00}%s{33CCFF}.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be onfoot in order to pickup weapons.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(PlayerData[playerid][pHours] < 2 || PlayerData[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && PlayerData[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This weapon belongs to a specific faction. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);

	    GivePlayerWeaponEx(playerid, weaponid);
	    DestroyDynamicObject(i);

	    ShowActionBubble(playerid, "* %s picks up a %s from the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have picked up a {00AA00}%s{33CCFF}.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any dropped weapons.");
	return 1;
}

CMD:createland(playerid, params[])
{
	new price;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createland [price]");
	}
	if(price < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create lands indoors.");
	}

	PlayerData[playerid][pLandCost] = price;
	PlayerData[playerid][pZoneType] = ZONETYPE_LAND;
	Dialog_Show(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin land creation.", "Confirm", "Cancel");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pZoneCreation])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating any land or turf at the moment.");
	}

    if(PlayerData[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerData[playerid][pMinX], y, z);
        PlayerData[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, PlayerData[playerid][pMinX], y, z, .playerid = playerid);
		SendClientMessage(playerid, COLOR_WHITE, "* Boundary 1/4 set (min X).");
	}
	else if(PlayerData[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerData[playerid][pMinY], z);
        PlayerData[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, PlayerData[playerid][pMinY], z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "* Boundary 2/4 set (min Y).");
	}
	else if(PlayerData[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerData[playerid][pMaxX], y, z);
        PlayerData[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, PlayerData[playerid][pMaxX], y, z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "* Boundary 3/4 set (max X).");
	}
	else if(PlayerData[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerData[playerid][pMaxY], z);
        SendClientMessage(playerid, COLOR_WHITE, "* Boundary 4/4 set (max Y).");

        PlayerData[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, PlayerData[playerid][pMaxY], z, .playerid = playerid);
        PlayerData[playerid][pZoneID] = GangZoneCreate(PlayerData[playerid][pMinX], PlayerData[playerid][pMinY], PlayerData[playerid][pMaxX], PlayerData[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, PlayerData[playerid][pZoneID], 0x33CC33FF);

        if(PlayerData[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        Dialog_Show(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(PlayerData[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        Dialog_Show(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerData[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "* Land creation cancelled.");
	return 1;
}

CMD:gotoland(playerid, params[])
{
	new landid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotoland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removelandobjects(playerid, params[])
{
	new landid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelandobjects [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	RemoveAllLandObjects(landid);
    SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed all land objects for land %i.", landid);
	return 1;
}

CMD:removeland(playerid, params[])
{
	new landid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	RemoveAllLandObjects(landid);

	GangZoneDestroy(LandInfo[landid][lGangZone]);
	DestroyDynamicArea(LandInfo[landid][lArea]);
	DestroyDynamic3DTextLabel(LandInfo[landid][lTextdraw]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM lands WHERE id = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LandInfo[landid][lID] = 0;
	LandInfo[landid][lExists] = 0;
	LandInfo[landid][lOwnerID] = 0;
	Iter_Remove(Land, landid);
    SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed land %i.", landid);

	Log_Write("log_land", "%s (uid: %i) has removed land (id: %i) land owner (%i).", GetRPName(playerid), PlayerData[playerid][pID], landid, PlayerData[LandInfo[landid][lOwner]][pID]);
	return 1;
}

CMD:buyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands.");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "This land is already owned.");
	}
    if(strcmp(params, "confirm", true))
    {
        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /buyland [confirm] (This land costs %s.)", FormatNumber(LandInfo[landid][lPrice]));
	}
	if(PlayerData[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this land.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s for this land! /landhelp to see the available commands for your land.", FormatNumber(LandInfo[landid][lPrice]));
	Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}

CMD:sellland(playerid, params[])
{
	new landid = GetNearbyLand(playerid), targetid, amount;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
    if(sscanf(params, "ui", targetid, amount))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellland [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerData[targetid][pLandOffer] = playerid;
	PlayerData[targetid][pLandOffered] = landid;
	PlayerData[targetid][pLandPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s offered you to buy their land for %s. (/accept land)", GetRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You offered %s to buy your land for %s.", GetRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmyland [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your land back to the state. You will receive %s back.", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your land to the state and received %s back.", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:landinfo(playerid, params[])
{
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "* This land is currently not owned and is for sale, price: {00AA00}$%i{FFFFFF}.", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* This land is owned by %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}
CMD:landperms(playerid, params[])
{
    new targetid, landid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, landid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /landperms [playerid] [landid (-1 to remove)]");
	}
	if(MAX_LANDS > landid > -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you temporary access to land #%i's keys.", GetRPName(playerid), landid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have given temporary %s access to %i.", GetRPName(targetid), landid);
		PlayerData[targetid][pLandPerms] = landid;
	}
	else if(landid == -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken away your temporary land keys.", GetRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have taken %s's temporary land access.", GetRPName(targetid));
		PlayerData[targetid][pLandPerms] = -1;
	}
	return 1;
}
CMD:droplandkeys(playerid, params[])
{
    if(PlayerData[playerid][pLandPerms] > -1)
    {
        SendClientMessageEx(playerid, COLOR_AQUA, "You have dropped land %i's keys.", PlayerData[playerid][pLandPerms]);
        PlayerData[playerid][pLandPerms] = -1;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET landkeys = -1 WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You don't have keys to a land.");
	}
	return 1;
}

CMD:land(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!PlayerData[playerid][pMP3Player])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have an MP3 player.");
	}

	PlayerData[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in any vehicle.");
	}

	PlayerData[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}


CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 636.2432,-108.6183,-78.9141))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerData[playerid][pCash] < PlayerData[playerid][pLevel] * 7500)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need at least %s to change your name at your level.", FormatNumber(PlayerData[playerid][pLevel] * 7500));
	}
	if(PlayerData[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't allowed to change your name while on admin duty,");
	}
	if(!isnull(PlayerData[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already requested a namechange. Please wait for a response.");
	}

    PlayerData[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM "#TABLE_USERS" WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /acceptname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	/*if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}*/
	if(isnull(PlayerData[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested a namechange.");
	}
	if(PlayerData[targetid][pFreeNamechange] == 0 && PlayerData[targetid][pCash] < PlayerData[targetid][pLevel] * 7500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't afford the namechange.");
	}

	new cost = PlayerData[targetid][pLevel] * 7500;

	if(PlayerData[targetid][pFreeNamechange])
	{
	    if(PlayerData[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_HITMAN || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, PlayerData[targetid][pPassportName], MAX_PLAYER_NAME);

	        PlayerData[targetid][pPassport] = 1;
	        PlayerData[targetid][pPassportLevel] = PlayerData[targetid][pLevel];
	        PlayerData[targetid][pPassportSkin] = PlayerData[targetid][pSkin];
	        PlayerData[targetid][pPassportPhone] = PlayerData[targetid][pPhone];
			PlayerData[targetid][pLevel] = PlayerData[targetid][pChosenLevel];
			PlayerData[targetid][pSkin] = PlayerData[targetid][pChosenSkin];
			PlayerData[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, PlayerData[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange], PlayerData[targetid][pLevel], PlayerData[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", PlayerData[targetid][pLevel], PlayerData[targetid][pSkin], PlayerData[targetid][pPhone], PlayerData[targetid][pPassportName], PlayerData[targetid][pPassportLevel], PlayerData[targetid][pPassportSkin], PlayerData[targetid][pPassportPhone], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange]);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has accepted %s's free namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerData[targetid][pNameChange]);
		SendClientMessageEx(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", PlayerData[targetid][pNameChange]);
		if(!IsPlayerLoggedIn(targetid))
		{
		    #if defined SERVER_INTRO
      			ShowServerIntro(targetid);
			#else
  				ShowDialogToPlayer(targetid, DIALOG_REGISTER);
			#endif
		}
		if(PlayerData[targetid][pFreeNamechange] == 2)
		{
		    SendClientMessage(targetid, COLOR_WHITE, "* You can use /passport again to return to your old name and stats.");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange], cost);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has accepted %s's namechange to %s for %s.", GetRPName(playerid), GetRPName(targetid), PlayerData[targetid][pNameChange], FormatNumber(cost));
		SendClientMessageEx(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", PlayerData[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
        AddToTaxVault(cost);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_namehistory VALUES(null, %i, '%s', '%s', '%s', NOW())", PlayerData[targetid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pNameChange], GetPlayerNameEx(playerid));
	mysql_tquery(connectionID, queryBuffer);

	Namechange(targetid, GetPlayerNameEx(targetid), PlayerData[targetid][pNameChange]);
	PlayerData[targetid][pNameChange] = 0;
	PlayerData[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	/*if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}*/
	if(isnull(PlayerData[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested a namechange.");
	}

	if(PlayerData[targetid][pFreeNamechange] == 1)
	{
	    if(!IsPlayerLoggedIn(targetid))
		{
            SendClientMessage(targetid, COLOR_LIGHTRED, "Please reconnect with a proper roleplay name in the Firstname_Lastname format.");
			KickPlayer(targetid);
			return 1;
		}
	    Dialog_Show(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], PlayerData[targetid][pNameChange]);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has denied %s's namechange to %s.", GetRPName(playerid), GetRPName(targetid), PlayerData[targetid][pNameChange]);
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", PlayerData[targetid][pNameChange]);
	PlayerData[targetid][pNameChange] = 0;
	PlayerData[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < MODERATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "______ Pending Namechanges ______");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerData[i][pNameChange]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s requested a namechange to %s", i, GetRPName(i), PlayerData[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1186.8889,-1795.3860,13.5703))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the desk at city hall.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > PlayerData[playerid][pCash])
	{
		return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have paid %s in unpaid tickets. This vehicle now has %s left in unpaid tickets.", FormatNumber(amount), FormatNumber(VehicleInfo[vehicleid][vTickets]));
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}

	new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	SendClientMessageEx(playerid, COLOR_SERVERDEF, "_______ %s Stats _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Owner: %s - Value: $%i - Tickets: $%i - License Plate: ", VehicleInfo[vehicleid][vOwner], GetVehicleValue(vehicleid), VehicleInfo[vehicleid][vTickets]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Trunk Level: %i/3 - Alarm Level: %i/3 - Health: %.1f - Fuel: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	return 1;
}

CMD:smuggle(playerid, params[])
{
	return callcmd::smuggledrugs(playerid, params);
}
CMD:loadpack(playerid, params[])
{
	if(PlayerData[playerid][pSmuggleDrugs] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any drug pack to load.");
	}
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no boot.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
		return SendClientMessage(playerid, COLOR_GREY, "The vehicle trunk is not open");
	}
	switch(PlayerData[playerid][pSmuggleDrugs])
	{
	    case 1:
	    {
 			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
		    PlayerData[playerid][pSmuggleTime] = gettime();
		    PlayerData[playerid][pCP] = CHECKPOINT_DRUGS;
	        SetTimerEx("DrugDeliveryDetect", 8000, 0, "i", playerid);
		    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
		    SendClientMessage(playerid, COLOR_GREEN, "Item loaded, deliver it to your marker!");
	    }
	    case 2:
	    {
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
		    PlayerData[playerid][pSmuggleTime] = gettime();
		    PlayerData[playerid][pCP] = CHECKPOINT_DRUGS;
	        SetTimerEx("DrugDeliveryDetect", 8000, 0, "i", playerid);
		    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
	    }
	    case 3:
	    {
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);
		    PlayerData[playerid][pSmuggleTime] = gettime();
		    PlayerData[playerid][pCP] = CHECKPOINT_DRUGS;
	        SetTimerEx("DrugDeliveryDetect", 8000, 0, "i", playerid);
		    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    }
	}
	return 1;
}
CMD:smuggledrugs(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 52.0937, -292.2513, 1.7001))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the smuggle point.");
	}
	if(PlayerData[playerid][pCash] < 500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
	}
	if(PlayerData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /smuggledrugs [seeds | cocaine | ephedrine]");
	}
	new amount = 500 / GetJobLevel(playerid, JOB_DRUGDEALER);
	if(!strcmp(params, "seeds", true))
	{
	    if(gSeedsStock + 10 > 1000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The drug house can't hold anymore seeds. Therefore you can't smuggle them.");
	    }
 		SetPlayerAttachedObject(playerid, 9, 1578, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    PlayerData[playerid][pSmuggleDrugs] = 1;
	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $%i for a package of {00AA00}marijuana seeds{33CCFF}. Load it to your vehicle's trunk (/loadpack).", amount);
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    if(gCocaineStock + 10 > 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The crack house can't hold anymore cocaine. Therefore you can't smuggle it.");
	    }
		SetPlayerAttachedObject(playerid, 9, 1575, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    PlayerData[playerid][pSmuggleDrugs] = 2;
	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $%i for a package of {00AA00}cocaine{33CCFF}. Load it to your vehicle's trunk (/loadpack).", amount);
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    if(gEphedrineStock + 10 > 250)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The drug house can't hold anymore ephedrine. Therefore you can't smuggle ir.");
	    }
		SetPlayerAttachedObject(playerid, 9, 1576, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    PlayerData[playerid][pSmuggleDrugs] = 3;
	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $5i for a package of {00AA00}raw ephedrine{33CCFF}. Load it to your vehicle's trunk (/loadpack).", amount);
	}
	return 1;
}
func DrugDeliveryDetect(playerid)
{

	new Float:x, Float:y, Float:z, zone[26];
	GetPlayerPos(playerid, x, y, z);
	strcpy(zone, GetZoneName(x, y, z));
	foreach(new a : Player)
	{
	    if(FactionInfo[a][fType] == FACTION_POLICE || FactionInfo[a][fType] == FACTION_FEDERAL || FactionInfo[a][fType] == FACTION_ARMY)
	    {
			SendFactionMessage(a, COLOR_YELLOW, "HQ: CamDetect: A drug delivery has been spoted at %s, please send a unit immediately!", zone);
		}
	}
	return 1;
}
CMD:buydrug(playerid, params[])
{
	new option[10], amount, cost;

	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buydrug [seeds | cocaine | ephedrine] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.8347, 1117.1797, 1083.8828))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There aren't that many seeds left in stock.");
		}
		if(PlayerData[playerid][pCash] < (cost = amount * 500))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many seeds.");
		}
		if(PlayerData[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		PlayerData[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i WHERE uid = %i", PlayerData[playerid][pSeeds], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for {00AA00}$%i{33CCFF}. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 323.7289, 1117.4187, 1083.8828))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much ephedrine left in stock.");
		}
		if(PlayerData[playerid][pCash] < (cost = amount * 1000))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many grams.");
		}
		if(PlayerData[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		PlayerData[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = %i WHERE uid = %i", PlayerData[playerid][pEphedrine], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for {00AA00}$%i{33CCFF}.", amount, cost);
	}
	else if(!strcmp(option, "cocaine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2342.7766, -1187.0839, 1027.9766))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCocaineStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much cocaine left in stock.");
		}
		if(PlayerData[playerid][pCash] < (cost = amount * 750))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many grams.");
		}
		if(PlayerData[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
		}

		gCocaineStock -= amount;
		PlayerData[playerid][pCocaine] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i grams of cocaine for {00AA00}$%i{33CCFF}.", amount, cost);
	}

	return 1;
}

CMD:plantweed(playerid, params[])
{
	if(PlayerData[playerid][pWeedPlanted] == 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have 1 active weed plant already.");
	}
	if(PlayerData[playerid][pSeeds] < 10)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, PlayerData[playerid][pWeedX], PlayerData[playerid][pWeedY], PlayerData[playerid][pWeedZ]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pWeedA]);

	PlayerData[playerid][pSeeds] -= 10;
	PlayerData[playerid][pWeedPlanted] = 1;
	PlayerData[playerid][pWeedTime] = 60;
	PlayerData[playerid][pWeedGrams] = 0;
	PlayerData[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerData[playerid][pWeedX], PlayerData[playerid][pWeedY], PlayerData[playerid][pWeedZ] - 1.8, 0.0, 0.0, PlayerData[playerid][pWeedA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = %i, weedplanted = 1, weedtime = %i, weedgrams = %i, weed_x = '%f', weed_y = '%f', weed_z = '%f', weed_a = '%f' WHERE uid = %i", PlayerData[playerid][pSeeds], PlayerData[playerid][pWeedTime], PlayerData[playerid][pWeedGrams], PlayerData[playerid][pWeedX], PlayerData[playerid][pWeedY], PlayerData[playerid][pWeedZ], PlayerData[playerid][pWeedA], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	ShowActionBubble(playerid, "* %s plants some seeds into the ground.", GetRPName(playerid));
	SendClientMessage(playerid, COLOR_GREEN, "You have planted a weed plant. Every two minutes your plant will grow one gram of weed.");
	SendClientMessage(playerid, COLOR_GREEN, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	foreach(new i : Player)
	{
	    if(PlayerData[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[i][pWeedX], PlayerData[i][pWeedY], PlayerData[i][pWeedZ]))
	    {
	        ShowActionBubble(playerid, "* %s inspects the plant.", GetRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_WHITE, "* This plant has so far grown %i grams of weed. It will be ready in %i/60 minutes.", PlayerData[i][pWeedGrams], PlayerData[i][pWeedTime]);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}
CMD:destroyplant(playerid, params[])
{
    new planterid = PlayerData[playerid][pPickPlant];
	if(IsLawEnforcement(playerid))
	{
	    if(PlayerData[playerid][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[playerid][pWeedX], PlayerData[playerid][pWeedY], PlayerData[playerid][pWeedZ]))
	    {
	        PlayerData[playerid][pPickPlant] = playerid;
			DestroyWeedPlant(planterid);
			SendClientMessage(playerid, COLOR_GREY, "You've destroyed the plant, reward $738");
			GivePlayerCash(playerid, 738);
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You are not a cop");
	return 1;
}
CMD:pickplant(playerid, params[])
{
	if(IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cant pickup plants as a cop, use /destroyplant instead");
	}
    foreach(new i : Player)
	{
	    if(PlayerData[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[i][pWeedX], PlayerData[i][pWeedY], PlayerData[i][pWeedZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You need to be crouched in order to pick a plant.");
			}
			if(PlayerData[i][pWeedGrams] < 2)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(PlayerData[playerid][pWeed] + PlayerData[i][pWeedGrams] > GetPlayerCapacity(playerid, CAPACITY_WEED))
			{
			    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerData[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
			}

			PlayerData[playerid][pPickPlant] = i;
			PlayerData[playerid][pPickTime] = 5;

			ShowActionBubble(playerid, "* %s crouches down and starts picking at the weed plant.", GetRPName(playerid));
		//	SendClientMessage(playerid, COLOR_WHITE, "* Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    foreach(new i : Player)
	{
	    if(PlayerData[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerData[i][pWeedX], PlayerData[i][pWeedY], PlayerData[i][pWeedZ]))
	    {
	        ShowActionBubble(playerid, "* %s seizes a weed plant weighing %i grams.", GetRPName(playerid), PlayerData[i][pWeedGrams]);
	        DestroyWeedPlant(i);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}

CMD:cookmeth(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1.2179, 2.8095, 999.4284))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in Heisenberg's trailer. You can't use this command.");
	}
	if(!PlayerData[playerid][pCookMeth])
	{
		if(!PlayerData[playerid][pEphedrine])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!PlayerData[playerid][pMuriaticAcid])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}

		PlayerData[playerid][pCookMeth] = 1;
		PlayerData[playerid][pCookTime] = 15;
		PlayerData[playerid][pCookGrams] = 0;

		SendClientMessage(playerid, COLOR_GREEN, "You have started cooking meth. One gram of ephedrine will turn into 2 grams of meth every 15 seconds.");
	    SendClientMessage(playerid, COLOR_GREEN, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", PlayerData[playerid][pCookGrams] / 2, PlayerData[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

CMD:usecigar(playerid, params[])
{
	if(!PlayerData[playerid][pCigars])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any cigars left.");
	}

	PlayerData[playerid][pCigars]--;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	ShowActionBubble(playerid, "* %s lights up a cigar and starts to smoke it.", GetRPName(playerid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = %i WHERE uid = %i", PlayerData[playerid][pCigars], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - PlayerData[playerid][pLastDrug] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerData[playerid][pLastDrug]));
	}
	if(PlayerData[playerid][pDrugsUsed] >= 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /usedrug [weed | cocaine | meth | painkillers]");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to use drugs. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	if(!strcmp(params, "weed", true))
	{
	    if(PlayerData[playerid][pWeed] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of weed.");
		}

        if(PlayerData[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerData[playerid][pAddictUpgrade], (PlayerData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 20.0 + (PlayerData[playerid][pAddictUpgrade] * 5.0));

		PlayerData[playerid][pWeed] -= 2;
		PlayerData[playerid][pDrugsUsed]++;
		PlayerData[playerid][pLastDrug] = gettime();

		if(PlayerData[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		ShowActionBubble(playerid, "* %s smokes two grams of weed.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = %i WHERE uid = %i", PlayerData[playerid][pWeed], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    if(PlayerData[playerid][pCocaine] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of cocaine.");
		}

		if(PlayerData[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra armor.", PlayerData[playerid][pAddictUpgrade], (PlayerData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerArmour(playerid, 10.0 + (PlayerData[playerid][pAddictUpgrade] * 5.0));

		PlayerData[playerid][pCocaine] -= 2;
		PlayerData[playerid][pDrugsUsed]++;
		PlayerData[playerid][pLastDrug] = gettime();

		if(PlayerData[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		ShowActionBubble(playerid, "* %s snorts two grams of cocaine.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = %i WHERE uid = %i", PlayerData[playerid][pCocaine], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "meth", true))
	{
	    if(PlayerData[playerid][pMeth] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of meth.");
		}

		if(PlayerData[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", PlayerData[playerid][pAddictUpgrade], (PlayerData[playerid][pAddictUpgrade] * 5.0), (PlayerData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (PlayerData[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (PlayerData[playerid][pAddictUpgrade] * 5.0));

		PlayerData[playerid][pMeth] -= 2;
		PlayerData[playerid][pDrugsUsed] += 2;
		PlayerData[playerid][pLastDrug] = gettime();

		if(PlayerData[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		ShowActionBubble(playerid, "* %s smokes two grams of meth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = %i WHERE uid = %i", PlayerData[playerid][pMeth], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(PlayerData[playerid][pPainkillers] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have any painkillers left.");
		}

		if(PlayerData[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerData[playerid][pAddictUpgrade], (PlayerData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 30.0 + (PlayerData[playerid][pAddictUpgrade] * 5.0));

		PlayerData[playerid][pPainkillers] -= 1;
		PlayerData[playerid][pReceivingAid] = 1;
		PlayerData[playerid][pDrugsUsed] += 2;
		PlayerData[playerid][pLastDrug] = gettime();

		if(PlayerData[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
	        PlayerData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		ShowActionBubble(playerid, "* %s pops a painkiller in their mouth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = %i WHERE uid = %i", PlayerData[playerid][pPainkillers], PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	SendClientMessage(targetid, COLOR_SERVERDEF, "______ ID Card ______");
	SendClientMessageEx(targetid, COLOR_GREY1, "Name: %s", GetRPName(playerid));
	SendClientMessageEx(targetid, COLOR_GREY1, "Gender: %s", (PlayerData[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SendClientMessageEx(targetid, COLOR_GREY1, "Age: %i years old", PlayerData[playerid][pAge]);
	SendClientMessageEx(targetid, COLOR_GREY1, "Drivers License: %s", (PlayerData[playerid][pCarLicense]) ? ("{00AA00}Yes") : ("{FF6347}No"));
	SendClientMessageEx(targetid, COLOR_GREY1, "Weapon License: %s", (PlayerData[playerid][pGunLicense]) ? ("{00AA00}Yes") : ("{FF6347}No"));
	ShowActionBubble(playerid, "* %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:inv(playerid, params[])
{
	return callcmd::inventory(playerid, params);
}

CMD:inventory(playerid, params[])
{
	DisplayInventory(playerid);
	return 1;
}

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Seeds, Ephedrine, CarLicense");
	    return 1;
	}
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    ShowActionBubble(playerid, "* %s throws away their weapons.", GetRPName(playerid));
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerData[playerid][pMaterials])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [materials] [confirm] (You have %i materials.)", PlayerData[playerid][pMaterials]);
	    }

	    PlayerData[playerid][pMaterials] = 0;
	    ShowActionBubble(playerid, "* %s throws away their materials.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET materials = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerData[playerid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no weed which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [weed] [confirm] (You have %i grams of weed.)", PlayerData[playerid][pWeed]);
	    }

	    PlayerData[playerid][pWeed] = 0;
	    ShowActionBubble(playerid, "* %s throws away their weed.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET weed = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerData[playerid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no cocaine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cocaine] [confirm] (You have %i grams of cocaine.)", PlayerData[playerid][pCocaine]);
	    }

	    PlayerData[playerid][pCocaine] = 0;
	    ShowActionBubble(playerid, "* %s throws away their cocaine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cocaine = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerData[playerid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [meth] [confirm] (You have %i grams of meth.)", PlayerData[playerid][pMeth]);
	    }

	    PlayerData[playerid][pMeth] = 0;
	    ShowActionBubble(playerid, "* %s throws away their meth.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET meth = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerData[playerid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cocaine] [confirm] (You have %i painkillers.)", PlayerData[playerid][pPainkillers]);
	    }

	    PlayerData[playerid][pPainkillers] = 0;
	    ShowActionBubble(playerid, "* %s throws away their painkillers.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET painkillers = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!PlayerData[playerid][pCigars])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cigars] [confirm] (You have %i cigars.)", PlayerData[playerid][pCigars]);
	    }

	    PlayerData[playerid][pCigars] = 0;
	    ShowActionBubble(playerid, "* %s throws away their cigars.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET cigars = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!PlayerData[playerid][pSpraycans])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [spraycans] [confirm] (You have %i spraycans.)", PlayerData[playerid][pSpraycans]);
	    }

	    PlayerData[playerid][pSpraycans] = 0;
	    ShowActionBubble(playerid, "* %s throws away their spraycanss.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET spraycans = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!PlayerData[playerid][pSeeds])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [seeds] [confirm] (You have %i seeds.)", PlayerData[playerid][pSeeds]);
	    }

	    PlayerData[playerid][pSeeds] = 0;
	    ShowActionBubble(playerid, "* %s throws away their seeds.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET seeds = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!PlayerData[playerid][pEphedrine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", PlayerData[playerid][pEphedrine]);
	    }

	    PlayerData[playerid][pEphedrine] = 0;
	    ShowActionBubble(playerid, "* %s throws away their ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET ephedrine = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerData[playerid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no drivers license which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [carlicense] [confirm] (This drops your drivers license.)");
	    }

	    PlayerData[playerid][pCarLicense] = 0;
	    ShowActionBubble(playerid, "* %s rips up their drivers license.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET carlicense = 0 WHERE uid = %i", PlayerData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /creategang [name]");
	}

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has setup gang {F7A763}%s{FF6347} in slot ID %i.", GetRPName(playerid), name, i);
	        SendClientMessageEx(playerid, COLOR_WHITE, "* This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_GREY, "Gang slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes");
		return 1;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the name of gang ID %i to '%s'.", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has adjusted the MOTD of gang ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /setgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the leader of gang ID %i to %s.", GetRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the level of gang ID %i to %i/3.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		    {
		        ReloadTurf(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the {%06x}color{FF6347} of gang ID %i.", GetRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the gang points of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the turf tokens of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set rank %i's name of gang ID %i to '%s'.", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Gang Skins ______");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}
		if(!(1 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "* You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the strikes of gang ID %i to %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the alliance of gang ID %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(0 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the alliance of gang ID %i to gang %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}
CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(PlayerData[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET customtitle = '%e' WHERE uid = %i", param, PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the customtitle of %s to '%s'.", GetRPName(playerid), GetRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		PlayerData[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET customcolor = %i WHERE uid = %i", PlayerData[targetid][pCustomTColor], PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the {%06x}color{FF6347} of %s's title.", GetRPName(playerid), color >>> 8, GetRPName(targetid));
	}
	return 1;
}
CMD:removegang(playerid, params[])
{
	new gangid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removegang [gangid]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has deleted gang %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s{FF6347} gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	Log_Write("log_gang", "%s (uid: %i) has removed gang %s (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], GangInfo[gangid][gName], gangid);
	return 1;
}

CMD:adminstrike(playerid, params[])
{
	new targetid, reason[128];
	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /adminstrike [playerid] [reason]");
	}
	PlayerData[targetid][pAdminStrike]++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminstrikes = %i WHERE uid = %i", PlayerData[targetid][pAdminStrike], targetid);
	mysql_tquery(connectionID, queryBuffer);
	Log_Write("log_strike", "%s (uid: %i) has admin striked player %s (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], GetRPName(targetid), targetid);
	switch(PlayerData[targetid][pAdminStrike])
	{
		case 1: SendAdminMessage(COLOR_WHITE, "(( Admin News: %s{FFFFFF} has received their 1st strike, reason: %s ))", GetRPName(targetid), reason);
		case 2: SendAdminMessage(COLOR_WHITE, "(( Admin News: %s{FFFFFF} has received their 2nd strike, reason: %s ))", GetRPName(targetid), reason);
		case 3:
		{
		    PlayerData[targetid][pAdmin] -= 1;
		    PlayerData[targetid][pAdminStrike] = 0;
		    SendClientMessage(targetid, COLOR_GREY, "The admin strike system works perfectly fine");
		    GameTextForPlayer(targetid, "~r~DEMOTED", 5000, 1);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET adminlevel = %i, adminstrikes = %i WHERE uid = %i", PlayerData[targetid][pAdmin], PlayerData[targetid][pAdminStrike], PlayerData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SendAdminMessage(COLOR_WHITE, "(( Admin News: %s{FFFFFF} has received their 3rd strike, reason: %s ))", GetRPName(targetid), reason);
		}
	}
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128], color;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gangstrike [gangid] [reason]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);
	Log_Write("log_gang", "%s (uid: %i) has striked gang %s (id: %i).", GetRPName(playerid), PlayerData[playerid][pID], GangInfo[gangid][gName], gangid);
	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 1st strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 2: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 2nd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 3: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 3rd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:switchgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /switchgang[playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    PlayerData[targetid][pGang] = -1;
		PlayerData[targetid][pGangRank] = 0;
		PlayerData[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has removed %s from their gang.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		PlayerData[targetid][pGang] = gangid;
		PlayerData[targetid][pGangRank] = rankid;
		PlayerData[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {00AA00}%s{33CCFF} in %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = %i, gangrank = %i, crew = -1, gangname = '%e' WHERE uid = %i", gangid, rankid, GangInfo[gangid][gName], PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[])
{
	return callcmd::gangs(playerid, params);
}

CMD:gangs(playerid, params[])
{
	new gangid, ganglist[300], string[100], color;

	if(sscanf(params, "i", gangid))
	{
		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
				if(GangInfo[i][gColor] == -1 || GangInfo[i][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[i][gColor];
				}
				format(string, sizeof(string), "{696969}(ID: %i) {%06x}%s", i, color >>> 8, GangInfo[i][gName]);
				strcat(ganglist, string);
				strcat(ganglist, "\n");
		    }
		}
		//return 0;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = GangInfo[gangid][gColor];
		}
		format(string, sizeof(string), "{696969}(ID: %i) {%06x}%s", gangid, color >>> 8, GangInfo[gangid][gName]);
		strcat(ganglist, string);
		strcat(ganglist, "\n");
	}
	/*SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Members Online _____");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pLogged] && PlayerData[i][pGang] == gangid)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(%i) %s %s", PlayerData[i][pGangRank], GangRanks[gangid][PlayerData[i][pGangRank]], GetRPName(i));
		}
	}*/

	Dialog_Show(playerid, DIALOG_GANGS, DIALOG_STYLE_LIST, "{F7A763}Gangs", ganglist, "Select", "Close");
	return 1;
}

CMD:points(playerid, params[])
{
	new name[32], color = -1, pointid;

	if(sscanf(params, "i", pointid))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		for(new i = 0; i < MAX_POINTS; i ++)
		{
		    if(PointInfo[i][pExists])
		    {
		        if(PointInfo[i][pCapturedGang] == -1) {
		            name = "None";
		        } else {
		            strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
		        }

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Name: %s | Owner: %s | Captured by: %s | Profits: %s | Time: %ih", i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], FormatNumber(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}
		}

		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /points [pointid]");
		return 1;
	}
    if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	if(PointInfo[pointid][pCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
    	color = GangInfo[PointInfo[pointid][pCapturedGang]][gColor];
	}
	else
	{
	    name = "None";
	}

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s ($%i) _____", PointInfo[pointid][pName], PointInfo[pointid][pProfits]);
    SendClientMessageEx(playerid, COLOR_WHITE, "* This point captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", PointInfo[pointid][pCapturedBy], color >>> 8, name, PointInfo[pointid][pTime]);

    if(PointInfo[pointid][pCapturer] != INVALID_PLAYER_ID)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "* This point is being captured by %s and will be theirs in %i minutes.", GetRPName(PointInfo[pointid][pCapturer]), PointInfo[pointid][pCaptureTime]);
	}

	return 1;
}

/*CMD:turfs(playerid, params[])
{
	if(!PlayerData[playerid][pShowTurfs])
	{
        ShowTurfsOnMap(playerid, true);
        SendClientMessage(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
	}
	else
	{
        ShowTurfsOnMap(playerid, false);
        SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
	}

	return 1;
}
*/

CMD:lands(playerid, params[])
{
	if(!PlayerData[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        SendClientMessage(playerid, COLOR_AQUA, "You will now see lands on your mini-map.");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any lands on your mini-map.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /f [gang chat]");
	}
	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
    if(PlayerData[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the gang chat as you have it toggled.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot speak in /r while dead.");
	}
	if(PlayerData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		new crew[32];
		if(PlayerData[playerid][pCrew] >= 0)
		{
			crew = GangCrews[PlayerData[playerid][pGang]][PlayerData[playerid][pCrew]];
		}
		else
		{
		    crew = "None";
		}
		if(PlayerData[i][pGang] == PlayerData[playerid][pGang] && !PlayerData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_AQUA, "* [%i] %s (%s) %s: %.*s... *", PlayerData[playerid][pGangRank], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], crew, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_AQUA, "* [%i] %s (%s) %s: ...%s *", PlayerData[playerid][pGangRank], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], crew, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_AQUA, "* [%i] %s (%s) %s: %s *", PlayerData[playerid][pGangRank], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], crew, GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = PlayerData[playerid][pGang];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ally [Alliance chat]");
	}
	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "Your gang isn't a part of an alliance.");
	}
    if(PlayerData[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot speak in /ally while dead.");
	}
	if(PlayerData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((PlayerData[i][pGang] == PlayerData[playerid][pGang] || PlayerData[i][pGang] == GangInfo[gangid][gAlliance])  && !PlayerData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_GREEN, "* [Alliance] %s %s: %.*s... *", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_GREEN, "* [Alliance] %s %s: ...%s *", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_GREEN, "* [Alliance] %s %s: %s *", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

/*
CMD:gmembers(playerid, params[])
{
	if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}

    SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Members Online _____");

    foreach(new i : Player)
    {
        if(PlayerData[i][pGang] == PlayerData[playerid][pGang])
        {
            SendClientMessageEx(playerid, COLOR_GREY2, "(%i) %s %s", PlayerData[i][pGangRank], GangRanks[PlayerData[i][pGang]][PlayerData[i][pGangRank]], GetRPName(i));
		}
    }

    return 1;
}*/

stock nComma(numbers) //by Gamer931215 http://forum.sa-mp.com/showthread.php?t=259208
{
	new temp[24],counter = -1;
	valstr(temp,numbers);
	for(new i = strlen(temp);i > 0; i--)
	{
	    counter++;
		if(counter == 3)
		{
		    strins(temp,",",i);
		    counter = 0;
		}
	}
	return temp;
}


CMD:ganglocker(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	new gangid, option[32];
	if(sscanf(params, "is[32]", gangid, option)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ganglocker [gangid] [remove/place]");
	if(!strcmp(option, "place", true))
    {
		GetPlayerPos(playerid, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ]);
		GangInfo[gangid][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[gangid][gStashWorld] = GetPlayerVirtualWorld(playerid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], GangInfo[gangid][gStashInterior], GangInfo[gangid][gStashWorld], gangid);
		mysql_tquery(connectionID, queryBuffer);
		ReloadGang(gangid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have moved %s's locker to your currently position.", GangInfo[gangid][gName]);
	}
	else if(!strcmp(option, "remove", true))
    {
		DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
		DestroyDynamicPickup(GangInfo[gangid][gPickup]);
		GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = 0, stash_y = 0, stash_z = 0, stashinterior = 1, stashworld = 1 WHERE id = %i", gangid);
		mysql_tquery(connectionID, queryBuffer);
		ReloadGang(gangid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's locker.", GangInfo[gangid][gName]);
	}
	return 1;
}


CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: MOTD, Stash, Stats, Turfs, Rankname, Upgrade, War, Alliance");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [invite] [playerid]");
		}
		if(GangInfo[PlayerData[playerid][pGang]][gInvCooldown] > 0 && gacooldown)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You're gang is currently on a invite cooldown. Please wait %i minutes before the next invite.", GangInfo[PlayerData[playerid][pGang]][gInvCooldown]);
		}
		if(GangClaimingTurfs(PlayerData[playerid][pGang]) || GangCapturingPoints(PlayerData[playerid][pGang]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not use invite if your gang is attending a turf or point.");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pGang] != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of a gang.");
		}

		if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC || GetFactionType(targetid) == FACTION_GOVERNMENT || GetFactionType(targetid) == FACTION_ARMY)
  		{
  		    return SendClientMessage(playerid, COLOR_GREY, "You cannot invite members that are in LSFMD, GOV, ARMY, or LSPD.");
  		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE gang = %i", PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid, gangid = PlayerData[playerid][pGang];
		if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6 to use this command.");
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {

	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Gang Skins ______");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /gang [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
		new forbidSkin[35] =
		{
			0, 71, 74, 264, 265, 266, 267, 274, 275, 276,
			277, 278, 279, 280, 281, 282, 283, 284, 285,
			286, 287, 288, 300, 301, 302, 306, 307, 308,
			309, 310, 311
		};


	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}
		if(!(1 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
		}
		for(new i = 0; i < sizeof forbidSkin; i++)
		{
			if(skinid == forbidSkin[i])
			{
				return SendClientMessage(playerid, COLOR_GREY, "You can't select this skin.");
			}
		}
		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "* You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerData[targetid][pGang] != PlayerData[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(PlayerData[targetid][pGangRank] > PlayerData[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}

		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang], GangRanks[PlayerData[targetid][pGang]][PlayerData[targetid][pGangRank]], PlayerData[targetid][pGangRank]);

		PlayerData[targetid][pGang] = -1;
		PlayerData[targetid][pGangRank] = 0;
        DestroyDynamic3DTextLabel(fRepfamtext[targetid]);
        fRepfamtext[targetid] = Text3D:INVALID_3DTEXT_ID;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = -1, gangrank = 0, gangname = 'none' WHERE uid = %i", PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > PlayerData[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerData[targetid][pGang] != PlayerData[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(PlayerData[targetid][pGangRank] > PlayerData[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}

		PlayerData[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gangrank = %i WHERE uid = %i", rankid, PlayerData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your rank to {00AA00}%s{33CCFF} (%i).", GetRPName(playerid), GangRanks[PlayerData[playerid][pGang]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's rank to {00AA00}%s{33CCFF} (%i).", GetRPName(targetid), GangRanks[PlayerData[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetPlayerNameEx(targetid), PlayerData[targetid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang], GangRanks[PlayerData[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
		SendClientMessage(playerid, COLOR_GREY, "This command was removed, Contact an admin to place your locker.");
 	}
	else if(!strcmp(option, "turfs", true))
	{
		new perk[32];

	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == PlayerData[playerid][pGang])
		    {
		        switch(TurfInfo[i][tType])
				{
				    case 0: perk = "Normal";
				    case 1: perk = "Materials";
			     	case 2: perk = "Low class weapons";
				    case 3: perk = "Medium class weapons";
				    case 4: perk = "High class weapons";
				    case 5: perk = "Traphouse";
				    case 6: perk = "Crackhouse";
				    case 7: perk = "Sales tax";
				    case 8: perk = "Locked turf";
				}

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Name: %s | Captured by: %s | Perk: %s | Time left: %ih", i, TurfInfo[i][tName], TurfInfo[i][tCapturedBy], perk, TurfInfo[i][tTime]);
			}
		}
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM "#TABLE_USERS" WHERE gang = %i", PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM "#TABLE_USERS" WHERE gang = %i ORDER BY gangrank DESC", PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [quit] [confirm]");
	    }


	    SendClientMessageEx(playerid, COLOR_AQUA, "You have quit %s as a {00AA00}%s{33CCFF} (%i).", GangInfo[PlayerData[playerid][pGang]][gName], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], PlayerData[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GangInfo[PlayerData[playerid][pGang]][gName], PlayerData[playerid][pGang], GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], PlayerData[playerid][pGangRank]);

	    PlayerData[playerid][pGang] = -1;
		PlayerData[playerid][pGangRank] = 0;
        DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
        fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gang = -1, gangrank = 0, gangname = 'none' WHERE uid = %i", PlayerData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerData[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM "#TABLE_USERS" WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [motd] [text]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Current MOTD: %s", GangInfo[PlayerData[playerid][pGang]][gMOTD]);
	        return 1;
		}

		strcpy(GangInfo[PlayerData[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET motd = '%e' WHERE id = %i", param, PlayerData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerData[playerid][pGang]);
		SendClientMessage(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_SERVERDEF, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[PlayerData[playerid][pGang]][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[PlayerData[playerid][pGang]][i]);
	        }

	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(GangRanks[PlayerData[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", PlayerData[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of rank %i to {00AA00}%s{33CCFF}.", rankid, rank);
	}
	else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [npc] [slot] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[PlayerData[playerid][pGang]][gArmsDealer])
				{
		    		return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerData[playerid][pGang]][gArmsX], GangInfo[PlayerData[playerid][pGang]][gArmsY], GangInfo[PlayerData[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[PlayerData[playerid][pGang]][gArmsX] + 1.0, GangInfo[PlayerData[playerid][pGang]][gArmsY], GangInfo[PlayerData[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerData[playerid][pGang]][gArmsA]);
		        GangInfo[PlayerData[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gArmsX], GangInfo[PlayerData[playerid][pGang]][gArmsY], GangInfo[PlayerData[playerid][pGang]][gArmsZ], GangInfo[PlayerData[playerid][pGang]][gArmsA], GangInfo[PlayerData[playerid][pGang]][gArmsWorld], PlayerData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerData[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[PlayerData[playerid][pGang]][gDrugDealer])
				{
		    		return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerData[playerid][pGang]][gDrugX], GangInfo[PlayerData[playerid][pGang]][gDrugY], GangInfo[PlayerData[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[PlayerData[playerid][pGang]][gDrugX] + 1.0, GangInfo[PlayerData[playerid][pGang]][gDrugY], GangInfo[PlayerData[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerData[playerid][pGang]][gDrugA]);
		        GangInfo[PlayerData[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[PlayerData[playerid][pGang]][gDrugX], GangInfo[PlayerData[playerid][pGang]][gDrugY], GangInfo[PlayerData[playerid][pGang]][gDrugZ], GangInfo[PlayerData[playerid][pGang]][gDrugA], GangInfo[PlayerData[playerid][pGang]][gDrugWorld], PlayerData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerData[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}
    else if(!strcmp(option, "removenpc", true))
	{
	    new type, confirm[10];

	    if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [removenpc] [slot] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    DestroyDynamic3DTextLabel(GangInfo[PlayerData[playerid][pGang]][gText][1]); // arms
			    DestroyActor(GangInfo[PlayerData[playerid][pGang]][gActors][0]); //arms
			}
			else if(type == 2)
			{
                DestroyDynamic3DTextLabel(GangInfo[PlayerData[playerid][pGang]][gText][2]); // drugs
				DestroyActor(GangInfo[PlayerData[playerid][pGang]][gActors][1]); // drigs
 			}
		}
	}
	else if(!strcmp(option, "upgrade", true))
	{
	    if(PlayerData[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP {FFFFFF}+{00AA00} $50,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP {FFFFFF}+{00AA00} $50,000");
		strcat(string, "\nDuel arena\tAn OOC 1v1 duel arena for your gang.\t{F7A763}400 GP {FFFFFF}+{00AA00} $75,000");
	    strcat(string, "\nMapping\tUp to 50 mapped objects for your gang.\t{F7A763}4500 GP {FFFFFF}+{00AA00} $100,000");
	    strcat(string, "\nInterior\tCustom interior exclusively for your gang.\t{F7A763}5000 GP {FFFFFF}+{00AA00} $100,000");
		// gang and mat s0ns
	    format(string, sizeof string, "%s\nMaterials level up\tReceive more materials from successfully captured turfs.\t{F7A763}%s GP {FFFFFF}+{00AA00} $%s", string, nComma(1500 + (500*GangInfo[PlayerData[playerid][pGang]][gMatLevel])), nComma(100000 + (50000*GangInfo[PlayerData[playerid][pGang]][gMatLevel])));
	    format(string, sizeof string, "%s\nGun level up\tReceive more guns from successfully captured turfs.\t{F7A763} %s GP {FFFFFF}+{00AA00} $%s", string, nComma(1500 + (250*GangInfo[PlayerData[playerid][pGang]][gGunLevel])), nComma(40000 + (20000 * GangInfo[PlayerData[playerid][pGang]][gGunLevel])));

		if(GangInfo[PlayerData[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 2/3.\t{F7A763}6000 GP {FFFFFF}+{00AA00} $75,000");
		}
		else if(GangInfo[PlayerData[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 3/3.\t{F7A763}12000 GP {FFFFFF}+{00AA00} $100,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[PlayerData[playerid][pGang]][gPoints]);
		Dialog_Show(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = PlayerData[playerid][pGang];

		if(PlayerData[playerid][pGangRank] < 6)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(PlayerData[targetid][pGangRank] < 6)
	  	{
			return SendClientMessage(playerid, COLOR_GREY, "The player you're offering to ally with must be R6 in their gang!");
	  	}
        if(PlayerData[targetid][pGang] == gangid)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetRPName(playerid));
			PlayerData[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}

CMD:gstash(playerid, params[])
{
	if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}
	if(PlayerData[playerid][pFaction] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!(IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[PlayerData[playerid][pGang]][gStashX], GangInfo[PlayerData[playerid][pGang]][gStashY], GangInfo[PlayerData[playerid][pGang]][gStashZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[PlayerData[playerid][pGang]][gStashWorld]))
    {
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your gang stash.");
	}
    if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to open the stash. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}
	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}
CMD:repfam(playerid, params[])
{
	callcmd::bandana(playerid, params);
}
CMD:bandana(playerid, params[])
{
    if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}
    if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to takeoff your bandana. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}
	if(!PlayerData[playerid][pBandana])
	{
	    new color;
	 	if(GangInfo[PlayerData[playerid][pGang]][gColor] == -1 || GangInfo[PlayerData[playerid][pGang]][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[PlayerData[playerid][pGang]][gColor];
		}
		if(PlayerData[playerid][pJoinedEvent] || PlayerData[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
	    PlayerData[playerid][pBandana] = 1;

	    SendClientMessage(playerid, COLOR_AQUA, "You have enabled your bandana. Your nametag color has been set to your gang color.");
	    ShowActionBubble(playerid, "* %s takes out a bandana and wraps it around their head.", GetRPName(playerid));
	    SetPlayerColor(playerid, GangInfo[PlayerData[playerid][pGang]][gColor] & ~0xff);
		new string[120];
		format(string, sizeof(string), "{%06x}%s", color >>> 8, GangInfo[PlayerData[playerid][pGang]][gName]);
        fRepfamtext[playerid] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, -0.3, 20.0, .attachedplayer = playerid, .testlos = 1);

	}
	else
	{
	    PlayerData[playerid][pBandana] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You have disabled your bandana. Your nametag color was reset back to normal.");
	    ShowActionBubble(playerid, "* %s takes off their bandana from around their head.", GetRPName(playerid));
		DestroyDynamic3DTextLabel(fRepfamtext[playerid]);
        fRepfamtext[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	return 1;
}

CMD:factionpark(playerid, params[])
{
	return callcmd::fpark(playerid, params);
}

CMD:fpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerData[playerid][pFaction] == -1 || PlayerData[playerid][pFactionLeader] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not leader of any faction.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any of your faction vehicles.");
	}
	if(VehicleInfo[vehicleid][vFactionType] != GetFactionType(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't park this vehicle as it doesn't belong to your faction.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessage(playerid, COLOR_GREEN, "* Faction vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}
CMD:buygangveh(playerid, params[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(PlayerData[playerid][pGang]) >= GetGangVehicleLimit(PlayerData[playerid][pGang]))
    {
        return SendClientMessageEx(playerid, COLOR_GREY, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerData[playerid][pGang]));
    }

	PlayerData[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLENEW);
	}/*
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYBOAT);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYAIRCRAFT);
	}*/
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti dealership.");
	}

	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerData[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessage(playerid, COLOR_AQUA, "* Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerData[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your gang has no vehicles which you can track.");
	}

	Dialog_Show(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}

CMD:grespawncars(playerid, params[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}

    foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerData[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerData[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gsellcar [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command permanently deletes your gang vehicle. You will receive %s back.", FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your %s to the dealership and received %s back.", GetVehicleName(vehicleid), FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
    Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createpoint [type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "No-one", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 20;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has created point {F7A763}%s{FF6347}.", GetRPName(playerid), name);
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have created point {F7A763}%s{33CCFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [option]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the name of point %i to %s.", GetRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has moved the location of point %i.", GetRPName(playerid), pointid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the capturer of point %i to %s.", GetRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedGang], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the capturing gang of point %i.", GetRPName(playerid), pointid);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the capturing gang of point %i to %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to {00AA00}%s{33CCFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the type of point %i to %i.", GetRPName(playerid), pointid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the profits of point %i to $%i.", GetRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the time of point %i to %i hours.", GetRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has deleted point %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{33CCFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

CMD:capture(playerid, params[])
{
    if(PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(PlayerData[playerid][pCapturingPoint] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already attempting to capture the point.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't capture a point while injured.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}
    if(GangCapturingPoints(PlayerData[playerid][pGang]) >= MaxCapCount[1])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're gang is already capturing %i points.", MaxCapCount[1]);
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "This point is already being captured by you.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PlayerData[PointInfo[i][pCapturer]][pGang] == PlayerData[playerid][pGang])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(PlayerData[x][pCapturingPoint] == i && PlayerData[x][pCaptureTime] > 0)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    PlayerData[playerid][pCapturingPoint] = i;
		    PlayerData[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, PlayerData[playerid][pPointX], PlayerData[playerid][pPointY], PlayerData[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_RED, "(( %s is attempting to capture %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any points.");
	return 1;
}
GangCapturingPoints(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_POINTS; x++)
	{
		if(PointInfo[x][pExists] && PointInfo[x][pCapturer] != INVALID_PLAYER_ID && PointInfo[x][pTime] == 0)
		{
  			if(PlayerData[PointInfo[x][pCapturer]][pGang] == gang)
  			{
          		capCount++;
  			}
		}
	}
	return capCount;
}
GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(PlayerData[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((PlayerData[playerid][pGang] == -1 || PlayerData[playerid][pGangRank] < 5) && !IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in a gang or apart of law enforcement.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs which you can claim.");
	}
	if(IsLawEnforcement(playerid) && PlayerData[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is already being captured by you.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(PlayerData[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're gang is already claiming %i turfs.", MaxCapCount[0]);
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && PlayerData[TurfInfo[turfid][tCapturer]][pGang] == PlayerData[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is already being claimed by your gang.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't claim a turf inside an interior.");
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerData[i][pInjured] && !PlayerData[i][pAdminDuty] && !PlayerData[i][pAcceptedHelp] && !PlayerData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerData[i][pGang] == PlayerData[TurfInfo[turfid][tCapturer]][pGang] && PlayerData[i][pGang] != GangInfo[PlayerData[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	if(PlayerData[playerid][pGang] >= 0)
	{
	    if(GangInfo[PlayerData[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have any turf tokens left.");
		}
 	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && PlayerData[i][pGang] == PlayerData[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < TurfInfo[turfid][tCount])
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need at least %d members of your gang in this turf to claim it.", TurfInfo[turfid][tCount]);
		}
		else
		{
			GangInfo[PlayerData[playerid][pGang]][gTurfTokens]--;
			SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has attempted to claim %s for %s. It will be their turf in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerData[playerid][pGang]][gName]);
            TurfInfo[turfid][tBeingCaptured] = turfid;
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET turftokens = turftokens - 1 WHERE id = %i", PlayerData[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(IsLawEnforcement(playerid) && PlayerData[playerid][pGang] == -1)
	{
	    if(FactionInfo[PlayerData[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your faction doesn't have any turf tokens left.");
		}

	    FactionInfo[PlayerData[playerid][pFaction]][fTurfTokens]--;
	    SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has attempted to claim back %s. It will be their turf in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName]);
        TurfInfo[turfid][tBeingCaptured] = turfid;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_FACTIONS" SET turftokens = turftokens - 1 WHERE id = %i", PlayerData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);

	return 1;
}

CMD:reclaim(playerid, params[])
{
	new turfid;

    if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs.");
	}
	if(IsLawEnforcement(playerid) && PlayerData[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't reclaim a turf while injured.");
	}
	if(TurfInfo[turfid][tCapturedGang] != PlayerData[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf does not belong to your gang. Therefore you can't reclaim it.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is not being claimed by anyone. Therefore you can't reclaim it.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerData[i][pInjured] && !PlayerData[i][pAdminDuty] && !PlayerData[i][pAcceptedHelp] && !PlayerData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerData[i][pGang] == PlayerData[TurfInfo[turfid][tCapturer]][pGang] && PlayerData[i][pGang] != GangInfo[PlayerData[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s has reclaimed %s for %s and ended the turf war.", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerData[playerid][pGang]][gName]);
    TurfInfo[turfid][tBeingCaptured] = -1;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}

CMD:guninv(playerid, params[])
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ My Weapons _____");

	for(new i = 0; i < 13; i ++)
	{
     	if(PlayerData[playerid][pWeapons][i] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s", PlayerData[playerid][pWeapons][i], GetWeaponNameEx(PlayerData[playerid][pWeapons][i]));
		}
	}

	return 1;
}




CMD:createturf(playerid, params[])
{
	new type, name[32];

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createturf [special type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
	    return 1;
	}
	if(!(0 <= type <= 8))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create turfs indoors.");
	}

	PlayerData[playerid][pTurfType] = type;
	PlayerData[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(PlayerData[playerid][pTurfName], name, 32);
	Dialog_Show(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerData[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "* Land creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;
    Iter_Remove(Turf, turfid);

    SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [option]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, CapturedBy, Gang, Type, Time, count");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the name of turf %i to %s.", GetRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the capturer of turf %i to %s.", GetRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}

 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has reset the capturing gang of turf %i.", GetRPName(playerid), turfid);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the capturing gang of turf %i to %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to {00AA00}%s{33CCFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	   	 	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
            return 1;
		}
		if(!(0 <= type <= 8))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the type of turf %i to %i.", GetRPName(playerid), turfid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s is now available to capture.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the time of turf %i to %i hours.", GetRPName(playerid), turfid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}
	else if(!strcmp(option, "count", true))
    {
        new count;
        if(sscanf(param, "i", count))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [count] [0-10]");
		}
		if(!(0 <= count <= 10))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount of members must range from 0 to 10.");
		}
		TurfInfo[turfid][tCount] = count;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET count = %i WHERE id = %i", TurfInfo[turfid][tCount], turfid);
		mysql_tquery(connectionID, queryBuffer);
		SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has set the count members of turf %i to %i.", GetRPName(playerid), turfid, count);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the count members of turf %i to %i.", turfid, count);
	}
	return 1;
}

/*CMD:pointinfo(playerid, params[])
{
	new
	    pointid = GetNearbyPoint(playerid),
	    string[12];

	if(pointid == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any points.");
	}
 	format(string, sizeof(string), "%i", pointid);
  	callcmd::points(playerid, string);
	return 1;
}*/

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_ORANGE, "Point Info:");
	for(new i; i < MAX_POINTS; i++) {
		if(PointInfo[i][pExists]) {
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)  {
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: Less than 1 minute", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[PlayerData[PointInfo[i][pCapturer]][pGang]][gName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: %d minutes", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[PlayerData[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_GREY, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new turfid, name[32] = "None", perk[32], color = -1;

	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs.");
	}

	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
    	color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
	}

	switch(TurfInfo[turfid][tType])
	{
	    case 0: perk = "Normal";
	    case 1: perk = "Materials";
     	case 2: perk = "Low class weapons";
	    case 3: perk = "Medium class weapons";
	    case 4: perk = "High class weapons";
	    case 5: perk = "Traphouse";
	    case 6: perk = "Crackhouse";
	    case 7: perk = "Sales tax";
	    case 8: perk = "Locked turf";
	}

    SendClientMessageEx(playerid, COLOR_SERVERDEF, "_____ %s (%s) _____", TurfInfo[turfid][tName], perk);

	if(TurfInfo[turfid][tType] == 8)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* This turf is owned by {%06x}%s{FFFFFF} and is not available to capture.", color >>> 8, name);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "* This turf captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", TurfInfo[turfid][tCapturedBy], color >>> 8, name, TurfInfo[turfid][tTime]);

    	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID)
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "* This turf is being captured by %s and will be theirs in %i minutes.", GetRPName(TurfInfo[turfid][tCapturer]), TurfInfo[turfid][tCaptureTime]);
		}
	}

	return 1;
}



CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}
CMD:defend(playerid, params[])
{
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - PlayerData[playerid][pLastDefend] < time)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - PlayerData[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /defend [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't defend yourself.");
	}
	if(!PlayerData[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not wanted.");
	}
	if(amount < 1000 || amount > 10000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1000 or above $10000.");
	}

	PlayerData[targetid][pDefendOffer] = playerid;
	PlayerData[targetid][pDefendPrice] = amount;
	PlayerData[playerid][pLastDefend] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "* Lawyer %s has offered to defend your wanted level for $%i. (/accept lawyer)", GetRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have offered to defend %s's wanted level for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:free(playerid, params[])
{
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /free [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerData[targetid][pJailType] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not in IC jail.");
	}
	if(PlayerData[targetid][pJailTime] < time * 60)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't free this player, their jail time expires soon.");
	}

	PlayerData[targetid][pJailTime] -= time * 60;

	SendClientMessageEx(targetid, COLOR_AQUA, "* Lawyer %s has reduced your jail sentence by %i minutes.", GetRPName(playerid), time);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have reduced %s's jail sentence by %i minutes.", GetRPName(targetid), time);
	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	ShowActionBubble(playerid, "* %s ejects %s from the vehicle.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1603.7220,-1176.7534,24.3658))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the casino.");
	}
	if(PlayerData[playerid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least level 3+ in order to dice bet.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dicebet [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerData[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player must be at least level 3+ to bet with them.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1.");
	}
	if(PlayerData[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerData[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerData[playerid][pLastBet]));
	}

	PlayerData[targetid][pDiceOffer] = playerid;
	PlayerData[targetid][pDiceBet] = amount;
	PlayerData[targetid][pDiceRigged] = 0;
	PlayerData[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has initiated a dice bet with you for $%i (/accept dicebet).", GetRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have initiated a dice bet against %s for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:dicebetrigged(playerid, params[]) // Added to keep the economy in control. And to make people qq when they lose all their cash.
{
	new targetid, amount;

	if(PlayerData[playerid][pAdmin] < MANAGEMENT)
	{
	    return -1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1603.7220,-1176.7534,24.3658))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dicebetrigged [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerData[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player must be at least level 3+ to bet with them.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1.");
	}
	if(PlayerData[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerData[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerData[playerid][pLastBet]));
	}

	PlayerData[targetid][pDiceOffer] = playerid;
	PlayerData[targetid][pDiceBet] = amount;
	PlayerData[targetid][pDiceRigged] = 1;
	PlayerData[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has initiated a dice bet with you for $%i (/accept dicebet).", GetRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have initiated a dice bet against %s for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /calculate [value 1] [option] [value 2]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't divide by zero.");
	}

	if(option == '+') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "* Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "* Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SendClientMessageEx(playerid, COLOR_GREEN, "* Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SendClientMessageEx(playerid, COLOR_GREEN, "* Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	new houses, businesses, garages, vehicles, lands, entrances, turfs, points, gangs, factions, lockers;

	houses = Iter_Count(House);
	businesses = Iter_Count(Business);
	garages = Iter_Count(Garage);
	vehicles = Iter_Count(Vehicle);
	lands = Iter_Count(Land);
	entrances = Iter_Count(Entrance);
	turfs = Iter_Count(Turf);
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;
	for(new i = 0; i < MAX_LOCKERS; i ++) 	 if(LockerInfo[i][lExists]) 	lockers++;

	SendClientMessage(playerid, COLOR_SERVERDEF, "______ Prospect Roleplay Stats ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SendClientMessageEx(playerid, COLOR_GREY2, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Lands: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, lands, MAX_LANDS, vehicles, MAX_VEHICLES);
	SendClientMessageEx(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i - Lockers: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS, lockers, MAX_LOCKERS);
	SendClientMessageEx(playerid, COLOR_GREY2, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:watch(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!PlayerData[playerid][pWatch])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!PlayerData[playerid][pWatchOn])
	{
	    if(PlayerData[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerData[playerid][pWatchOn] = 1;
	    TextDrawShowForPlayer(playerid, TimeTD);
	    ShowActionBubble(playerid, "* %s turns on their pocket watch.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[playerid][pWatchOn] = 0;
	    TextDrawHideForPlayer(playerid, TimeTD);
	    ShowActionBubble(playerid, "* %s turns off their pocket watch.", GetRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!PlayerData[playerid][pGPS])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a GPS. You can buy one at 24/7.");
	}

	if(!PlayerData[playerid][pGPSOn])
	{
	    if(PlayerData[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerData[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, PlayerData[playerid][pText][0], "Loading...");
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pText][0]);

	    ShowActionBubble(playerid, "* %s turns on their GPS.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[playerid][pGPSOn] = 0;
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pText][0]);
	    ShowActionBubble(playerid, "* %s turns off their GPS.", GetRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(PlayerData[playerid][pPaintball] > 0 || PlayerData[playerid][pJoinedEvent] || PlayerData[playerid][pJailType] > 0 || PlayerData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendClientMessage(playerid, COLOR_GREY, "Your virtual world has been fixed.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Your virtual world is not bugged at the moment.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pAcceptedHelp] || PlayerData[playerid][pMiningTime] > 0 || PlayerData[playerid][pFishTime] > 0 || PlayerData[playerid][pLootTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerData[playerid][pLastStuck] < 5)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - PlayerData[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SendClientMessage(playerid, COLOR_GREY, "You are no longer stuck.");

	PlayerData[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!PlayerData[playerid][pDuty])
	{
	    if(PlayerData[playerid][pJoinedEvent] || PlayerData[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your badge on while in a event or paintball match.");
		}
	    PlayerData[playerid][pDuty] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, "You have enabled your badge. Your nametag color now shows for all players.");
	}
	else
	{
	    PlayerData[playerid][pDuty] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "You have disabled your badge. Your nametag color no longer shows for any players.");
	}

	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1370.3395, -15.4556, 1000.9219);
	SetPlayerPos(target2, 1414.4841, -15.1239, 1000.9253);
	SetPlayerFacingAngle(target1, 270.0000);
	SetPlayerFacingAngle(target2, 90.0000);

	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, 0);
	SetPlayerVirtualWorld(target2, 0);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GivePlayerWeaponEx(target1, weapon1, true);
	GivePlayerWeaponEx(target1, weapon2, true);
	GivePlayerWeaponEx(target2, weapon1, true);
	GivePlayerWeaponEx(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	PlayerData[target1][pDueling] = target2;
	PlayerData[target2][pDueling] = target1;

	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced %s and %s into a duel.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:mole(playerid, params[]) // MADE BY THE ONE AND ONLY Hernandez!
{
 	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerData[playerid][pAdmin] < ADMINISTRATOR)
 	{
  		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	}
 	if(isnull(params))
 	{
     	SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /mole [text]");
     	SendClientMessage(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SendClientMessageToAllEx(COLOR_YELLOW, "* SMS from Athena: %s, Ph: 666 *", params);
 	return 1;
}

CMD:info(playerid, params[])
{
	return callcmd::information(playerid, params);
}
/*CMD:mask(playerid, params[])
{
	if(PlayerData[playerid][pMaskID] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a mask.");
	}
	if(PlayerData[playerid][pMaskOn] == 0)
	{
		PlayerData[playerid][pMaskOn] = 1;
		SetPlayerSpecialTag(playerid, TAG_MASK);
		callcmd::me(playerid, " takes out a mask as he wears it.");
	}
	else {
		PlayerData[playerid][pMaskOn] = 0;
		SetPlayerSpecialTag(playerid, TAG_NONE);
		callcmd::me(playerid, " takes off his mask as he put it in his pocket.");
	}
	return 1;
}
*/
CMD:information(playerid, params[])
{
	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Server Information _____");
	SendClientMessageEx(playerid, COLOR_GREY2, "Website: www.prospectrp.net");
	SendClientMessageEx(playerid, COLOR_GREY2, "Discord: www.prospectrp.net/discord");
	SendClientMessageEx(playerid, COLOR_GREY2, "UCP: Development");
	SendClientMessage(playerid, COLOR_GREY2, "Shop: Development");
	return 1;
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic or Taxi Driver.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takecall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(PlayerHasJob(playerid, JOB_MECHANIC) && PlayerData[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerData[targetid][pMechanicCall] = 0;
		PlayerData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's mechanic call. Their location was marked on your map.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has accepted your mechanic call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && PlayerData[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerData[targetid][pTaxiCall] = 0;
		PlayerData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's taxi call. Their location was marked on your map.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has accepted your taxi call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "That player has no calls which can be taken.");
	}

	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Emergency Calls _____");

	foreach(new i : Player)
	{
	    if((PlayerData[i][pEmergencyCall] > 0) && ((PlayerData[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (PlayerData[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "* %s[%i] - Expiry: %i seconds - Emergency: %s", GetRPName(i), i, PlayerData[i][pEmergencyCall], PlayerData[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pEmergencyCall])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't called 911 recently or their call expired.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
	}

	//PlayerData[targetid][pEmergencyCall] = 0;
	PlayerData[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted %s's emergency call. Their location was marked on your map.", GetRPName(targetid));

	if(PlayerData[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SendClientMessageEx(targetid, COLOR_AQUA, "* %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}

	return 1;
}

CMD:startchat(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(re)ply to speak with this admin.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(re)ply to speak to the player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(re)ply to speak with them.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SendClientMessageEx(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:re(playerid, params[])
{
	return callcmd::reply(playerid, params);
}

CMD:reply(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(re)ply [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(PlayerData[playerid][pAdmin] > 1 && PlayerData[playerid][pAdminHide] == 0)
	        	SendClientMessageEx(i, COLOR_YELLOW, "* %s %s (ID %i): %s *", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
			else
			    SendClientMessageEx(i, COLOR_YELLOW, "* Player %s (ID %i): %s *", GetRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gascan [amount]");
	}
	if(amount < 1 || amount > PlayerData[playerid][pGasCan])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't add that much gasoline to the vehicle.");
	}

	PlayerData[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET gascan = %i WHERE uid = %i", PlayerData[playerid][pGasCan], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	ShowActionBubble(playerid, "* %s refills the %s's gas tank with %i liters of gasoline.", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}
CMD:robbiz(playerid, params[])
{
	new bizid;
	{
		if(PlayerData[playerid][pRobbingBiz] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You're already robbing a business.");
		}
		if((bizid = GetInsideBusiness(playerid)) != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't inside a business that you can rob.");
		}
		if(PlayerData[playerid][pLootTime] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are already looting a business.");
		}
		if(PlayerData[playerid][pRobCash] >= 10000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Your pockets can't hold more than $10,000 of money!");
		}

		PlayerData[playerid][pRobbingBiz] = bizid;
		PlayerData[playerid][pLootTime] = 5;
	}
	return 1;
}
CMD:stoprobbery(playerid, params[])
{
    if(PlayerData[playerid][pRobbingBiz] < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't actively robbing a business.");
	}
	if(GetInsideBusiness(playerid) != PlayerData[playerid][pRobbingBiz])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't inside the business you were robbing.");
	}
	PlayerData[playerid][pRobbingBiz] = -1;
	PlayerData[playerid][pCP] = CHECKPOINT_ROBBERY;
    SendClientMessageEx(playerid, COLOR_AQUA, "You have robbed a total of %s. You need to get this cash immediately to the {FF6347}marker{33CCFF} before the cops catch you!", FormatNumber(PlayerData[playerid][pRobCash]));
	SetPlayerCheckpoint(playerid, 1429.9939, 1066.9581, 9.8938, 3.0);
	return 1;
}
CMD:robbank(playerid, params[])
{
	new count;

	if(PlayerData[playerid][pLevel] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 7+ to use this command.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't rob the bank as a robbery has already started.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't rob the bank as a law enforcer. Ask your boss for a raise.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && !PlayerData[i][pAdminDuty])
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There needs to be at least 3+ LEO online in order to rob the bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    PlayerData[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SendClientMessage(playerid, COLOR_AQUA, "You have setup a {FF6347}bank robbery{33CCFF}. You need to /robinvite at least 2 more people in order to begin the heist.");
	SendClientMessage(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /bombvault at the checkpoint to blow the vault.");
	return 1;
}

CMD:robinvite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /robinvite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
 	if(IsLawEnforcement(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't invite law enforcement to rob the bank.");
	}

	PlayerData[targetid][pRobberyOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has invited you to a bank robbery. (/accept robbery)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have invited %s to join your bank robbery.", GetRPName(targetid));
	return 1;
}

CMD:bombvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);

	ShowActionBubble(playerid, "* %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "* Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in an active bank robbery.");
	}
	if(!RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The bank robbery hasn't started yet.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the deposit boxes.");
	}
	if(PlayerData[playerid][pLootTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already looting a deposit box.");
	}
	if(PlayerData[playerid][pRobCash] >= 100000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your pockets can't hold more than $100,000 of money!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of this bank robbery.");
	}

	PlayerData[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:robbers(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no bank robbery currently active.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "______ Robbers Alive ______");

	foreach(new i : Player)
	{
	    if(IsPlayerInBankRobbery(i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s {00AA00}(%s stolen)", i, GetRPName(i), FormatNumber(PlayerData[i][pRobCash]));
		}
	}

	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "* MOTD: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && PlayerData[playerid][pAdmin] > 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "* Admin MOTD: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (PlayerData[playerid][pAdmin] > 0))
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "* Helper MOTD: %s", helperMOTD);
	}
	if(PlayerData[playerid][pGang] >= 0 && strcmp(GangInfo[PlayerData[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "* Gang MOTD: %s", GangInfo[PlayerData[playerid][pGang]][gMOTD]);
	}
	if(PlayerData[playerid][pFaction] >= 0 && strcmp(FactionInfo[PlayerData[playerid][pFaction]][fMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "* Faction MOTD: %s", FactionInfo[PlayerData[playerid][pFaction]][fMOTD]);
	}

	return 1;
} // Renisal - ERROR ALERT, STILL WORKING ON THIS
CMD:createlocation(playerid, params[])
{
    new name[32], Float:x, Float:y, Float:z;
    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    }
    if(sscanf(params, "s[32]", name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createlocation [name]");
		SendClientMessage(playerid, COLOR_WHITE, "* NOTE: The location will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
		if(!LocationInfo[i][locExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO locations VALUES(null, '%e', '%f', '%f', '%f')", name, x, y, z);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocation", "iisfff", playerid, i, name, x, y, z);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Location slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:createatm(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (GetNearbyAtm(playerid) != -1)
	{
	    return SendErrorMessage(playerid, "There is another ATM nearby.");
	}
	else
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:angle,
			id = -1;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 2.0 * floatsin(-angle, degrees);
		y += 2.0 * floatcos(-angle, degrees);

		id = AddATMMachine(x, y, z, angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

		if (id == -1)
		{
		    return SendErrorMessage(playerid, "There are no available ATM slots.");
		}
		else
		{
		    EditDynamicObjectEx(playerid, EDIT_TYPE_ATM, ATM[id][atmObject], id);
		    SendInfoMessage(playerid, "You have added ATM machine %i (/editatm).", id);
		}
	}
	return 1;
}

CMD:gotoatm(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
	    return SendSyntaxMessage(playerid, "/gotoatm (machine ID)");
	}
	else if (!IsValidATMID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid ATM machine.");
	}
	else
	{
	    TeleportToCoords(playerid, ATM[id][atmSpawn][0], ATM[id][atmSpawn][1], ATM[id][atmSpawn][2], ATM[id][atmSpawn][3], ATM[id][atmInterior], ATM[id][atmWorld]);
	    SendInfoMessage(playerid, "You have teleported to ATM machine %i.", id);
	}
	return 1;
}

CMD:editatm(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
		return SendSyntaxMessage(playerid, "/editatm (machine ID)");
	}
	else if (!IsValidATMID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid ATM machine.");
	}
	else
	{
    	EditDynamicObjectEx(playerid, EDIT_TYPE_ATM, ATM[id][atmObject], id);
		SendInfoMessage(playerid, "Click on the disk icon to save changes.");
	}
	return 1;
}

CMD:deleteatm(playerid, params[])
{
	new id;

	if (PlayerData[playerid][pAdmin] < 5)
	{
		return SendErrorMessage(playerid, "You are not privileged to use this command.");
	}
	else if (sscanf(params, "i", id))
	{
	    return SendSyntaxMessage(playerid, "/deleteatm (machine ID)");
	}
	else if (!IsValidATMID(id))
	{
	    return SendErrorMessage(playerid, "You have specified an invalid ATM machine.");
	}
	else
	{
	    DestroyDynamic3DTextLabel(ATM[id][atmText]);
	    DestroyDynamicObject(ATM[id][atmObject]);

	    format(queryBuffer, sizeof(queryBuffer), "DELETE FROM rp_atms WHERE `atmID` = %i", ATM[id][atmID]);
	    mysql_tquery(connectionID, queryBuffer);

		ATM[id][atmExists] = 0;
        SendInfoMessage(playerid, "You have deleted ATM %i.", id);
	}
	return 1;
}
CMD:removelocation(playerid, params[])
{
	new loc;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocation [locationid]");
	}
	if(!(0 <= loc < MAX_LOCATIONS) || !LocationInfo[loc][locExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid location.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM locations WHERE id = %i", LocationInfo[loc][locID]);
	mysql_tquery(connectionID, queryBuffer);
	LocationInfo[loc][locName][0] = EOS;
	LocationInfo[loc][locExists] = false;
	LocationInfo[loc][locID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed location %i.", loc);
	return 1;
}

CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Locker slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:editland(playerid, params[])
{
	new landid, option[32], param[32];
	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", landid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editland [landid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Price, Level, Height, Owner");
		return 1;
	}
    if(!strcmp(option, "price", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1<= value <= 100000000))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "Value cannot be less than 1 or more than 100M");
		}
	    LandInfo[landid][lPrice] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET price = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You set land %i's price to %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Land levels cannot be below 0 or more than 3");
		}
	    LandInfo[landid][lLevel] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET level = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You set land %i's price to %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "height", true))
	{
	    if(sscanf(param, "s", "confirm"))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [confirm]", landid, option);
		}

		GetPlayerPos(playerid, LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ]);
 	  //  LandInfo[landid][lPickup] = zCoord[1]; We need this, land pickup, when you create a land at height it will create a pickup like house pickup.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET heightx = %f, heighty = %f, heightz = %f WHERE id = %i", LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ], LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_AQUA, "* You have land %i's (height) pos to your current height Pos (%f %f %f).", landid, LandInfo[landid][lHeightX], LandInfo[landid][lHeightY], LandInfo[landid][lHeightZ]);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;
		if(sscanf(param, "u", targetid))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
	   	SetLandOwner(landid, targetid);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You set land %i's owner to %s.", landid, GetRPName(targetid));
		ReloadLand(landid);
	}
	return 1;
}
CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position, FactionID, Icon, Label, Weapons");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You have moved locker %i to your position.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "* You set locker %i's faction to %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "* You've changed the pickup icon model of locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've enabled the 3D text label for locker %i.", lockerid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "* You've disabled the 3D text label for locker %i.", lockerid);
	}
	else if(!strcmp(option, "weapons", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }
	    new inputtext[24], opt2[8], amount;
	    if(sscanf(param, "s[24]s[8]i", inputtext, opt2, amount))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [weapons] [weaponname] [option] [amount]");
            SendClientMessage(playerid, COLOR_GREEN, "Weapon Name: Kevlar, Medkit, Nitestick, Mace, Deagle, Shotgun, M4, MP5, Spas12, Sniper, Camera, FireExt, Painkillers");
			SendClientMessage(playerid, COLOR_YELLOW, "Options: Allow, Price");
			SendClientMessage(playerid, COLOR_ORANGE, "Amount: Price (amount), Allow (1 or 0)");
	        return 1;
	    }
		if(!strcmp(opt2, "allow", true))
		{
		    if(!(0 <= amount <= 1)) return SendClientMessage(playerid, COLOR_GREY, "Amount can be 1 or 0");
			if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			SendClientMessageEx(playerid, COLOR_GREY, "Locker %i's %s status set to %i", lockerid, inputtext, amount);
		}
		else if(!strcmp(opt2, "price", true))
		{
            if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
		    SendClientMessageEx(playerid, COLOR_GREY, "Locker %i's %s price set to %i", lockerid, inputtext, amount);
		}
	}
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER && !PlayerData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerData[playerid][pAdminDuty] && PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:namehistory(playerid, params[])
{
	new targetid;

	if(PlayerData[playerid][pAdmin] < ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /namehistory [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM log_namehistory WHERE uid = %i ORDER BY id DESC", PlayerData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckNameHistory", "ii", playerid, targetid);

	return 1;
}

CMD:unmute(playerid, params[])
{
	new string[128];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unmute [newbie | report | global]");
	}

	if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerData[playerid][pNewbieMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from the newbie chat.");
		}
		if(PlayerData[playerid][pNewbieMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerData[playerid][pNewbieMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerData[playerid][pCash]+PlayerData[playerid][pBank], 5));
		Dialog_Show(playerid, DIALOG_NEWBIEUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}
	else if(!strcmp(params, "report", true))
	{
	    if(!PlayerData[playerid][pReportMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from submitting reports.");
		}
		if(PlayerData[playerid][pReportMuted] <= 12)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Your report mute is not indefinite and expires in %i playing hours.", PlayerData[playerid][pReportMuted]);
		}
		if(PlayerData[playerid][pReportMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerData[playerid][pReportMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerData[playerid][pCash]+PlayerData[playerid][pBank], 5));
		Dialog_Show(playerid, DIALOG_REPORTUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerData[playerid][pGlobalMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from the global chat.");
		}
		if(PlayerData[playerid][pGlobalMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerData[playerid][pGlobalMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerData[playerid][pCash]+PlayerData[playerid][pBank], 5));
		Dialog_Show(playerid, DIALOG_GLOBALUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:ahide(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return 0;
	}

	if(!PlayerData[playerid][pAdminHide])
	{
	    PlayerData[playerid][pAdminHide] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You are now hidden in /admins and your admin rank no longer shows in /a, /g or /o.");
	}
	else
	{
	    PlayerData[playerid][pAdminHide] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer hidden as an administrator.");
	}

	return 1;
}

CMD:breakin(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

    if(PlayerData[playerid][pTazedTime] > 0 || PlayerData[playerid][pInjured] > 0 || PlayerData[playerid][pHospital] > 0 || PlayerData[playerid][pCuffed] > 0 || PlayerData[playerid][pTied] > 0 || PlayerData[playerid][pJoinedEvent] > 0 || PlayerData[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may only break into a player owned vehicle.");
	}
	if(VehicleInfo[vehicleid][vLocked] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is unlocked. Therefore you can't break into it.");
	}
	if(PlayerData[playerid][pLockBreak] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already attempting to break into this vehicle.");
	}
	/*if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle cannot be broken into.");
	}*/
	if(IsVehicleOwner(playerid, vehicleid))
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "Why would you want to break into your own vehicle?");
	}
	if(IsVehicleBeingPicked(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is already being broken into by someone else.");
	}

	PlayerData[playerid][pLockBreak] = vehicleid;
	PlayerData[playerid][pLockHealth] = 1000.0;

	SendClientMessage(playerid, COLOR_AQUA, "You have started the {FF6347}break-in{33CCFF} process. Start hitting the driver or passenger side door to break it down.");
	SendClientMessage(playerid, COLOR_AQUA, "You can use your fists for this job, however melee weapons are preferred and gets the job done faster.");
	return 1;
}
CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_GREY, "Usage: /breakcuffs [playerid/name]");

	if (PlayerData[playerid][pCrowbar] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a crowbar.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInRangeOfPlayer(playerid, userid, 6.0))
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is disconnected or not near you.");

	if (!PlayerData[userid][pCuffed])
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is not cuffed.");

	if (userid == playerid)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't pick your own handcuffs.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s attempts to pick the cuffs with a crowbar.", GetRPName(playerid));
	return 1;
}
forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{

	if (random(2))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have failed to pick the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has failed to pick the cuffs.", GetRPName(playerid));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    SendClientMessage(playerid, COLOR_GREEN, "You have picked the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has picked the cuffs from %s's wrists.", GetRPName(playerid), GetRPName(userid));
	}
	return 1;
}
CMD:dropcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerData[playerid][pThiefCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before dropping off another car.", PlayerData[playerid][pThiefCooldown]);
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(IsVehicleOwner(playerid, vehicleid) || PlayerData[playerid][pVehicleKeys] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drop off a vehicle that belongs to you.");
	}
	if(!GetVehicleCranePrice(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't worth anything. Therefore you can't sell it.");
	}
	if(PlayerData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active checkpoint already. /killcp to cancel it.");
	}
	if(VehicleInfo[vehicleid][vID] > 0 && IsPointInRangeOfPoint(VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], 600.0, 2695.8010, -2226.6643, 13.5501))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is parked too close to the crane.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 300.0, 2695.8010, -2226.6643, 13.5501))
	{
	    PlayerData[playerid][pDropTime] = gettime();
	}

	PlayerData[playerid][pCP] = CHECKPOINT_DROPCAR;

	SendClientMessage(playerid, COLOR_AQUA, "Navigate to the {FF6347}checkpoint{33CCFF} at the crane to drop off your vehicle.");
	SetPlayerCheckpoint(playerid, 2695.8010, -2226.6643, 13.5501, 5.0);
	return 1;
}

CMD:carvalue(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be in a vehicle to use this command.");
	}
	if(IsVehicleOwner(playerid, vehicleid) || PlayerData[playerid][pVehicleKeys] == vehicleid)
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "This vehicle belongs to you. It's not worth anything.");
	}
	if(!GetVehicleCranePrice(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't worth anything.");
	}

	SendClientMessage(playerid, COLOR_SERVERDEF, "_____ Car Value _____");
	SendClientMessageEx(playerid, COLOR_GREY2, "Name: %s", GetVehicleName(vehicleid));

	if(GetVehicleCranePrice(vehicleid, false) == GetVehicleCranePrice(vehicleid))
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid));
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid, false));

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	 	{
	 	    if(VehicleInfo[vehicleid][vNeon] != 0)
	 	    {
	 	        SendClientMessage(playerid, COLOR_GREY2, "Neon: {00AA00}+$1000");
			}
	 	    if(VehicleInfo[vehicleid][vAlarm] != 0)
	 	    {
	 	        SendClientMessageEx(playerid, COLOR_GREY2, "Alarm: {00AA00}+$%i", VehicleInfo[vehicleid][vAlarm] * 500);
			}
	 	    if(VehicleInfo[vehicleid][vTrunk] != 0)
	 	    {
			 	SendClientMessageEx(playerid, COLOR_GREY2, "Trunk: {00AA00}+$%i", VehicleInfo[vehicleid][vTrunk] * 250);
			}
		}

	    SendClientMessageEx(playerid, COLOR_GREY2, "Total Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid));
	}

	return 1;
}

CMD:cracktrunk(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(PlayerData[playerid][pCocaineCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before cracking into another trunk.", PlayerData[playerid][pCocaineCooldown]);
	}
	if(vehicleid == INVALID_VEHICLE_ID || !IsPlayerInRangeOfBoot(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be close to a vehicle's trunk.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from inside the vehicle.");
	}
	if(IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't crack the trunk on your own vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only crack into a player owned vehicle's trunk.");
	}
	if(VehicleInfo[vehicleid][vLocked])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is locked. /breakin to attempt to unlock it.");
	}
	if(PlayerData[playerid][pCocaineTrunk] != INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already cracking a trunk at the moment. Leave the area to cancel.");
	}
	PlayerData[playerid][pCocaineTrunk] = vehicleid;

	ShowActionBubble(playerid, "* %s begins to pry open the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_WHITE, "* This will take about %i seconds. Do not move during the process.", PlayerData[playerid][pCocaineTime]);
	return 1;
}

CMD:myoffenses(playerid)
{
	new string[300], jailtype[32];
	switch(PlayerData[playerid][pJailType])
	{
	    case 0: jailtype = "None";
	    case 1: jailtype = "OOC jail";
	    case 2: jailtype = "OOC prison";
	    case 3: jailtype = "IC prison";
	}
	format(string, sizeof(string), "{ffffff}Warnings:{F7A763} %i\n{ffffff}DM Warnings: {F7A763}%i/3\n{ffffff}Report Warnings: {F7A763}%i/3\n{ffffff}Jail Type:{F7A763} %s\n{ffffff}Jail Time: {F7A763}%s sec",
	PlayerData[playerid][pWarnings], PlayerData[playerid][pDMWarnings], PlayerData[playerid][pReportWarns], jailtype, FormatNumber(PlayerData[playerid][pJailTime], 0));
	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{d3d3d3}My offenses", string, "Close", "");
	return 1;
}

CMD:myskills(playerid)
{
	new string[300];
	format(string, sizeof(string), "{FFFFFF}Inventory Skill: {F7A763}%i/5\n{FFFFFF}Addict Skill:{F7A763} %i/3\n{FFFFFF}Trader Skill: {F7A763}%i/3\n{FFFFFF}Asset Skill:{F7A763} %i/4\n{FFFFFF}Labor Skill: {F7A763}%i/5",
	PlayerData[playerid][pInventoryUpgrade], PlayerData[playerid][pAddictUpgrade], PlayerData[playerid][pTraderUpgrade], PlayerData[playerid][pAssetUpgrade], PlayerData[playerid][pLaborUpgrade]);
	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{d3d3d3}My skills", string, "Close", "");
	return 1;
}

CMD:myfactionstats(playerid)
{
	new string[300], faction[48], facrank[32], gang[32], gangrank[32], gangcrew[32], division[32];
	if(PlayerData[playerid][pFaction] >= 0)
	{
	    if(!strcmp(FactionInfo[PlayerData[playerid][pFaction]][fShortName], "None", true))
	    {
		    strcpy(faction, FactionInfo[PlayerData[playerid][pFaction]][fName]);
		}
		else
		{
		    strcpy(faction, FactionInfo[PlayerData[playerid][pFaction]][fShortName]);
		}

	    format(facrank, sizeof(facrank), "%s (%i)", FactionRanks[PlayerData[playerid][pFaction]][PlayerData[playerid][pFactionRank]], PlayerData[playerid][pFactionRank]);

	    if(PlayerData[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[PlayerData[playerid][pFaction]][PlayerData[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A (0)";
	    division = "None";
	}

	if(PlayerData[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[PlayerData[playerid][pGang]][gName]);
	    format(gangrank, sizeof(gangrank), "%s (%i)", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], PlayerData[playerid][pGangRank]);
	    if(PlayerData[playerid][pCrew] >= 0)
	    {
	        strcpy(gangcrew, GangCrews[PlayerData[playerid][pGang]][PlayerData[playerid][pCrew]]);
	    }
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A (0)";
	    gangcrew = "None";
	}
	format(string, sizeof(string), "{FFFFFF}Faction:{F7A763} %s\n{FFFFFF}Rank: {F7A763}%s\n{FFFFFF}Division: {F7A763}%s\n{FFFFFF}Gang:{F7A763} %s\n{FFFFFF}Rank: {F7A763}%s\n{FFFFFF}Crew: {F7A763}%s",
	faction, facrank, division, gang, gangrank, gangcrew);
	Dialog_Show(playerid, 1, DIALOG_STYLE_MSGBOX, "{d3d3d3}Faction stats", string, "Close", "");
	return 1;
}

CMD:achievements(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM achievements WHERE uid = %i", PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_ACHIEVEMENTS, playerid);
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2323.3250,110.9966,-5.3942))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in any of the hospitals.");
	}
	if(PlayerData[playerid][pCash] < 2000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford insurance.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(PlayerData[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -2000);
	        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
	        SendClientMessage(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}County General{33CCFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, PlayerData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerData[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(PlayerData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -2000);
	        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
	        SendClientMessage(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}All Saints Hospital{33CCFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, PlayerData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	}

	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tie [playerid]");
	}
	if(PlayerData[playerid][pRope] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any ropes left.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected, or is not in your vehicle.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie yourself.");
	}
	if(PlayerData[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already tied. /untie to free them.");
	}
	if(PlayerData[targetid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie a helper who is assisting someone.");
	}
	if(PlayerData[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie an on duty administrator.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to tie anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	PlayerData[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET rope = %i WHERE uid = %i", PlayerData[playerid][pRope], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	ShowActionBubble(playerid, "* %s ties %s with a rope.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	PlayerData[targetid][pTied] = 1;
	return 1;
}

CMD:blindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /blindfold [playerid]");
	}
	if(PlayerData[playerid][pBlindfold] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any blindfolds left.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't blindfold yourself.");
	}
	if(!PlayerData[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not tied.");
	}
	if(PlayerData[targetid][pBlinded])
	{
		return SendClientMessage(playerid, COLOR_GREY, "That player is already blindfolded.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to blindfold anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	PlayerData[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET blindfold = %i WHERE uid = %i", PlayerData[playerid][pBlindfold], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	TextDrawShowForPlayer(targetid, Blind);
	GameTextForPlayer(targetid, "~r~Blindfolded", 3000, 3);
	ShowActionBubble(playerid, "* %s blindfolds %s with a piece of rag.", GetRPName(playerid), GetRPName(targetid));

	PlayerData[targetid][pBlinded] = 1;
	return 1;
}

CMD:removeblindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeblindfold [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't remove your own blindfold while tied.");
	}
	if(!PlayerData[targetid][pBlinded])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not blindfolded.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to remove anyone's blindfold. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

    TextDrawHideForPlayer(targetid, Blind);
	ShowActionBubble(playerid, "* %s removes the blindfold from %s.", GetRPName(playerid), GetRPName(targetid));

	PlayerData[targetid][pBlinded] = 0;
	return 1;
}
CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't untie yourself.");
	}
	if(!PlayerData[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be in that player's vehicle in order to untie them.");
	}
	if(PlayerData[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to untie anyone. Please wait %i seconds before trying again.", PlayerData[playerid][pHurt]);
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	ShowActionBubble(playerid, "* %s unties the rope from %s.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 1);
	PlayerData[targetid][pTied] = 0;
	return 1;
}

CMD:repaircar(playerid, params[])
{
	new entranceid = GetNearbyEntrance(playerid);

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't nearby any repairshops.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerData[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your administrator level is too low to repair here.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific faction type.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerData[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific gang type.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerData[playerid][pDonator] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to donators.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't driving a vehicle.");
	}
    RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_GREY, "Your vehicle was repaired.");
	return 1;
}

CMD:offerduel(playerid, params[])
{
	new entranceid = GetInsideEntrance(playerid), targetid;

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of a duel arena.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerData[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your administrator level is too low to initiate duels here.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific faction type.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerData[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific gang type.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerData[playerid][pDonator] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to donators.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /offerduel [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't offer to duel with yourself.");
	}
	if(PlayerData[targetid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a duel.");
	}

	PlayerData[targetid][pDuelOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "* %s has offered you to duel with them. (/accept duel)", GetRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "* You have sent %s a duel offer.", GetRPName(targetid));
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(PlayerData[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot call for backup when you are dead.");
	}
	if(PlayerData[playerid][pCuffed])
	{
 		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerData[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(!PlayerData[playerid][pBackup])
	{
        PlayerData[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerData[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(PlayerData[i][pGang] == PlayerData[playerid][pGang])
        {
    	    if(PlayerData[playerid][pBackup])
    	    {
    	        SendClientMessageEx(i, COLOR_AQUA, "* %s %s is requesting backup in %s (marked on map). *", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SendClientMessageEx(i, COLOR_AQUA, "* %s %s has cancelled their backup request. *", GangRanks[PlayerData[playerid][pGang]][PlayerData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

CMD:confirmupgrade(playerid, params[])
{
	new houseid = PlayerData[playerid][pPreviewHouse], type = PlayerData[playerid][pPreviewType];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't previewing a house interior. '/upgradehouse interior' to begin.");
	}
	if(PlayerData[playerid][pCash] < houseInteriors[type][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade to this interior.");
	}

	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        SetPlayerPos(i, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	        SetPlayerFacingAngle(i, houseInteriors[type][intA]);
	        SetPlayerInterior(i, houseInteriors[type][intID]);
	        SetCameraBehindPlayer(i);
	    }
	}

	GivePlayerCash(playerid, -houseInteriors[type][intPrice]);

    HouseInfo[houseid][hType] = type;
    HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

    PlayerData[playerid][pPreviewHouse] = -1;
    PlayerData[playerid][pPreviewType] = 0;
    PlayerData[playerid][pPreviewTime] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to this interior for $%i.", houseInteriors[type][intPrice]);
    Log_Write("log_property", "%s (uid: %i) upgraded their house interior (id: %i) to interior %i for $%i.", GetPlayerNameEx(playerid), PlayerData[playerid][pID], HouseInfo[houseid][hID], type, houseInteriors[type][intPrice]);
	return 1;
}

CMD:cancelupgrade(playerid, params[])
{
	new houseid = PlayerData[playerid][pPreviewHouse];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't previewing a house interior at the moment.");
	}

	SetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hInterior]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hWorld]);
	SetCameraBehindPlayer(playerid);

	PlayerData[playerid][pPreviewHouse] = -1;
    PlayerData[playerid][pPreviewType] = 0;
    PlayerData[playerid][pPreviewTime] = 0;

    SendClientMessage(playerid, COLOR_WHITE, "You have cancelled your interior upgrade. You were returned back to your old one.");
    return 1;
}

CMD:giveachievement(playerid, params[])
{
	new targetid, name[32];

	if(PlayerData[playerid][pAdmin] < STAFF_MANAGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "us[32]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /giveachievement [playerid] [name]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerData[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	if(!AwardAchievement(targetid, name))
	{
	    SendClientMessage(playerid, COLOR_GREY, "Invalid achievement.");
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has awarded you with the {FF6347}%s{33CCFF} achievement.", GetRPName(playerid), name);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have awarded %s with the {FF6347}%s{33CCFF} achievement.", GetRPName(targetid), name);
	}

	return 1;
}

CMD:vipmusic(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be a donator to use this command!");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipmusic [songname.mp3]");
	}
	if(gettime() - gLastMusic < 300)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Music can only be played globally every 5 minutes.");
	}
	new url[144];
	format(url, sizeof(url), "http://%s/%i/%s", VIP_MUSIC_URL, PlayerData[playerid][pID], params);
	foreach(new i : Player)
	{
 		if(!PlayerData[i][pToggleMusic] && PlayerData[i][pStreamType] == MUSIC_NONE)
   		{
			PlayAudioStreamForPlayer(i, url);
		}
	}
	SendClientMessageToAllEx(COLOR_VIP, "VIP Music: %s %s has started the global playback of %s from their music folder!", GetVIPRank(PlayerData[playerid][pDonator]), GetRPName(playerid), params);
    gLastMusic = gettime();
	return 1;
}


CMD:forcetut(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < SENIOR_ADMINISTRATOR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcetut [playerid]");
	}
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has forced %s to watch the server tutorial", GetRPName(playerid), GetRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Administrator %s has forced you to rewatch the server tutorial.", GetRPName(playerid));
	PlayerData[targetid][pTutorial] = 1;
  	PlayerData[targetid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", targetid, 1);
  	return 1;
}
CMD:garbage(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PlayerHasJob(playerid, JOB_GARBAGEMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Garbage Man.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2449.1167,-2090.1445,13.5469))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the starting point");
	}
	if(PlayerData[playerid][pGarbage] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're already doing a garbage run!");
	}
	if(GetVehicleModel(vehicleid) == 408 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		GameTextForPlayer(playerid, "Proceed to the~n~Checkpoint", 5000, 3);
		PlayerData[playerid][pGarbage] = 1;
		PlayerData[playerid][pCP] = CHECKPOINT_GARBAGE;
	 	SetPlayerCheckpoint(playerid, 2382.1963,-1937.9064,13.5469, 5.0);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You must be in a trashmaster vehicle as a driver");
	}
	return 1;
}
CMD:clearreports(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < LEAD_ADMINISTRATOR)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SendAdminMessage(COLOR_LIGHTRED, "ADMIN: %s has cleared all active reports.", GetRPName(playerid));
	return 1;
}


CMD:endalliance(playerid, params[])
{
	new gangid = PlayerData[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /endalliance [confirm]");
	}
	if(PlayerData[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be in a gang to use this command");
	}
	if(PlayerData[playerid][pGangRank] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Your gang isn't currently in an alliance.");
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has ended their alliance with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_GANGS" SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:clothes(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have donator subscription.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1826.1705,-1307.7985,1131.7552))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Donator locker.");
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_VIPCLOTHES, "VIP Clothes", VipSkins, sizeof(VipSkins));
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(PlayerData[playerid][pFirstAid] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any first aid kits.");
	}
	if(GetPlayerHealthEx(playerid) >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use a first aid kit if your health is below 100.");
	}
	if(PlayerData[playerid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already used a first aid kit.");
	}

	PlayerData[playerid][pFirstAid]--;
	PlayerData[playerid][pReceivingAid] = 1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET firstaid = %i WHERE uid = %i", PlayerData[playerid][pFirstAid], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	ShowActionBubble(playerid, "* %s administers first aid to their self.", GetRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "HINT: Your first aid kit is in effect until your health is full.");
	return 1;
}

CMD:scanner(playerid, params[])
{
	if(!PlayerData[playerid][pPoliceScanner])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a police scanner.");
	}

	if(!PlayerData[playerid][pScannerOn])
	{
	    PlayerData[playerid][pScannerOn] = 1;
	    ShowActionBubble(playerid, "* %s turns on their police scanner.", GetRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "You will now hear messages from emergency and department chats.");
	}
	else
	{
	    PlayerData[playerid][pScannerOn] = 0;
	    ShowActionBubble(playerid, "* %s turns off their police scanner.", GetRPName(playerid));
	}

	return 1;
}

CMD:bodykit(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(PlayerData[playerid][pBodykits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no bodywork kits which you can use.");
	}
	if(gettime() - PlayerData[playerid][pLastRepair] < 60)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - PlayerData[playerid][pLastRepair]));
	}

    PlayerData[playerid][pBodykits]--;
    PlayerData[playerid][pLastRepair] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE "#TABLE_USERS" SET bodykits = %i WHERE uid = %i", PlayerData[playerid][pBodykits], PlayerData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	ShowActionBubble(playerid, "* %s repairs the health and bodywork on their vehicle.", GetRPName(playerid));
	return 1;
}
CMD:viprimkit(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(PlayerData[playerid][pDonator] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be a donator to use this command.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid && !(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] == VehicleInfo[vehicleid][vGang]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in this type of vehicle.");
	}

	Dialog_Show(playerid, DIALOG_USERIMKIT, DIALOG_STYLE_LIST, "Choose which set of rims to install.", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Select", "Cancel");
	return 1;
}
CMD:rimkit(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(PlayerData[playerid][pRimkits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no rimkits which you can use.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerData[playerid][pVehicleKeys] != vehicleid && !(VehicleInfo[vehicleid][vGang] >= 0 && PlayerData[playerid][pGang] == VehicleInfo[vehicleid][vGang]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in this type of vehicle.");
	}

	Dialog_Show(playerid, DIALOG_USERIMKIT, DIALOG_STYLE_LIST, "Choose which set of rims to install.", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Select", "Cancel");
	return 1;
}

CMD:shutdownserver(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= MANAGEMENT)
	{

		if(strcmp(params, "confirm", true))
		{
			SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /shutdown [confirm]");
 			SendClientMessage(playerid, COLOR_GREY3, "This command save all player accounts and shutsdown the server.");
  			return 1;
		}
		if(gGMX)
		{
	 	  	return SendClientMessage(playerid, COLOR_GREY, "You have already called for a server shutdown. You can't cancel it.");
		}

  		gGMX = 0;
		SetTimer("FinishServerShutdown", 5000, false);
		SendClientMessage(playerid, COLOR_GREY, "Server will shutdown in 5 seconds.");

		foreach(new i : Player)
		{
		    TogglePlayerControllable(i, 0);
			SavePlayerVariables(i);
		}
	}
	return 1;
}


CMD:showturfs(playerid, params[])
{
	if(!PlayerData[playerid][pShowTurfs])
	{
        	ShowTurfsOnMap(playerid, true);
        	SendClientMessage(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
	}
	else
	{
        	ShowTurfsOnMap(playerid, false);
        	SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
	}

	return 1;
}

CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	//SendClientMessageEx(playerid, COLOR_GREEN, "---- Turfs ----");
	string = "Id\tName\tOwner\tPerk\tTime Left\t";
    tsstring = "Id\tName\tOwner\tPerk\t";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 8 && TurfInfo[turfid][tType] > 0) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");

			format(string, sizeof(string), "%s\n{FFFFFF}%i\t %s\t{%06x}%s{FFFFFF}\t%s\t%s\n",string,turfid,TurfInfo[turfid][tName],color >>> 8,name,getTurftype(turfid),timeleft);

		//	else
		//	{
		//	    format(tsstring, sizeof(tsstring), "%s\n{FFFFFF}%i\t %s\t{%06x}%s{FFFFFF}\t%s\t%s\n",tsstring,turfid,TurfInfo[turfid][tName],color >>> 8,name,getTurftype(turfid),timeleft);
		//	}
		}
	}
    Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_TABLIST_HEADERS, "Turf list", string, "Cancel", "");
	return 1;
}
CMD:showrules(playerid, params[])
{
	new giveplayerid;
	if(!(PlayerData[playerid][pAdmin]>=1)) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command");

	if(sscanf(params,"i",giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "/showrules [playerid]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "That player is not connected");
	return ShowDialogToPlayer(giveplayerid, DIALOG_RULES);
}
CMD:rules(playerid, params[])
{
	return ShowDialogToPlayer(playerid, DIALOG_RULES);
}

CMD:fpm(playerid, params[]) {

	if(!firstperson[playerid])
	{
		firstperson[playerid] = 1;
		new iObjectID = CreateDynamicObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		SetPVarInt(playerid, "FP_OBJ", iObjectID);
        AttachObjectToPlayer(iObjectID, playerid, 0.0, 0.12, 0.7, 0.0, 0.0, 0.0);
        AttachCameraToObject(playerid, iObjectID);
	}
	else {

		firstperson[playerid] = 0;
		DestroyObject(GetPVarInt(playerid, "FP_OBJ"));
		DeletePVar(playerid, "FP_OBJ");
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}


/* Commands */

CMD:mdc(playerid, params[]) {
	if(GetPVarInt(playerid, "mdc_shown") != 0) return SendClientMessage(playerid, COLOR_GREY, "You already have the Mobile Data Computer opened (Reminder: Use /cursor to get your cursor back active).");
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT) return SendClientMessage(playerid, COLOR_GREY, "You have to be a police officer or government official to access the Mobile Data Computer.");
	new vehicleID = GetPlayerVehicleID(playerid),
		bool:access = false;

	if(VehicleInfo[vehicleID][vFactionType] == FACTION_POLICE || VehicleInfo[vehicleID][vFactionType] == FACTION_GOVERNMENT) {
		access = true;
	}

	if(access != true) {
        for(new i = 0; i < sizeof(mdc_coordinates); i++) {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, mdc_coordinates[i][0], mdc_coordinates[i][1], mdc_coordinates[i][2])) {
			    access = true;
			}
		}
	}

	if(access == true) {
		mdc_ShowPlayerStartScreen(playerid);
		SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
		SetPVarInt(playerid, "mdc_shown", 1);
	} else {
        SendClientMessage(playerid, COLOR_GREY, "You are not close to a computer of the Los Santos Police Department and are not in a government vehicle equipped with a Mobile Data Computer.");
	}

	return 1;
}

CMD:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}

/* Functions */


stock mdc_LoadTextdraws() {
    td_mdc_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Box, 255);
	TextDrawFont(td_mdc_Box, 1);
	TextDrawLetterSize(td_mdc_Box, 0.000000, 6.399999);
	TextDrawColor(td_mdc_Box, -1);
	TextDrawSetOutline(td_mdc_Box, 0);
	TextDrawSetProportional(td_mdc_Box, 1);
	TextDrawSetShadow(td_mdc_Box, 1);
	TextDrawUseBox(td_mdc_Box, 1);
	TextDrawBoxColor(td_mdc_Box, 125);
	TextDrawTextSize(td_mdc_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Box, 0);

    td_mdc_HeaderBox = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_HeaderBox, 255);
	TextDrawFont(td_mdc_HeaderBox, 1);
	TextDrawLetterSize(td_mdc_HeaderBox, 0.000000, 1.799998);
	TextDrawColor(td_mdc_HeaderBox, -1);
	TextDrawSetOutline(td_mdc_HeaderBox, 0);
	TextDrawSetProportional(td_mdc_HeaderBox, 1);
	TextDrawSetShadow(td_mdc_HeaderBox, 1);
	TextDrawUseBox(td_mdc_HeaderBox, 1);
	TextDrawBoxColor(td_mdc_HeaderBox, 100);
	TextDrawTextSize(td_mdc_HeaderBox, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_HeaderBox, 0);

	td_mdc_CitizenBox = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_CitizenBox, 255);
	TextDrawFont(td_mdc_CitizenBox, 1);
	TextDrawLetterSize(td_mdc_CitizenBox, 0.000000, 11.699997);
	TextDrawColor(td_mdc_CitizenBox, -1);
	TextDrawSetOutline(td_mdc_CitizenBox, 0);
	TextDrawSetProportional(td_mdc_CitizenBox, 1);
	TextDrawSetShadow(td_mdc_CitizenBox, 1);
	TextDrawUseBox(td_mdc_CitizenBox, 1);
	TextDrawBoxColor(td_mdc_CitizenBox, 125);
	TextDrawTextSize(td_mdc_CitizenBox, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_CitizenBox, 0);

	td_mdc_DataBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_DataBox, 255);
	TextDrawFont(td_mdc_DataBox, 1);
	TextDrawLetterSize(td_mdc_DataBox, 0.000000, 5.199998);
	TextDrawColor(td_mdc_DataBox, -1);
	TextDrawSetOutline(td_mdc_DataBox, 0);
	TextDrawSetProportional(td_mdc_DataBox, 1);
	TextDrawSetShadow(td_mdc_DataBox, 1);
	TextDrawUseBox(td_mdc_DataBox, 1);
	TextDrawBoxColor(td_mdc_DataBox, 125);
	TextDrawTextSize(td_mdc_DataBox, 255.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_DataBox, 0);

	td_mdc_OptionsBox = TextDrawCreate(432.000000, 329.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_OptionsBox, 255);
	TextDrawFont(td_mdc_OptionsBox, 1);
	TextDrawLetterSize(td_mdc_OptionsBox, 0.000000, 2.699999);
	TextDrawColor(td_mdc_OptionsBox, -1);
	TextDrawSetOutline(td_mdc_OptionsBox, 0);
	TextDrawSetProportional(td_mdc_OptionsBox, 1);
	TextDrawSetShadow(td_mdc_OptionsBox, 1);
	TextDrawUseBox(td_mdc_OptionsBox, 1);
	TextDrawBoxColor(td_mdc_OptionsBox, 125);
	TextDrawTextSize(td_mdc_OptionsBox, 208.000000, -70.000000);
	TextDrawSetSelectable(td_mdc_OptionsBox, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Box); i++) {
		td_mdc_cr_Box[i] = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
		TextDrawBackgroundColor(td_mdc_cr_Box[i], 255);
		TextDrawFont(td_mdc_cr_Box[i], 1);
		TextDrawLetterSize(td_mdc_cr_Box[i], 0.000000, 5.4999 + i * 0.8167);
		TextDrawColor(td_mdc_cr_Box[i], -1);
		TextDrawSetOutline(td_mdc_cr_Box[i], 0);
		TextDrawSetProportional(td_mdc_cr_Box[i], 1);
		TextDrawSetShadow(td_mdc_cr_Box[i], 1);
		TextDrawUseBox(td_mdc_cr_Box[i], 1);
		TextDrawBoxColor(td_mdc_cr_Box[i], 125);
		TextDrawTextSize(td_mdc_cr_Box[i], 198.000000, 0.000000);
		TextDrawSetSelectable(td_mdc_cr_Box[i], 0);
	}

    for(new i = 0; i < sizeof(td_mdc_cr_InnerBox); i++) {
		td_mdc_cr_InnerBox[i] = TextDrawCreate(432.000000, 228.000000, "New Textdraw");
		TextDrawBackgroundColor(td_mdc_cr_InnerBox[i], 255);
		TextDrawFont(td_mdc_cr_InnerBox[i], 1);
		TextDrawLetterSize(td_mdc_cr_InnerBox[i], 0.000000, 2.0999 + i * 0.8167);
		TextDrawColor(td_mdc_cr_InnerBox[i], -1);
		TextDrawSetOutline(td_mdc_cr_InnerBox[i], 0);
		TextDrawSetProportional(td_mdc_cr_InnerBox[i], 1);
		TextDrawSetShadow(td_mdc_cr_InnerBox[i], 1);
		TextDrawUseBox(td_mdc_cr_InnerBox[i], 1);
		TextDrawBoxColor(td_mdc_cr_InnerBox[i], 100);
		TextDrawTextSize(td_mdc_cr_InnerBox[i], 208.000000, 0.000000);
		TextDrawSetSelectable(td_mdc_cr_InnerBox[i], 1);
	}

	td_mdc_veh_Box = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_Box, 255);
	TextDrawFont(td_mdc_veh_Box, 1);
	TextDrawLetterSize(td_mdc_veh_Box, 0.000000, 6.299985);
	TextDrawColor(td_mdc_veh_Box, -1);
	TextDrawSetOutline(td_mdc_veh_Box, 0);
	TextDrawSetProportional(td_mdc_veh_Box, 1);
	TextDrawSetShadow(td_mdc_veh_Box, 1);
	TextDrawUseBox(td_mdc_veh_Box, 1);
	TextDrawBoxColor(td_mdc_veh_Box, 125);
	TextDrawTextSize(td_mdc_veh_Box, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_veh_Box, 0);

	td_mdc_veh_InnerBox = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_InnerBox, 255);
	TextDrawFont(td_mdc_veh_InnerBox, 1);
	TextDrawLetterSize(td_mdc_veh_InnerBox, 0.000000, 3.199998);
	TextDrawColor(td_mdc_veh_InnerBox, -1);
	TextDrawSetOutline(td_mdc_veh_InnerBox, 0);
	TextDrawSetProportional(td_mdc_veh_InnerBox, 1);
	TextDrawSetShadow(td_mdc_veh_InnerBox, 1);
	TextDrawUseBox(td_mdc_veh_InnerBox, 1);
	TextDrawBoxColor(td_mdc_veh_InnerBox, 100);
	TextDrawTextSize(td_mdc_veh_InnerBox, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_veh_InnerBox, 1);

	td_mdc_veh_BoxNoEnt = TextDrawCreate(442.000000, 178.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_BoxNoEnt, 255);
	TextDrawFont(td_mdc_veh_BoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_veh_BoxNoEnt, 0.000000, 4.199985);
	TextDrawColor(td_mdc_veh_BoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_BoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_BoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_BoxNoEnt, 1);
	TextDrawUseBox(td_mdc_veh_BoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_veh_BoxNoEnt, 125);
	TextDrawTextSize(td_mdc_veh_BoxNoEnt, 198.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_veh_BoxNoEnt, 0);

	td_mdc_veh_InnerBoxNoEnt = TextDrawCreate(432.000000, 223.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_veh_InnerBoxNoEnt, 255);
	TextDrawFont(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawLetterSize(td_mdc_veh_InnerBoxNoEnt, 0.000000, 1.199998);
	TextDrawColor(td_mdc_veh_InnerBoxNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_InnerBoxNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawUseBox(td_mdc_veh_InnerBoxNoEnt, 1);
	TextDrawBoxColor(td_mdc_veh_InnerBoxNoEnt, 100);
	TextDrawTextSize(td_mdc_veh_InnerBoxNoEnt, 255.000000, -10.000000);
	TextDrawSetSelectable(td_mdc_veh_InnerBoxNoEnt, 1);

	td_mdc_veh_TextNoEnt = TextDrawCreate(267.000000, 228.000000, "No entries could be found.");
	TextDrawBackgroundColor(td_mdc_veh_TextNoEnt, 255);
	TextDrawFont(td_mdc_veh_TextNoEnt, 2);
	TextDrawLetterSize(td_mdc_veh_TextNoEnt, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_TextNoEnt, -1);
	TextDrawSetOutline(td_mdc_veh_TextNoEnt, 0);
	TextDrawSetProportional(td_mdc_veh_TextNoEnt, 1);
	TextDrawSetShadow(td_mdc_veh_TextNoEnt, 1);
	TextDrawSetSelectable(td_mdc_veh_TextNoEnt, 0);

	td_mdc_veh_Model = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~Model Name:");
	TextDrawAlignment(td_mdc_veh_Model, 3);
	TextDrawBackgroundColor(td_mdc_veh_Model, 255);
	TextDrawFont(td_mdc_veh_Model, 2);
	TextDrawLetterSize(td_mdc_veh_Model, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Model, -524057345);
	TextDrawSetOutline(td_mdc_veh_Model, 0);
	TextDrawSetProportional(td_mdc_veh_Model, 1);
	TextDrawSetShadow(td_mdc_veh_Model, 1);
	TextDrawSetSelectable(td_mdc_veh_Model, 0);

	td_mdc_veh_Owner = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Owner:");
	TextDrawAlignment(td_mdc_veh_Owner, 3);
	TextDrawBackgroundColor(td_mdc_veh_Owner, 255);
	TextDrawFont(td_mdc_veh_Owner, 2);
	TextDrawLetterSize(td_mdc_veh_Owner, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Owner, -524057345);
	TextDrawSetOutline(td_mdc_veh_Owner, 0);
	TextDrawSetProportional(td_mdc_veh_Owner, 1);
	TextDrawSetShadow(td_mdc_veh_Owner, 1);
	TextDrawSetSelectable(td_mdc_veh_Owner, 0);

	td_mdc_veh_Plate = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~License Plate:");
	TextDrawAlignment(td_mdc_veh_Plate, 3);
	TextDrawBackgroundColor(td_mdc_veh_Plate, 255);
	TextDrawFont(td_mdc_veh_Plate, 2);
	TextDrawLetterSize(td_mdc_veh_Plate, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Plate, -524057345);
	TextDrawSetOutline(td_mdc_veh_Plate, 0);
	TextDrawSetProportional(td_mdc_veh_Plate, 1);
	TextDrawSetShadow(td_mdc_veh_Plate, 1);
	TextDrawSetSelectable(td_mdc_veh_Plate, 0);

	td_mdc_veh_Insurance = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Insurance:");
	TextDrawAlignment(td_mdc_veh_Insurance, 3);
	TextDrawBackgroundColor(td_mdc_veh_Insurance, 255);
	TextDrawFont(td_mdc_veh_Insurance, 2);
	TextDrawLetterSize(td_mdc_veh_Insurance, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Insurance, -524057345);
	TextDrawSetOutline(td_mdc_veh_Insurance, 0);
	TextDrawSetProportional(td_mdc_veh_Insurance, 1);
	TextDrawSetShadow(td_mdc_veh_Insurance, 1);
	TextDrawSetSelectable(td_mdc_veh_Insurance, 0);

	td_mdc_veh_ArrowRight = TextDrawCreate(425.000000, 276.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_veh_ArrowRight, 255);
	TextDrawFont(td_mdc_veh_ArrowRight, 4);
	TextDrawLetterSize(td_mdc_veh_ArrowRight, 0.500000, 1.000000);
	TextDrawColor(td_mdc_veh_ArrowRight, -1);
	TextDrawSetOutline(td_mdc_veh_ArrowRight, 0);
	TextDrawSetProportional(td_mdc_veh_ArrowRight, 1);
	TextDrawSetShadow(td_mdc_veh_ArrowRight, 1);
	TextDrawUseBox(td_mdc_veh_ArrowRight, 1);
	TextDrawBoxColor(td_mdc_veh_ArrowRight, 255);
	TextDrawTextSize(td_mdc_veh_ArrowRight, 10.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_veh_ArrowRight, 1);

	td_mdc_veh_Next = TextDrawCreate(404.000000, 276.000000, "~b~~h~~h~~h~Next");
	TextDrawBackgroundColor(td_mdc_veh_Next, 255);
	TextDrawFont(td_mdc_veh_Next, 2);
	TextDrawLetterSize(td_mdc_veh_Next, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Next, -1);
	TextDrawSetOutline(td_mdc_veh_Next, 0);
	TextDrawSetProportional(td_mdc_veh_Next, 1);
	TextDrawSetShadow(td_mdc_veh_Next, 1);
	TextDrawTextSize(td_mdc_veh_Next, 423.000000, 152.000000);
	TextDrawSetSelectable(td_mdc_veh_Next, 1);

	td_mdc_veh_Label = TextDrawCreate(254.000000, 217.000000, "~b~Vehicles");
	TextDrawBackgroundColor(td_mdc_veh_Label, 255);
	TextDrawFont(td_mdc_veh_Label, 2);
	TextDrawLetterSize(td_mdc_veh_Label, 0.170000, 1.000000);
	TextDrawColor(td_mdc_veh_Label, -1384438529);
	TextDrawSetOutline(td_mdc_veh_Label, 0);
	TextDrawSetProportional(td_mdc_veh_Label, 1);
	TextDrawSetShadow(td_mdc_veh_Label, 1);
	TextDrawSetPreviewModel(td_mdc_veh_Label, 480);
	TextDrawSetPreviewRot(td_mdc_veh_Label, -16.000000, 0.000000, -55.000000, 1.000000);
	TextDrawSetSelectable(td_mdc_veh_Label, 0);

	td_mdc_HeaderText = TextDrawCreate(209.000000, 189.000000, "~b~~h~Mobile Data Computer");
	TextDrawBackgroundColor(td_mdc_HeaderText, 255);
	TextDrawFont(td_mdc_HeaderText, 2);
	TextDrawLetterSize(td_mdc_HeaderText, 0.219999, 1.200000);
	TextDrawColor(td_mdc_HeaderText, -1384438529);
	TextDrawSetOutline(td_mdc_HeaderText, 0);
	TextDrawSetProportional(td_mdc_HeaderText, 1);
	TextDrawSetShadow(td_mdc_HeaderText, 1);
	TextDrawSetSelectable(td_mdc_HeaderText, 0);

	td_mdc_Exit = TextDrawCreate(420.000000, 189.000000, "LD_BEAT:cross");
	TextDrawBackgroundColor(td_mdc_Exit, 255);
	TextDrawFont(td_mdc_Exit, 4);
	TextDrawLetterSize(td_mdc_Exit, 0.500000, 1.000000);
	TextDrawColor(td_mdc_Exit, -1);
	TextDrawSetOutline(td_mdc_Exit, 0);
	TextDrawSetProportional(td_mdc_Exit, 1);
	TextDrawSetShadow(td_mdc_Exit, 1);
	TextDrawUseBox(td_mdc_Exit, 1);
	TextDrawBoxColor(td_mdc_Exit, 255);
	TextDrawTextSize(td_mdc_Exit, 10.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_Exit, 1);

	td_mdc_Section[0] = TextDrawCreate(316.000000, 228.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[0], 255);
	TextDrawFont(td_mdc_Section[0], 1);
	TextDrawLetterSize(td_mdc_Section[0], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[0], -1);
	TextDrawSetOutline(td_mdc_Section[0], 0);
	TextDrawSetProportional(td_mdc_Section[0], 1);
	TextDrawSetShadow(td_mdc_Section[0], 1);
	TextDrawUseBox(td_mdc_Section[0], 1);
	TextDrawBoxColor(td_mdc_Section[0], 100);
	TextDrawTextSize(td_mdc_Section[0], 208.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[0], 0);

	td_mdc_Section[1] = TextDrawCreate(316.000000, 257.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[1], 255);
	TextDrawFont(td_mdc_Section[1], 1);
	TextDrawLetterSize(td_mdc_Section[1], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[1], -1);
	TextDrawSetOutline(td_mdc_Section[1], 0);
	TextDrawSetProportional(td_mdc_Section[1], 1);
	TextDrawSetShadow(td_mdc_Section[1], 1);
	TextDrawUseBox(td_mdc_Section[1], 1);
	TextDrawBoxColor(td_mdc_Section[1], 100);
	TextDrawTextSize(td_mdc_Section[1], 208.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[1], 0);

	td_mdc_Section[2] = TextDrawCreate(432.000000, 257.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[2], 255);
	TextDrawFont(td_mdc_Section[2], 1);
	TextDrawLetterSize(td_mdc_Section[2], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[2], -1);
	TextDrawSetOutline(td_mdc_Section[2], 0);
	TextDrawSetProportional(td_mdc_Section[2], 1);
	TextDrawSetShadow(td_mdc_Section[2], 1);
	TextDrawUseBox(td_mdc_Section[2], 1);
	TextDrawBoxColor(td_mdc_Section[2], 100);
	TextDrawTextSize(td_mdc_Section[2], 323.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[2], 0);

	td_mdc_Section[3] = TextDrawCreate(432.000000, 228.000000, "New Textdraw");
	TextDrawBackgroundColor(td_mdc_Section[3], 255);
	TextDrawFont(td_mdc_Section[3], 1);
	TextDrawLetterSize(td_mdc_Section[3], 0.000000, 1.199999);
	TextDrawColor(td_mdc_Section[3], -1);
	TextDrawSetOutline(td_mdc_Section[3], 0);
	TextDrawSetProportional(td_mdc_Section[3], 1);
	TextDrawSetShadow(td_mdc_Section[3], 1);
	TextDrawUseBox(td_mdc_Section[3], 1);
	TextDrawBoxColor(td_mdc_Section[3], 100);
	TextDrawTextSize(td_mdc_Section[3], 323.000000, 0.000000);
	TextDrawSetSelectable(td_mdc_Section[3], 0);

	td_mdc_SectionText[0] = TextDrawCreate(262.000000, 234.000000, "~b~~h~~h~~h~Search Citizen");
	TextDrawAlignment(td_mdc_SectionText[0], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[0], 255);
	TextDrawFont(td_mdc_SectionText[0], 2);
	TextDrawLetterSize(td_mdc_SectionText[0], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[0], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[0], 0);
	TextDrawSetProportional(td_mdc_SectionText[0], 1);
	TextDrawSetShadow(td_mdc_SectionText[0], 1);
	TextDrawTextSize(td_mdc_SectionText[0], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[0], 1);

	td_mdc_SectionText[1] = TextDrawCreate(262.000000, 263.000000, "~b~~h~~h~~h~Search Weapon Serial");
	TextDrawAlignment(td_mdc_SectionText[1], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[1], 255);
	TextDrawFont(td_mdc_SectionText[1], 2);
	TextDrawLetterSize(td_mdc_SectionText[1], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[1], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[1], 0);
	TextDrawSetProportional(td_mdc_SectionText[1], 1);
	TextDrawSetShadow(td_mdc_SectionText[1], 1);
	TextDrawTextSize(td_mdc_SectionText[1], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[1], 1);

	td_mdc_SectionText[2] = TextDrawCreate(378.000000, 263.000000, "~b~~h~~h~~h~Search Phone Number");
	TextDrawAlignment(td_mdc_SectionText[2], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[2], 255);
	TextDrawFont(td_mdc_SectionText[2], 2);
	TextDrawLetterSize(td_mdc_SectionText[2], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[2], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[2], 0);
	TextDrawSetProportional(td_mdc_SectionText[2], 1);
	TextDrawSetShadow(td_mdc_SectionText[2], 1);
	TextDrawTextSize(td_mdc_SectionText[2], 15.000000, 102.000000);
	TextDrawSetSelectable(td_mdc_SectionText[2], 1);

	td_mdc_SectionText[3] = TextDrawCreate(378.000000, 234.000000, "~b~~h~~h~~h~Search License Plate");
	TextDrawAlignment(td_mdc_SectionText[3], 2);
	TextDrawBackgroundColor(td_mdc_SectionText[3], 255);
	TextDrawFont(td_mdc_SectionText[3], 2);
	TextDrawLetterSize(td_mdc_SectionText[3], 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionText[3], -524057345);
	TextDrawSetOutline(td_mdc_SectionText[3], 0);
	TextDrawSetProportional(td_mdc_SectionText[3], 1);
	TextDrawSetShadow(td_mdc_SectionText[3], 1);
	TextDrawTextSize(td_mdc_SectionText[3], 15.000000, 103.000000);
	TextDrawSetSelectable(td_mdc_SectionText[3], 1);

	td_mdc_SectionHeaderText = TextDrawCreate(207.000000, 220.000000, "~b~Sections");
	TextDrawBackgroundColor(td_mdc_SectionHeaderText, 255);
	TextDrawFont(td_mdc_SectionHeaderText, 2);
	TextDrawLetterSize(td_mdc_SectionHeaderText, 0.170000, 1.000000);
	TextDrawColor(td_mdc_SectionHeaderText, -1384438529);
	TextDrawSetOutline(td_mdc_SectionHeaderText, 0);
	TextDrawSetProportional(td_mdc_SectionHeaderText, 1);
	TextDrawSetShadow(td_mdc_SectionHeaderText, 1);
	TextDrawSetSelectable(td_mdc_SectionHeaderText, 0);

	td_mdc_Gender = TextDrawCreate(329.000000, 252.000000, "~b~~h~~h~~h~Gender:");
	TextDrawAlignment(td_mdc_Gender, 3);
	TextDrawBackgroundColor(td_mdc_Gender, 255);
	TextDrawFont(td_mdc_Gender, 2);
	TextDrawLetterSize(td_mdc_Gender, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Gender, -524057345);
	TextDrawSetOutline(td_mdc_Gender, 0);
	TextDrawSetProportional(td_mdc_Gender, 1);
	TextDrawSetShadow(td_mdc_Gender, 1);
	TextDrawSetSelectable(td_mdc_Gender, 0);

	td_mdc_Job = TextDrawCreate(329.000000, 264.000000, "~b~~h~~h~~h~Occupation:");
	TextDrawAlignment(td_mdc_Job, 3);
	TextDrawBackgroundColor(td_mdc_Job, 255);
	TextDrawFont(td_mdc_Job, 2);
	TextDrawLetterSize(td_mdc_Job, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Job, -524057345);
	TextDrawSetOutline(td_mdc_Job, 0);
	TextDrawSetProportional(td_mdc_Job, 1);
	TextDrawSetShadow(td_mdc_Job, 1);
	TextDrawSetSelectable(td_mdc_Job, 0);

	td_mdc_DriveLic = TextDrawCreate(329.000000, 276.000000, "~b~~h~~h~~h~Driver's License:");
	TextDrawAlignment(td_mdc_DriveLic, 3);
	TextDrawBackgroundColor(td_mdc_DriveLic, 255);
	TextDrawFont(td_mdc_DriveLic, 2);
	TextDrawLetterSize(td_mdc_DriveLic, 0.170000, 1.000000);
	TextDrawColor(td_mdc_DriveLic, -524057345);
	TextDrawSetOutline(td_mdc_DriveLic, 0);
	TextDrawSetProportional(td_mdc_DriveLic, 1);
	TextDrawSetShadow(td_mdc_DriveLic, 1);
	TextDrawSetSelectable(td_mdc_DriveLic, 0);

	td_mdc_GunLic = TextDrawCreate(329.000000, 288.000000, "~b~~h~~h~~h~Weapon License:");
	TextDrawAlignment(td_mdc_GunLic, 3);
	TextDrawBackgroundColor(td_mdc_GunLic, 255);
	TextDrawFont(td_mdc_GunLic, 2);
	TextDrawLetterSize(td_mdc_GunLic, 0.170000, 1.000000);
	TextDrawColor(td_mdc_GunLic, -524057345);
	TextDrawSetOutline(td_mdc_GunLic, 0);
	TextDrawSetProportional(td_mdc_GunLic, 1);
	TextDrawSetShadow(td_mdc_GunLic, 1);
	TextDrawSetSelectable(td_mdc_GunLic, 0);

	td_mdc_PhoneNumber = TextDrawCreate(329.000000, 300.000000, "~b~~h~~h~~h~Phone Number:");
	TextDrawAlignment(td_mdc_PhoneNumber, 3);
	TextDrawBackgroundColor(td_mdc_PhoneNumber, 255);
	TextDrawFont(td_mdc_PhoneNumber, 2);
	TextDrawLetterSize(td_mdc_PhoneNumber, 0.170000, 1.000000);
	TextDrawColor(td_mdc_PhoneNumber, -524057345);
	TextDrawSetOutline(td_mdc_PhoneNumber, 0);
	TextDrawSetProportional(td_mdc_PhoneNumber, 1);
	TextDrawSetShadow(td_mdc_PhoneNumber, 1);
	TextDrawSetSelectable(td_mdc_PhoneNumber, 0);

	td_mdc_Name = TextDrawCreate(329.000000, 228.000000, "~b~~h~~h~~h~Full Name:");
	TextDrawAlignment(td_mdc_Name, 3);
	TextDrawBackgroundColor(td_mdc_Name, 255);
	TextDrawFont(td_mdc_Name, 2);
	TextDrawLetterSize(td_mdc_Name, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Name, -524057345);
	TextDrawSetOutline(td_mdc_Name, 0);
	TextDrawSetProportional(td_mdc_Name, 1);
	TextDrawSetShadow(td_mdc_Name, 1);
	TextDrawSetSelectable(td_mdc_Name, 0);

	td_mdc_PropertiesArrow = TextDrawCreate(411.000000, 357.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_PropertiesArrow, 255);
	TextDrawFont(td_mdc_PropertiesArrow, 4);
	TextDrawLetterSize(td_mdc_PropertiesArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_PropertiesArrow, -1);
	TextDrawSetOutline(td_mdc_PropertiesArrow, 0);
	TextDrawSetProportional(td_mdc_PropertiesArrow, 1);
	TextDrawSetShadow(td_mdc_PropertiesArrow, 1);
	TextDrawUseBox(td_mdc_PropertiesArrow, 1);
	TextDrawBoxColor(td_mdc_PropertiesArrow, 255);
	TextDrawTextSize(td_mdc_PropertiesArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_PropertiesArrow, 1);

	td_mdc_VehiclesArrow = TextDrawCreate(411.000000, 337.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(td_mdc_VehiclesArrow, 255);
	TextDrawFont(td_mdc_VehiclesArrow, 4);
	TextDrawLetterSize(td_mdc_VehiclesArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_VehiclesArrow, -1);
	TextDrawSetOutline(td_mdc_VehiclesArrow, 0);
	TextDrawSetProportional(td_mdc_VehiclesArrow, 1);
	TextDrawSetShadow(td_mdc_VehiclesArrow, 1);
	TextDrawUseBox(td_mdc_VehiclesArrow, 1);
	TextDrawBoxColor(td_mdc_VehiclesArrow, 255);
	TextDrawTextSize(td_mdc_VehiclesArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_VehiclesArrow, 1);

	td_mdc_Vehicles = TextDrawCreate(372.000000, 338.000000, "~b~~h~~h~~h~Vehicles");
	TextDrawBackgroundColor(td_mdc_Vehicles, 255);
	TextDrawFont(td_mdc_Vehicles, 2);
	TextDrawLetterSize(td_mdc_Vehicles, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Vehicles, -524057345);
	TextDrawSetOutline(td_mdc_Vehicles, 0);
	TextDrawSetProportional(td_mdc_Vehicles, 1);
	TextDrawSetShadow(td_mdc_Vehicles, 1);
	TextDrawTextSize(td_mdc_Vehicles, 410.0, 20.0);
	TextDrawSetSelectable(td_mdc_Vehicles, 1);

	td_mdc_Properties = TextDrawCreate(363.000000, 358.000000, "~b~~h~~h~~h~Properties");
	TextDrawBackgroundColor(td_mdc_Properties, 255);
	TextDrawFont(td_mdc_Properties, 2);
	TextDrawLetterSize(td_mdc_Properties, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Properties, -524057345);
	TextDrawSetOutline(td_mdc_Properties, 0);
	TextDrawSetProportional(td_mdc_Properties, 1);
	TextDrawSetShadow(td_mdc_Properties, 1);
	TextDrawTextSize(td_mdc_Properties, 410.0, 20.0);
	TextDrawSetSelectable(td_mdc_Properties, 1);

	td_mdc_Age = TextDrawCreate(329.000000, 240.000000, "~b~~h~~h~~h~Age:");
	TextDrawAlignment(td_mdc_Age, 3);
	TextDrawBackgroundColor(td_mdc_Age, 255);
	TextDrawFont(td_mdc_Age, 2);
	TextDrawLetterSize(td_mdc_Age, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Age, -524057345);
	TextDrawSetOutline(td_mdc_Age, 0);
	TextDrawSetProportional(td_mdc_Age, 1);
	TextDrawSetShadow(td_mdc_Age, 1);
	TextDrawSetSelectable(td_mdc_Age, 0);

	td_mdc_CasesArrow = TextDrawCreate(219.000000, 357.000000, "LD_BEAT:left");
	TextDrawBackgroundColor(td_mdc_CasesArrow, 255);
	TextDrawFont(td_mdc_CasesArrow, 4);
	TextDrawLetterSize(td_mdc_CasesArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_CasesArrow, -1);
	TextDrawSetOutline(td_mdc_CasesArrow, 0);
	TextDrawSetProportional(td_mdc_CasesArrow, 1);
	TextDrawSetShadow(td_mdc_CasesArrow, 1);
	TextDrawUseBox(td_mdc_CasesArrow, 1);
	TextDrawBoxColor(td_mdc_CasesArrow, 255);
	TextDrawTextSize(td_mdc_CasesArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_CasesArrow, 1);

	td_mdc_CriminalRecordArrow = TextDrawCreate(219.000000, 337.000000, "LD_BEAT:left");
	TextDrawBackgroundColor(td_mdc_CriminalRecordArrow, 255);
	TextDrawFont(td_mdc_CriminalRecordArrow, 4);
	TextDrawLetterSize(td_mdc_CriminalRecordArrow, 0.500000, 1.000000);
	TextDrawColor(td_mdc_CriminalRecordArrow, -1);
	TextDrawSetOutline(td_mdc_CriminalRecordArrow, 0);
	TextDrawSetProportional(td_mdc_CriminalRecordArrow, 1);
	TextDrawSetShadow(td_mdc_CriminalRecordArrow, 1);
	TextDrawUseBox(td_mdc_CriminalRecordArrow, 1);
	TextDrawBoxColor(td_mdc_CriminalRecordArrow, 255);
	TextDrawTextSize(td_mdc_CriminalRecordArrow, 10.000000, 14.000000);
	TextDrawSetSelectable(td_mdc_CriminalRecordArrow, 1);

	td_mdc_CriminalRecord = TextDrawCreate(233.000000, 338.000000, "~b~~h~~h~~h~Criminal Record");
	TextDrawBackgroundColor(td_mdc_CriminalRecord, 255);
	TextDrawFont(td_mdc_CriminalRecord, 2);
	TextDrawLetterSize(td_mdc_CriminalRecord, 0.170000, 1.000000);
	TextDrawColor(td_mdc_CriminalRecord, -524057345);
	TextDrawSetOutline(td_mdc_CriminalRecord, 0);
	TextDrawSetProportional(td_mdc_CriminalRecord, 1);
	TextDrawSetShadow(td_mdc_CriminalRecord, 1);
	TextDrawTextSize(td_mdc_CriminalRecord, 294.0, 20.0);
	TextDrawSetSelectable(td_mdc_CriminalRecord, 1);

	td_mdc_Cases = TextDrawCreate(233.000000, 358.000000, "~b~~h~~h~~h~Cases");
	TextDrawBackgroundColor(td_mdc_Cases, 255);
	TextDrawFont(td_mdc_Cases, 2);
	TextDrawLetterSize(td_mdc_Cases, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Cases, -524057345);
	TextDrawSetOutline(td_mdc_Cases, 0);
	TextDrawSetProportional(td_mdc_Cases, 1);
	TextDrawSetShadow(td_mdc_Cases, 1);
    TextDrawTextSize(td_mdc_Cases, 260.0, 20.0);
	TextDrawSetSelectable(td_mdc_Cases, 1);

	td_mdc_Browse = TextDrawCreate(207.000000, 321.000000, "~b~Browse");
	TextDrawBackgroundColor(td_mdc_Browse, 255);
	TextDrawFont(td_mdc_Browse, 2);
	TextDrawLetterSize(td_mdc_Browse, 0.170000, 1.000000);
	TextDrawColor(td_mdc_Browse, -1384438529);
	TextDrawSetOutline(td_mdc_Browse, 0);
	TextDrawSetProportional(td_mdc_Browse, 1);
	TextDrawSetShadow(td_mdc_Browse, 1);
	TextDrawSetSelectable(td_mdc_Browse, 0);

	td_mdc_cr_TypeTitle = TextDrawCreate(220.000000, 234.000000, "~b~~h~~h~~h~Type");
	TextDrawBackgroundColor(td_mdc_cr_TypeTitle, 255);
	TextDrawFont(td_mdc_cr_TypeTitle, 2);
	TextDrawLetterSize(td_mdc_cr_TypeTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_TypeTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_TypeTitle, 0);
	TextDrawSetProportional(td_mdc_cr_TypeTitle, 1);
	TextDrawSetShadow(td_mdc_cr_TypeTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_TypeTitle, 0);

	td_mdc_cr_DescriptionTitle = TextDrawCreate(257.000000, 234.000000, "~b~~h~~h~~h~Description");
	TextDrawBackgroundColor(td_mdc_cr_DescriptionTitle, 255);
	TextDrawFont(td_mdc_cr_DescriptionTitle, 2);
	TextDrawLetterSize(td_mdc_cr_DescriptionTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_DescriptionTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_DescriptionTitle, 0);
	TextDrawSetProportional(td_mdc_cr_DescriptionTitle, 1);
	TextDrawSetShadow(td_mdc_cr_DescriptionTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_DescriptionTitle, 0);

	td_mdc_cr_DateTitle = TextDrawCreate(375.000000, 234.000000, "~b~~h~~h~~h~Date");
	TextDrawAlignment(td_mdc_cr_DateTitle, 2);
	TextDrawBackgroundColor(td_mdc_cr_DateTitle, 255);
	TextDrawFont(td_mdc_cr_DateTitle, 2);
	TextDrawLetterSize(td_mdc_cr_DateTitle, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_DateTitle, -524057345);
	TextDrawSetOutline(td_mdc_cr_DateTitle, 0);
	TextDrawSetProportional(td_mdc_cr_DateTitle, 1);
	TextDrawSetShadow(td_mdc_cr_DateTitle, 1);
	TextDrawSetSelectable(td_mdc_cr_DateTitle, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		td_mdc_cr_Info[i] = TextDrawCreate(412.000000, 249.000000 + i * 15, "LD_CHAT:badchat");
		TextDrawBackgroundColor(td_mdc_cr_Info[i], 255);
		TextDrawFont(td_mdc_cr_Info[i], 4);
		TextDrawLetterSize(td_mdc_cr_Info[i], 0.500000, 1.000000);
		TextDrawColor(td_mdc_cr_Info[i], -1);
		TextDrawSetOutline(td_mdc_cr_Info[i], 0);
		TextDrawSetProportional(td_mdc_cr_Info[i], 1);
		TextDrawSetShadow(td_mdc_cr_Info[i], 1);
		TextDrawUseBox(td_mdc_cr_Info[i], 1);
		TextDrawBoxColor(td_mdc_cr_Info[i], 255);
		TextDrawTextSize(td_mdc_cr_Info[i], 8.000000, 9.000000);
		TextDrawSetSelectable(td_mdc_cr_Info[i], 1);
	}

	td_mdc_cr_ArrowDown = TextDrawCreate(425.000000, 351.000000, "LD_BEAT:down");
	TextDrawBackgroundColor(td_mdc_cr_ArrowDown, 255);
	TextDrawFont(td_mdc_cr_ArrowDown, 4);
	TextDrawLetterSize(td_mdc_cr_ArrowDown, 0.500000, 1.000000);
	TextDrawColor(td_mdc_cr_ArrowDown, -1);
	TextDrawSetOutline(td_mdc_cr_ArrowDown, 0);
	TextDrawSetProportional(td_mdc_cr_ArrowDown, 1);
	TextDrawSetShadow(td_mdc_cr_ArrowDown, 1);
	TextDrawUseBox(td_mdc_cr_ArrowDown, 1);
	TextDrawBoxColor(td_mdc_cr_ArrowDown, 255);
	TextDrawTextSize(td_mdc_cr_ArrowDown, 11.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_cr_ArrowDown, 1);

	td_mdc_cr_ArrowUp = TextDrawCreate(425.000000, 335.000000, "LD_BEAT:up");
	TextDrawBackgroundColor(td_mdc_cr_ArrowUp, 255);
	TextDrawFont(td_mdc_cr_ArrowUp, 4);
	TextDrawLetterSize(td_mdc_cr_ArrowUp, 0.500000, 1.000000);
	TextDrawColor(td_mdc_cr_ArrowUp, -1);
	TextDrawSetOutline(td_mdc_cr_ArrowUp, 0);
	TextDrawSetProportional(td_mdc_cr_ArrowUp, 1);
	TextDrawSetShadow(td_mdc_cr_ArrowUp, 1);
	TextDrawUseBox(td_mdc_cr_ArrowUp, 1);
	TextDrawBoxColor(td_mdc_cr_ArrowUp, 255);
	TextDrawTextSize(td_mdc_cr_ArrowUp, 11.000000, 12.000000);
	TextDrawSetSelectable(td_mdc_cr_ArrowUp, 1);

	td_mdc_cr_Title = TextDrawCreate(207.000000, 220.000000, "~b~Criminal Record");
	TextDrawBackgroundColor(td_mdc_cr_Title, 255);
	TextDrawFont(td_mdc_cr_Title, 2);
	TextDrawLetterSize(td_mdc_cr_Title, 0.170000, 1.000000);
	TextDrawColor(td_mdc_cr_Title, -1384438529);
	TextDrawSetOutline(td_mdc_cr_Title, 0);
	TextDrawSetProportional(td_mdc_cr_Title, 1);
	TextDrawSetShadow(td_mdc_cr_Title, 1);
	TextDrawSetSelectable(td_mdc_cr_Title, 0);
}

stock mdc_LoadPlayerTextdraws(playerid) {
    td_mdc_Skin = CreatePlayerTextDraw(playerid, 264.000000, 231.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_Skin, 0);
	PlayerTextDrawFont(playerid, td_mdc_Skin, 5);
	PlayerTextDrawLetterSize(playerid, td_mdc_Skin, 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_Skin, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_Skin, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_Skin, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_Skin, 1);
	PlayerTextDrawUseBox(playerid, td_mdc_Skin, 1);
	PlayerTextDrawBoxColor(playerid, td_mdc_Skin, 0);
	PlayerTextDrawTextSize(playerid, td_mdc_Skin, -70.000000, 80.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_Skin, 107);
	PlayerTextDrawSetPreviewRot(playerid, td_mdc_Skin, -16.000000, 0.000000, -30.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, td_mdc_Skin, 0);

	td_mdc_NameValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Firstname Lastname");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_NameValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_NameValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_NameValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_NameValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_NameValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_NameValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_NameValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_NameValue, 0);

	td_mdc_AgeValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "21");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_AgeValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_AgeValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_AgeValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_AgeValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_AgeValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_AgeValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_AgeValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_AgeValue, 0);

	td_mdc_GenderValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "Male");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_GenderValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_GenderValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_GenderValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_GenderValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_GenderValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_GenderValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_GenderValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_GenderValue, 0);

	td_mdc_JobValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Unemployed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_JobValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_JobValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_JobValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_JobValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_JobValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_JobValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_JobValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_JobValue, 0);

	td_mdc_DriveLicValue = CreatePlayerTextDraw(playerid, 338.000000, 276.000000, "Passed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_DriveLicValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_DriveLicValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_DriveLicValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_DriveLicValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_DriveLicValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_DriveLicValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_DriveLicValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_DriveLicValue, 0);

	td_mdc_GunLicValue = CreatePlayerTextDraw(playerid, 338.000000, 288.000000, "Not Passed");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_GunLicValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_GunLicValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_GunLicValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_GunLicValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_GunLicValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_GunLicValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_GunLicValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_GunLicValue, 0);

	td_mdc_PhoneNumberValue = CreatePlayerTextDraw(playerid, 338.000000, 300.000000, "4701958");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_PhoneNumberValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_PhoneNumberValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_PhoneNumberValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_PhoneNumberValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_PhoneNumberValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_PhoneNumberValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_PhoneNumberValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_PhoneNumberValue, 0);

	for(new i = 0; i < sizeof(td_mdc_cr_Date); i++) {
		td_mdc_cr_Date[i] = CreatePlayerTextDraw(playerid, 366.000000, 249.000000 + i * 15, "21.02.2014");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Date[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Date[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Date[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Date[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Date[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Date[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Date[i], 0);

		td_mdc_cr_Description[i] = CreatePlayerTextDraw(playerid, 257.000000, 249.000000 + i * 15, "Possession of a firearm w...");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Description[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Description[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Description[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Description[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Description[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Description[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Description[i], 0);

		td_mdc_cr_Type[i] = CreatePlayerTextDraw(playerid, 220.000000, 249.000000 + i * 15, "Ticket");
		PlayerTextDrawBackgroundColor(playerid, td_mdc_cr_Type[i], 255);
		PlayerTextDrawFont(playerid, td_mdc_cr_Type[i], 2);
		PlayerTextDrawLetterSize(playerid, td_mdc_cr_Type[i], 0.170000, 1.000000);
		PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], -1);
		PlayerTextDrawSetOutline(playerid, td_mdc_cr_Type[i], 0);
		PlayerTextDrawSetProportional(playerid, td_mdc_cr_Type[i], 1);
		PlayerTextDrawSetShadow(playerid, td_mdc_cr_Type[i], 1);
		PlayerTextDrawSetSelectable(playerid, td_mdc_cr_Type[i], 0);
	}

	td_mdc_veh_ModelValue = CreatePlayerTextDraw(playerid, 338.000000, 228.000000, "Landstalker");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_ModelValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_ModelValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_ModelValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_ModelValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_ModelValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_ModelValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_ModelValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_ModelValue, 0);

	td_mdc_veh_VehicleModel = CreatePlayerTextDraw(playerid, 191.000000, 200.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawFont(playerid, td_mdc_veh_VehicleModel, 5);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_VehicleModel, 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_VehicleModel, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawUseBox(playerid, td_mdc_veh_VehicleModel, 1);
	PlayerTextDrawBoxColor(playerid, td_mdc_veh_VehicleModel, 0);
	PlayerTextDrawTextSize(playerid, td_mdc_veh_VehicleModel, 68.000000, 94.000000);
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_veh_VehicleModel, 400);
	PlayerTextDrawSetPreviewRot(playerid, td_mdc_veh_VehicleModel, -16.000000, 0.000000, 35.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_VehicleModel, 0);

	td_mdc_veh_OwnerValue = CreatePlayerTextDraw(playerid, 338.000000, 240.000000, "Test Name");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_OwnerValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_OwnerValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_OwnerValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_OwnerValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_OwnerValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_OwnerValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_OwnerValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_OwnerValue, 0);

	td_mdc_veh_PlateValue = CreatePlayerTextDraw(playerid, 338.000000, 252.000000, "P-205-LS");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_PlateValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_PlateValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_PlateValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_PlateValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_PlateValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_PlateValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_PlateValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_PlateValue, 0);

	td_mdc_veh_InsuranceValue = CreatePlayerTextDraw(playerid, 338.000000, 264.000000, "Yes");
	PlayerTextDrawBackgroundColor(playerid, td_mdc_veh_InsuranceValue, 255);
	PlayerTextDrawFont(playerid, td_mdc_veh_InsuranceValue, 2);
	PlayerTextDrawLetterSize(playerid, td_mdc_veh_InsuranceValue, 0.170000, 1.000000);
	PlayerTextDrawColor(playerid, td_mdc_veh_InsuranceValue, -1);
	PlayerTextDrawSetOutline(playerid, td_mdc_veh_InsuranceValue, 0);
	PlayerTextDrawSetProportional(playerid, td_mdc_veh_InsuranceValue, 1);
	PlayerTextDrawSetShadow(playerid, td_mdc_veh_InsuranceValue, 1);
	PlayerTextDrawSetSelectable(playerid, td_mdc_veh_InsuranceValue, 0);
}

stock mdc_ShowPlayerStartScreen(playerid) {
    TextDrawShowForPlayer(playerid, td_mdc_Box);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
    for(new i = 0; i < sizeof(td_mdc_Section); i++) {
        TextDrawShowForPlayer(playerid, td_mdc_Section[i]);
        TextDrawShowForPlayer(playerid, td_mdc_SectionText[i]);
	}

	TextDrawShowForPlayer(playerid, td_mdc_SectionHeaderText);
	SelectTextDraw(playerid, -1);
}

stock mdc_Hide(playerid, bool:close = false) {
    TextDrawHideForPlayer(playerid, td_mdc_CitizenBox);
    TextDrawHideForPlayer(playerid, td_mdc_Box);
    TextDrawHideForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawHideForPlayer(playerid, td_mdc_DataBox);
	TextDrawHideForPlayer(playerid, td_mdc_OptionsBox);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Box);
	TextDrawHideForPlayer(playerid, td_mdc_veh_InnerBox);
	TextDrawHideForPlayer(playerid, td_mdc_veh_BoxNoEnt);
	TextDrawHideForPlayer(playerid, td_mdc_veh_InnerBoxNoEnt);
	for(new i = 0; i < sizeof(td_mdc_cr_Box); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_Box[i]);
	}

	for(new i = 0; i < sizeof(td_mdc_cr_InnerBox); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_InnerBox[i]);
	}

    TextDrawHideForPlayer(playerid, td_mdc_HeaderText);
    TextDrawHideForPlayer(playerid, td_mdc_Exit);
    for(new i = 0; i < sizeof(td_mdc_Section); i++) {
        TextDrawHideForPlayer(playerid, td_mdc_Section[i]);
        TextDrawHideForPlayer(playerid, td_mdc_SectionText[i]);
	}

	TextDrawHideForPlayer(playerid, td_mdc_SectionHeaderText);
	TextDrawHideForPlayer(playerid, td_mdc_Gender);
	TextDrawHideForPlayer(playerid, td_mdc_Job);
	TextDrawHideForPlayer(playerid, td_mdc_DriveLic);
	TextDrawHideForPlayer(playerid, td_mdc_GunLic);
	TextDrawHideForPlayer(playerid, td_mdc_PhoneNumber);
	TextDrawHideForPlayer(playerid, td_mdc_Name);
	TextDrawHideForPlayer(playerid, td_mdc_PropertiesArrow);
	TextDrawHideForPlayer(playerid, td_mdc_VehiclesArrow);
	TextDrawHideForPlayer(playerid, td_mdc_Vehicles);
	TextDrawHideForPlayer(playerid, td_mdc_Properties);
	TextDrawHideForPlayer(playerid, td_mdc_Age);
	TextDrawHideForPlayer(playerid, td_mdc_CriminalRecordArrow);
	TextDrawHideForPlayer(playerid, td_mdc_CasesArrow);
	TextDrawHideForPlayer(playerid, td_mdc_CriminalRecord);
	TextDrawHideForPlayer(playerid, td_mdc_Cases);
	TextDrawHideForPlayer(playerid, td_mdc_Browse);
	PlayerTextDrawHide(playerid, td_mdc_Skin);
	PlayerTextDrawHide(playerid, td_mdc_NameValue);
	PlayerTextDrawHide(playerid, td_mdc_AgeValue);
	PlayerTextDrawHide(playerid, td_mdc_GenderValue);
	PlayerTextDrawHide(playerid, td_mdc_JobValue);
	PlayerTextDrawHide(playerid, td_mdc_DriveLicValue);
	PlayerTextDrawHide(playerid, td_mdc_GunLicValue);
	PlayerTextDrawHide(playerid, td_mdc_PhoneNumberValue);
	TextDrawHideForPlayer(playerid, td_mdc_cr_Title);
	TextDrawHideForPlayer(playerid, td_mdc_cr_ArrowUp);
	TextDrawHideForPlayer(playerid, td_mdc_cr_ArrowDown);
	TextDrawHideForPlayer(playerid, td_mdc_cr_TypeTitle);
	TextDrawHideForPlayer(playerid, td_mdc_cr_DescriptionTitle);
	TextDrawHideForPlayer(playerid, td_mdc_cr_DateTitle);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Model);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Owner);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Plate);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Insurance);
	TextDrawHideForPlayer(playerid, td_mdc_veh_ArrowRight);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Next);
	TextDrawHideForPlayer(playerid, td_mdc_veh_Label);
	PlayerTextDrawHide(playerid, td_mdc_veh_ModelValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_VehicleModel);
	PlayerTextDrawHide(playerid, td_mdc_veh_OwnerValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_PlateValue);
	PlayerTextDrawHide(playerid, td_mdc_veh_InsuranceValue);
	TextDrawHideForPlayer(playerid, td_mdc_veh_TextNoEnt);
	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		TextDrawHideForPlayer(playerid, td_mdc_cr_Info[i]);
	}

	for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
		PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
		PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
	}

	if(close != false) {
		DeletePVar(playerid, "mdc_Citizen");
		DeletePVar(playerid, "mdc_VehicleIndex");
		DeletePVar(playerid, "mdc_Shown");
		CancelSelectTextDraw(playerid);
	}
}

stock mdc_SearchCitizen(playerid, name[]) {
	new user;
	for(new i = 0; i < strlen(name); i++) {
	    if(name[i] == ' ') {
			name[i] = '_';
		}
	}

	user = GetPlayerID(name);
	if(user != -1) {
	    SetPVarString(playerid, "mdc_Citizen", name);
	    mdc_ShowCitizen(playerid, GetPlayerNameEx(user), GetPlayerSkin(user), PlayerData[user][pAge], PlayerData[user][pGender], PlayerData[user][pCarLicense], PlayerData[user][pGunLicense],
						PlayerData[playerid][pJob], PlayerData[playerid][pPhone]);
	} else {
		new query[135];
		format(query, sizeof(query), "SELECT `skin`, `age`, `gender`, `carlicense`, `gunlicense`, `job`, `phone` FROM `users` WHERE `username` = '%s';", name);
		mysql_tquery(connectionID, query, "mdc_SearchCitizenResult", "ds", playerid, name);
	}
}

stock mdc_ShowCitizen(playerid, name[], skin, age, sex, driveLic, weaponLic, jobID, phoneNumber) {
	new value[20];
    mdc_Hide(playerid, false);

	// Skin
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_Skin, skin);
	PlayerTextDrawShow(playerid, td_mdc_Skin);

	// Name
	PlayerTextDrawSetString(playerid, td_mdc_NameValue, name);
	PlayerTextDrawShow(playerid, td_mdc_NameValue);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, td_mdc_AgeValue, value);
	PlayerTextDrawShow(playerid, td_mdc_AgeValue);

	// Gender
	PlayerTextDrawSetString(playerid, td_mdc_GenderValue, GetGenderString(sex));
	PlayerTextDrawShow(playerid, td_mdc_GenderValue);

	// Job
	PlayerTextDrawSetString(playerid, td_mdc_JobValue, GetJobName(jobID));
	PlayerTextDrawShow(playerid, td_mdc_JobValue);

	// Driver's License
	PlayerTextDrawSetString(playerid, td_mdc_DriveLicValue, GetDriveLicStatus(driveLic));
	PlayerTextDrawShow(playerid, td_mdc_DriveLicValue);

	// Weapon License
	PlayerTextDrawSetString(playerid, td_mdc_GunLicValue, GetWeaponLicStatus(weaponLic));
	PlayerTextDrawShow(playerid, td_mdc_GunLicValue);

	// Phone Number
	format(value, sizeof(value), "%i", phoneNumber);
	PlayerTextDrawSetString(playerid, td_mdc_PhoneNumberValue, value);
	PlayerTextDrawShow(playerid, td_mdc_PhoneNumberValue);

	// Other
    TextDrawShowForPlayer(playerid, td_mdc_CitizenBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
	TextDrawShowForPlayer(playerid, td_mdc_DataBox);
	TextDrawShowForPlayer(playerid, td_mdc_OptionsBox);
	TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_Gender);
	TextDrawShowForPlayer(playerid, td_mdc_Job);
	TextDrawShowForPlayer(playerid, td_mdc_DriveLic);
	TextDrawShowForPlayer(playerid, td_mdc_GunLic);
	TextDrawShowForPlayer(playerid, td_mdc_PhoneNumber);
	TextDrawShowForPlayer(playerid, td_mdc_Name);
	TextDrawShowForPlayer(playerid, td_mdc_PropertiesArrow);
	TextDrawShowForPlayer(playerid, td_mdc_VehiclesArrow);
	TextDrawShowForPlayer(playerid, td_mdc_Vehicles);
	TextDrawShowForPlayer(playerid, td_mdc_Properties);
	TextDrawShowForPlayer(playerid, td_mdc_Age);
	TextDrawShowForPlayer(playerid, td_mdc_CriminalRecordArrow);
	TextDrawShowForPlayer(playerid, td_mdc_CasesArrow);
	TextDrawShowForPlayer(playerid, td_mdc_CriminalRecord);
	TextDrawShowForPlayer(playerid, td_mdc_Cases);
	TextDrawShowForPlayer(playerid, td_mdc_Browse);
	SelectTextDraw(playerid, -1);
}

stock mdc_ShowCriminalRecord(playerid, name[]) {
	new query[130];
	format(query, sizeof(query), "SELECT `officer`, `time`, `date`, `amount`, `reason`, `paid` FROM `tickets` WHERE `player` = '%s';", name);
	mysql_tquery(connectionID, query, "mdc_FetchTickets", "ds", playerid, name);
}

stock mdc_ShowCriminalRecordDetails(playerid, idx) {
	new dialogMsg[600];
	if(CriminalRecordData[playerid][idx][mdc_cr_type] == RECORD_TICKET) {
	    if(CriminalRecordData[playerid][idx][mdc_cr_paid] == 0) {
	    	format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Ticket Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\
												  \n{ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Price:\t\t{a9c4e4}$%i\n{ffffff}Offence:\t{a9c4e4}%s\n\n\
												  {ffffff}Information:\t{a9c4e4}The offender has {3D62A8}NOT {a9c4e4}yet paid the ticket.",
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]), GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]),
												  CriminalRecordData[playerid][idx][mdc_cr_date], CriminalRecordData[playerid][idx][mdc_cr_time],
												  CriminalRecordData[playerid][idx][mdc_cr_price], CriminalRecordData[playerid][idx][mdc_cr_description]);
		} else {
			format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Ticket Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n\
												  {ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Price:\t\t{a9c4e4}$%i\n{ffffff}Offence:\t{a9c4e4}%s\n\n{ffffff}\
												  Information:\t{a9c4e4}The offender has paid the ticket.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], CriminalRecordData[playerid][idx][mdc_cr_price],
												  CriminalRecordData[playerid][idx][mdc_cr_description]);
		}
	} else {
        if(CriminalRecordData[playerid][idx][mdc_cr_served] == 0) {
	    	format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Charge Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n\
												  {ffffff}Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Felony:\t\t{a9c4e4}%s\n\n{ffffff}Information:\t{a9c4e4}The offender \
												  is presently {3D62A8}WANTED {a9c4e4}due to this charge.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], CriminalRecordData[playerid][idx][mdc_cr_description]);
		} else {
			format(dialogMsg, sizeof(dialogMsg), "{3D62A8}Charge Issued By The Los Santos Police Department\n\n{ffffff}Offender:\t{a9c4e4}%s\n{ffffff}Police Officer:\t{a9c4e4}%s\n{ffffff}\
												  Date:\t\t{a9c4e4}%s\n{ffffff}Time:\t\t{a9c4e4}%s\n{ffffff}Felony:\t\t{a9c4e4}%s\n\n{ffffff}Information:\t{a9c4e4}The offender has \
												  already served according time in prison.", GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_offender]),
												  GetNameWithSpace(CriminalRecordData[playerid][idx][mdc_cr_officer]), CriminalRecordData[playerid][idx][mdc_cr_date],
												  CriminalRecordData[playerid][idx][mdc_cr_time], CriminalRecordData[playerid][idx][mdc_cr_description]);
		}
	}

	Dialog_Show(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{3D62A8}Detailed Record Information", dialogMsg, "Close", "");
}

stock mdc_ResetCriminalRecordData(playerid) {
	for(new i = 0; i < MAX_CRIMINAL_RECORDS; i++) {
        for(new j = 0; j < sizeof(CriminalRecordData[][]); j++) {
	    	CriminalRecordData[playerid][i][CriminalRecordEnum:j] = 0;
		}
	}

	Iter_Clear(RecordIterator[playerid]);
}

stock mdc_ShowVehicles(playerid, name[]) {
	new query[140];
	format(query, sizeof(query), "SELECT `modelid`, `color1`, `color2`, `plate` FROM `vehicles` WHERE `owner` = '%s';", name);
	mysql_tquery(connectionID, query, "mdc_FetchVehicle", "ds", playerid, name);
}

stock mdc_ShowVehicle(playerid, owner[], model, color1, color2, plate[], bool:nextBtn = false) {
    mdc_Hide(playerid, false);

    // Model
    PlayerTextDrawSetString(playerid, td_mdc_veh_ModelValue, vehicleNames[model - 400]);
	PlayerTextDrawShow(playerid, td_mdc_veh_ModelValue);

	// Model Preview
	PlayerTextDrawSetPreviewModel(playerid, td_mdc_veh_VehicleModel, model);
	PlayerTextDrawSetPreviewVehCol(playerid, td_mdc_veh_VehicleModel, color1, color2);
	PlayerTextDrawShow(playerid, td_mdc_veh_VehicleModel);

	// Owner
	PlayerTextDrawSetString(playerid, td_mdc_veh_OwnerValue, owner);
	PlayerTextDrawShow(playerid, td_mdc_veh_OwnerValue);

	// License Plate Number
	PlayerTextDrawSetString(playerid, td_mdc_veh_PlateValue, plate);
	PlayerTextDrawShow(playerid, td_mdc_veh_PlateValue);



	PlayerTextDrawShow(playerid, td_mdc_veh_InsuranceValue);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Box);
    TextDrawShowForPlayer(playerid, td_mdc_veh_InnerBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Model);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Owner);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Plate);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Insurance);
	TextDrawShowForPlayer(playerid, td_mdc_veh_Label);
	if(nextBtn != false) {
        TextDrawShowForPlayer(playerid, td_mdc_veh_ArrowRight);
		TextDrawShowForPlayer(playerid, td_mdc_veh_Next);
	}

	SelectTextDraw(playerid, -1);
}

/* MySQL */

forward mdc_SearchCitizenResult(playerid, name[]);
public mdc_SearchCitizenResult(playerid, name[]) {
	if(cache_get_row_count() > 0) {
	    SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "skin") , cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "gender"),
					   	cache_get_field_content_int(0, "carlicense"), cache_get_field_content_int(0, "gunlicense"), cache_get_field_content_int(0, "job"),
					  	cache_get_field_content_int(0, "phone"));
	} else {
		SendClientMessage(playerid, COLOR_GREY, "No citizen could be found under the mentioned name.");
		Dialog_Show(playerid, SearchCitizem, DIALOG_STYLE_INPUT, "{3D62A8}Search Citizen", "Please enter the citizen's full name below:", "Search", "Cancel");
	}
}

forward mdc_SearchPhoneNumber(playerid, phoneNum);
public mdc_SearchPhoneNumber(playerid, phoneNum) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "username", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "skin") , cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "gender"),
					   	cache_get_field_content_int(0, "carlicense"), cache_get_field_content_int(0, "gunlicense"), cache_get_field_content_int(0, "job"),
					  	phoneNum);
	} else {
		SendClientMessage(playerid, COLOR_GREY, "No citizen could be associated with the mentioned phone number.");
		Dialog_Show(playerid, SearchPhoneNumber, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	}
}

forward mdc_SearchSerial(playerid);
public mdc_SearchSerial(playerid) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "username", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowCitizen(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "skin") , cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "gender"),
					   	cache_get_field_content_int(0, "carlicense"), cache_get_field_content_int(0, "gunlicense"), cache_get_field_content_int(0, "job"),
					  	cache_get_field_content_int(0, "phone"));
	} else {
		SendClientMessage(playerid, COLOR_GREY, "No citizen could be associated with the mentioned weapon serial number.");
		Dialog_Show(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
	}
}

forward mdc_FetchTickets(playerid, name[]);
public mdc_FetchTickets(playerid, name[]) {
	new idx;
	mdc_ResetCriminalRecordData(playerid);
	SetPVarInt(playerid, "mdc_cr_ScrollTop", 0);
	for(new i = 0; i < cache_get_row_count(); i++) {
		idx = Iter_Free(RecordIterator[playerid]);
		if(idx == -1) {
		    break;
		}

		Iter_Add(RecordIterator[playerid], idx);
		format(CriminalRecordData[playerid][idx][mdc_cr_offender], MAX_PLAYER_NAME, "%s", name);
		CriminalRecordData[playerid][idx][mdc_cr_type] = RECORD_TICKET;
		cache_get_field_content(i, "reason", CriminalRecordData[playerid][idx][mdc_cr_description], connectionID, 200);
		cache_get_field_content(i, "time", CriminalRecordData[playerid][idx][mdc_cr_time], connectionID, 15);
		cache_get_field_content(i, "date", CriminalRecordData[playerid][idx][mdc_cr_date], connectionID, 15);
		cache_get_field_content(i, "officer", CriminalRecordData[playerid][idx][mdc_cr_officer], connectionID, MAX_PLAYER_NAME);
		CriminalRecordData[playerid][idx][mdc_cr_paid] = cache_get_field_content_int(i, "paid", connectionID);
		CriminalRecordData[playerid][idx][mdc_cr_price] = cache_get_field_content_int(i, "amount", connectionID);
	}

	new query[130];
	format(query, sizeof(query), "SELECT `officer`, `time`, `date`, `served`, `crime` FROM `criminals` WHERE `player` = '%s';", name);
	mysql_tquery(connectionID, query, "mdc_FetchCharges", "ds", playerid, name);
}

forward mdc_FetchCharges(playerid, name[]);
public mdc_FetchCharges(playerid, name[]) {
	new idx;
	for(new i = 0; i < cache_get_row_count(); i++) {
		idx = Iter_Free(RecordIterator[playerid]);
		if(idx == -1) {
		    break;
		}

        Iter_Add(RecordIterator[playerid], idx);
		format(CriminalRecordData[playerid][idx][mdc_cr_offender], MAX_PLAYER_NAME, "%s", name);
		CriminalRecordData[playerid][idx][mdc_cr_type] = RECORD_CHARGE;
		cache_get_field_content(i, "crime", CriminalRecordData[playerid][idx][mdc_cr_description], connectionID, 200);
		cache_get_field_content(i, "time", CriminalRecordData[playerid][idx][mdc_cr_time], connectionID, 15);
		cache_get_field_content(i, "date", CriminalRecordData[playerid][idx][mdc_cr_date], connectionID, 15);
		cache_get_field_content(i, "officer", CriminalRecordData[playerid][idx][mdc_cr_officer], connectionID, MAX_PLAYER_NAME);
		CriminalRecordData[playerid][idx][mdc_cr_served] = cache_get_field_content_int(i, "served", connectionID);
	}

	new count = Iter_Count(RecordIterator[playerid]);
	mdc_Hide(playerid, false);
    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
    if(count >= 7) {
    	TextDrawShowForPlayer(playerid, td_mdc_cr_Box[6]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[6]);
	} else if(count > 1) {
        TextDrawShowForPlayer(playerid, td_mdc_cr_Box[count - 1]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[count - 1]);
	} else {
	    TextDrawShowForPlayer(playerid, td_mdc_cr_Box[0]);
		TextDrawShowForPlayer(playerid, td_mdc_cr_InnerBox[0]);
	}

	TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
    TextDrawShowForPlayer(playerid, td_mdc_Exit);
	TextDrawShowForPlayer(playerid, td_mdc_cr_Title);
	TextDrawShowForPlayer(playerid, td_mdc_cr_TypeTitle);
	TextDrawShowForPlayer(playerid, td_mdc_cr_DescriptionTitle);
	TextDrawShowForPlayer(playerid, td_mdc_cr_DateTitle);
	if(count > 7) {
		TextDrawShowForPlayer(playerid, td_mdc_cr_ArrowUp);
		TextDrawShowForPlayer(playerid, td_mdc_cr_ArrowDown);
	}

	if(count <= 0) {
	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[0], COLOR_WHITE);
	    PlayerTextDrawSetString(playerid, td_mdc_cr_Type[0], "No entries could be found.");
	    PlayerTextDrawShow(playerid, td_mdc_cr_Type[0]);
	} else {
		for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
		    if(i >= count) {
				break;
			}

		    if(CriminalRecordData[playerid][i][mdc_cr_type] == RECORD_CHARGE) {
			  	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			  	if(CriminalRecordData[playerid][i][mdc_cr_served] == 0) {
			  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			  	} else {
				   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
				    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
				    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
				}
			} else {
			    PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			    if(CriminalRecordData[playerid][i][mdc_cr_paid] == 0) {
			        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
			        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			    } else {
                    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			      	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			       	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
				}
			}

		    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i][mdc_cr_date]);
		    if(strlen(CriminalRecordData[playerid][i][mdc_cr_description]) < 20) {
		    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i][mdc_cr_description]);
			} else {
				new desc[25];
				strmid(desc, CriminalRecordData[playerid][i][mdc_cr_description], 0, 20, 200);
				strins(desc, "...", strlen(desc), sizeof(desc));
				PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
			}

			PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			TextDrawShowForPlayer(playerid, td_mdc_cr_Info[i]);
		}
	}

	SelectTextDraw(playerid, -1);
}

forward mdc_SearchLicensePlate(playerid, plate[]);
public mdc_SearchLicensePlate(playerid, plate[]) {
	if(cache_get_row_count() > 0) {
		new name[MAX_PLAYER_NAME];
		cache_get_field_content(0, "owner", name);
		SetPVarString(playerid, "mdc_Citizen", name);
		mdc_ShowVehicle(playerid, GetNameWithSpace(name), cache_get_field_content_int(0, "modelid") , cache_get_field_content_int(0, "color1"), cache_get_field_content_int(0, "color2"),
					   	plate, false);
	} else {
		SendClientMessage(playerid, COLOR_GREY, "No vehicle could be found under the mentioned license plate number.");
		Dialog_Show(playerid, DIALOG_MDC_SEARCH_PLATE, DIALOG_STYLE_INPUT, "{3D62A8}Search License Plate", "Please enter the license plate below:", "Search", "Cancel");
	}
}

forward mdc_FetchVehicle(playerid, owner[]);
public mdc_FetchVehicle(playerid, owner[]) {
    mdc_Hide(playerid, false);
	if(cache_get_row_count() > 0) {
	    if(GetPVarInt(playerid, "mdc_VehicleIndex") >= cache_get_row_count()) {
	        SetPVarInt(playerid, "mdc_VehicleIndex", 0);
	    }

		new row = GetPVarInt(playerid, "mdc_VehicleIndex"),
		    plate[50];

	    cache_get_field_content(row, "plate", plate);
	    if(cache_get_row_count() > 1) {
		    mdc_ShowVehicle(playerid, GetNameWithSpace(owner), cache_get_field_content_int(row, "modelid") , cache_get_field_content_int(row, "color1"),
							cache_get_field_content_int(row, "color2"), plate, true);
		} else {
		    mdc_ShowVehicle(playerid, GetNameWithSpace(owner), cache_get_field_content_int(row, "modelid") , cache_get_field_content_int(row, "color1"),
							cache_get_field_content_int(row, "color2"), plate, false);
		}
	} else {
		TextDrawShowForPlayer(playerid, td_mdc_veh_BoxNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_veh_InnerBoxNoEnt);
	    TextDrawShowForPlayer(playerid, td_mdc_HeaderBox);
	    TextDrawShowForPlayer(playerid, td_mdc_HeaderText);
	    TextDrawShowForPlayer(playerid, td_mdc_Exit);
		TextDrawShowForPlayer(playerid, td_mdc_veh_TextNoEnt);
		TextDrawShowForPlayer(playerid, td_mdc_veh_Label);
	}

	SelectTextDraw(playerid, -1);
}
//---------------------------------------------
//END OF P:RP SCRIPT
//Thanks to SA-MP forums to make this script happen - Renisal
//---------------------------------------------
